{"id":206,"version":11,"content":{"name":"RR2BrøndExtTest","description":"Høster fra rr poster til det eksterne testsystem.","components":[{"id":205,"version":12,"content":{"name":"RR2BrøndEXTtest","svnProjectForInvocationJavascript":"datawell-convert","svnRevision":81788,"invocationJavascriptName":"trunk/js/marc_fbs.js","javascripts":[{"javascript":"","moduleName":""},{"javascript":"","moduleName":"ModulesInfo"},{"javascript":"","moduleName":"Use"},{"javascript":"","moduleName":"Log"},{"javascript":"Ly8gTG9nQ29yZSBtb2R1bGUgLSBpbXBsZW1lbnRzIGEgX19Mb2dDb3JlX2xvZyggbGV2ZWwsIGFyZ3MgKSBmdW5jdGlvbgoKLyogSmF2YSBNYXZlbiBkZXBzIG5lZWRlZDoKCiAgICAgICAgICAgICAgICA8IS0tIExPR0dJTkcgLS0+CiAgICAgICAgICAgICAgICA8IS0tIEluIG9yZGVyIHRvIHN1cHBvcnQgZGlmZmVyZW50IGxvZyBmcmFtZXdvcmtzLCB3ZSB1c2UgYSBmYWNhZGUgcGF0dGVybiAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGxvZ2dpbmcgVGhlIGFjdHVhbCBmYWNhZGUgcGF0dGVybiBpcyBzbGY0aiwgd2hpY2ggaXMgd2hhdCBkYmMtY29tbW9ucyAKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ29pbmcgdG8gdXNlIHRvby4gRm9yIGFjdHVhbCBsb2dnaW5nIGluIHRoZSBkZXBsb3ltZW50LCB3ZSB1c2UgbG9nNGouIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotYXBpPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjYuMTwvdmVyc2lvbj4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDxkZXBlbmRlbmN5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBJZD5vcmcuc2xmNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPnNsZjRqLWV4dDwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+IAoqLwoKLyogWW91IG1heSBhbHNvIHdhbnQgdG8gYWN0dWFsbHkgYmluZCB0byBlLmcuIGxvZzRqOgoKICAgICAgICAgICAgICAgIDwhLS0gVGhpcyBvbmUgYmluZHMgdG8gbG9nNGogaW4gdGhlIGRlcGxveW1lbnQuIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotbG9nNGoxMjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5ydW50aW1lPC9zY29wZT4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDwhLS0gSW4gbG9nIHdlIHRydXN0IDogaHR0cDovL2xvZ2dpbmcuYXBhY2hlLm9yZy9sb2c0ai8gLS0+CiAgICAgICAgICAgICAgICA8ZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3VwSWQ+bG9nNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvZzRqPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjIuMTY8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICA8IS0tIEVORCBMT0dHSU5HIC0tPgoqLwoKCi8vIFdlIGV4cG9ydCB0aGlzIHN5bWJvbCwgd2hpY2ggd2UgZXhwZWN0IHRvIGJlIHVzZWQgZnJvbSBhIExvZyBtb2R1bGUuCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdfX0xvZ0NvcmVfbG9nJywgJ19fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCcgXTsKCi8vIEFjdHVhbCBsb2cgZnVuY3Rpb24KdmFyIF9fTG9nQ29yZV9sb2cgPSBmdW5jdGlvbiggbGV2ZWwsIG1zZyApIHsKICAgIG1zZyA9ICJKUzogIiArIG1zZzsKICAgIC8vIFJoaW5vIHNwZWNpZmljIGJpbmRpbmdzIHV0aWxpemVkLgogICAgc3dpdGNoKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLnRyYWNlKCBtc2cgKTsgYnJlYWs7CiAgICBjYXNlICJkZWJ1ZyIgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5kZWJ1ZyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiaW5mbyIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuaW5mbyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAid2FybiIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIud2FybiggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiZXJyb3IiIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuZXJyb3IoIG1zZyApOyBicmVhazsKICAgIGNhc2UgImZhdGFsIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLmVycm9yKCAiRkFUQUw6ICIgKyBtc2cgKTsgYnJlYWs7CiAgICBkZWZhdWx0ICAgICAgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5lcnJvciggIlVOS05PV04gTE9HTEVWRUw6ICIgKyBsZXZlbCArICIgOiAiICsgbXNnICk7IGJyZWFrOwogICAgfQp9OwoKLy8gQ2hlY2sgbGV2ZWwgZXhwb3J0Cl9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IGZ1bmN0aW9uICggbGV2ZWwgKSB7CiAgICBzd2l0Y2ggKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc1RyYWNlRW5hYmxlZCgpOwogICAgY2FzZSAiZGVidWciIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzRGVidWdFbmFibGVkKCk7CiAgICBjYXNlICJpbmZvIiAgOiByZXR1cm4gX19Mb2dDb3JlX2xvZy5sb2dnZXIuaXNJbmZvRW5hYmxlZCgpOwogICAgY2FzZSAid2FybiIgIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzV2FybkVuYWJsZWQoKTsKICAgIGNhc2UgImVycm9yIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc0Vycm9yRW5hYmxlZCgpOwogICAgZGVmYXVsdDogcmV0dXJuIHRydWU7CiAgICB9Owp9CgoKLy8gQXR0YWNoIHRoZSBsb2dnZXIgdmFyaWFibGUgdG8gdGhlIGdsb2JhbCBsb2dnZXIgb25seSBvbmNlLCBub3QgZm9yIGVhY2gKLy8gZnVuY3Rpb24gY2FsbC4KLy8gU29ydCBvZiB0aGUgc3RhdGljIHdheSB0byBkbyBpdC4KCi8vIFRoZSBuZXh0IGxpbmUgY2FuIGJpbmQgKmRpcmVjdGx5KiB0byBsb2c0ai4gSXQgaXMgb25seSBpbmNsdWRlZCBmb3IKLy8gcmVmZXJlbmNlLCBhcwovLyB0aGUgZmFjYWRlIGJlbG93IGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gZG8gaXQuCi8vIF9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLmFwYWNoZS5sb2c0ai5Mb2dnZXIuZ2V0TG9nZ2VyKAovLyAiSmF2YVNjcmlwdC5Mb2dnZXIiICk7CgovLyBCaW5kaW5nIHRvIHRoZSBzbGY0aiBmYWNhZGUuCl9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLnNsZjRqLkxvZ2dlckZhY3RvcnkKICAgIC5nZXRMb2dnZXIoICJKYXZhU2NyaXB0LkxvZ2dlciIgKTsK","moduleName":"LogCore"},{"javascript":"","moduleName":"Underscore"},{"javascript":"","moduleName":"UnitTest"},{"javascript":"","moduleName":"Util"},{"javascript":"LyoqIEBmaWxlIFByb3ZpZGUgYSBHbG9iYWwgc3ltYm9sICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdHbG9iYWwnIF07CgovLyBJbXBvcnRhbnQgbm90ZTogVGhpcyBtb2R1bGUgY2FuIG5vdCB1c2UgdGhlIExvZyBtb2R1bGUsIGFzIHRoZSBMb2cKLy8gbW9kdWxlIHVzZXMgdGhpcyBtb2R1bGUuIEFuZCwgaG9uZXN0ZWx5LCB3aGF0IHdvdWxkIHlvdSBsb2c/Ci8vIFJpZ2h0LiBKdXN0IGRvbid0IGRvIGl0LiBOb3csIG1vdmUgYWxvbmcsIG5vdGhpbmcgdG8gc2VlIGhlcmUuCgovKioKICogUHJvdmlkZSBjb25zaXN0ZW50IGFjY2VzcyB0byB0aGUgR2xvYmFsIHZhcmlhYmxlLgogKgogKiBXaGVuIHVzZWQsIHRoaXMgbW9kdWxlIHdpbGwgaW50cm9kdWNlIGEgZ2xvYmFsIHZhcmlhYmxlIGNhbGxlZAogKiBgR2xvYmFsYCwgdGhhdCBpcyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsIG9iamVjdC4KICogCiAqIFRoaXMgbW9kdWxlIGRvZXMgbm90IHByb3ZpZGUgYW55IG1ldGhvZHMgb3IgbWVtYmVyLCBiZXNpZGVzIHRoZQogKiBHbG9iYWwgdmFyaWFibGUuCiAqCiAqIEB0eXBlIHtvYmplY3R9CiAqIEBleGFtcGxlCi8vIFRoaXMgbG9hZHMgdGhlIEdsb2JhbCBtb2R1bGUsIGFuZCBjcmVhdGVzIGEgdmFyaWFibGUgY2FsbGVkIEdsb2JhbAp1c2UoICJHbG9iYWwiICk7CiogQG5hbWVzcGFjZQogKiBAbmFtZSBHbG9iYWwgKi8KdmFyIEdsb2JhbCA9IGZ1bmN0aW9uKCApIHsKICAgIC8qKiBHZXQgYWNjZXNzIHRvIHRoZSBHbG9iYWwgdmFyaWFibGUuCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsCiAgICAgKiB2YXJpYWJsZS4gSW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLCB0aGlzIGlzIGVxdWFsIHRvIHRoZQogICAgICogdGhpcyB2YXJpYWJsZSBhdCB0b3BsZXZlbCBzY29wZSwgYnV0IHJlcXVpcmVzIGEgYml0IG1vcmUgdG8gZ2V0CiAgICAgKiB0bywgaWYgbm90IGEgdG9wbGV2ZWwgc2NvcGUuCiAgICAgKiAKICAgICAqIEB0eXBle2Z1bmN0aW9ufQogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm4ge29iamVjdH0gQSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi8KICAgIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuICggZnVuY3Rpb24oICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0gKSggKTsKICAgIH07CiAgICAvLyByZXR1cm4gcmVzdWx0IG9mIGNhbGwgdG8gZ2V0R2xvYmFsLCBpLmUuIHJlZiB0byBnbG9iYWwKICAgIHJldHVybiBnZXRHbG9iYWwoICk7Cn0oICk7Cg==","moduleName":"Global"},{"javascript":"","moduleName":"EsAddi"},{"javascript":"","moduleName":"XmlNamespaces"},{"javascript":"","moduleName":"XmlUtil"},{"javascript":"","moduleName":"ValueCheck"},{"javascript":"","moduleName":"MarcClasses"},{"javascript":"LyoqIEBmaWxlIFN5c3RlbSBtb2R1bGUuIFByb3ZpZGVzIFN5c3RlbSBjbGFzcywgdGhhdCBjYW4gYmUgcG9wdWxhdGVkIGJ5IG90aGVyIG1vZHVsZXMuICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdTeXN0ZW0nIF07CgovKioKICogUHJvdmlkZXMgYSBuYW1lc3BhY2UgdG8gYWRkIGxvd2xldmVsL3N5c3RlbSBsaWtlIGZ1bmN0aW9uYWxpdHkgdG8uCiAqIAogKiBNZXRob2RzIGFuZCBtb2R1bGVzIHJlbGF0ZWQgdG8gbG93LWxldmVsIHN0dWZmIGlzIGFkZGVkIGludG8gdGhpcwogKiBuYW1lc3BhY2UuIAogKgogKiBUbyBhY3R1YWxseSB1c2UgbW9zdCBvZiB0aGUgZnVuY3Rpb25zIGluIHRoaXMgbmFtZXNwYWNlLCB5b3UgbmVlZAogKiB0byBsb2FkIGFkZGl0aW9uYWwgbW9kdWxlcy4gRS5nLiB0byBiZSBhYmxlIHRvIHVzZSB0aGUgCiAqIHtAbGluayBTeXN0ZW0ucmVhZEZpbGV9IGZ1bmN0aW9uLCB5b3UgbXVzdCB1c2UgdGhlIG1vZHVsZSBgUmVhZEZpbGVgLiB0bwogKiB1c2UgdGhlIHtAbGluayBTeXN0ZW0ucHJpbnR9IGZ1bmN0aW9uIHlvdSBtdXN0IHVzZSB0aGUgbW9kdWxlCiAqIGBQcmludGAuIEZvciBhbGwgZnVuY3Rpb25zLCBpdCBpcyBpbmRpY2F0ZWQgd2hpY2ggbW9kdWxlIHRoZXkgYXJlCiAqIHBhcnQgb2YsIHRoYXQgaXMsIHdoaWNoIG1vZHVsZSB5b3Ugc2hvdWxkIHVzZSB0byBnZXQgYWNjZXNzIHRvIHRoZQogKiBmdW5jdGlvbi4KICogCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIFN5c3RlbSAqLwp2YXIgU3lzdGVtID0gZnVuY3Rpb24oICkgewogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgICAqIEFycmF5IGNvbnRhaW5pbmcgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgc3lzdGVtLCBpZiBpbnZva2VkIGludGVyYWN0aXZlbHkuCiAgICAgKiAKICAgICAqIENvbnRhaW5zIGFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBzeXN0ZW0sIGlmIHVzZWQgaW50ZXJhY3RpdmVseS4gSXMKICAgICAqIGFuIGVtcHR5IGFycmF5IGlmIG5vdC4gCiAgICAgKgogICAgICogQGV4YW1wbGUKLy8gR2V0IHRoZSBmaXJzdCBhcmd1bWVudCB0byBhIHNjcmlwdCB3aGVuIGNhbGxlZCBpbiBhIHNoZWxsCnVzZSggIlN5c3RlbSIgKTsKaWYgKCBTeXN0ZW0uYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7CiAgdmFyIGZpcnN0QXJnID0gU3lzdGVtLmFyZ3VtZW50c1swXTsKfQogICAgICoKICAgICAqIEBuYW1lIFN5c3RlbS5hcmd1bWVudHMKICAgICAqIEB0eXBlIHtTdHJpbmdbXX0KICAgICAqIEBwcm9wZXJ0eSAqLwogICAgdGhhdC5hcmd1bWVudHMgPSBbIF07CgogICAgLyoqIAogICAgICogU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGNhbGxlZCBzY3JpcHQsIGlmIGludm9rZWQgaW50ZXJhY3RpdmVseS4KICAgICAqIAogICAgICogQGV4YW1wbGUKLy8gUHJpbnQgdGhlIG5hbWUgb2YgdGhlIGNhbGxpbmcgc2NyaXB0CnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiUHJpbnQiICk7CnByaW50KCBTeXN0ZW0uc2NyaXB0bmFtZSArICJcbiIgKTsKICAgICAqIAogICAgICogQG5hbWUgU3lzdGVtLnNjcmlwdG5hbWUKICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgKiBAcHJvcGVydHkgKi8KICAgIHRoYXQuc2NyaXB0bmFtZSA9ICIiOwoKICAgIC8qKiBQcm9wZXJ0eSB0byBkZWZpbmUgdGhlIFJoaW5vIHBsYXRmb3JtLgogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtX3JoaW5vCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3JoaW5vID0gIlJoaW5vIjsKCiAgICAvKiogUHJvcGVydHkgdG8gZGVmaW5lIHRoZSBTcGlkZXJNb25rZXkgcGxhdGZvcm0uCiAgICAgKiBAbmFtZSBTeXN0ZW0ucGxhdGZvcm1fc3BpZGVybW9ua2V5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3NwaWRlcm1vbmtleSA9ICJTcGlkZXJNb25rZXkiOwoKICAgIC8qKgogICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSBwbGF0Zm9ybSB3ZSBhcmUgY3VycmVudGx5IHJ1bm5pbmcgdW5kZXIuCiAgICAgKgogICAgICogVGhpcyByZXR1cm5zIHRoZSBuYW1lIG9mIG91ciBwbGF0Zm9ybSwgb25lIG9mICJSaGlubyIgb3IgIlNwaWRlck1vbmtleSIuCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBtZWFudCBmb3IgdGhlIHZlcnkgcmFyZSBzaXR1YXRpb25zIHdoZXJlIHdlIGhhdmUgdG8gZG8KICAgICAqIHNvbWV0aGluZyBzbGlnaHRseSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHBsYXRmb3JtLCBpbiBvcmRlciB0byAKICAgICAqIHdvcmsgYXJvdW5kIGRpZmZlcmVuY2VzLgogICAgICoKICAgICAqIFVzZSB0aGUgcHJvcGVydGllcyBwbGF0Zm9ybV9yaGlubyBhbmQgcGxhdGZvcm1fc3BpZGVybW9ua2V5IHRvCiAgICAgKiBjaGVjayBhZ2FpbnN0IHRoaXMgcHJvcGVydHkuCiAgICAgKgogICAgICogKipOb3RlOioqIE1vcmUgcGxhdGZvcm1zIG1heSBiZSBhZGRlZCBpbiB0aGUgZnV0dXJlLiBBbHdheXMKICAgICAqIGNoZWNrIGV4cGxpY2l0bHkgZm9yIGEgc3BlY2lmaWMgcGxhdGZvcm0uCgogICAgICogKipOb3RlOioqIE9OTFkgVVNFIFRISVMgTUVUSE9EIEFTIEEgTEFTVCBSRVNPUlQuIFRoZSBwbGF0Zm9ybXMgYmVoYXZlIGFsbW9zdCAKICAgICAqIGV4YWN0bHkgdGhlIHNhbWUsIGFuZCB0aGUgY29kZSBzaG91bGQgbm90IGJlIHNwcmlua2xlZCB3aXRoICJpZiBwbGF0Zm9ybSB0aGVuIi4KICAgICAqIEl0IGlzIHN1c3BlY3RlZCB0aGlzIGlzIG9ubHkgbmVlZGVkIGZvciBFNFggY29kZSB0aGF0IGlzIGJyb2tlbiBhbnl3YXkuCiAgICAgKiBJZiB5b3UgdXNlIHRoaXMgZnVuY3Rpb24sIGF0IGxlYXN0IHdyYXAgaXQgaW4gYSBsaWJyYXJ5L21vZHVsZSBzdWNoIHRoYXQKICAgICAqIHlvdSBjYW4gY2hhbmdlIHRoZSBpbXBsZW1lbnRhdGlvbiBsYXRlciwgd2l0aG91dCBicmVha2luZyB0aGUgaW50ZXJmYWNlLgogICAgICogIAogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtICA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggKCB0eXBlb2YgUGFja2FnZXMgPT09ICJvYmplY3QiICkgJiYgKCB0eXBlb2YgUGFja2FnZXMuamF2YSA9PT0gIm9iamVjdCIgKSApIHsKICAgICAgICAgICAgcmV0dXJuICJSaGlubyI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJTcGlkZXJNb25rZXkiOwogICAgICAgIH0KICAgIH0oKTsgLy8gTm90ZSwgbm90IGEgZnVuY3Rpb24sIGEgdmFsdWUuCgoKICAgIHJldHVybiB0aGF0Owp9KCApOwo=","moduleName":"System"},{"javascript":"","moduleName":"MarcClassesCore"},{"javascript":"","moduleName":"Marc"},{"javascript":"","moduleName":"MarcMatchers"},{"javascript":"","moduleName":"StringUtil"},{"javascript":"","moduleName":"DanMarc2ToXml"},{"javascript":"LyoqIEBmaWxlIEZ1bmN0aW9ucyB0byBjcmVhdGUgdmFyaW91cyBYTUwgZWxlbWVudHMgKi8KCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdYbWxFbGVtZW50cycgXTsKCnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiTG9nIiApOwp1c2UoICJYbWxOYW1lc3BhY2VzIiApOwp1c2UoICJYbWxVdGlsIiApOwoKLyoqCiAqIE1vZHVsZSB3aXRoIGZ1bmN0aW9ucyB0byBjcmVhdGUgdmFyaW91cyBYTUwgZWxlbWVudHMuCiAqIAogKiBDb250YWlucyBmdW5jdGlvbnMgdG8gcHJvZHVjZSBhbiBYTUwgZWxlbWVudCB3aXRoIG9yIHdpdGhvdXQgbmFtZXNwYWNlCiAqIGFuZCBhdHRyaWJ1dGVzLCBhbmQgYW4gYXR0cmlidXRlIHdpdGggb3Igd2l0aG91dCBuYW1lc3BhY2UuCiAqIAogKiBAdHlwZSB7bmFtZXNwYWNlfQogKiBAbmFtZXNwYWNlIAogKiBAbmFtZSBYbWxFbGVtZW50cyAqLwp2YXIgWG1sRWxlbWVudHMgPSBmdW5jdGlvbiggKSB7CgogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgKiBNZXRob2QgdGhhdCBwcm9kdWNlcyBhbiBYTUwgZWxlbWVudCB3aXRoIG9wdGlvbmFsIHZhbHVlLCBuYW1lc3BhY2UgYW5kIGF0dHJpYnV0ZXMuCiAgICogCiAgICogCiAgICogQHR5cGUge2Z1bmN0aW9ufQogICAqIEBzeW50YXggWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggZWxlbWVudFZhbHVlLCBlbGVtZW50TmFtZSwgbmFtZXNwYWNlLCBbYXR0cmlidXRlc10gKQogICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50VmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBYTUwgZWxlbWVudAogICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZSB0aGUgbmFtZSBvZiB0aGUgZWxlbWVudAogICAqIEBwYXJhbSB7TmFtZXNwYWNlfSBuYW1lc3BhY2UgYSBuYW1lc3BhY2Ugb2JqZWN0CiAgICogQHBhcmFtIHtvYmplY3RbXX0gW2F0dHJpYnV0ZXM9dW5kZWZpbmVkXSBvYmplY3QvYXJyYXkgY29udGFpbmluZyBvbmUgb3IgbW9yZSBhdHRyaWJ1dGUgb2JqZWN0cy4KICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlcy5hdHRyaWJ1dGVOYW1lIE5hbWUgb2YgdGhlIGF0dHJpYnV0ZQogICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVzLmF0dHJpYnV0ZVZhbHVlIFZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUKICAgKiBAcGFyYW0ge05hbWVzcGFjZX0gYXR0cmlidXRlcy5hdHRyaWJ1dGVOYW1lc3BhY2UgTmFtZXNwYWNlIGZvciB0aGUgYXR0cmlidXRlCiAgICogQHJldHVybiB7WE1MfSBYTUwgb2JqZWN0IGNvbnRhaW5pbmcgb25lIGVsZW1lbnQKICAgKiBAZXhhbXBsZSAKLy8gQ3JlYXRlIGEgbmV3IFhNTCBlbGVtZW50LCB3aXRoIHZhbHVlLCBuYW1lIGFuZCB0aGUgZGMgbmFtZXNwYWNlCnZhciB4ID0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggInZhbHVlIiwgIm5hbWUiLCBYbWxOYW1lc3BhY2VzLmRjICkKICAgKiBAbmFtZSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50CiAgICogQG1ldGhvZCAgKi8KICAgIHRoYXQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKCBlbGVtZW50VmFsdWUsIGVsZW1lbnROYW1lLCBuYW1lc3BhY2UsIGF0dHJpYnV0ZXMgKSB7CgogICAgICAgIHZhciBlbGVtZW50ID0gPHtlbGVtZW50TmFtZX0+e2VsZW1lbnRWYWx1ZX08L3tlbGVtZW50TmFtZX0+OwogICAgICAgIGlmICggbmFtZXNwYWNlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIC8vIFJoaW5vIEU0WCBpbXBsZW1lbnRhdGlvbiBuZWVkcyBhbm90aGVyIG5hbWVzcGFjZSBoZXJlLCBvciB3ZSBnZXQKICAgICAgICAgICAgLy8gYSB3ZWlyZCBpbnRlcm5hbCBzdGF0ZSwgd2hlcmUgbmFtZXNwYWNlKCkgcmV0dXJucyB1bmRlZmluZWQuCiAgICAgICAgICAgIC8vIFRoaXMgYnJlYWtzIFhtbFV0aWwucHJldHR5UHJpbnQuCiAgICAgICAgICAgIC8vIEFkZGluZyB1bmRlciBDKysgbWVhbnMgdGhhdCB3ZSBnZXQgZHVwbGljYXRlIG5hbWVzcGFjZXMgaW4gdGhlIHJvb3QKICAgICAgICAgICAgLy8gVGhpcyBpcyBhbG1vc3Qgb25seSBhIGNvc21ldGljIHByb2JsZW0sIGJ1dCBzdGlsbC4KICAgICAgICAgICAgaWYgKCBTeXN0ZW0ucGxhdGZvcm0gPT09IFN5c3RlbS5wbGF0Zm9ybV9yaGlubyApIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkTmFtZXNwYWNlKCBuYW1lc3BhY2UgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggbmFtZXNwYWNlICk7CiAgICAgICAgfQogICAgICAgIGlmICggYXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiBhdHRyaWJ1dGVzICkgewogICAgICAgICAgICAgICAgaWYgKCBhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVzWyBhIF0uYXR0cmlidXRlTmFtZTsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LkBbIGF0dHJpYnV0ZU5hbWUgXSA9IGF0dHJpYnV0ZXNbIGEgXS5hdHRyaWJ1dGVWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoIGF0dHJpYnV0ZXNbIGEgXS5hdHRyaWJ1dGVOYW1lc3BhY2UgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5AWyBhdHRyaWJ1dGVOYW1lIF0uc2V0TmFtZXNwYWNlKCBhdHRyaWJ1dGVzWyBhIF0uYXR0cmlidXRlTmFtZXNwYWNlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZWxlbWVudDsKCiAgICB9OwoKICAgIC8qKgogICAqIE1ldGhvZCB0aGF0IHByb2R1Y2VzIGFuIE9iamVjdCBjb250YWluaW5nIG9uZSBvciBtb3JlIFhNTCBhdHRyaWJ1dGVzLgogICAqIAogICAqIFRoaXMgbWV0aG9kIHByb2R1Y2VzIGF0dHJpYnV0ZSBvYmplY3RzIHN1aXRhYmxlIGZvciBwYXNzaW5nIHRvCiAgICoge0BsaW5rIFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnR9LgogICAqIAogICAqIEB0eXBlIHttZXRob2R9CiAgICogQHN5bnRheCBYbWxFbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2UgKQogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBYTUwgYXR0cmlidXRlCiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUKICAgKiBAcGFyYW0ge05hbWVzcGFjZX0gbmFtZXNwYWNlIGEgbmFtZXNwYWNlIG9iamVjdAogICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgYXR0cmlidXRlIHByb3BlcnRpZXMuCiAgICogQGV4YW1wbGUgCi8vIENyZWF0ZSBhbiBhdHRyaWJ1dGUgZWxlbWVudCAKdmFyIGEgPSBYbWxFbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJuYW1lIiwgInZhbHVlIiwgWG1sTmFtZXNwYWNlcy5kYyApOwogICAqIEBuYW1lIFhtbEVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZQogICAqIEBtZXRob2QgKi8KICAgIHRoYXQuY3JlYXRlQXR0cmlidXRlID0gZnVuY3Rpb24oIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2UgKSB7CgogICAgICAgIHZhciBhdHRyaWJ1dGUgPSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IG5hbWUsCiAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlOiBuYW1lc3BhY2UKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gYXR0cmlidXRlOwoKICAgIH07CgogICAgcmV0dXJuIHRoYXQ7Cgp9KCApOwo=","moduleName":"XmlElements"},{"javascript":"","moduleName":"MarcRecord"},{"javascript":"LyoqIEBmaWxlIEFkZCBhIGZyb21GaWxlIG1ldGhvZCB0byB0aGUgUmVjb3JkIHByb3RvdHlwZSAqLwovLyBWZXJ5IHNtYWxsIG1vZHVsZSB0byBhZGQgYSBmcm9tRmlsZSBtZXRob2QgdG8gdGhlIFJlY29yZCBwcm90b3R5cGUKdXNlKCAiTWFyY0NsYXNzZXMiICk7CnVzZSggIlN5c3RlbS5JbnRlcm5hbHMiICk7CkVYUE9SVEVEX1NZTUJPTFMgPSBbIF07Ci8qKgogKiBNZXRob2QgdGhhdCByZWFkcyBhIFJlY29yZCBpbnN0YW5jZSBmcm9tIGEgZmlsZS4KICogCiAqIFRoaXMgbWV0aG9kIHJlYWRzIGEgUmVjb3JkIGluc3RhbmNlIGZyb20gYSBmaWxlLiBJZiB0aGUgZmlsZSBpcyBlbXB0eSwKICogdW5kZWZpbmVkIGlzIHJldHVybmVkIAogKiAKICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIG9ubHkgc3VwcG9ydGVkIHVuZGVyIEMrKwogKgogKiBAcmV0dXJuIEEgUmVjb3JkIGluc3RhbmNlLCBhcyByZWFkIGZyb20gdGhlIGZpbGUsIG9yIHVuZGVmaW5lZCwgaWYgdGhlIGZpbGUgd2FzIGVtcHR5CiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmZyb21GaWxlCiAqIEBkZXByZWNhdGVkIEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBtZXRob2QuCiAqLwpSZWNvcmQucHJvdG90eXBlLmZyb21GaWxlID0gZnVuY3Rpb24oIGZpbGUgKSB7CiAgICAvLyBUaGlzIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgYXMgYSBwaXBlLiAKICAgIC8vIE5vdCBjYWxsaW5nIG1heWJlR2MgYWxsb2NhdGVzIG11Y2ggbW9yZSByYW0sIGFuZCBhbHNvIHRha2VzIG1vcmUgdGltZS4KICAgIC8vIChTZWUgYnVnIDk4MTMpCiAgICAvLyBJbiBvcmRlciB0byBhbGxvdyBjbGllbnRzIHRvIG5vdCB3b3JyeSBhYm91dCB0aGlzLCB3ZSBjYWxsIG1heWJlR2MgaW4gaGVyZQogICAgLy8gVGhpcyBpcyBhIGZhaXJseSBjaGVhcCBvcGVyYXRpb24sIHRoYXQsIGZvciBub24tdHJpdmlhbCBzaXplZCBkYXRhc2V0cwogICAgLy8gYWN0dWFsbHkgc3BlZWRzIHVwIHRoZSBwcm9jZXNzaW5nLCBkdWUgdG8gZmV3ZXIgYWxsb2NhdGlvbnMuCiAgICBTeXN0ZW0uSW50ZXJuYWxzLm1heWJlR2MoICk7CiAgICBpZiAoIGZpbGUuaGFzRGF0YSggKSApIHsKICAgICAgICByZXR1cm4gbmV3IFJlY29yZCggZmlsZSApOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQp9Owo=","moduleName":"MarcFileExtension"},{"javascript":"LyoqIEBmaWxlIEludGVybmFsIGZ1bmN0aW9ucyAqLwpFWFBPUlRFRF9TWU1CT0xTID0gWyBdOwp1c2UoICJTeXN0ZW0iICk7CnVzZSggIlN5c3RlbS5JbnRlcm5hbHNDb3JlIiApOwovKioKICogVmFyaW91cyBtZXRob2RzIHRoYXQgcmVmbGVjdHMgdmVyeSB2ZXJ5IGxvdyBsZXZlbCBkZXRhaWxzIGFib3V0IHRoZSBzeXN0ZW0uLgogKiAKICogVGhpcyBuYW1lc3BhY2UgY29udGFpbnMgbWV0aG9kcyB0byBlLmcuIGZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbi4gCiAqCiAqICoqTm90ZToqKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbmFtZXNwYWNlIGlzIGN1cnJlbnRseSBvbmx5CiAqIHN1cHBvcnRlZCBieSBDKysgaW1wbGVtZW50YXRpb25zLiAKICoKICogKipOb3RlOioqIFRoZSBmdW5jdGlvbnMgaW4gdGhpcyBuYW1lc3BhY2UgaXMgbWVhbnQgZm9yIGRlYnVnIHNpdHVhdGlvbnMuCiAqCiAqIEBkZXByZWNhdGVkIFlvdSBzaG91bGQgbmV2ZXIgdXNlIHRoaXMgbmFtZXNwYWNlIGluIHByb2R1Y3Rpb24gY29kZS4KICogCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMKICovClN5c3RlbS5JbnRlcm5hbHMgPSB7fTsKLyoqCiAqIEZvcmNlIEdhcmJhZ2UgQ29sbGVjdGlvbi4KICogCiAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiBmb3JjZXMgdGhlIChDKyspIEphdmFTY3JpcHQgZW5naW5lIHRvIHBlcmZvcm0KICogZ2FyYmFnZSBjb2xsZWN0aW9uLiBZb3Ugc2hvdWxkIG9ubHkgY2FsbCB0aGlzLCBpZiB5b3UgYXJlIHNvbWV3aGF0CiAqIGNlcnRhaW4gdGhhdCB0aGUgb3ZlcmhlYWQgb2YgcGVyZm9ybWluZyB0aGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGlzCiAqIHdvcnRoIHRoZSBmcmVlZCByYW0uIE90aGVyd2lzZSwgY29uc2lkZXIgbWF5YmVHYy4KICoKICogQHN5bnRheCBTeXN0ZW0uSW50ZXJuYWxzLmdjKCk7CiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMuZ2MKICogQG1ldGhvZAogKi8KU3lzdGVtLkludGVybmFscy5nYyA9IF9fU3lzdGVtX0ludGVybmFsc0NvcmVfZ2M7Ci8qKgogKiBQZXJmb3JtIEdhcmJhZ2UgQ29sbGVjdGlvbiBpZiBuZWVkZWQuCiAqIAogKiBDYWxsaW5nIHRoaXMgcGVyZm9ybXMgZ2FyYmFnZSBjb2xsZWN0aW9uLCBiYXNlZCBvbiB0aGUgYXZhaWxhYmxlIGhlYXAsCiAqIGFuZCBzb21lIG90aGVyIGhldXJpc3RpY3MuIEl0IHNob3VsZCBiZSBPSyB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcXVpdGUKICogb2Z0ZW4sIGFzIGl0IHdpbGwgb25seSBhY3R1YWxseSBwZXJmb3JtIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24sIGlmIGl0CiAqIGlzIHdvcnRoIGl0LiAKICogCiAqIEBzeW50YXggU3lzdGVtLkludGVybmFscy5tYXliZUdjKCk7CiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMubWF5YmVHYwogKiBAbWV0aG9kCiAqLwpTeXN0ZW0uSW50ZXJuYWxzLm1heWJlR2MgPSBfX1N5c3RlbV9JbnRlcm5hbHNDb3JlX21heWJlR2M7Ci8qKgogKiBTZXQgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuCiAqIAogKiBUaGlzIGZ1bmN0aW9uIHNldHMgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QsIGllLiB0aGUKICogcHJvcGVydHkgd2lsbCBub3QgYmUgZm91bmQgYnkgYSBmb3ItbG9vcCwgYnV0IGl0IGNhbiBiZSBhY2Nlc3NlZC4gCiAqIAogKiBAc3ludGF4IFN5c3RlbS5JbnRlcm5hbHMuc2V0Tm9uRW51bVByb3Aob2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlKTsKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNldCB0aGUgcHJvcGVydHkgb24KICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0CiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSBUaGUgdmFsdWUgdGhlIHByb3BlcnR5IHNob3VsZCBoYXZlCiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMuc2V0Tm9uRW51bVByb3AKICogQG1ldGhvZAogKi8KU3lzdGVtLkludGVybmFscy5zZXROb25FbnVtUHJvcCA9IF9fU3lzdGVtX0ludGVybmFsc0NvcmVfc2V0Tm9uRW51bVByb3AKCmRlbGV0ZSB0aGlzLl9fU3lzdGVtX0ludGVybmFsc0NvcmVfZ2M7CmRlbGV0ZSB0aGlzLl9fU3lzdGVtX0ludGVybmFsc0NvcmVfbWF5YmVHYzsKZGVsZXRlIHRoaXMuX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9zZXROb25FbnVtUHJvcAo=","moduleName":"System.Internals"},{"javascript":"Ly8gU3lzdGVtLkludGVybmFsc0NvcmUgLSBrZXkgZnVuY3Rpb24gbmVlZGVkIGZyb20gU3RkUmVmLnVzZS5qcwoKLyogSmF2YSBkZXBzOiBqYXZhLmxhbmcgYW5kIGZyaWVuZHMsIG5vdGhpbmcgc3BlY2lhbCAqLwoKLy8gV2UgZXhwb3J0IHRoaXMgc3ltYm9sLCB3aGljaCB3ZSBleHBlY3QgdG8gYmUgdXNlZCBmcm9tIGEgUHJpbnQgbW9kdWxlLgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9nYycsCiAgICAnX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9tYXliZUdjJywKICAgICdfX1N5c3RlbV9JbnRlcm5hbHNDb3JlX3NldE5vbkVudW1Qcm9wJwpdOwoKLy8gU3VnZ2VzdCBnYyB0byB0aGUgY29sbGVjdG9yCnZhciBfX1N5c3RlbV9JbnRlcm5hbHNDb3JlX2djID0gZnVuY3Rpb24oICkgewogICAgUGFja2FnZXMuamF2YS5sYW5nLlN5c3RlbS5nYyggKTsKfTsKCi8vIElkZW50aWNhbCB0byBhYm92ZSBpbiBKYXZhIGltcGxlbWVudGF0aW9uLgp2YXIgX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9tYXliZUdjID0gZnVuY3Rpb24oICkgewogICAgUGFja2FnZXMuamF2YS5sYW5nLlN5c3RlbS5nYyggKTsKfTsKCi8vIFRoaXMgb25lIGlzIGEgYml0IG1vcmUgdHJpY2t5IGFuZCB1c2VzIGphdmEgZHluYW1pYyBpbnZva2luZyB0byBkbyBpdHMgd29yay4KdmFyIF9fU3lzdGVtX0ludGVybmFsc0NvcmVfc2V0Tm9uRW51bVByb3AgPSBmdW5jdGlvbiggb2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlICkgewogICAgLy8gU2V0IHRoZSB2YWx1ZQogICAgb2JqZWN0WyBwcm9wZXJ0eU5hbWUgXSA9IHZhbHVlOwogICAgLy8gQW5kIG1ha2UgaXQgbm9uLWVudW1lcmFibGUKICAgIGphdmEubGFuZy5DbGFzcy5mb3JOYW1lKCAib3JnLm1vemlsbGEuamF2YXNjcmlwdC5TY3JpcHRhYmxlT2JqZWN0IiApCiAgICAgICAgLmdldE1ldGhvZCggInNldEF0dHJpYnV0ZXMiLCBqYXZhLmxhbmcuU3RyaW5nLCBqYXZhLmxhbmcuSW50ZWdlci5UWVBFICkKICAgICAgICAuaW52b2tlKCBvYmplY3QsIHByb3BlcnR5TmFtZSwgbmV3IGphdmEubGFuZy5JbnRlZ2VyKAogICAgICAgICAgICBvcmcubW96aWxsYS5qYXZhc2NyaXB0LlNjcmlwdGFibGVPYmplY3QuRE9OVEVOVU0gKSApOwp9Cg==","moduleName":"System.InternalsCore"},{"javascript":"","moduleName":"DateUtil"},{"javascript":"RVhQT1JURURfU1lNQk9MUyA9IFsgJ19fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMScsICdfX0RhdGVVdGlsQ29yZV9mb3JtYXRJU084NjAxJyBdOwoKdXNlKCAiU3RyaW5nVXRpbCIgKTsKdXNlKCAiTG9nIiApOwoKLyogQGJyaWVmIENyZWF0ZSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QgZnJvbSBhbiBJU084NjAxIHN0cmluZwogKiBAcGFyYW0gcyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRldGltZQogKiBAcmV0dXJucyBBIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QKICoKICogVGhlIHN0cmluZyBmb3JtYXQgbXVzdCBiZSBZWVlZLU1NLUREVGhoOm1tOnNzKFopIG9yIGVtcHR5LgogKiBOb3Qgb24gYWJvdmUgZm9ybWF0LCB3aWxsIHRocm93LgogKgogKiBSZWdhcmRsZXNzIG9mIHRoZSBuYW1lLCBvbmx5IGEgbGltaXRlZCBzdWJzZXQgb2YgSVMwODYwMSBpcwogKiBhY3R1YWxseSBwYXJzZWQhICovCnZhciBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEgPSBmdW5jdGlvbiggaXNvODYwMSApIHsKICAgIExvZy5kZWJ1ZyggIkVudGVyaW5nIF9fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMSAiICsgaXNvODYwMSApOwogICAgdmFyIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVVRDLmV4ZWMoIGlzbzg2MDEgKTsKCiAgICBpZiAoIG1hdGNoZWQgKSB7CiAgICAgICAgdmFyIHJlcyA9IG5ldyBEYXRlKCAxOTcwLCAxLCAxLCAxMiwgMCwgMCwgMCApOwogICAgICAgIGlmICggbWF0Y2hlZC5sZW5ndGggPiA3ICYmIG1hdGNoZWRbIDcgXSA9PSAiWiIgKSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggWlVMVSB0aW1lem9uZSBpbmZvcm1hdGlvbiIgKTsKICAgICAgICAgICAgcmVzLnNldFVUQ0Z1bGxZZWFyKCBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgMiBdLCAxMCApIC0gMSwgcGFyc2VJbnQoIG1hdGNoZWRbIDMgXSwgMTAgKSApOwogICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA1IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA2IF0sIDEwICksIDAgKTsKICAgICAgICAgICAgLy8gQ2hlY2sgbm8gImlsbGVnYWwiIHZhbHVlcwogICAgICAgICAgICBpZiAoIHJlcy5nZXRVVENGdWxsWWVhciggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTW9udGgoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENEYXRlKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENIb3VycyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTWludXRlcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDU2Vjb25kcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApICkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoSW52YWxpZCBkYXRlIGFmdGVyIFpVTFUgLSByZWdleHAgbWF0Y2g/KS4iLAogICAgICAgICAgICAgICAgICAgICAgICBpc284NjAxICkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggbm8gdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHJlcy5zZXRGdWxsWWVhciggcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSwgcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEsIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgcmVzLnNldEhvdXJzKCBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApLCAwICk7CiAgICAgICAgICAgIC8vIENoZWNrIG5vICJpbGxlZ2FsIiB2YWx1ZXMKICAgICAgICAgICAgaWYgKCByZXMuZ2V0RnVsbFllYXIoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1vbnRoKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAyIF0sIDEwICkgLSAxIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0RGF0ZSggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0SG91cnMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDQgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1pbnV0ZXMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDUgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldFNlY29uZHMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDYgXSwgMTAgKSApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggU3RyaW5nVXRpbC5zcHJpbnRmKCAiVW5hYmxlIHRvIHVuZGVyc3RhbmQgZGF0ZSBzcGVjaWZpZWQgYXM6ICclcycgKEludmFsaWQgZGF0ZSBhZnRlciBubyBUWiAtIHJlZ2V4cCBtYXRjaD8pLiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGlzbzg2MDEgKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIExvZy5kZWJ1ZyggIlJldHVybmluZzogIiArIHJlcy50b1VUQ1N0cmluZyggKSApOwogICAgICAgIHJldHVybiByZXM7CiAgICB9IGVsc2UgewogICAgICAgIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFouZXhlYyggaXNvODYwMSApOwogICAgICAgIGlmICggbWF0Y2hlZCApIHsKICAgICAgICAgICAgTG9nLmRlYnVnKCAiTWF0Y2hlZCBhcyBzdHJpbmcgd2l0aCBub3JtYWwgdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHZhciByZXMgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEoIG1hdGNoZWRbIDEgXSArICJaIiApOwogICAgICAgICAgICBMb2cuZGVidWcoIFN0cmluZ1V0aWwuc3ByaW50ZiggIlBhcnRzOiAnJXMnLCAnJXMnLCAnJXMnIiwKICAgICAgICAgICAgICAgICAgICBtYXRjaGVkWyAyIF0sIG1hdGNoZWRbIDMgXSwgbWF0Y2hlZFsgNCBdICkgKTsKICAgICAgICAgICAgLy8gQWRqdXN0OiBJZiArLCBzdWJzdHJhY3QgdG8gZ2V0ICJyZWFsIiBVVEMuIElmIC0KICAgICAgICAgICAgaWYgKCBtYXRjaGVkWyAyIF0gPT0gIi0iICkgewogICAgICAgICAgICAgICAgcmVzLnNldFVUQ0hvdXJzKCByZXMuZ2V0VVRDSG91cnMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApICk7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDTWludXRlcyggcmVzLmdldFVUQ01pbnV0ZXMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHJlcy5nZXRVVENIb3VycyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgICAgIHJlcy5zZXRVVENNaW51dGVzKCByZXMuZ2V0VVRDTWludXRlcyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBMb2cuZGVidWcoICJSZXR1cm5pbmc6ICIgKyByZXMudG9VVENTdHJpbmcoICkgKTsKICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgfQogICAgTG9nLmRlYnVnKCAiTm8gbWF0Y2ggZm9yIElTTzg2MDEgdmFyaWFudHMgLSB0aHJvd2luZyIgKTsKICAgIHRocm93IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoTm8gcmVnZXhwIG1hdGNoKS4iLAogICAgICAgICAgICBpc284NjAxICkgKTsKfTsKX19EYXRlVXRpbENvcmVfcGFyc2VJU084NjAxLnJlZ1VUQyA9IC9eKFxkezR9KS0oXGR7Mn0pLShcZHsyfSlUKFxkezJ9KTooXGR7Mn0pOihcZHsyfSkoWnswLDF9KSQvOwpfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFogPSAvXihcZHs0fS1cZHsyfS1cZHsyfVRcZHsyfTpcZHsyfTpcZHsyfSlccyooWystXSlccyooXGR7MSwyfSk6KFxkezEsMn0pJC87CgovKiogXGJyaWVmIFJldHVybiBhbiBJU084NjAxIFogdGltZSBzdHJpbmcgcmVwIG9mIHRoZSBKYXZhU2NyaXB0IGRhdGUgb2JqZWN0IHBhc3NlZCB0byB0aGUgZnVuY3Rpb24uCiAqCiAqIFRoZSBmb3JtYXQgaXMgWVlZWS1NTS1ERFRoaDptbTpzc1oKICogQHBhcmFtIGR0IFRoZSBKYXZhU2NyaXB0IGluc3RhbmNlIHRvIGNvbnZlcnQuCiAqIEByZXR1cm4gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGV0aW1lIGluIElTTzg2MDEgbGlrZSBub3RhdGlvbiBpbiBVVEMKICoKICogTm90ZSwgaWYgdGhlIGRhdGUgaXMgaW52YWxpZCwgeW91IGdldCBhIGxvdCBvZiBOYU4ncy4uLiBzb3JyeSBhYm91dCB0aGF0LCBzbyBzdWUgbWUhIDotKSAqLwp2YXIgX19EYXRlVXRpbENvcmVfZm9ybWF0SVNPODYwMSA9IGZ1bmN0aW9uKCBkYXRlICkgewogICAgLy8gV2UgZG8gbm90IGhhdmUgcGFydGlhbCBzZWNvbmRzLi4uIHNvLCBubyB0b0lTT1N0cmluZygpLi4uCiAgICByZXR1cm4gU3RyaW5nVXRpbC5zcHJpbnRmKCAiJTA0ZC0lMDJkLSUwMmRUJTAyZDolMDJkOiUwMmRaIiwKICAgICAgICBkYXRlLmdldFVUQ0Z1bGxZZWFyKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTW9udGgoICkgKyAxLAogICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSggKSwKICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTWludXRlcyggKSwKICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoICkgKTsKfTsK","moduleName":"DateUtilCore"},{"javascript":"LyoqIEBmaWxlIFNhZmVBc3NlcnQgbW9kdWxlLiBUaGlzIG1vZHVsZSBpcyBhIHNpbXBsZSB3cmFwcGVyIGZvciB0aGUgVW5pdFRlc3RzIEFzc2VydC4gKi8KCnVzZSggIkxvZyIgKTsKdXNlKCAiVW5pdFRlc3QiICk7CgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnU2FmZUFzc2VydCcgXTsKCgoKLyoqCiAqIEFuIGV4dGVuc2lvbiBvZiBBc3NlcnQgaW4gdGhlIHVuaXR0ZXN0aW5nIHN5c3RlbSB0aGF0IGRvZXMgbm90IHVzZSBldmFsIGRpcmVjdGx5LgogKiAKICogVGhlIGZ1bmN0aW9ucyBpbiBTYWZlQXNzZXJ0IGFyZSByZXBsYWNlbWVudCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcKICogZnVuY3Rpb25zIGluIEFzc2VydC4gVGhlIGRpZmZlcmVuY2UgaXMsIHRoYXQgdGhlIGZ1bmN0aW9ucyBpbgogKiBBc3NlcnQgdXNlcyBgZXZhbGAgdG8gZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24sIHRoZXJlYnkgYWxsb3dpbmcgdGhlCiAqIGV4cHJlc3Npb24gdG8gYmUgcGFzc2VkIGFzIGEgc3RyaW5nLCBhbmQgYmUgZHVtcGVkIHRvIHNjcmVlbiBpbgogKiBjYXNlIG9mIGZhaWx1cmUuIFNhZmVBc3NlcnQgY2FuIG5vdCBkbyB0aGlzLCBidXQgYXZvaWRzIHRoZSB1c2Ugb2YKICogYGV2YWxgLCBhbmQgdGhlcmVieSBhbHNvIGF2b2lkcyB0aGUgdXNlIG9mIHRlbXBvcmFyeSBnbG9iYWwKICogdmFyaWFibGVzLCB0aGF0IG11c3QgYmUgdXNlZCB3aXRoIGBldmFsYC4KICogCiAqIEBleGFtcGxlIAovLyBUaGlzIGlzIGFuIGV4YW1wbGUgb2YgdGhlIHByZWZlcmVkIHdheSB0byB1c2UgdGhlIFVuaXRUZXN0IG1vZHVsZToKdXNlKCAiVW5pdFRlc3QiICk7IApVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNb2R1bGUgbW9kdWxlbmFtZSIsIGZ1bmN0aW9uKCkgeyAKCiAgIFNhZmVBc3NlcnQudGhhdCggImNvbW1lbnQiLCBleHByZXNzaW9uLXRoYXQtaXMtZXhwZWN0ZWQtdG8tYmUtdHJ1ZSApOwogICBTYWZlQXNzZXJ0Lm5vdCggIlRoaXMgc2hvdWxkIGFsd2F5cyBiZSBmYWxzZSIsIGV4cHJlc3Npb24tdGhhdC1pcy1leHBlY3RlZC10by1iZS1mYWxzZSApOwogICBTYWZlQXNzZXJ0LmVxdWFsKCAidGVzdDAsIG91dHB1dCIsIHRlc3QwKCksICJVc2VyUGFyYW0gd2FzIDAiICk7CiAgIFNhZmVBc3NlcnQuZXF1YWwoICJ0ZXN0MSwgYXJyYXkgb3V0cHV0IiwgdGVzdDEoKS5zb3J0KCksIFsxLDIsMyw0XSApOwogICAgCn0pOwogKiBAbmFtZSBTYWZlQXNzZXJ0CiAqIEBzZWUgVW5pdFRlc3QKICogQHNlZSBBc3NlcnQKICogQG5hbWVzcGFjZSAKICovCnZhciBTYWZlQXNzZXJ0ID0gKCBmdW5jdGlvbiggKSB7CiAgICAgICAgdmFyIHNhZmVBc3NlcnRUd28gPSBmdW5jdGlvbiggbWVzc2FnZSwgZXhwcmVzc2lvbiApIHsKICAgICAgICAgICAgeCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgIEFzc2VydC50aGF0KCBtZXNzYWdlLCAneCcgKTsKICAgICAgICAgICAgZGVsZXRlIHg7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHNhZmVBc3NlcnRPbmUgPSBmdW5jdGlvbiggZXhwcmVzc2lvbiApIHsKICAgICAgICAgICAgeCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgIEFzc2VydC50aGF0KCAneCcgKTsKICAgICAgICAgICAgZGVsZXRlIHg7CiAgICAgICAgfTsKCgogICAgICAgIC8qKgogICAgICAgICAqIFRlc3QgdGhhdCBhbiBleHByZXNzaW9uIGV2YWx1dGVzIHRvIHRydWUuCiAgICAgICAgICogCiAgICAgICAgICogCiAgICAgICAgICogQHN5bnRheCBTYWZlQXNzZXJ0LnRoYXQoIFtkZXNjcmlwdGlvbiwgXSwgZXhwcmVzc2lvbiApOwogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbZGVzY3JpcHRpb25dIE9wdGlvbmFsIHBhcmFtZXRlciwgdXNlZCBmb3IgZmVlZGJhY2sgaW4gY2FzZSBvZiBlcnJvcnMKICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXhwcmVzc2lvbiBUaGUgZXhwcmVzc2lvbiB0byBldmFsdWF0ZQogICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHRlc3QgcGFzc2VkLCBmYWxzZSBvdGhlcndpc2UKICAgICAgICAgKiBAbmFtZSBTYWZlQXNzZXJ0LnRoYXQKICAgICAgICAgKiBAbWV0aG9kCiAgICAgICAgICovCgogICAgICAgIGZ1bmN0aW9uIHRoYXQoIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9ub25lICkgewogICAgICAgICAgICBpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT0gMSApIHsKICAgICAgICAgICAgICAgIHNhZmVBc3NlcnRPbmUoIGRlc2Nfb3JfZXhwciApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA9PSAyICkgewogICAgICAgICAgICAgICAgc2FmZUFzc2VydFR3byggZGVzY19vcl9leHByLCBleHByX29yX25vbmUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogVGVzdCB0aGF0IGFuIGV4cHJlc3Npb24gZXZhbHV0ZXMgdG8gZmFsc2UuCiAgICAgICAgICogCiAgICAgICAgICogQXMgdGhhdCwgYnV0IGFzc3VtZXMgdGhhdCB0aGUgcmVzdWx0IG11c3QgZXZhbHVhdGUgdG8gZmFsc2UgCiAgICAgICAgICogCiAgICAgICAgICogQHN5bnRheCBTYWZlQXNzZXJ0Lm5vdCggW2Rlc2NyaXB0aW9uLCBdLCBleHByZXNzaW9uICk7CiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtkZXNjcmlwdGlvbl0gT3B0aW9uYWwgcGFyYW1ldGVyLCB1c2VkIGZvciBmZWVkYmFjayBpbiBjYXNlIG9mIGVycm9ycwogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBleHByZXNzaW9uIFRoZSBleHByZXNzaW9uIHRvIHRlc3QKICAgICAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIHRlc3QgcGFzc2VkLCBmYWxzZSBvdGhlcndpc2UKICAgICAgICAgKiBAbmFtZSBTYWZlQXNzZXJ0Lm5vdAogICAgICAgICAqIEBtZXRob2QKICAgICAgICAgKi8KCiAgICAgICAgZnVuY3Rpb24gbm90KCBkZXNjX29yX2V4cHIsIGV4cHJfb3Jfbm9uZSApIHsKICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDEgKSB7CiAgICAgICAgICAgICAgICBzYWZlQXNzZXJ0T25lKCAhZGVzY19vcl9leHByICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDIgKSB7CiAgICAgICAgICAgICAgICBzYWZlQXNzZXJ0VHdvKCBkZXNjX29yX2V4cHIsICFleHByX29yX25vbmUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCgoKICAgICAgICB2YXIgc2FmZUVxdWFsVHdvID0gZnVuY3Rpb24oIGV4cHJlc3Npb24sIGV4cGVjdGVkICkgewogICAgICAgICAgICB4ID0gZXhwcmVzc2lvbjsKICAgICAgICAgICAgQXNzZXJ0LmVxdWFsKCAneCcsIGV4cGVjdGVkICk7CiAgICAgICAgICAgIGRlbGV0ZSB4OwogICAgICAgIH07CgogICAgICAgIHZhciBzYWZlRXF1YWxUaHJlZSA9IGZ1bmN0aW9uKCBkZXNjLCBleHByZXNzaW9uLCBleHBlY3RlZCApIHsKICAgICAgICAgICAgeCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgIEFzc2VydC5lcXVhbCggZGVzYywgJ3gnLCBleHBlY3RlZCApOwogICAgICAgICAgICBkZWxldGUgeDsKICAgICAgICB9OwoKICAgICAgICAvKioKICAgICAgICAgKiBUZXN0IHRoYXQgdHdvIGV4cHJlc3Npb25zIGFyZSBlcXVhbC4KICAgICAgICAgKiAKICAgICAgICAgKiAKICAgICAgICAgKiBAc3ludGF4IFNhZmVBc3NlcnQuZXF1YWwoIFtkZXNjcmlwdGlvbiwgXSwgZXhwcmVzc2lvbiwgZXhwZWN0ZWQgKTsKICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2Rlc2NyaXB0aW9uXSBPcHRpb25hbCBwYXJhbWV0ZXIsIHVzZWQgZm9yIGZlZWRiYWNrIGluIGNhc2Ugb2YgZXJyb3JzCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gVGhlIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUuCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV4cGVjdGVkIFRoZSBleHBlY3RlZCB2YWx1ZSBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4KICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSB0ZXN0IHBhc3NlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgICAgICogQG5hbWUgU2FmZUFzc2VydC5lcXVhbAogICAgICAgICAqIEBtZXRob2QKICAgICAgICAgKi8KCiAgICAgICAgZnVuY3Rpb24gZXF1YWwoIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9leHBlY3RlZCwgZXhwZWN0ZWRfb3Jfbm9uZSApIHsKICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDIgKSB7CiAgICAgICAgICAgICAgICBzYWZlRXF1YWxUd28oIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9leHBlY3RlZCApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA9PSAzICkgewogICAgICAgICAgICAgICAgc2FmZUVxdWFsVGhyZWUoIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9leHBlY3RlZCwgZXhwZWN0ZWRfb3Jfbm9uZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAidGhhdCI6IHRoYXQsCiAgICAgICAgICAgICJlcXVhbCI6IGVxdWFsLAogICAgICAgICAgICAibm90Ijogbm90CiAgICAgICAgfTsKICAgIH0gKSggKTsKCgoKVW5pdFRlc3QuYWRkRml4dHVyZSggImRldmVsLlNhZmVBc3NlcnQgbW9kdWxlLCB0aGF0IiwgZnVuY3Rpb24oICkgewoKICAgICAgICBTYWZlQXNzZXJ0LnRoYXQoICd0cnVlJywgdHJ1ZSApOwogICAgICAgIFNhZmVBc3NlcnQudGhhdCggdHJ1ZSApOwoKICAgICAgICBTYWZlQXNzZXJ0Lm5vdCggJ2ZhbHNlJywgZmFsc2UgKTsKICAgICAgICBTYWZlQXNzZXJ0Lm5vdCggZmFsc2UgKTsKCiAgICAgICAgU2FmZUFzc2VydC50aGF0KCAxID09PSAxICk7CiAgICAgICAgU2FmZUFzc2VydC50aGF0KCAnMiBwbHVzIDIgaXMgNCcsIDIgKyAyID09PSA0ICk7CiAgICB9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiZGV2ZWwuU2FmZUFzc2VydCBtb2R1bGUsIGVxdWFsIiwgZnVuY3Rpb24oICkgewoKICAgICAgICBTYWZlQXNzZXJ0LmVxdWFsKCB0cnVlLCB0cnVlICk7CiAgICAgICAgU2FmZUFzc2VydC5lcXVhbCggJ3RydWUgaXMgdHJ1ZScsIHRydWUsIHRydWUgKTsKCiAgICAgICAgU2FmZUFzc2VydC5lcXVhbCggImdlcnQgZXIgZmluIiwgImdlcnQgZXIgZmluIiApOwogICAgICAgIFNhZmVBc3NlcnQuZXF1YWwoICJ0ZXN0IGFmIGdlcnQgZXIgZmluIiwgImdlcnQgZXIgZmluIiwgImdlcnQgZXIgZmluIiApOwoKICAgIH0gKTsK","moduleName":"SafeAssert"},{"javascript":"","moduleName":"MarcXchange"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB3aXRoIG1ldGhvZHMgdG8gbW9kaWZ5IHZhcmlvdXMgcGFydHMgb2YgYSBEYW5NYXJjMiByZWNvcmQgKi8KCnVzZSggIkxvZyIgKTsKdXNlKCAiVW5pdFRlc3QiICk7CnVzZSggIk1hcmNDbGFzc2VzIiApOyAvLyBUaGlzIGlzIGFjdHVhbGx5IGF1dG9tYXRpY2FsbHkgaW5jbHVkZWQgYnkgdGhlIG5leHQgbW9kdWxlLgp1c2UoICJNYXJjRmlsZUV4dGVuc2lvbiIgKTsgLy8gQWxsb3dzIHRvIGNyZWF0ZSBhIFJlY29yZCBpbnN0YW5jZSBmcm9tIFN0ZEluCnVzZSggIk1hcmMiICk7CnVzZSggIk1hcmNNYXRjaGVycyIgKTsKdXNlKCAiTWFyY1JlY29yZCIgKTsKCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdNb2RpZnlEYW5NYXJjMicgXTsKCi8qKgogKiBNb2R1bGUgd2l0aCBtZXRob2RzIHRoYXQgbW9kaWZ5IGRhbk1BUkMyIHJlY29yZCBvYmplY3RzLgogKiAKICogQHR5cGUge25hbWVzcGFjZX0KICogQG5hbWVzcGFjZQogKi8KCnZhciBNb2RpZnlEYW5NYXJjMiA9IGZ1bmN0aW9uKCApIHsKCiAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBNb2RpZnlEYW5NYXJjMiBtb2R1bGUiICk7CgogICAgdmFyIHRoYXQgPSB7fTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCByZW1vdmVzIHNwYWNlcyBpbiBjZXJ0YWluIERhbk1hcmMyIGZpZWxkcyB0aGF0IG1heSBjb250YWluIGZhdXN0IG51bWJlcnMuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1vZGlmeURhbk1hcmMyLnJlbW92ZVNwYWNlcyggcmVjb3JkICkKICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgYSBtYXJjIFJlY29yZCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgcmVjb3JkCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNb2RpZnlEYW5NYXJjMi5yZW1vdmVTcGFjZXMKICAgICAqLwogICAgdGhhdC5yZW1vdmVTcGFjZXMgPSBmdW5jdGlvbiggcmVjb3JkICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBNb2RpZnlEYW5NYXJjMi5yZW1vdmVTcGFjZXMgZnVuY3Rpb24iICk7CgogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMDF8MDAyfDAxMXwwMTN8MDE0fDAxNXwwMTZ8MDE3fDAxOC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsgIC8vYWRkZWQgZmllbGRzIDAxMSBhbmQgMDEzIGZvciB1c2VzdG9yeSBTZWFyY2ggIzE0NzEKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvYXxjLywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsKICAgICAgICAgICAgICAgIHN1YmZpZWxkLnZhbHVlID0gc3ViZmllbGQudmFsdWUucmVwbGFjZSggLyAvZywgIiIgKTsKICAgICAgICAgICAgfSApOwogICAgICAgIH0gKTsKCiAgICAgICAgLy9hZGRlZCBmb3IgdXNlcnN0b3J5IFNlYXJjaCAjMTQ3MQogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC81MjAvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGZpZWxkLmVhY2hTdWJGaWVsZCggL24vLCBmdW5jdGlvbiggZmllbGQsIHN1YmZpZWxkICkgewogICAgICAgICAgICAgICAgc3ViZmllbGQudmFsdWUgPSBzdWJmaWVsZC52YWx1ZS5yZXBsYWNlKCAvIC9nLCAiIiApOwogICAgICAgICAgICB9ICk7CiAgICAgICAgfSApOwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IE1vZGlmeURhbk1hcmMyLnJlbW92ZVNwYWNlcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHJlY29yZDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgbWVyZ2VzIGRhdGEgZnJvbSBhdXRob3JpdHkgcmVjb3JkcyBpbnRvIGEgYmlibGlvZ3JhcGhpYyByZWNvcmQuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1vZGlmeURhbk1hcmMyLm1lcmdlQXV0aG9yaXR5RGF0YSggcmVjb3JkLCBhdXRob3JpdHlSZWNvcmRzICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQW4gaXNvMjcwOSBtYXJjIHJlY29yZAogICAgICogQHBhcmFtIHtBcnJheX0gYXV0aG9yaXR5UmVjb3JkcyBBbiBhcnJheSBvZiBvbmUgb3IgbW9yZSBhdXRob3JpdHkgcmVjb3JkcwogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCByZWNvcmQKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1vZGlmeURhbk1hcmMyLm1lcmdlQXV0aG9yaXR5RGF0YQogICAgICovCiAgICB0aGF0Lm1lcmdlQXV0aG9yaXR5RGF0YSA9IGZ1bmN0aW9uKCByZWNvcmQsIGF1dGhvcml0eVJlY29yZHMgKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1vZGlmeURhbk1hcmMyLm1lcmdlQXV0aG9yaXR5RGF0YSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHN1YmZpZWxkOwogICAgICAgIHZhciBzZWVSZWZlcmVuY2VzID0gbmV3IFJlY29yZCggKTsKICAgICAgICB2YXIgaSA9IDE7CiAgICAgICAgdmFyIHZhbHVlOwogICAgICAgIHZhciB2YWx1ZUFycmF5OwoKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvNzAwLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlKCAvXHUwMGU1LywgInwiICk7CiAgICAgICAgICAgIGlmICggdmFsdWUgIT09ICIiICkgewogICAgICAgICAgICAgICAgdmFsdWVBcnJheSA9IHZhbHVlLnNwbGl0KCAvfC8gKTsKICAgICAgICAgICAgICAgIGkgPSBNYXRoLm1heC5hcHBseSggTWF0aCwgdmFsdWVBcnJheSApICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0gKTsKICAgICAgICAKICAgICAgICB2YXIgX19jb2xsZWN0VmFsdWVzRnJvbVN1YmZpZWxkczQgPSBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIHZhciBzdWJmaWVsZHM0ID0gWyBdOwogICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC80LywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsKICAgICAgICAgICAgICAgIHN1YmZpZWxkczQucHVzaCggc3ViZmllbGQudmFsdWUgKTsKICAgICAgICAgICAgfSApOwogICAgICAgICAgICByZXR1cm4gc3ViZmllbGRzNDsKICAgICAgICB9CgogICAgICAgIHZhciBfX2FkZFN1YmZpZWxkczRXaXRoQ29sbGVjdGVkVmFsdWVzID0gZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZHM0ICkgewogICAgICAgICAgICB3aGlsZSAoIGZpZWxkLmV4aXN0cyggLzQvICkgKSB7CiAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmUoICI0IiApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIHZhciBzIGluIHN1YmZpZWxkczQgKSB7CiAgICAgICAgICAgICAgICBmaWVsZC5hcHBlbmQoICI0Iiwgc3ViZmllbGRzNFtzXSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvWzE3XTAwLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICB2YXIgZmllbGROYW1lID0gU3RyaW5nKCBmaWVsZC5uYW1lICk7CiAgICAgICAgICAgIGZvciAoIHZhciBhIGluIGF1dGhvcml0eVJlY29yZHMgKSB7CiAgICAgICAgICAgICAgICB2YXIgYXV0aG9yaXR5UmVjb3JkID0gYXV0aG9yaXR5UmVjb3Jkc1sgYSBdOwogICAgICAgICAgICAgICAgaWYgKCBmaWVsZC5nZXRWYWx1ZSggLzYvICkgPT09IGF1dGhvcml0eVJlY29yZC5maWVsZCggIjAwMSIgKS5nZXRWYWx1ZSggL2EvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YmZpZWxkczQgPSBfX2NvbGxlY3RWYWx1ZXNGcm9tU3ViZmllbGRzNCggZmllbGQgKTsgIC8vU2VhcmNoIFVTIzE1MTc6IFN1YmZpZWxkcyA0IHNob3VsZCBiZSBwbGFjZWQgYXQgdGhlIGVuZCBvZiB0aGUgZmllbGQKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHlSZWNvcmQuZWFjaEZpZWxkKCAvMTAwLywgZnVuY3Rpb24oIGF1dGZpZWxkICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFmaWVsZC5leGlzdHMoIC8wLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBhdXRob3JpdHlSZWNvcmQuZXhpc3RGaWVsZCggL1s0NV0wMC8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmNvdW50KCAiNzAwIiApID4gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFmaWVsZC5leGlzdHMoIC9cdTAwZTUvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLmFwcGVuZCggIlx1MDBlNSIsIGkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lICs9ICIvIiArIGk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE5hbWUgKz0gIi8iICsgU3RyaW5nKCBmaWVsZC5nZXRWYWx1ZSggL1x1MDBlNS8gKSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vZGlmeURhbk1hcmMyLmNyZWF0ZVNlZVJlZmVyZW5jZXMoIGF1dGhvcml0eVJlY29yZCwgZmllbGROYW1lLCBzZWVSZWZlcmVuY2VzICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYXV0ZmllbGQuZWFjaFN1YkZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBhdXRmaWVsZCwgYXV0U3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggYXV0U3ViZmllbGQubmFtZSwgYXV0U3ViZmllbGQudmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWZpZWxkLmV4aXN0cyggUmVnRXhwKCBzdWJmaWVsZC5uYW1lICkgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5hcHBlbmQoIHN1YmZpZWxkICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgX19hZGRTdWJmaWVsZHM0V2l0aENvbGxlY3RlZFZhbHVlcyggZmllbGQsIHN1YmZpZWxkczQgKTsgIC8vU2VhcmNoIFVTIzE1MTc6IFN1YmZpZWxkcyA0IHNob3VsZCBiZSBwbGFjZWQgYXQgdGhlIGVuZCBvZiB0aGUgZmllbGQKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CgogICAgICAgIHNlZVJlZmVyZW5jZXMuZWFjaEZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgICAgICB9ICk7CgkJCgkJcmVjb3JkID0gTWFyY1JlY29yZC5zb3J0RmllbGRzKCByZWNvcmQgKTsKCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBNb2RpZnlEYW5NYXJjMi5tZXJnZUF1dGhvcml0eURhdGEgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiByZWNvcmQ7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGFkZHMgc2VlIHJlZmVyZW5jZXMgdG8gYSByZWNvcmQgYmFzZWQgb24gYW4gYXV0aG9yaXR5IHJlY29yZC4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTW9kaWZ5RGFuTWFyYzIuY3JlYXRlU2VlUmVmZXJlbmNlcyggYXV0aG9yaXR5UmVjb3JkLCBmaWVsZE5hbWUsIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXV0aG9yaXR5UmVjb3JkIE5hbWUgb2YgdGhlIGZpZWxkIHRoYXQgaXMgcmVmZXJlbmNlZAogICAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkTmFtZSBUaGUgbmFtZSBvZiB0aGUgZmllbGQgdGhhdCBhIHJlZmVyZW5jZSBpcyBiZWluZyBtYWRlIHRvCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEFuIGlzbzI3MDkgbWFyYyByZWNvcmQgZm9yIGFkZGluZyByZWZlcmVuY2VzIHRvCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSByZWNvcmQgdXBkYXRlZCB3aXRoIHNlZSByZWZlcmVuY2VzIGluIGZpZWxkIDkwMAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTW9kaWZ5RGFuTWFyYzIuY3JlYXRlU2VlUmVmZXJlbmNlcwogICAgICovCiAgICB0aGF0LmNyZWF0ZVNlZVJlZmVyZW5jZXMgPSBmdW5jdGlvbiggYXV0aG9yaXR5UmVjb3JkLCBmaWVsZE5hbWUsIHJlY29yZCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogTW9kaWZ5RGFuTWFyYzIuY3JlYXRlU2VlUmVmZXJlbmNlcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIG5ld0ZpZWxkOwogICAgICAgIHZhciBzdWJmaWVsZDsKCiAgICAgICAgYXV0aG9yaXR5UmVjb3JkLmVhY2hGaWVsZCggLzQwMC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgbmV3RmllbGQgPSBuZXcgRmllbGQoICI5MDAiLCAiMDAiICk7CiAgICAgICAgICAgIHN1YmZpZWxkID0gbmV3IFN1YmZpZWxkKCAiMCIsICIiICk7CiAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBhdXRmaWVsZCwgYXV0U3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggYXV0U3ViZmllbGQubmFtZSwgYXV0U3ViZmllbGQudmFsdWUgKTsKICAgICAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgICAgICAgICAgfSApOwogICAgICAgICAgICBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggInoiLCBmaWVsZE5hbWUgKTsKICAgICAgICAgICAgbmV3RmllbGQuYXBwZW5kKCBzdWJmaWVsZCApOwogICAgICAgICAgICByZWNvcmQuYXBwZW5kKCBuZXdGaWVsZCApOwogICAgICAgIH0gKTsKCiAgICAgICAgYXV0aG9yaXR5UmVjb3JkLmVhY2hGaWVsZCggLzUwMC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgbmV3RmllbGQgPSBuZXcgRmllbGQoICI5MDAiLCAiMDAiICk7CiAgICAgICAgICAgIHN1YmZpZWxkID0gbmV3IFN1YmZpZWxkKCAiMCIsICIiICk7CiAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvW153XS8sIGZ1bmN0aW9uKCBhdXRmaWVsZCwgYXV0U3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggYXV0U3ViZmllbGQubmFtZSwgYXV0U3ViZmllbGQudmFsdWUgKTsKICAgICAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgICAgICAgICAgfSApOwogICAgICAgICAgICBpZiAoIGZpZWxkLmdldFZhbHVlKCAvdy8gKS5tYXRjaCggL3RpZGxpZ2VyZS8gKSApIHsKICAgICAgICAgICAgICAgIHN1YmZpZWxkID0gbmV3IFN1YmZpZWxkKCAidyIsICJzZSBvZ3NcdTAwZTUgdW5kZXIgZGV0IHNlbmVyZSBuYXZuIiApOwogICAgICAgICAgICAgICAgbmV3RmllbGQuYXBwZW5kKCBzdWJmaWVsZCApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggZmllbGQuZ2V0VmFsdWUoIC93LyApLm1hdGNoKCAvc2VuZXJlLyApICkgewogICAgICAgICAgICAgICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJ3IiwgInNlIG9nc1x1MDBlNSB1bmRlciBkZXQgdGlkbGlnZXJlIG5hdm4iICk7CiAgICAgICAgICAgICAgICBuZXdGaWVsZC5hcHBlbmQoIHN1YmZpZWxkICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJ6IiwgZmllbGROYW1lICk7CiAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgICAgICAgICAgcmVjb3JkLmFwcGVuZCggbmV3RmllbGQgKTsKICAgICAgICB9ICk7CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogTW9kaWZ5RGFuTWFyYzIuY3JlYXRlU2VlUmVmZXJlbmNlcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHJlY29yZDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgcmVtb3ZlcyBzdWJmaWVsZHMgNSBhbmQgNiBmcm9tIGZpZWxkcyAxMDAgYW5kIDcwMC4KICAgICAqIEBzeW50YXggTW9kaWZ5RGFuTWFyYzIucmVtb3ZlQXV0aG9yaXR5TGlua3MoIG1hcmNSZWNvcmQgKQogICAgICogQHBhcmFtIHtPYmplY3R9IG1hcmNSZWNvcmQgdGhlIG1hcmMgcmVjb3JkIHRvIGJlIG1vZGlmaWVkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZWNvcmQgd2l0aG91dCBzdWJmaWVsZHMgNSBhbmQgNiBmcm9tIGZpZWxkcyAxMDAgYW5kIDcwMAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1vZGlmeURhbk1hcmMyLnJlbW92ZUF1dGhvcml0eUxpbmtzCiAgICAgKi8KICAgIHRoYXQucmVtb3ZlQXV0aG9yaXR5TGlua3MgPSBmdW5jdGlvbiggbWFyY1JlY29yZCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogTW9kaWZ5RGFuTWFyYzIucmVtb3ZlQXV0aG9yaXR5TGlua3MiICk7CgogICAgICAgIG1hcmNSZWNvcmQuZWFjaEZpZWxkKCAvWzE3XTAwLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICBmaWVsZC5yZW1vdmUoICI1IiApOwogICAgICAgICAgICBmaWVsZC5yZW1vdmUoICI2IiApOwoKICAgICAgICB9ICk7CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogTW9kaWZ5RGFuTWFyYzIucmVtb3ZlQXV0aG9yaXR5TGlua3MiICk7CgogICAgICAgIHJldHVybiBtYXJjUmVjb3JkOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBpbnNlcnRzIGEgZHVtbXkgbjU1IGZpZWxkIHRvIGEgbWFyYyByZWNvcmQuCiAgICAgKiBAc3ludGF4IE1vZGlmeURhbk1hcmMyLmluc2VydE41NUZpZWxkKCBtYXJjUmVjb3JkICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXJjUmVjb3JkIHRoZSBtYXJjIHJlY29yZCB0byBiZSBtb2RpZmllZAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVjb3JkIHdpdGggdGhlIGFkZGVkIG41NSBmaWVsZAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1vZGlmeURhbk1hcmMyLmluc2VydE41NUZpZWxkCiAgICAgKi8KICAgIHRoYXQuaW5zZXJ0TjU1RmllbGQgPSBmdW5jdGlvbiggbWFyY1JlY29yZCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogTW9kaWZ5RGFuTWFyYzIuaW5zZXJ0TjU1RmllbGQiICk7CgogICAgICAgIHZhciBmaWVsZCA9IG5ldyBGaWVsZCggIm41NSIsICIwMCIgKTsKICAgICAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjIwMTMwMTAxIiApOwogICAgICAgIG1hcmNSZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgICAgIG1hcmNSZWNvcmQgPSBtYXJjUmVjb3JkICsgIlxuIjsKCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBNb2RpZnlEYW5NYXJjMi5pbnNlcnRONTVGaWVsZCIgKTsKCiAgICAgICAgcmV0dXJuIG1hcmNSZWNvcmQ7CgogICAgfTsKCiAgICBMb2cuaW5mbyggIkxlYXZpbmc6IE1vZGlmeURhbk1hcmMyIG1vZHVsZSIgKTsKCiAgICByZXR1cm4gdGhhdDsKCn0oICk7CgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHVuaXQgdGVzdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNb2RpZnlEYW5NYXJjMi5yZW1vdmVTcGFjZXMiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIjkgODc2IDU0MyAyIiApOwoKICAgIG91dHB1dCA9IG5ldyBSZWNvcmQoICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMDIiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYyIsICI5ODc2NTQzMiIgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJSZW1vdmUgc3BhY2VzIGluIGZpZWxkIDAwMSBhbmQgMDAyIiwgJ1N0cmluZyhNb2RpZnlEYW5NYXJjMi5yZW1vdmVTcGFjZXMoIHJlY29yZCApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMTEiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJSZW1vdmUgc3BhY2VzIGluIGZpZWxkIDAxMSIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIucmVtb3ZlU3BhY2VzKCByZWNvcmQgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDEzIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gbmV3IFJlY29yZCggKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDEzIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiUmVtb3ZlIHNwYWNlcyBpbiBmaWVsZCAwMTMiLCAnU3RyaW5nKE1vZGlmeURhbk1hcmMyLnJlbW92ZVNwYWNlcyggcmVjb3JkICkpJywgU3RyaW5nKCBvdXRwdXQgKSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAxNCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IG5ldyBSZWNvcmQoICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAxNCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwoKICAgIEFzc2VydC5lcXVhbCggIlJlbW92ZSBzcGFjZXMgaW4gZmllbGQgMDE0IiwgJ1N0cmluZyhNb2RpZnlEYW5NYXJjMi5yZW1vdmVTcGFjZXMoIHJlY29yZCApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMTUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMTUiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJSZW1vdmUgc3BhY2VzIGluIGZpZWxkIDAxNSIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIucmVtb3ZlU3BhY2VzKCByZWNvcmQgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDE2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gbmV3IFJlY29yZCggKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDE2IiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiUmVtb3ZlIHNwYWNlcyBpbiBmaWVsZCAwMTYiLCAnU3RyaW5nKE1vZGlmeURhbk1hcmMyLnJlbW92ZVNwYWNlcyggcmVjb3JkICkpJywgU3RyaW5nKCBvdXRwdXQgKSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAxNyIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IG5ldyBSZWNvcmQoICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAxNyIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwoKICAgIEFzc2VydC5lcXVhbCggIlJlbW92ZSBzcGFjZXMgaW4gZmllbGQgMDE3IiwgJ1N0cmluZyhNb2RpZnlEYW5NYXJjMi5yZW1vdmVTcGFjZXMoIHJlY29yZCApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMTgiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMTgiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJSZW1vdmUgc3BhY2VzIGluIGZpZWxkIDAxOCIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIucmVtb3ZlU3BhY2VzKCByZWNvcmQgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNTIwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAibiIsICIxIDIzNCA1NjcgOCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjUyMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiU29tZSB0ZXh0IGhlcmUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IG5ldyBSZWNvcmQoICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjUyMCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIm4iLCAiMTIzNDU2NzgiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI1MjAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIlNvbWUgdGV4dCBoZXJlIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJSZW1vdmUgc3BhY2VzIGluIGZpZWxkIDUyMCIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIucmVtb3ZlU3BhY2VzKCByZWNvcmQgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXRGaWVsZDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJUZXN0IE1vZGlmeURhbk1hcmMyLm1lcmdlQXV0aG9yaXR5RGF0YSIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIxMDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICI1IiwgIjg3MDk3OSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjYiLCAiNjg5MDI1ODQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiNjg5MDI1ODQiICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICIxMDAiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplbnNlbiIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFucyIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CgogICAgYXV0aG9yaXR5UmVjb3JkcyA9IFsgXTsKICAgIGF1dGhvcml0eVJlY29yZHMucHVzaCggYXV0UmVjb3JkICk7CgogICAgb3V0cHV0ID0gbmV3IFJlY29yZCggKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMTAwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICI2IiwgIjY4OTAyNTg0IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplbnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFucyIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiTWVyZ2luZyBhdXRob3JpdHkgZGF0YSBpbnRvIHJlY29yZCAoMTAwKSIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIubWVyZ2VBdXRob3JpdHlEYXRhKCByZWNvcmQsIGF1dGhvcml0eVJlY29yZHMgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMTAwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBmaWVsZC5hcHBlbmQoICI2IiwgIjY4OTAyNTg0IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNzAwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBmaWVsZC5hcHBlbmQoICI2IiwgIjY4OTAyNTg0IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBhdXRSZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJhIiwgIjY4OTAyNTg0IiApOwogICAgYXV0UmVjb3JkLmFwcGVuZCggYXV0RmllbGQgKTsKICAgIGF1dEZpZWxkID0gbmV3IEZpZWxkKCAiMTAwIiwgIjAwIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYSIsICJKZW5zZW4iICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJoIiwgIkhhbnMiICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwoKICAgIGF1dGhvcml0eVJlY29yZHMgPSBbIF07CiAgICBhdXRob3JpdHlSZWNvcmRzLnB1c2goIGF1dFJlY29yZCApOwogICAgYXV0aG9yaXR5UmVjb3Jkcy5wdXNoKCBhdXRSZWNvcmQgKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIxMDAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICI1IiwgIjg3MDk3OSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjYiLCAiNjg5MDI1ODQiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICIwIiwgIiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiSmVuc2VuIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiaCIsICJIYW5zIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiNzAwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICI2IiwgIjY4OTAyNTg0IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplbnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFucyIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiTWVyZ2luZyBhdXRob3JpdHkgZGF0YSBpbnRvIHJlY29yZCAoMTAwIGFuZCA3MDApIiwgJ1N0cmluZyhNb2RpZnlEYW5NYXJjMi5tZXJnZUF1dGhvcml0eURhdGEoIHJlY29yZCwgYXV0aG9yaXR5UmVjb3JkcyApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI3MDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICI1IiwgIjg3MDk3OSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjYiLCAiNjg5MDI1ODQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiNjg5MDI1ODQiICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICIxMDAiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplbnNlbiIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFucyIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjQwMCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiSmVuc2VuIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiaCIsICJIYW5zIE9sZSIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CgogICAgYXV0aG9yaXR5UmVjb3JkcyA9IFsgXTsKICAgIGF1dGhvcml0eVJlY29yZHMucHVzaCggYXV0UmVjb3JkICk7CgogICAgb3V0cHV0ID0gbmV3IFJlY29yZCggKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiNzAwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICI2IiwgIjY4OTAyNTg0IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplbnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFucyIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjkwMCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJKZW5zZW4iICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJoIiwgIkhhbnMgT2xlIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAieiIsICI3MDAiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwoKICAgIEFzc2VydC5lcXVhbCggIk1lcmdpbmcgYXV0aG9yaXR5IGRhdGEgaW50byByZWNvcmQgKDcwMCArIDkwMCkiLCAnU3RyaW5nKE1vZGlmeURhbk1hcmMyLm1lcmdlQXV0aG9yaXR5RGF0YSggcmVjb3JkLCBhdXRob3JpdHlSZWNvcmRzICkpJywgU3RyaW5nKCBvdXRwdXQgKSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMiA5MTEgMzMyIDciICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImMiLCAiMjAxMjAxMjMxODAzMzQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgIjIwMTExMjA3IiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA0IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiciIsICJuIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjEwMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjUiLCAiODcwOTc5IiApOwogICAgZmllbGQuYXBwZW5kKCAiNiIsICI2ODkwNTE5MiIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjQiLCAiYXV0IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMzAwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICI5NyBzaWRlciIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiaWxsLiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgYXV0UmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGF1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYSIsICI2ODkwNTE5MiIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImIiLCAiODcwOTc5IiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYyIsICIyMDExMTEwNzE2NTQiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJkIiwgIjIwMTExMTA3IiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAidCIsICJmYXVzdCIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggInIiLCAibiIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiZSIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggInQiLCAiaCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggInYiLCAiOSIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjA0MCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiREJDIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYiIsICJkYW4iICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICIxMDAiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJhIiwgIlN0b3JnXHUwMGU1cmQiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJoIiwgIkZsZW1taW5nIiApOwogICAgYXV0UmVjb3JkLmFwcGVuZCggYXV0RmllbGQgKTsKICAgIGF1dEZpZWxkID0gbmV3IEZpZWxkKCAiZDA4IiwgIjAwIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAibyIsICJhdXRvZ2VuZXJlcmV0IiApOwogICAgYXV0UmVjb3JkLmFwcGVuZCggYXV0RmllbGQgKTsKICAgIGF1dEZpZWxkID0gbmV3IEZpZWxkKCAieHl6IiwgIjAwIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAidSIsICJTdG9yZ1x1MDBlNXJkRmxlbW1pbmciICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwoKICAgIGF1dGhvcml0eVJlY29yZHMgPSBbIF07CiAgICBhdXRob3JpdHlSZWNvcmRzLnB1c2goIGF1dFJlY29yZCApOwoKICAgIG91dHB1dCA9IG5ldyBSZWNvcmQoICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiMiA5MTEgMzMyIDciICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImMiLCAiMjAxMjAxMjMxODAzMzQiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJkIiwgIjIwMTExMjA3IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDA0IiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiciIsICJuIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJlIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjEwMCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjUiLCAiODcwOTc5IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNiIsICI2ODkwNTE5MiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJTdG9yZ1x1MDBlNXJkIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiaCIsICJGbGVtbWluZyIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjQiLCAiYXV0IiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMzAwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICI5NyBzaWRlciIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImIiLCAiaWxsLiIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiTWVyZ2luZyBhdXRob3JpdHkgZGF0YSBpbnRvIHJlY29yZCAob25lIDEwMCBmaWVsZCkiLCAnU3RyaW5nKE1vZGlmeURhbk1hcmMyLm1lcmdlQXV0aG9yaXR5RGF0YSggcmVjb3JkLCBhdXRob3JpdHlSZWNvcmRzICkpJywgU3RyaW5nKCBvdXRwdXQgKSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMiA4NDYgMDU3IDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImMiLCAiMjAxMDEyMjAxMDM5NDkiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgIjIwMTAxMDA1IiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA0IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiciIsICJuIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA4IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAidCIsICJzIiApOwogICAgZmllbGQuYXBwZW5kKCAidSIsICJmIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIyMDEwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICJkayIgKTsKICAgIGZpZWxkLmFwcGVuZCggImQiLCAiXHUwMGU1IiApOwogICAgZmllbGQuYXBwZW5kKCAiZCIsICJ5IiApOwogICAgZmllbGQuYXBwZW5kKCAiZSIsICIyIiApOwogICAgZmllbGQuYXBwZW5kKCAibCIsICJkYW4iICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIjA0IiApOwogICAgZmllbGQuYXBwZW5kKCAidiIsICIwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAyMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImUiLCAiOTc4ODc2MDMyODkzMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImMiLCAiaGYuIiApOwogICAgZmllbGQuYXBwZW5kKCAiZCIsICJrci4gNzAsMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkFDQzIwMTA0MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiREJGMjAxMDQ1IiApOwogICAgZmllbGQuYXBwZW5kKCAieCIsICJCS00yMDEwNDUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIyNDUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkxlZGVsc2UiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI3MDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICI1IiwgIjg3MDk3OSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjYiLCAiNjg0NDg1NTciICk7CiAgICBmaWVsZC5hcHBlbmQoICI0IiwgImVkdCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjcwMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggIlx1MDBlNSIsICIxIiApOwogICAgZmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBmaWVsZC5hcHBlbmQoICI2IiwgIjY4MDY3MTg5IiApOwogICAgZmllbGQuYXBwZW5kKCAiNCIsICJlZHQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI3MDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJcdTAwZTUiLCAiMiIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjUiLCAiODcwOTc5IiApOwogICAgZmllbGQuYXBwZW5kKCAiNiIsICI2ODg3OTc5NSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjQiLCAiZWR0IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNzAwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBmaWVsZC5hcHBlbmQoICI2IiwgIjY4NzM1MzM1IiApOwogICAgZmllbGQuYXBwZW5kKCAiNCIsICJhdXQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI3MTAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIlVuZGVydmlzbmluZ3NtaW5pc3RlcmlldCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjcxMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImMiLCAiVGFsZW50IGZvciBMZWRlbHNlIiApOwogICAgZmllbGQuYXBwZW5kKCAiZSIsICJwcm9qZWt0IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNzIwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAibyIsICJMYXJzIFNrXHUwMGU1bmluZyIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjQiLCAicGh0IiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNzIwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAibyIsICJDaGFybG90dGUgQXJtc3Ryb25nIiApOwogICAgZmllbGQuYXBwZW5kKCAiNCIsICJ0cmwiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIGF1dGhvcml0eVJlY29yZHMgPSBbIF07CgogICAgYXV0UmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGF1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYSIsICI2ODA2NzE4OSIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImIiLCAiODcwOTc5IiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYyIsICIyMDExMTEwNzE2NTQiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJkIiwgIjIwMTExMTA3IiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAidCIsICJmYXVzdCIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggInIiLCAibiIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiZSIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggIngiLCAibiIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggInQiLCAiaCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggInYiLCAiOSIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjA0MCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiREJDIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYiIsICJkYW4iICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICIxMDAiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJhIiwgIkJlY2ggSGFuc2VuIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiaCIsICJUaG9tYXMiICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICI0MDAiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJhIiwgIkhhbnNlbiIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImgiLCAiVGhvbWFzIEJlY2giICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICJkMDgiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJvIiwgImF1dG9nZW5lcmVyZXQiICk7CiAgICBhdXRSZWNvcmQuYXBwZW5kKCBhdXRGaWVsZCApOwogICAgYXV0RmllbGQgPSBuZXcgRmllbGQoICJ4eXoiLCAiMDAiICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJ1IiwgIkJlY2ggSGFuc2VuVGhvbWFzIiApOwogICAgYXV0UmVjb3JkLmFwcGVuZCggYXV0RmllbGQgKTsKICAgIGF1dGhvcml0eVJlY29yZHMucHVzaCggYXV0UmVjb3JkICk7CgogICAgYXV0UmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGF1dFJlY29yZC5mcm9tU3RyaW5nKCAiMDAxIDAwKmE2ODQ0ODU1NypiODcwOTc5KmMyMDExMTEwNzE2NTQqZDIwMTExMTA3KmZhKnRmYXVzdFxuMDA0IDAwKnJuKmFlKnhuXG4wMDggMDAqdGgqdjlcbjA0MCAwMCphREJDKmJkYW5cbjEwMCAwMCphSmVzcGVyc2VuKmhKb25cbmQwOCAwMCpvYXV0b2dlbmVyZXJldFxueHl6IDAwKnVKZXNwZXJzZW5Kb24iICk7CiAgICBhdXRob3JpdHlSZWNvcmRzLnB1c2goIGF1dFJlY29yZCApOwoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRSZWNvcmQuZnJvbVN0cmluZyggIjAwMSAwMCphNjg3MzUzMzUqYjg3MDk3OSpjMjAxMTExMDcxNjU0KmQyMDExMTEwNypmYSp0ZmF1c3RcbjAwNCAwMCpybiphZSp4blxuMDA4IDAwKnRoKnY5XG4wNDAgMDAqYURCQypiZGFuXG4xMDAgMDAqYVBlZGVyc2VuKmhEb3J0aGUqY2YuIDE5NjNcbmQwOCAwMCpvYXV0b2dlbmVyZXJldFxueHl6IDAwKnVQZWRlcnNlbkRvcnRoZWYuIDE5NjMiICk7CiAgICBhdXRob3JpdHlSZWNvcmRzLnB1c2goIGF1dFJlY29yZCApOwoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRSZWNvcmQuZnJvbVN0cmluZyggIjAwMSAwMCphNjg4Nzk3OTUqYjg3MDk3OSpjMjAxMTExMDcxNjU0KmQyMDExMTEwNypmYSp0ZmF1c3RcbjAwNCAwMCpybiphZSp4blxuMDA4IDAwKnRoKnY5XG4wNDAgMDAqYURCQypiZGFuXG4xMDAgMDAqYVNcdTAwZjhuZGVyZ1x1MDBlNXJkKmhLYXJlbiBPcm1zdHJ1cFxuNDAwIDAwKmFPcm1zdHJ1cCBTXHUwMGY4bmRlcmdcdTAwZTVyZCpoS2FyZW5cbmQwOCAwMCpvYXV0b2dlbmVyZXJldFxueHl6IDAwKnVTXHUwMGY4bmRlcmdcdTAwZTVyZEthcmVuIE9ybXN0cnVwIiApOwogICAgYXV0aG9yaXR5UmVjb3Jkcy5wdXNoKCBhdXRSZWNvcmQgKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjIgODQ2IDA1NyAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJjIiwgIjIwMTAxMjIwMTAzOTQ5IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiZCIsICIyMDEwMTAwNSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImYiLCAiYSIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggInIiLCAibiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiZSIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggInQiLCAicyIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggInUiLCAiZiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiMjAxMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImIiLCAiZGsiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJkIiwgIlx1MDBlNSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImQiLCAieSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImUiLCAiMiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImwiLCAiZGFuIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAieCIsICIwNCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggInYiLCAiMCIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMjEiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJlIiwgIjk3ODg3NjAzMjg5MzAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJjIiwgImhmLiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImQiLCAia3IuIDcwLDAwIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMDMyIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAieCIsICJBQ0MyMDEwNDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIkRCRjIwMTA0NSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIngiLCAiQktNMjAxMDQ1IiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiMjQ1IiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJMZWRlbHNlIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiNzAwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICI2IiwgIjY4NDQ4NTU3IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplc3BlcnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiSm9uIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNCIsICJlZHQiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI3MDAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJcdTAwZTUiLCAiMSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjUiLCAiODcwOTc5IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNiIsICI2ODA2NzE4OSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJCZWNoIEhhbnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiVGhvbWFzIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNCIsICJlZHQiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI3MDAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJcdTAwZTUiLCAiMiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjUiLCAiODcwOTc5IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNiIsICI2ODg3OTc5NSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJTXHUwMGY4bmRlcmdcdTAwZTVyZCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiS2FyZW4gT3Jtc3RydXAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICI0IiwgImVkdCIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjcwMCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjUiLCAiODcwOTc5IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNiIsICI2ODczNTMzNSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImciLCAiMSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJQZWRlcnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiRG9ydGhlIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYyIsICJmLiAxOTYzIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNCIsICJhdXQiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI3MTAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJjIiwgIlVuZGVydmlzbmluZ3NtaW5pc3RlcmlldCIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjcxMCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImMiLCAiVGFsZW50IGZvciBMZWRlbHNlIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiZSIsICJwcm9qZWt0IiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiNzIwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAibyIsICJMYXJzIFNrXHUwMGU1bmluZyIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjQiLCAicGh0IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiZyIsICIxIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiNzIwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAibyIsICJDaGFybG90dGUgQXJtc3Ryb25nIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiNCIsICJ0cmwiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI5MDAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICIwIiwgIiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiSGFuc2VuIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiaCIsICJUaG9tYXMgQmVjaCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggInoiLCAiNzAwLzEiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI5MDAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICIwIiwgIiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiT3Jtc3RydXAgU1x1MDBmOG5kZXJnXHUwMGU1cmQiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJoIiwgIkthcmVuIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAieiIsICI3MDAvMiIgKTsKICAgIG91dHB1dC5hcHBlbmQoIG91dHB1dEZpZWxkICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiTWVyZ2luZyBhdXRob3JpdHkgZGF0YSBpbnRvIHJlY29yZCAobW9yZSA3MDAgZmllbGRzLCBzb21lIHdpdGggcmVmZXJlbmNlcyBpbiA5MDApIiwgJ1N0cmluZyhNb2RpZnlEYW5NYXJjMi5tZXJnZUF1dGhvcml0eURhdGEoIHJlY29yZCwgYXV0aG9yaXR5UmVjb3JkcyApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICByZWNvcmQuZnJvbVN0cmluZyggIjAwMSAwMCphMiAzMTUgODA1IDEqYjg3MDk3MCpjMjAxMzAyMTQxNjI5MjIqZDIwMDAxMDEwKmZhXG4wMDQgMDAqcm4qYWVcbjAwOCAwMCp0cyp1dSphMjAwMCpiZGsqZHgqdjAqamoqbGZyZSpvc1xuMDA5IDAwKmFhKmd4eFxuMDE3IDAwKmEyIDA1NiAyODUgNFxuMDIxIDAwKmE4Ny0wMC00MDU4NC0xKmNoZi4qZGtyLiAxMDYsMjVcbjAzMiAwMCphREJGMjAwMDQ0KnhTRkQyMDAwNDQqeERBVDIwMTMwOFxuMjQ1IDAwKmFQb2xpY2UqZXJlZGlnZXJldCBhZiBMYXJzIERhbWtqXHUwMGU2ciBvZyBGaW5uIEVyaWtzZW4qZmJpbGxlZHJlYWt0aW9uOiBmb3JmYXR0ZXJuZSBvZyBBbm5lIExpc2JldGggT2xzZW5cbjI1MCAwMCphMS4gdWRnYXZlKmJcdTAwZjcqeDMuIG9wbGFnXG4yNjAgMDAqJjEqYUtiaC4qYkthbGVpZG9zY29wZSpjMjAwMCprU3BlY2lhbC1Ucnlra2VyaWV0LCBWaWJvcmdcbjMwMCAwMCphNjYgc2lkZXIqYmlsbC5cbjQ0MCAwMCowKmFLYWxlaWRvc2NvcGVzIHNwcm9nc2VyaWVcbjUxMiAwMCppQm9pbGVhdS1OYXJjZWphYyBwc2V1ZG9ueW0gZm9yKmVQaWVycmUgQm9pbGVhdSBvZyBUaG9tYXMgTmFyY2VqYWNcbjUyMCAwMCphVGlkbGlnZXJlOiAxLiB1ZGdhdmUgdWRlbiBzZXJpZWJldGVnbmVsc2VuIFwiS2FsZWlkb3Njb3BlcyBzcHJvZ3NlcmllXCIuIEtiaC46IE11bmtzZ1x1MDBlNXJkLCAxOTk0LiAoU3Byb2dzZXJpZW4pXG41MzAgMDAqYUluZGhvbGQ6IFBpZXJyZSBCZWxsZW1hcmU6IEpcJ2FpIGRhbnNcdTAwZTkgYXZlYyB1bmUgbW9ydGUgOyBMYSBtYWlzb24gZHUgbWFsaGV1ci4gQm9pbGVhdS1OYXJjZWphYzogTm9AVUZDZWwgc3VycHJpc2UgOyBMZSBmdWdpdGlmLiBDbGF1ZGUgSmFzbWluOiBIXHUwMGU5bFx1MDBlOG5lIFBlcnJhdWx0IC0gcnVlIFJvc2x5blxuNjUyIDAwKm44Mip6MDRcbjY1MiAwMCpvODIuMVxuNzAwIDAwKjU4NzA5NzkqNjY4MTkzMzAzXG43MDAgMDAqNTg3MDk3OSo2NjgyNDE4MjBcbjcwMCAwMCo1ODcwOTc5KjY2ODA3MjAzNFxuNzAwIDAwKlx1MDBlNTQqNTg3MDk3OSo2NjgxMDY4NDJcbjcwMCAwMCpcdTAwZTU1KjU4NzA5NzkqNjY4NjY4MjA0XG43MDAgMDAqNTg3MDk3OSo2Njg0MzQwMjUiICk7CgogICAgYXV0aG9yaXR5UmVjb3JkcyA9IFsgXTsKCiAgICBhdXRSZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgYXV0UmVjb3JkLmZyb21TdHJpbmcoICIwMDEgMDAqYTY4MDcyMDM0KmI4NzA5NzkqYzIwMTExMTA3MTY1NCpkMjAxMTExMDcqZmEqdGZhdXN0XG4wMDQgMDAqcm4qYWUqeG5cbjAwOCAwMCp0aCp2OVxuMDQwIDAwKmFEQkMqYmRhblxuMTAwIDAwKmFCZWxsZW1hcmUqaFBpZXJyZVxuZDA4IDAwKm9hdXRvZ2VuZXJlcmV0XG54eXogMDAqdUJlbGxlbWFyZVBpZXJyZSIgKTsKICAgIGF1dGhvcml0eVJlY29yZHMucHVzaCggYXV0UmVjb3JkICk7CgogICAgYXV0UmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGF1dFJlY29yZC5mcm9tU3RyaW5nKCAiMDAxIDAwKmE2ODEwNjg0MipiODcwOTc5KmMyMDExMTEwNzE2NTQqZDIwMTExMTA3KmZhKnRmYXVzdFxuMDA0IDAwKnJuKmFlKnhuXG4wMDggMDAqdGgqdjlcbjA0MCAwMCphREJDKmJkYW5cbjEwMCAwMCphQm9pbGVhdSpoUGllcnJlXG40MDAgMDAqYUJvaWxlYXUtTmFyY2VqYWNcbmQwOCAwMCpvYXV0b2dlbmVyZXJldFxueHl6IDAwKnVCb2lsZWF1UGllcnJlIiApOwogICAgYXV0aG9yaXR5UmVjb3Jkcy5wdXNoKCBhdXRSZWNvcmQgKTsKCiAgICBhdXRSZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgYXV0UmVjb3JkLmZyb21TdHJpbmcoICIwMDEgMDAqYTY4MTkzMzAzKmI4NzA5NzkqYzIwMTMwMjE0MTczMTE5KmQyMDExMTEwNypmYSp0ZmF1c3RcbjAwNCAwMCpybiphZSp4blxuMDA4IDAwKnRoKnY5XG4wNDAgMDAqYURCQypiZGFuXG4xMDAgMDAqYURhbWtqXHUwMGU2cipoTGFyc1xuNDAwIDAwKmFPbHNlbi1EYW1ralx1MDBlNnIqaEwuXG5kMDggMDAqb2F1dG9nZW5lcmVyZXRcbnh5eiAwMCp1RGFta2pcdTAwZTZyTGFyc1xuejk5IDAwKmFia3MiICk7CiAgICBhdXRob3JpdHlSZWNvcmRzLnB1c2goIGF1dFJlY29yZCApOwoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRSZWNvcmQuZnJvbVN0cmluZyggIjAwMSAwMCphNjgyNDE4MjAqYjg3MDk3OSpjMjAxMTExMDcxNjU0KmQyMDExMTEwNypmYSp0ZmF1c3RcbjAwNCAwMCpybiphZSp4blxuMDA4IDAwKnRoKnY5XG4wNDAgMDAqYURCQypiZGFuXG4xMDAgMDAqYUVyaWtzZW4qaEZpbm4qY2YuIDE5NDNcbmQwOCAwMCpvYXV0b2dlbmVyZXJldFxueHl6IDAwKnVFcmlrc2VuRmlubmYuIDE5NDMiICk7CiAgICBhdXRob3JpdHlSZWNvcmRzLnB1c2goIGF1dFJlY29yZCApOwoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRSZWNvcmQuZnJvbVN0cmluZyggIjAwMSAwMCphNjg0MzQwMjUqYjg3MDk3OSpjMjAxMTExMDcxNjU0KmQyMDExMTEwNypmYSp0ZmF1c3RcbjAwNCAwMCpybiphZSp4blxuMDA4IDAwKnRoKnY5XG4wNDAgMDAqYURCQypiZGFuXG4xMDAgMDAqYUphc21pbipoQ2xhdWRlXG5kMDggMDAqb2F1dG9nZW5lcmVyZXRcbnh5eiAwMCp1SmFzbWluQ2xhdWRlIiApOwogICAgYXV0aG9yaXR5UmVjb3Jkcy5wdXNoKCBhdXRSZWNvcmQgKTsKCiAgICBhdXRSZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgYXV0UmVjb3JkLmZyb21TdHJpbmcoICIwMDEgMDAqYTY4NjY4MjA0KmI4NzA5NzkqYzIwMTExMTA3MTY1NCpkMjAxMTExMDcqZmEqdGZhdXN0XG4wMDQgMDAqcm4qYWUqeG5cbjAwOCAwMCp0aCp2OVxuMDQwIDAwKmFEQkMqYmRhblxuMTAwIDAwKmFOYXJjZWphYypoVGhvbWFzXG40MDAgMDAqYUJvaWxlYXUtTmFyY2VqYWNcbmQwOCAwMCpvYXV0b2dlbmVyZXJldFxueHl6IDAwKnVOYXJjZWphY1Rob21hcyIgKTsKICAgIGF1dGhvcml0eVJlY29yZHMucHVzaCggYXV0UmVjb3JkICk7CgogICAgb3V0cHV0ID0gbmV3IFJlY29yZCggKTsKICAgIG91dHB1dC5mcm9tU3RyaW5nKCAiMDAxIDAwICphIDIgMzE1IDgwNSAxICpiIDg3MDk3MCAqYyAyMDEzMDIxNDE2MjkyMiAqZCAyMDAwMTAxMCAqZiBhIFxuMDA0IDAwICpyIG4gKmEgZSBcbjAwOCAwMCAqdCBzICp1IHUgKmEgMjAwMCAqYiBkayAqZCB4ICp2IDAgKmogaiAqbCBmcmUgKm8gcyBcbjAwOSAwMCAqYSBhICpnIHh4IFxuMDE3IDAwICphIDIgMDU2IDI4NSA0IFxuMDIxIDAwICphIDg3LTAwLTQwNTg0LTEgKmMgaGYuICpkIGtyLiAxMDYsMjUgXG4wMzIgMDAgKmEgREJGMjAwMDQ0ICp4IFNGRDIwMDA0NCAqeCBEQVQyMDEzMDggXG4yNDUgMDAgKmEgUG9saWNlICplIHJlZGlnZXJldCBhZiBMYXJzIERhbWtqXHUwMGU2ciBvZyBGaW5uIEVyaWtzZW4gKmYgYmlsbGVkcmVha3Rpb246IGZvcmZhdHRlcm5lIG9nIEFubmUgTGlzYmV0aCBPbHNlbiBcbjI1MCAwMCAqYSAxLiB1ZGdhdmUgKmIgXHUwMGY3ICp4IDMuIG9wbGFnIFxuMjYwIDAwIComIDEgKmEgS2JoLiAqYiBLYWxlaWRvc2NvcGUgKmMgMjAwMCAqayBTcGVjaWFsLVRyeWtrZXJpZXQsIFZpYm9yZyBcbjMwMCAwMCAqYSA2NiBzaWRlciAqYiBpbGwuIFxuNDQwIDAwICowICphIEthbGVpZG9zY29wZXMgc3Byb2dzZXJpZSBcbjUxMiAwMCAqaSBCb2lsZWF1LU5hcmNlamFjIHBzZXVkb255bSBmb3IgKmUgUGllcnJlIEJvaWxlYXUgb2cgVGhvbWFzIE5hcmNlamFjIFxuNTIwIDAwICphIFRpZGxpZ2VyZTogMS4gdWRnYXZlIHVkZW4gc2VyaWViZXRlZ25lbHNlbiBcIkthbGVpZG9zY29wZXMgc3Byb2dzZXJpZVwiLiBLYmguOiBNdW5rc2dcdTAwZTVyZCwgMTk5NC4gKFNwcm9nc2VyaWVuKSBcbjUzMCAwMCAqYSBJbmRob2xkOiBQaWVycmUgQmVsbGVtYXJlOiBKJ2FpIGRhbnNcdTAwZTkgYXZlYyB1bmUgbW9ydGUgOyBMYSBtYWlzb24gZHUgbWFsaGV1ci4gQm9pbGVhdS1OYXJjZWphYzogTm9AVUZDZWwgc3VycHJpc2UgOyBMZSBmdWdpdGlmLiBDbGF1ZGUgSmFzbWluOiBIXHUwMGU5bFx1MDBlOG5lIFBlcnJhdWx0IC0gcnVlIFJvc2x5biBcbjY1MiAwMCAqbiA4MiAqeiAwNCBcbjY1MiAwMCAqbyA4Mi4xIFxuNzAwIDAwICo1IDg3MDk3OSAqNiA2ODE5MzMwMyAqMCAqXHUwMGU1IDYgKmEgRGFta2pcdTAwZTZyICpoIExhcnMgXG43MDAgMDAgKjUgODcwOTc5ICo2IDY4MjQxODIwICowICphIEVyaWtzZW4gKmggRmlubiAqYyBmLiAxOTQzIFxuNzAwIDAwICo1IDg3MDk3OSAqNiA2ODA3MjAzNCAqMCAqYSBCZWxsZW1hcmUgKmggUGllcnJlIFxuNzAwIDAwICpcdTAwZTUgNCAqNSA4NzA5NzkgKjYgNjgxMDY4NDIgKjAgKmEgQm9pbGVhdSAqaCBQaWVycmUgXG43MDAgMDAgKlx1MDBlNSA1ICo1IDg3MDk3OSAqNiA2ODY2ODIwNCAqMCAqYSBOYXJjZWphYyAqaCBUaG9tYXMgXG43MDAgMDAgKjUgODcwOTc5ICo2IDY4NDM0MDI1ICowICphIEphc21pbiAqaCBDbGF1ZGUgXG45MDAgMDAgKjAgKmEgT2xzZW4tRGFta2pcdTAwZTZyICpoIEwuICp6IDcwMC82IFxuOTAwIDAwICowICphIEJvaWxlYXUtTmFyY2VqYWMgKnogNzAwLzQgXG45MDAgMDAgKjAgKmEgQm9pbGVhdS1OYXJjZWphYyAqeiA3MDAvNSBcbiIgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJNZXJnaW5nIGF1dGhvcml0eSBkYXRhIGludG8gcmVjb3JkIChlbnRpcmUgcmVjb3JkLCBtb3JlIDcwMCBmaWVsZHMgYW5kIGFkZGl0aW9uIG9mIHN1YmZpZWxkLCBzb21lIHdpdGggcmVmZXJlbmNlcyBpbiA5MDApIiwgJ1N0cmluZyhNb2RpZnlEYW5NYXJjMi5tZXJnZUF1dGhvcml0eURhdGEoIHJlY29yZCwgYXV0aG9yaXR5UmVjb3JkcyApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMuYXV0UmVjb3JkOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMub3V0cHV0RmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXRTdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLmF1dGhvcml0eVJlY29yZHM7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNb2RpZnlEYW5NYXJjMi5jcmVhdGVTZWVSZWZlcmVuY2VzIiwgZnVuY3Rpb24oICkgewoKICAgIGF1dFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBhdXRGaWVsZCA9IG5ldyBGaWVsZCggIjQwMCIsICIwMCIgKTsKICAgIGF1dEZpZWxkLmFwcGVuZCggImEiLCAiSmVuc2VuIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiaCIsICJIYW5zIE9sZSIgKTsKICAgIGF1dFJlY29yZC5hcHBlbmQoIGF1dEZpZWxkICk7CgogICAgZmllbGROYW1lID0gIjcwMCI7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICI5MDAiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICIwIiwgIiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImEiLCAiSmVuc2VuIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiaCIsICJIYW5zIE9sZSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggInoiLCAiNzAwIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGluZyByZWZlcmVuY2UgZmllbGQgKDkwMCkiLCAnU3RyaW5nKE1vZGlmeURhbk1hcmMyLmNyZWF0ZVNlZVJlZmVyZW5jZXMoIGF1dFJlY29yZCwgZmllbGROYW1lLCByZWNvcmQgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgYXV0UmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGF1dEZpZWxkID0gbmV3IEZpZWxkKCAiNDAwIiwgIjAwIiApOwogICAgYXV0RmllbGQuYXBwZW5kKCAiYSIsICJKZW5zZW4iICk7CiAgICBhdXRGaWVsZC5hcHBlbmQoICJoIiwgIkhhbnMgT2xlIiApOwogICAgYXV0UmVjb3JkLmFwcGVuZCggYXV0RmllbGQgKTsKCiAgICBmaWVsZE5hbWUgPSAiNzAwLzEiOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CgogICAgb3V0cHV0ID0gbmV3IFJlY29yZCggKTsKICAgIG91dHB1dEZpZWxkID0gbmV3IEZpZWxkKCAiOTAwIiwgIjAwIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIkplbnNlbiIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFucyBPbGUiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJ6IiwgIjcwMC8xIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGluZyByZWZlcmVuY2UgZmllbGQgd2l0aCBhZGRpdGlvbiAoOTAwKSIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIuY3JlYXRlU2VlUmVmZXJlbmNlcyggYXV0UmVjb3JkLCBmaWVsZE5hbWUsIHJlY29yZCApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICBkZWxldGUgdGhpcy5hdXRSZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5hdXRGaWVsZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkTmFtZTsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dEZpZWxkOwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTW9kaWZ5RGFuTWFyYzIucmVtb3ZlQXV0aG9yaXR5TGlua3MiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMTAwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiNSIsICI4NzA5NzkiICk7CiAgICBmaWVsZC5hcHBlbmQoICI2IiwgIjY4NzMzMzI0IiApOwogICAgZmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIk11cmFrYW1pIiApOwogICAgZmllbGQuYXBwZW5kKCAiaCIsICJIYXJ1a2kiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IG5ldyBSZWNvcmQoICk7CiAgICBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggIjEwMCIsICIwMCIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYSIsICJNdXJha2FtaSIgKTsKICAgIG91dHB1dEZpZWxkLmFwcGVuZCggImgiLCAiSGFydWtpIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJSZW1vdmluZyBzdWJmaWVsZHMgNSBhbmQgNiBmcm9tIGZpZWxkcyAxMDAgYW5kIDcwMCIsICdTdHJpbmcoTW9kaWZ5RGFuTWFyYzIucmVtb3ZlQXV0aG9yaXR5TGlua3MoIHJlY29yZCApKScsIFN0cmluZyggb3V0cHV0ICkgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dEZpZWxkOwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTW9kaWZ5RGFuTWFyYzIuaW5zZXJ0TjU1RmllbGQiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODEwMDEwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSBuZXcgUmVjb3JkKCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgb3V0cHV0RmllbGQuYXBwZW5kKCAiYiIsICI4MTAwMTAiICk7CiAgICBvdXRwdXQuYXBwZW5kKCBvdXRwdXRGaWVsZCApOwogICAgb3V0cHV0RmllbGQgPSBuZXcgRmllbGQoICJuNTUiLCAiMDAiICk7CiAgICBvdXRwdXRGaWVsZC5hcHBlbmQoICJhIiwgIjIwMTMwMTAxIiApOwogICAgb3V0cHV0LmFwcGVuZCggb3V0cHV0RmllbGQgKTsKICAgIG91dHB1dCA9IG91dHB1dCArICJcbiI7CgogICAgQXNzZXJ0LmVxdWFsKCAiSW5zZXJ0aW5nIGZpZWxkIG41NSB3aXRoIGR1bW15IGRhdGUiLCAnU3RyaW5nKE1vZGlmeURhbk1hcmMyLmluc2VydE41NUZpZWxkKCByZWNvcmQgKSknLCBTdHJpbmcoIG91dHB1dCApICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXRGaWVsZDsKCn0gKTsK","moduleName":"ModifyDanMarc2"},{"javascript":"","moduleName":"Tables"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB0aGF0IHByb2R1Y2VzIGFkbWluaXN0cmF0aXZlIGRhdGEuICovCgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnQWRtaW5EYXRhJyBdOwoKdXNlKCAiTG9nIiApOwp1c2UoICJNYXJjIiApOwp1c2UoICJYbWxOYW1lc3BhY2VzIiApOwp1c2UoICJNYXJjUmVjb3JkIiApOwp1c2UoICJYbWxVdGlsIiApOwp1c2UoICJYbWxFbGVtZW50cyIgKTsKdXNlKCAiUGFsbGVzR2F2ZWJvZENyaXRlcmlhIiApOwp1c2UoICJVdGlsIiApOwoKLyoqCiAqIE1vZHVsZSB0aGF0IHByb2R1Y2VzIGFkbWluaXN0cmF0aXZlIGRhdGEgKFhNTCkgZm9yIHRoZSBkYXRhd2VsbC4KICoKICogQHR5cGUge25hbWVzcGFjZX0KICogQG5hbWVzcGFjZQogKi8KdmFyIEFkbWluRGF0YSA9IGZ1bmN0aW9uKCApIHsKCiAgICB2YXIgZGthYm0gPSBYbWxOYW1lc3BhY2VzLmRrYWJtOwogICAgdmFyIGRjID0gWG1sTmFtZXNwYWNlcy5kYzsKICAgIHZhciB4c2kgPSBYbWxOYW1lc3BhY2VzLnhzaTsKCiAgICB2YXIgdGhhdCA9IHt9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtWG1sLCByZWNvcmQgKQogICAgICogQHBhcmFtIHtPYmplY3R9IGFkbWluSW5mbyBhZG1pbmlzdHJhdGl2ZSBpbmZvcm1hdGlvbjogc3VibWl0dGVyLCBmb3JtYXQsIGxpYnJhcnlUeXBlLCBpc0RlbGV0ZVJlY29yZCwgb25saW5lQWNjZXNzIGFuZCBjcmVhdGlvbkRhdGUKICAgICAqIEBwYXJhbSB7WG1sfSBka2FibVhtbCB0aGUgREtBQk0gWE1MCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gW3JlY29yZF0gQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEByZXR1cm4ge1htbH0geG1sIGVsZW1lbnRzIHdpdGggYWRtaW5pc3RyYXRpdmUgZGF0YSBnYXRoZXJlZCBpbiB0aGUgQWRtaW5EYXRhWG1sIGVsZW1lbnQKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwKICAgICAqLwogICAgdGhhdC5jcmVhdGVBZG1pbkRhdGFYbWwgPSBmdW5jdGlvbiggYWRtaW5JbmZvLCBka2FibVhtbCwgcmVjb3JkICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nIEFkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwiICk7CgogICAgICAgIHZhciBhZG1pbkRhdGFYbWwgPSA8YWRtaW5EYXRhLz47CgogICAgICAgIHZhciBkYXRhV2VsbEN1c3RvbWVyID0gQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBhZG1pbkluZm8uc3VibWl0dGVyLCAiZGF0YVdlbGxDdXN0b21lciIgKTsKICAgICAgICBhZG1pbkluZm8uZGF0YVdlbGxDdXN0b21lciA9ICIiOwogICAgICAgIGlmICggZGF0YVdlbGxDdXN0b21lciA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGFkbWluSW5mbyA9IEFkbWluRGF0YS5tb2RpZnlBZG1pbkluZm9Gb3JEYXRhV2VsbEN1c3RvbWVyKCBhZG1pbkluZm8sIHJlY29yZCApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYWRtaW5JbmZvLmRhdGFXZWxsQ3VzdG9tZXIgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVjb3JkU3RhdHVzID0gImFjdGl2ZSI7CiAgICAgICAgaWYgKCBhZG1pbkluZm8uaXNEZWxldGVSZWNvcmQgPT09IHRydWUgKSB7CiAgICAgICAgICAgIHJlY29yZFN0YXR1cyA9ICJkZWxldGUiOwogICAgICAgIH0KICAgICAgICB2YXIgcmVjb3JkU3RhdHVzWG1sID0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggcmVjb3JkU3RhdHVzLCAicmVjb3JkU3RhdHVzIiApOwogICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggcmVjb3JkU3RhdHVzWG1sICk7CgogICAgICAgIGlmICggYWRtaW5JbmZvLmNyZWF0aW9uRGF0ZSAhPT0gIiIgKSB7CiAgICAgICAgICAgIHZhciBjcmVhdGlvbkRhdGVYbWwgPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBhZG1pbkluZm8uY3JlYXRpb25EYXRlLCAiY3JlYXRpb25EYXRlIiApOwogICAgICAgICAgICBhZG1pbkRhdGFYbWwuYXBwZW5kQ2hpbGQoIGNyZWF0aW9uRGF0ZVhtbCApOwogICAgICAgIH0KCiAgICAgICAgaWYgKCBhZG1pbkluZm8uZGF0YVdlbGxDdXN0b21lciA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgdmFyIGRhdGFXZWxsQ3VzdG9tZXJYbWwgPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCAidHJ1ZSIsICJkYXRhV2VsbEN1c3RvbWVyIiApOwogICAgICAgICAgICBhZG1pbkRhdGFYbWwuYXBwZW5kQ2hpbGQoIGRhdGFXZWxsQ3VzdG9tZXJYbWwgKTsKICAgICAgICB9CgogICAgICAgIHZhciBsaWJyYXJ5VHlwZVhtbCA9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGFkbWluSW5mby5saWJyYXJ5VHlwZSwgImxpYnJhcnlUeXBlIiApOwogICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggbGlicmFyeVR5cGVYbWwgKTsKCiAgICAgICAgaWYgKCBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIGFkbWluSW5mby5zdWJtaXR0ZXIsICJub25GaWN0aW9uU3VibWl0dGVyIiApID09PSB0cnVlICkgewogICAgICAgICAgICB2YXIgZ2VucmVYbWwgPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCAibm9uZmlrdGlvbiIsICJnZW5yZSIgKTsKICAgICAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBnZW5yZVhtbCApOwogICAgICAgIH0KCiAgICAgICAgdmFyIGluZGV4aW5nQWxpYXNYbWwgPSBBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCggYWRtaW5JbmZvICk7CiAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBpbmRleGluZ0FsaWFzWG1sICk7CgogICAgICAgIHZhciBhY2Nlc3NUeXBlcyA9IEFkbWluRGF0YS5nZXRBY2Nlc3NUeXBlKCBhZG1pbkluZm8uc3VibWl0dGVyLCBhZG1pbkluZm8ub25saW5lQWNjZXNzLCByZWNvcmQgKTsKICAgICAgICBpZiAoIGFjY2Vzc1R5cGVzWyAwIF0gPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgLy9UT0RPOiBhZGQgdW5pdCB0ZXN0IGZvciB0aGlzIGNhc2UKICAgICAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCAibm9uZSIsICJhY2Nlc3NUeXBlIiApICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgYWNjZXNzVHlwZXMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICBhZG1pbkRhdGFYbWwuYXBwZW5kQ2hpbGQoIFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGFjY2Vzc1R5cGVzWyBpIF0sICJhY2Nlc3NUeXBlIiApICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggcmVjb3JkICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIHZhciBnZW5yZSA9IEFkbWluRGF0YS5jcmVhdGVHZW5yZSggcmVjb3JkICk7CiAgICAgICAgICAgIGlmICggZ2VucmUgIT09ICIiICkgewogICAgICAgICAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBnZW5yZSwgImdlbnJlIiApICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciB3b3JrVHlwZXMgPSBBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gd29ya1R5cGVzICkgewogICAgICAgICAgICBhZG1pbkRhdGFYbWwuYXBwZW5kQ2hpbGQoIFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHdvcmtUeXBlc1sgYSBdLCAid29ya1R5cGUiICkgKTsKICAgICAgICB9CgogICAgICAgIC8vVE9ETzogbWF5YmUgc2VuZCB3aG9sZSBhZG1pbkluZm8gb2JqZWN0IGluc3RlYWQgb2Ygc2luZ2xlIHByb3BlcnRpZXMKICAgICAgICB2YXIgY29sbGVjdGlvbklkZW50aWZpZXJzID0gQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggYWRtaW5JbmZvLnN1Ym1pdHRlciwgYWRtaW5JbmZvLmZvcm1hdCwgYWRtaW5JbmZvLm9ubGluZUFjY2VzcywgYWRtaW5JbmZvLmxpYnJhcnlUeXBlLCByZWNvcmQgKTsKICAgICAgICBmb3IgKCB2YXIgYiBpbiBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKSB7CiAgICAgICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggY29sbGVjdGlvbklkZW50aWZpZXJzWyBiIF0sICJjb2xsZWN0aW9uSWRlbnRpZmllciIgKSApOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sIiApOwoKICAgICAgICByZXR1cm4gYWRtaW5EYXRhWG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIG9iamVjdCB3aXRoIGFkbWluIGRhdGEgZm9yIGEgbWFyYyByZWNvcmQgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGFuIGFkZGkgcmVjb3JkCiAgICAgKiBmb3IgaW5zZXJ0aW5nIGludG8gYSBkYXRhd2VsbC4KICAgICAqICAKICAgICAqIENvbnRhaW5zIGZvbGxvd2luZyBwcm9wZXJ0aWVzOgogICAgICogIAogICAgICogKiBzdWJtaXR0ZXIKICAgICAqICogZm9ybWF0CiAgICAgKiAqIGlkZW50aWZpZXIKICAgICAqICogaXNEZWxldGVSZWNvcmQKICAgICAqICogb25saW5lQWNjZXNzCiAgICAgKiAqIGxpYnJhcnlUeXBlCiAgICAgKiAqIGNyZWF0aW9uRGF0ZQogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY3JlYXRlQWRtaW5JbmZvKCBzdWJtaXR0ZXJGb3JtYXQsIGlkZW50aWZpZXIsIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3VibWl0dGVyRm9ybWF0IEFuIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHN1Ym1pdHRlciBhbmQgZm9ybWF0CiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRlbnRpZmllciBpZGVudGlmaWVyIGZvciB0aGUgbWFyYyByZWNvcmQgCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtTdHJpbmd9IFtjcmVhdGlvbkRhdGVdIFRoZSBjcmVhdGlvbiBkYXRlIG9mIHRoZSByZWNvcmQgYXMgeXl5eW1tZGQgKHVzZWQgaW4gRkJTIFJSMkJyb2VuZCBmbG93KQogICAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgYWRtaW5JbmZvIG9iamVjdCBhY2NvcmRpbmcgdG8gZGVzY3JpcHRpb24KICAgICAqIEBuYW1lIEFkbWluRGF0YS5jcmVhdGVBZG1pbkluZm8KICAgICAqLwogICAgdGhhdC5jcmVhdGVBZG1pbkluZm8gPSBmdW5jdGlvbiggc3VibWl0dGVyRm9ybWF0LCBpZGVudGlmaWVyLCByZWNvcmQsIGNyZWF0aW9uRGF0ZSApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogQWRtaW5EYXRhLmNyZWF0ZUFkbWluSW5mbyBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIGFkbWluSW5mbyA9IHt9OwogICAgICAgIGFkbWluSW5mby5zdWJtaXR0ZXIgPSBzdWJtaXR0ZXJGb3JtYXQuc3VibWl0dGVyOwogICAgICAgIGFkbWluSW5mby5mb3JtYXQgPSBzdWJtaXR0ZXJGb3JtYXQuZm9ybWF0CgogICAgICAgIHZhciBpc0RlbGV0ZVJlY29yZCA9IGZhbHNlOwoKICAgICAgICAvL0FzIHRoZXJlIGNhbiBiZSBtb3JlIHRoYW4gb25lIGZpZWxkIDAwNCBhdCB0aGlzIG1vbWVudCwgdGhpcyB1bmlxaWZpZXMgY29udGVudCBpIDAwNHIuIElmIGl0IGlzIGRpZmZlcmVudCwgdGhlIHJlY29yZCB3aWxsIGZhaWwgbGF0ZXIuCiAgICAgICAgdmFyIHZhbHVlMDA0clVuaXF1ZSA9IFV0aWwudW5pcXVlVmFsdWVzKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDQvLCAvci8sICIsIiApLnNwbGl0KCAiLCIgKSApOwogICAgICAgIGlmICggMSA9PT0gdmFsdWUwMDRyVW5pcXVlLmxlbmd0aCAmJiAiZCIgPT09IHZhbHVlMDA0clVuaXF1ZVsgMCBdICkgewogICAgICAgICAgICBpc0RlbGV0ZVJlY29yZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIGFkbWluSW5mby5mb3JtYXQgPT0gImJhc2lzIiAmJiByZWNvcmQuZ2V0VmFsdWUoIC9zMTEvLCAvYS8gKS5tYXRjaCggL1swMV0vICkgKSB7CiAgICAgICAgICAgIGlzRGVsZXRlUmVjb3JkID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGFkbWluSW5mby5pc0RlbGV0ZVJlY29yZCA9IGlzRGVsZXRlUmVjb3JkOwoKICAgICAgICB2YXIgb25saW5lQWNjZXNzID0gIiI7CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzAzMi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAveC8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViRmllbGQgKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBTdHJpbmcoIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAvSURVLisvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgb25saW5lQWNjZXNzID0gIm5vdCBhdmFpbGFibGUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICkKICAgICAgICB9ICk7CiAgICAgICAgYWRtaW5JbmZvLm9ubGluZUFjY2VzcyA9IG9ubGluZUFjY2VzczsKCiAgICAgICAgYWRtaW5JbmZvLmxpYnJhcnlUeXBlID0gQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlKCBhZG1pbkluZm8uc3VibWl0dGVyICk7CgogICAgICAgIGlmICggdHJ1ZSAhPT0gc3VibWl0dGVyRm9ybWF0LnJhdyApIHsKICAgICAgICAgICAgaWYgKCBudWxsICE9PSByZWNvcmQuZ2V0VmFsdWUoIC8wMzIvLCAveC8gKS5tYXRjaCggL0FDQzk5OTk5OS8gKSApIHsKICAgICAgICAgICAgICAgIGFkbWluSW5mby5jcmVhdGlvbkRhdGUgPSByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvZC8gKS5yZXBsYWNlKCAvKFxkezR9KShcZHsyfSkoXGR7Mn0pLywgIiQxLSQyLSQzIiApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYWRtaW5JbmZvLmNyZWF0aW9uRGF0ZSA9IEFkbWluRGF0YS5nZXRDcmVhdGlvbkRhdGUoIGFkbWluSW5mby5zdWJtaXR0ZXIsIHJlY29yZCApOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9UT0RPOiBjb2RlIGNvdWxkIGJlIHNhZmVyLCBtb3JlIHRlc3RpbmcgaWYgd2UgaGF2ZSBhIGNyZWF0aW9uRGF0ZSAoYW5kIGluIHJpZ2h0IGZvcm1hdCkKICAgICAgICAgICAgYWRtaW5JbmZvLmNyZWF0aW9uRGF0ZSA9IGNyZWF0aW9uRGF0ZS5yZXBsYWNlKCAvKFxkezR9KShcZHsyfSkoXGR7Mn0pLywgIiQxLSQyLSQzIiApOwogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBBZG1pbkRhdGEuY3JlYXRlQWRtaW5JbmZvIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4gYWRtaW5JbmZvOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBtb2RpZmllcyBhZG1pbiBpbmZvIGZvciBhIGRhdGFXZWxsQ3VzdG9tZXIuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLm1vZGlmeUFkbWluSW5mb0ZvckRhdGFXZWxsQ3VzdG9tZXIoIGFkbWluSW5mbywgcmVjb3JkICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhZG1pbkluZm8gVGhlIHN1Ym1pdHRlciBvZiBkYXRhCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIFRoZSBtYXJjIHJlY29yZCBvYmplY3QgCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSB1cGRhdGVkIGFkbWluSW5mbyBvYmplY3QKICAgICAqIEBleGFtcGxlIEFkbWluRGF0YS5tb2RpZnlBZG1pbkluZm9Gb3JEYXRhV2VsbEN1c3RvbWVyKCBhZG1pbkluZm8sIHJlY29yZCApCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lcgogICAgICovCiAgICB0aGF0Lm1vZGlmeUFkbWluSW5mb0ZvckRhdGFXZWxsQ3VzdG9tZXIgPSBmdW5jdGlvbiggYWRtaW5JbmZvLCByZWNvcmQgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5tb2RpZnlBZG1pbkluZm9Gb3JEYXRhV2VsbEN1c3RvbWVyIiApOwoKICAgICAgICB2YXIgaG9sZGluZ3NGcm9tRGF0YVdlbGxDdXN0b21lciA9IHRydWU7CiAgICAgICAgaWYgKCBhZG1pbkluZm8uc3VibWl0dGVyID09PSAiODMwMDYwIiApIHsKICAgICAgICAgICAgaG9sZGluZ3NGcm9tRGF0YVdlbGxDdXN0b21lciA9IEFkbWluRGF0YS5jaGVja0hvbGRpbmdzKCByZWNvcmQsICI4MzAwNjAiICk7CiAgICAgICAgfQogICAgICAgIGlmICggaG9sZGluZ3NGcm9tRGF0YVdlbGxDdXN0b21lciA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgYWRtaW5JbmZvLmRhdGFXZWxsQ3VzdG9tZXIgPSB0cnVlOwogICAgICAgIH0KICAgICAgICB2YXIgaGFzSG9sZGluZyA9IE1hcmNSZWNvcmQuZXhpc3RTdWJmaWVsZEluRmllbGQoIHJlY29yZCwgWyAiMDk2IiBdLCBbICJ6IiBdICk7CiAgICAgICAgaWYgKCBhZG1pbkluZm8uc3VibWl0dGVyID09PSAiODMwMDYwIiAmJiBob2xkaW5nc0Zyb21EYXRhV2VsbEN1c3RvbWVyID09PSBmYWxzZSAmJiBoYXNIb2xkaW5nID09PSB0cnVlICYmIHJlY29yZC5leGlzdEZpZWxkKCAvczExLyApICkgewogICAgICAgICAgICBhZG1pbkluZm8uaXNEZWxldGVSZWNvcmQgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciIgKTsKCiAgICAgICAgcmV0dXJuIGFkbWluSW5mbzsKCiAgICB9OwoKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgdGhlIHdvcmsgdHlwZSBvZiB0aGUgZGF0YSAobGl0ZXJhdHVyZSwgbXVzaWMsIG1vdmllIGV0Yy4pIGJhc2VkIG9uIHRoZSBtYXRlcmlhbCB0eXBlIChES0FCTSkuCiAgICAgKgogICAgICoKICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlKCBka2FibVhtbCApCiAgICAgKiBAcGFyYW0ge1htbH0gZGthYm1YbWwgVGhlIERLQUJNIHJlY29yZAogICAgICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIHdvcmsgdHlwZXMKICAgICAqIEBuYW1lIEFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZQogICAgICogQG1ldGhvZAogICAgICovCiAgICB0aGF0LmNyZWF0ZVdvcmtUeXBlID0gZnVuY3Rpb24oIGRrYWJtWG1sICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nIEFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSIgKTsKCiAgICAgICAgdmFyIHdvcmtUeXBlcyA9IHsKICAgICAgICAgICAgIkJpbGxlZGJvZyI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkJvZyI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkJvZyBzdG9yIHNrcmlmdCI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkRpc2tldHRlIjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiRFRCb29rIjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiRHZkLXJvbSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkVib2ciOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJMeWRib2cgKGJcdTAwZTVuZCkiOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJMeWRib2cgKGNkKSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkx5ZGJvZyAobmV0KSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkx5ZGJvZyAoY2QtbXAzKSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIk5ldGRva3VtZW50IjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiUHVua3Rza3JpZnQiOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJUZWduZXNlcmllIjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiR3JhcGhpYyBub3ZlbCI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIlx1MDBDNXJib2ciOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJBdmlzIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJBdmlzIChuZXQpIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJUaWRzc2tyaWZ0IjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJUaWRzc2tyaWZ0IChuZXQpIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJQZXJpb2Rpa3VtIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJQZXJpb2Rpa3VtIChuZXQpIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJCbHUtcmF5IjogIm1vdmllIiwKICAgICAgICAgICAgIkR2ZCI6ICJtb3ZpZSIsCiAgICAgICAgICAgICJCaW9ncmFmZmlsbSI6ICJtb3ZpZSIsCiAgICAgICAgICAgICJGaWxtIjogIm1vdmllIiwKICAgICAgICAgICAgIkZpbG0gKG5ldCkiOiAibW92aWUiLAogICAgICAgICAgICAiVmlkZW8iOiAibW92aWUiLAogICAgICAgICAgICAiQlx1MDBlNW5kIjogIm11c2ljIiwKICAgICAgICAgICAgIkNkIChtdXNpaykiOiAibXVzaWMiLAogICAgICAgICAgICAiR3JhbW1vZm9ucGxhZGUiOiAibXVzaWMiLAogICAgICAgICAgICAiTWluaSBkaXNjIjogIm11c2ljIiwKICAgICAgICAgICAgIk11c2lrIChuZXQpIjogIm11c2ljIiwKICAgICAgICAgICAgIk11c2lrdHJhY2sgKG5ldCkiOiAidHJhY2siLAogICAgICAgICAgICAiR2FtZUJveSI6ICJnYW1lIiwKICAgICAgICAgICAgIkdhbWVCb3kgQWR2YW5jZSI6ICJnYW1lIiwKICAgICAgICAgICAgIk5pbnRlbmRvIERTIjogImdhbWUiLAogICAgICAgICAgICAiUGMtc3BpbCI6ICJnYW1lIiwKICAgICAgICAgICAgIlBjLXNwaWwgKG5ldCkiOiAiZ2FtZSIsCiAgICAgICAgICAgICJQbGF5c3RhdGlvbiI6ICJnYW1lIiwKICAgICAgICAgICAgIlBTUCI6ICJnYW1lIiwKICAgICAgICAgICAgIldpaSI6ICJnYW1lIiwKICAgICAgICAgICAgIlhib3giOiAiZ2FtZSIsCiAgICAgICAgICAgICJBcnRpa2VsIjogImFydGljbGUiLAogICAgICAgICAgICAiQXZpc2FydGlrZWwiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJUaWRzc2tyaWZ0c2FydGlrZWwiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJOb2RlIjogInNoZWV0bXVzaWMiLAogICAgICAgICAgICAiRS1ub2RlIjogInNoZWV0bXVzaWMiLAogICAgICAgICAgICAiS29ydCI6ICJtYXAiLAogICAgICAgICAgICAiRS1rb3J0IjogIm1hcCIsCiAgICAgICAgICAgICJBbm1lbGRlbHNlIjogInJldmlldyIsCiAgICAgICAgICAgICJPbXRhbGUiOiAiYm9va2Rlc2NyaXB0aW9uIgogICAgICAgIH07CgogICAgICAgIHZhciBjaGlsZDsKICAgICAgICB2YXIgY3JlYXRlZFdvcmtUeXBlcyA9IFsgXTsKCiAgICAgICAgZm9yIGVhY2goIGNoaWxkIGluICggZGthYm1YbWwuZGM6OnR5cGUgKSApIHsKICAgICAgICAgICAgaWYgKCBTdHJpbmcoIGNoaWxkLkB4c2k6OnR5cGUgKS5tYXRjaCggImRrZGNwbHVzOkJpYkRLLVR5cGUiICkgJiYgIVN0cmluZyggZGthYm1YbWwuZGM6OnN1YmplY3QgKS5tYXRjaCggL29yZmF0dGVycG9ydHIvICkgKSB7CiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IEFkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSggU3RyaW5nKCBjaGlsZCApICk7CiAgICAgICAgICAgICAgICBpZiAoIHR5cGUgIT09ICJTYW1tZW5zYXQgbWF0ZXJpYWxlIiAmJiB3b3JrVHlwZXNbIHR5cGUgXSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRXb3JrVHlwZXMucHVzaCggd29ya1R5cGVzWyB0eXBlIF0gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy9hZGRpbmcgd29ya1R5cGVzIGJhc2VkIG9uIGRjOnN1YmplY3QgZWxlbWVudHMKICAgICAgICBpZiAoIFN0cmluZyggZGthYm1YbWwuZGM6OnN1YmplY3QgKS5tYXRjaCggL2xpdHRlcmF0dXJhbmFseXNlLyApICkgewogICAgICAgICAgICBjcmVhdGVkV29ya1R5cGVzLnB1c2goICJhbmFseXNpcyIgKTsKICAgICAgICB9CiAgICAgICAgaWYgKCBTdHJpbmcoIGRrYWJtWG1sLmRjOjpzdWJqZWN0ICkubWF0Y2goIC9vcmZhdHRlcnBvcnRyLyApICkgewogICAgICAgICAgICBjcmVhdGVkV29ya1R5cGVzLnB1c2goICJwb3J0cmFpdCIgKTsKICAgICAgICB9CiAgICAgICAgLy9pbiBjYXNlIG5vIHdvcmt0eXBlIGhhcyBiZWVuIGZvdW5kIHlldCwgc2V0IGl0IHRvICJub25lIgogICAgICAgIGlmICggY3JlYXRlZFdvcmtUeXBlcy5sZW5ndGggPT09IDAgKSB7CiAgICAgICAgICAgIGNyZWF0ZWRXb3JrVHlwZXMucHVzaCggIm5vbmUiICk7CiAgICAgICAgfQoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmcgQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIiApOwoKICAgICAgICByZXR1cm4gY3JlYXRlZFdvcmtUeXBlczsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgdHJhbnNmb3JtcyBzcGVjaWZpYyBtYXRlcmlhbHR5cGVzIGludG8gbW9yZSBnZW5lcmFsIG1hdGVyaWFsdHlwZXMKICAgICAqIHNvIHRoYXQgdGhlIG1hdGVyaWFsdHlwZSBjYW4gYmUgbG9va2VkIHVwIGluIGEgdGFibGUgdGhhdCBkb2VzIG5vdAogICAgICogbmVjZXNzYXJpbHkgaGF2ZSBhbGwgc3BlY2lmaWMgdHlwZXMgbGlzdGVkCiAgICAgKiBlLmcuIFBsYXlzdGF0aW9uIDMgYW5kIFBsYXlzdGF0aW9uIDQgYXJlIGJvdGggdHJhbnNmb3JtZWQgaW50bwogICAgICogIlBsYXlzdGF0aW9uIiBhcyBtYXRlcmlhbHR5cGUgdG8gbG9vayB1cAogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSggbWF0ZXJpYWxUeXBlICkKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXRlcmlhbFR5cGUgVGhlIG1hdGVyaWFsdHlwZSB0byBtb2RpZnkKICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIG1vZGlmaWVkIG1hdGVyaWFsdHlwZQogICAgICogQGV4YW1wbGUgQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlKCAiUGxheXN0YXRpb24gNCIgKQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlCiAgICAgKi8KICAgIHRoYXQuY2xlYW5NYXRlcmlhbFR5cGUgPSBmdW5jdGlvbiggbWF0ZXJpYWxUeXBlICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBBZG1pbkRhdGEuY2xlYW5NYXRlcmlhbFR5cGUiICk7CgogICAgICAgIGlmICggbWF0ZXJpYWxUeXBlLm1hdGNoKCAvcGxheXN0YXRpb24vaSApICkgewogICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSAiUGxheXN0YXRpb24iOwogICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsVHlwZS5tYXRjaCggL3hib3gvaSApICkgewogICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSAiWGJveCI7CiAgICAgICAgfSBlbHNlIGlmICggbWF0ZXJpYWxUeXBlLm1hdGNoKCAvd2lpL2kgKSApIHsKICAgICAgICAgICAgbWF0ZXJpYWxUeXBlID0gIldpaSI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbWF0ZXJpYWxUeXBlID0gbWF0ZXJpYWxUeXBlOwogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBBZG1pbkRhdGEuY2xlYW5NYXRlcmlhbFR5cGUiICk7CgogICAgICAgIHJldHVybiBtYXRlcmlhbFR5cGU7CgogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBmaW5kcyB0aGUgbGlicmFyeSB0eXBlIG9mIGEgcmVjb3JkIGJhc2VkIG9uIHN1Ym1pdHRlci4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUoIHN1Ym1pdHRlciApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VibWl0dGVyIFRoZSBzdWJtaXR0ZXIgb2YgdGhlIHJlY29yZAogICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgbGlicmFyeSB0eXBlCiAgICAgKiBAZXhhbXBsZSBBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUoICI3MTAxMDAiICkKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZQogICAgICovCiAgICB0aGF0LmdldExpYnJhcnlUeXBlID0gZnVuY3Rpb24oIHN1Ym1pdHRlciApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlIG1ldGhvZCIgKTsKCiAgICAgICAgdmFyIGxpYnJhcnlUeXBlID0gIm5vbmUiOwogICAgICAgIGlmICggQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsICJzY2hvb2xMaWJyYXJ5IiApICkgewogICAgICAgICAgICBsaWJyYXJ5VHlwZSA9ICJzY2hvb2wiOwogICAgICAgIH0gZWxzZSBpZiAoIEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCAicHVibGljTGlicmFyeSIgKSApIHsKICAgICAgICAgICAgbGlicmFyeVR5cGUgPSAicHVibGljIjsKICAgICAgICB9IGVsc2UgaWYgKCBzdWJtaXR0ZXIubWF0Y2goIC9eOFxkfF4xMlxkLyApICYmICFzdWJtaXR0ZXIubWF0Y2goIC9eODcwOTcvICkgKSB7CiAgICAgICAgICAgIGxpYnJhcnlUeXBlID0gInJlc2VhcmNoIjsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlIG1ldGhvZCIgKTsKCiAgICAgICAgcmV0dXJuIGxpYnJhcnlUeXBlOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBmaW5kcyB0aGUgY3JlYXRpb24gZGF0ZSBvZiBhIG1hcmMgcmVjb3JkIGVpdGhlciBmcm9tIHRoZSByZWNvcmQgaXRzZWxmIG9yIAogICAgICogZnJvbSB0aGUgZGF0YWJhc2UgdGhhdCB0aGUgcmVjb3JkIGNvbWVzIGZyb20KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlKCBzdWJtaXR0ZXIsIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VibWl0dGVyIFRoZSBzdWJtaXR0ZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtSZWNvcmR9IFtyZWNvcmRdIFRoZSBtYXJjIHJlY29yZCBvYmplY3QgaWYgaXQgZXhpc3RzCiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBjcmVhdGlvbiBkYXRlIG9mIHRoZSByZWNvcmQKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5nZXRDcmVhdGlvbkRhdGUKICAgICAqLwogICAgdGhhdC5nZXRDcmVhdGlvbkRhdGUgPSBmdW5jdGlvbiggc3VibWl0dGVyLCByZWNvcmQgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5nZXRDcmVhdGlvbkRhdGUgbWV0aG9kIiApOwoKICAgICAgICB2YXIgY3JlYXRpb25EYXRlID0gIiI7CgogICAgICAgIGlmICggcmVjb3JkLmV4aXN0RmllbGQoIC9uNTUvICkgKSB7CiAgICAgICAgICAgIGNyZWF0aW9uRGF0ZSA9IHJlY29yZC5nZXRWYWx1ZSggL241NS8sIC9hLyApLnJlcGxhY2UoIC8oXGR7NH0pKFxkezJ9KShcZHsyfSkvLCAiJDEtJDItJDMiICk7CiAgICAgICAgfSBlbHNlIGlmICggc3VibWl0dGVyID09PSAiMTUwMDA4IiApIHsKICAgICAgICAgICAgY3JlYXRpb25EYXRlID0gcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2QvICkucmVwbGFjZSggLyhcZHs0fSkoXGR7Mn0pKFxkezJ9KS8sICIkMS0kMi0kMyIgKTsKICAgICAgICB9IGVsc2UgaWYgKCBzdWJtaXR0ZXIubWF0Y2goIC9eOC8gKSApIHsKICAgICAgICAgICAgaWYgKCBkYXRhYmFzZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgY3JlYXRpb25EYXRlID0gZGF0YWJhc2UuZ2V0Q3JlYXRpb25EYXRlKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYS8gKSwgc3VibWl0dGVyICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjcmVhdGlvbkRhdGUgPSByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvZC8gKS5yZXBsYWNlKCAvKFxkezR9KShcZHsyfSkoXGR7Mn0pLywgIiQxLSQyLSQzIiApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNyZWF0aW9uRGF0ZSA9IGNyZWF0aW9uRGF0ZS5yZXBsYWNlKCAvKFxkezR9KShcZHsyfSkoXGR7Mn0pLywgIiQxLSQyLSQzIiApOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlIG1ldGhvZCIgKTsKCiAgICAgICAgcmV0dXJuIGNyZWF0aW9uRGF0ZTsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyB0aGUgeG1sIGVsZW1lbnQgd2l0aCBpbmRleGluZ0FsaWFzIGZvciB0aGUgcmVjb3JkIGJhc2VkIG9uIHN1Ym1pdHRlciBhbmQgZm9ybWF0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5jcmVhdGVJbmRleGluZ0FsaWFzWG1sKCBhZG1pbkluZm8gKQogICAgICogQHBhcmFtIHtPYmplY3R9IGFkbWluSW5mbyBUaGUgYWRtaW5JbmZvIG9iamVjdCBmb3IgdGhlIHJlY29yZAogICAgICogQHJldHVybiB7WE1MfSBpbmRleGluZ0FsaWFzWG1sCiAgICAgKiBAZXhhbXBsZSBBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCggeyAiZm9ybWF0IjogImJhc2lzIiwgInN1Ym1pdHRlciI6ICI4NzA5NzAiIH0gKQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLmNyZWF0ZUluZGV4aW5nQWxpYXNYbWwKICAgICAqLwogICAgdGhhdC5jcmVhdGVJbmRleGluZ0FsaWFzWG1sID0gZnVuY3Rpb24oIGFkbWluSW5mbyApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmNyZWF0ZUluZGV4aW5nQWxpYXNYbWwiICk7CgogICAgICAgIHZhciBpbmRleGluZ0FsaWFzWG1sID0gPGluZGV4aW5nQWxpYXMvPjsKICAgICAgICBzd2l0Y2ggKCBhZG1pbkluZm8uZm9ybWF0ICkgewogICAgICAgICAgICBjYXNlICJrYXRhbG9nIjoKICAgICAgICAgICAgY2FzZSAiYmFzaXMiOgogICAgICAgICAgICBjYXNlICJsb2thbGJpYmwiOgogICAgICAgICAgICAgICAgaW5kZXhpbmdBbGlhc1htbC4qICs9ICJkYW5tYXJjeGNoYW5nZSI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiYW5tZWxkIjoKICAgICAgICAgICAgICAgIGluZGV4aW5nQWxpYXNYbWwuKiArPSAicmV2aWV3IjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJmb3JsYWciOgogICAgICAgICAgICAgICAgaW5kZXhpbmdBbGlhc1htbC4qICs9ICJka2FibSI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHN3aXRjaCAoIGFkbWluSW5mby5zdWJtaXR0ZXIgKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiODcwOTcwIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICI4NzA5NzEiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjg3MDk3OCI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDA4IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMTUiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAzNiI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDM4IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwNDQiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDA1NyI6CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4aW5nQWxpYXNYbWwuKiArPSAiZGFubWFyY3hjaGFuZ2UiOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICI4NzA5NzYiOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGluZ0FsaWFzWG1sLiogKz0gInJldmlldyI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAwNSI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDEyIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMTQiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAxOCI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDIzIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMjkiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAzMSI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDMzIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwNDEiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDA0MiI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDQzIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwNDYiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDA0OSI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDU4IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwNTkiOgkJCQkJCiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4aW5nQWxpYXNYbWwuKiArPSAiZGthYm0iOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAiQWxpYXMgZm9yIHN1Ym1pdHRlcjogJyIgKyBhZG1pbkluZm8uc3VibWl0dGVyICsgIicgYW5kIGZvcm1hdDogJyIgKyBhZG1pbkluZm8uZm9ybWF0ICsgIicgbm90IGZvdW5kIjsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmNyZWF0ZUluZGV4aW5nQWxpYXNYbWwiICk7CgogICAgICAgIHJldHVybiBpbmRleGluZ0FsaWFzWG1sOwoKICAgIH07CgoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIGhvbGRpbmdzIGJhc2VkIG9uIGZpZWxkIDA5NiBzdWJmaWVsZCB6LgogICAgICogCiAgICAgKiBGb3IgaW5zdGFuY2UgaXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIG9ubHkgc3ViLWRlcGFydG1lbnRzIG9mIGEgUEggbGlicmFyeQogICAgICogYXJlIHVzaW5nIHRoaXMgcmVjb3JkIGFuZCBub3QgdGhlIHN1Ym1pdHRpbmcgUEggbGlicmFyeSBpdHNlbGYuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MoIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkIFRoZSBtYXJjIHJlY29yZAogICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MKICAgICAqLwogICAgdGhhdC5jaGVja0hvbGRpbmdzID0gZnVuY3Rpb24oIHJlY29yZCwgaG9sZGluZyApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MiICk7CgogICAgICAgIHZhciBoYXNIb2xkaW5ncyA9IGZhbHNlOwogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wOTYvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGlmICggZmllbGQuZ2V0VmFsdWUoIC96LyApID09IGhvbGRpbmcgKSB7CiAgICAgICAgICAgICAgICBoYXNIb2xkaW5ncyA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MiICk7CgogICAgICAgIHJldHVybiBoYXNIb2xkaW5nczsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIHdoZXRoZXIgYSBzdWJtaXR0ZXIgaGFzIGEgc3BlY2lhbCB0eXBlLCBmb3IgaW5zdGFuY2UgZGF0YVdlbGxDdXN0b21lciBvciBub25GaWN0aW9uU3VibWl0dGVyLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCB0eXBlICkKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJtaXR0ZXIgVGhlIHN1Ym1pdHRlciBvZiBkYXRhCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiB0aGUgc3VibWl0dGVyIHRvIGNoZWNrIGZvciAKICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgb3IgZmFsc2UKICAgICAqIEBleGFtcGxlIEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggIjgzMDA2MCIsICJkYXRhV2VsbEN1c3RvbWVyIiApCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIKICAgICAqLwogICAgdGhhdC5jaGVja1R5cGVPZlN1Ym1pdHRlciA9IGZ1bmN0aW9uKCBzdWJtaXR0ZXIsIHR5cGUgKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyIG1ldGhvZCIgKTsKCiAgICAgICAgdmFyIHR5cGVPZlN1Ym1pdHRlcjsKICAgICAgICB2YXIgZGF0YVdlbGxDdXN0b21lcnMgPSBbICI4MzAwNjAiLCAiODMwMTkwIiwgIjgzMDM3MCIsICI4MzAzODAiLCAiODMwNjkwIiwgIjgzMTAyMCIgXTsKICAgICAgICB2YXIgbm9uRmljdGlvblN1Ym1pdHRlcnMgPSBbICIxNTAwMDUiLCAiMTUwMDEyIiwgIjE1MDAxOCIsICIxNTAwMjMiLCAiMTUwMDI5IiwgIjE1MDAzMSIsICIxNTAwMzMiLCAiMTUwMDQyIiwgIjE1MDA0MyIsICIxNTAwNDYiLCAiMTUwMDQ5IiwgIjE1MDA1OCIgXTsKCiAgICAgICAgdmFyIHB1YmxpY0xpYnJhcnkgPSAvXjdbMC05XXs1fSQvOwogICAgICAgIHZhciBzY2hvb2xMaWJyYXJ5ID0gL142WzAtOV17NX0kfF4yOFswLTldezR9JC87CgogICAgICAgIHZhciBjaGVja0FycmF5ID0gWyBdOwogICAgICAgIHZhciBjaGVja1JlZ0V4OwoKICAgICAgICBzd2l0Y2ggKCB0eXBlICkgewogICAgICAgICAgICBjYXNlICJkYXRhV2VsbEN1c3RvbWVyIjoKICAgICAgICAgICAgICAgIGNoZWNrQXJyYXkgPSBkYXRhV2VsbEN1c3RvbWVyczsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJub25GaWN0aW9uU3VibWl0dGVyIjoKICAgICAgICAgICAgICAgIGNoZWNrQXJyYXkgPSBub25GaWN0aW9uU3VibWl0dGVyczsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJwdWJsaWNMaWJyYXJ5IjoKICAgICAgICAgICAgICAgIGNoZWNrUmVnRXggPSBwdWJsaWNMaWJyYXJ5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgInNjaG9vbExpYnJhcnkiOgogICAgICAgICAgICAgICAgY2hlY2tSZWdFeCA9IHNjaG9vbExpYnJhcnk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIExvZy53YXJuKCAiVGhlIHN1Ym1pdHRlciB0eXBlICIgKyB0eXBlICsgIiBpcyB1bmtub3duLiIgKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKCBjaGVja1JlZ0V4ICE9PSB1bmRlZmluZWQgJiYgc3VibWl0dGVyLm1hdGNoKCBjaGVja1JlZ0V4ICkgKSB7CiAgICAgICAgICAgIHR5cGVPZlN1Ym1pdHRlciA9IHRydWU7CiAgICAgICAgfSBlbHNlIGlmICggY2hlY2tBcnJheS5pbmRleE9mKCBzdWJtaXR0ZXIgKSA+IC0xICkgewogICAgICAgICAgICB0eXBlT2ZTdWJtaXR0ZXIgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHR5cGVPZlN1Ym1pdHRlciA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nIEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciBtZXRob2QiICk7CgogICAgICAgIHJldHVybiB0eXBlT2ZTdWJtaXR0ZXI7CiAgICB9OwoKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGRldGVybWluZXMgYWNjZXNzVHlwZSBmb3IgdGhlIHJlY29yZC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSggc3VibWl0dGVyLCBvbmxpbmVBY2Nlc3MsIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VibWl0dGVyIFRoZSBzdWJtaXR0ZXIgb2YgZGF0YQogICAgICogQHBhcmFtIHtTdHJpbmd9IG9ubGluZUFjY2VzcyBTdGF0dXMgb2Ygb25saW5lIGFjY2VzcyBzaG91bGQgYmUgIm5vdCBhdmFpbGFibGUiIGlmIHVybCBkb2VzIG5vdCB3b3JrLCBvdGhlcndpc2UgZW1wdHkgc3RyaW5nCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gW3JlY29yZF0gVGhlIG1hcmMgcmVjb3JkIGlmIGl0IGV4aXN0cwogICAgICogQHJldHVybiB7QXJyYXl9IGFjY2Vzc1R5cGVzIGZvciB0aGUgcmVjb3JkCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZQogICAgICovCiAgICB0aGF0LmdldEFjY2Vzc1R5cGUgPSBmdW5jdGlvbiggc3VibWl0dGVyLCBvbmxpbmVBY2Nlc3MsIHJlY29yZCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUiICk7CgogICAgICAgIHZhciBwaHlzaWNhbCA9IGZhbHNlOwogICAgICAgIGlmICggcmVjb3JkICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMDkvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC9nLywgZnVuY3Rpb24oIGZpZWxkLCBzdWJGaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBTdHJpbmcoIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPT0gInhlIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGh5c2ljYWwgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gKQogICAgICAgICAgICB9ICk7CiAgICAgICAgfQoKICAgICAgICB2YXIgb25saW5lID0gZmFsc2U7CiAgICAgICAgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBvbmxpbmVBY2Nlc3MgIT09ICJub3QgYXZhaWxhYmxlIiAmJiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9nLyApLm1hdGNoKCAieGUiICkgfHwgcmVjb3JkLmdldFZhbHVlKCAvbjAxLywgL2IvICkubWF0Y2goICIwMDAwMTEiICkgKSApIHsKICAgICAgICAgICAgb25saW5lID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKCBzdWJtaXR0ZXIubWF0Y2goIC9eMTUwLyApICYmIG9ubGluZUFjY2VzcyAhPT0gIm5vdCBhdmFpbGFibGUiICkgewogICAgICAgICAgICBvbmxpbmUgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGFjY2Vzc1R5cGVzID0gWyBdOwogICAgICAgIGlmICggcGh5c2ljYWwgPT09IHRydWUgKSB7CiAgICAgICAgICAgIGFjY2Vzc1R5cGVzLnB1c2goICJwaHlzaWNhbCIgKTsKICAgICAgICB9CiAgICAgICAgaWYgKCBvbmxpbmUgPT09IHRydWUgKSB7CiAgICAgICAgICAgIGFjY2Vzc1R5cGVzLnB1c2goICJvbmxpbmUiICk7CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nIEFkbWluRGF0YS5nZXRBY2Nlc3NUeXBlIiApOwoKICAgICAgICByZXR1cm4gYWNjZXNzVHlwZXM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGdldHMgdGhlIFZJUCBjb2RlIGZvciBhIHNwZWNpZmljIHNjaG9vbCBsaWJyYXJ5LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5zY2hvb2xCcmFuY2hWSVBDb2RlKCBicmFuY2hOYW1lICkKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBicmFuY2hOYW1lIFRoZSBuYW1lIG9mIHRoZSBzY2hvb2wgYnJhbmNoIGNvbnNpc3Rpbmcgb2Ygc3VibWl0dGVyIGZvbGxvd2VkIGJ5IGEgaHlwaGVuIGFuZCB0aGUgYWJicmV2aWF0aW9uIGZvciB0aGUgYnJhbmNoCiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFNpeCBkaWdpdCBWSVAgY29kZQogICAgICogQG1ldGhvZAogICAgICogQGV4YW1wbGUgQWRtaW5EYXRhLnNjaG9vbEJyYW5jaFZJUENvZGUoICI2NjE1MDAtYmFuIiApCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuc2Nob29sQnJhbmNoVklQQ29kZQogICAgICovCiAgICB0aGF0LnNjaG9vbEJyYW5jaFZJUENvZGUgPSBmdW5jdGlvbiggYnJhbmNoTmFtZSApIHsKCiAgICAgICAgdmFyIGJyYW5jaE5hbWVUb1ZJUENvZGUgPSB7CiAgICAgICAgICAgICI2NjE1MDAtYmFuIjogIjMxMDAxNSIsCiAgICAgICAgICAgICI2NjE1MDAtYnJzIjogIjMxMDAwMSIsCiAgICAgICAgICAgICI2NjE1MDAtZGFnIjogIjMxMDAwNyIsCiAgICAgICAgICAgICI2NjE1MDAtZWdlIjogIjMxMDAwOCIsCiAgICAgICAgICAgICI2NjE1MDAtZ2VkIjogIjMxMDAwNiIsCiAgICAgICAgICAgICI2NjE1MDAtaGF0IjogIjMxMDAxMCIsCiAgICAgICAgICAgICI2NjE1MDAtaFx1MDBmOGoiOiAiMzEwMDE3IiwKICAgICAgICAgICAgIjY2MTUwMC1ob3YiOiAiMzEwMDAzIiwKICAgICAgICAgICAgIjY2MTUwMC1sYW4iOiAiMzEwMDExIiwKICAgICAgICAgICAgIjY2MTUwMC1sdW4iOiAiMzEwMDEzIiwKICAgICAgICAgICAgIjY2MTUwMC1uaXMiOiAiMzEwMDAyIiwKICAgICAgICAgICAgIjY2MTUwMC1cdTAwZjhzdCI6ICIzMTAwMDUiLAogICAgICAgICAgICAiNjYxNTAwLXN0ZSI6ICIzMTAwMTIiLAogICAgICAgICAgICAiNjYxNTAwLXNcdTAwZjh2IjogIjMxMDAwNCIsCiAgICAgICAgICAgICI2NjE1MDAtdG9yIjogIjMxMDAxNCIsCiAgICAgICAgfTsKCiAgICAgICAgdmFyIFZJUENvZGUgPSBicmFuY2hOYW1lVG9WSVBDb2RlWyBicmFuY2hOYW1lIF07CgogICAgICAgIHJldHVybiBWSVBDb2RlOwogICAgfQoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgYWRkcyBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZvciBzY2hvb2wgbGlicmFyaWVzLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMoIHN1Ym1pdHRlciwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIGRhdGEKICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgVGhlIG1hcmMgcmVjb3JkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb2xsZWN0aW9uSWRlbnRpZmllcnMgQW4gYXJyYXkgb2YgY29sbGVjdGlvbklkZW50aWZpZXJzIGNvbGxlY3RlZCBzbyBmYXIKICAgICAqIEByZXR1cm4ge0FycmF5fSBVcGRhdGVkIGFycmF5IG9mIGNvbGxlY3Rpb24gaWRlbnRpZmllcnMKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMKICAgICAqLwogICAgdGhhdC5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMgPSBmdW5jdGlvbiggc3VibWl0dGVyLCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclNjaG9vbExpYnJhcmllcyIgKTsKCiAgICAgICAgLy9zZXQgdGhlIGdlbmVyYWwgY29sbGVjdGlvbklkZW50aWZpZXIgZm9yIGFsbCBzY2hvb2xzIGluIG9uZSAia29tbXVuZSIKICAgICAgICBzd2l0Y2ggKCBzdWJtaXR0ZXIgKSB7CiAgICAgICAgICAgIGNhc2UgIjY2MTUwMCI6CiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjMwMDYxNS1rYXRhbG9nIiApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBMb2cud2FybiggImNvbGxlY3Rpb25JZGVudGlmaWVyIGZvciBzY2hvb2wgbGlicmFyeSBub3Qga25vd24uIFN1Ym1pdHRlciA9ICIsIHN1Ym1pdHRlciApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICAvL3NldCB0aGUgY29sbGVjdGlvbklkZW50aWZpZXJzIGZvciBlYWNoIHNjaG9vbCBsaWJyYXJ5CiAgICAgICAgdmFyIHNjaG9vbExpYkJyYW5jaGVzID0gWyBdOyAvL3Nob3VsZCBnZXQgdmFsdWVzIGZyb20gMDk2KmYuIFRoZXJlIG1heSBiZSBtb3JlIG9jY3VyZW5jZXMgb2YgMDk2CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzA5Ni8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvZi8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICBzY2hvb2xMaWJCcmFuY2hlcy5wdXNoKCBzdWJtaXR0ZXIgKyAiLSIgKyBzdWJmaWVsZC52YWx1ZSApOwogICAgICAgICAgICB9ICk7CiAgICAgICAgfSApOwogICAgICAgIHZhciB2aXBDb2RlOwogICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNjaG9vbExpYkJyYW5jaGVzLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICB2aXBDb2RlID0gQWRtaW5EYXRhLnNjaG9vbEJyYW5jaFZJUENvZGUoIHNjaG9vbExpYkJyYW5jaGVzWyBpIF0gKTsKICAgICAgICAgICAgaWYgKCB2aXBDb2RlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggdmlwQ29kZSArICIta2F0YWxvZyIgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIExvZy53YXJuKCAiVklQIGNvZGUgZm9yIHNjaG9vbCBsaWJyYXJ5IGJyYW5jaCAiICsgc2Nob29sTGliQnJhbmNoZXNbIGkgXSArICIgaXMgbm90IGtub3duIiApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMgbWV0aG9kIiApOwoKICAgICAgICByZXR1cm4gY29sbGVjdGlvbklkZW50aWZpZXJzOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBmaW5kcyBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZvciByZWNvcmRzIGZyb20gZGF0YWJhc2UgODcwOTcwLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAoIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKQogICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZCBUaGUgbWFyYyByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbmxpbmVBY2Nlc3MgU3RhdHVzIG9mIG9ubGluZSBhY2Nlc3Mgc2hvdWxkIGJlICJub3QgYXZhaWxhYmxlIiBpZiB1cmwgZG9lcyBub3Qgd29yawogICAgICogQHBhcmFtIHtBcnJheX0gY29sbGVjdGlvbklkZW50aWZpZXJzIEFuIGFycmF5IG9mIGNvbGxlY3Rpb25JZGVudGlmaWVycyBjb2xsZWN0ZWQgc28gZmFyCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gVXBkYXRlZCBhcnJheSBvZiBjb2xsZWN0aW9uIGlkZW50aWZpZXJzCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwCiAgICAgKi8KICAgIHRoYXQuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwID0gZnVuY3Rpb24oIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAiICk7CgogICAgICAgIGlmICggb25saW5lQWNjZXNzICE9PSAibm90IGF2YWlsYWJsZSIgKSB7CiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMzIvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC94LywgZnVuY3Rpb24oIGZpZWxkLCBzdWJGaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBTdHJpbmcoIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL0ZTRi4rLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDAyMSIgKyAiLSIgKyAiZmplcm4iICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9GU0IuKy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwMjEiICsgIi0iICsgImJpYmxpb3RlayIgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL0VSRS4rLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDAxNSIgKyAiLSIgKyAiZXJlb2wiICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9FQkkuKy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwMTUiICsgIi0iICsgImViaWIiICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9OTFkuKy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwMTUiICsgIi0iICsgIm5ldGx5ZGJvZyIgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL0VSTC4rLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDAxNSIgKyAiLSIgKyAiZXJlbGljIiApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gKQogICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvNTAxfDg1Ni8sIC91LyApLm1hdGNoKCAvZWt1cnNlclwubnUvICkgKSB7CiAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiMTUwMDUyIiArICItIiArICJla3Vyc2VyIiApOwogICAgICAgIH0KICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzUwMS8sIC91LyApLm1hdGNoKCAvdHVydGVvcmlcLmRrLyApICkgewogICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDA1MyIgKyAiLSIgKyAidHVydGVvcmkiICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIFBhbGxlc0dhdmVib2RDcml0ZXJpYS5jaGVja1BhbGxlc0dhdmVib2QoIHJlY29yZCApID09PSB0cnVlICkgewogICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDAxMy1wYWxsZSIgKTsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmdldEV4dHJhQ29sbGVjdGlvbklkZW50aWZpZXJzRnJvbTg3MDk3MCIgKTsKCiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25JZGVudGlmaWVyczsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgZmluZHMgY29sbGVjdGlvbiBpZGVudGlmaWVycyBmb3IgcmVjb3JkcyBmcm9tIHN1Ym1pdHRlciA4MzAwNjAuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCggc3VibWl0dGVyLCBmb3JtYXQsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICkKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJtaXR0ZXIgVGhlIHN1Ym1pdHRlciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IFRoZSBmb3JtYXQgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZCBUaGUgbWFyYyByZWNvcmQKICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbGxlY3Rpb25JZGVudGlmaWVycyBBbiBhcnJheSBvZiBjb2xsZWN0aW9uSWRlbnRpZmllcnMgY29sbGVjdGVkIHNvIGZhcgogICAgICogQHJldHVybiB7QXJyYXl9IFVwZGF0ZWQgYXJyYXkgb2YgY29sbGVjdGlvbiBpZGVudGlmaWVycwogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MAogICAgICovCiAgICB0aGF0LmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCA9IGZ1bmN0aW9uKCBzdWJtaXR0ZXIsIGZvcm1hdCwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAiICk7CgogICAgICAgIGlmICggcmVjb3JkID09PSB1bmRlZmluZWQgKSB7IC8vaGFuZGxlcyBkZWxldGUgcmVjb3JkcyBpbiBjc3YgZm9ybWF0CiAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCBzdWJtaXR0ZXIgKyAiLSIgKyBmb3JtYXQgKTsKICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAtZm9yc2siICk7CiAgICAgICAgfSBlbHNlIGlmICggQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MoIHJlY29yZCwgIjgzMDA2MCIgKSA9PT0gdHJ1ZSApIHsgLy8gTWV0cm9wb2wgaG9sZGluZ3MKICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goIHN1Ym1pdHRlciArICItIiArIGZvcm1hdCApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICggTWFyY1JlY29yZC5leGlzdFN1YmZpZWxkSW5GaWVsZCggcmVjb3JkLCBbICIwOTYiIF0sIFsgInoiIF0gKSA9PT0gdHJ1ZSApIHsgLy9zdWIgbGlicmFyeSBob2xkaW5ncwogICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAtZm9yc2siICk7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5leGlzdEZpZWxkKCAvczExLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9nLyApLm1hdGNoKCAveGUvICkgKSB7IC8vZWxlY3Ryb25pYyBtYXRlcmlhbCB3aXRoIG5vIGhvbGRpbmdzCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9nLyApLm1hdGNoKCAveGUvICkgKSB7IC8vZWxlY3Ryb25pYyBtYXRlcmlhbCB3aXRoIG5vIGhvbGRpbmdzCiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggc3VibWl0dGVyICsgIi0iICsgZm9ybWF0ICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCIgKTsKCiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25JZGVudGlmaWVyczsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZvciB0aGUgcmVjb3JkL3htbC1kb2N1bWVudC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBbbGlicmFyeVR5cGVdLCBbcmVjb3JkXSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VibWl0dGVyIFRoZSBzdWJtaXR0ZXIgb2YgZGF0YQogICAgICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCBUaGUgZm9ybWF0IG9mIGRhdGEKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbmxpbmVBY2Nlc3MgU3RhdHVzIG9mIG9ubGluZSBhY2Nlc3Mgc2hvdWxkIGJlICJub3QgYXZhaWxhYmxlIiBpZiB1cmwgZG9lcyBub3Qgd29yaywgb3RoZXJ3aXNlIGFuIGVtcHR5IHN0cmluZwogICAgICogQHBhcmFtIHtTdHJpbmd9IGxpYnJhcnlUeXBlIHRlbGxzIHdoZXRoZXIgdGhlIHJlY29yZCBiZWluZyBwcm9jZXNzZWQgaXMgZnJvbSBhIHJlc2VhcmNoIGxpYnJhcnkgb3Igc29tZXRoaW5nIGVsc2UKICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgVGhlIG1hcmMgcmVjb3JkIGlmIGl0IGV4aXN0cwogICAgICogQHJldHVybiB7QXJyYXl9IEFycmF5IHdpdGggdGhlIGNvbGxlY3Rpb24gaWRlbnRpZmllcnMKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMKICAgICAqLwogICAgdGhhdC5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBmdW5jdGlvbiggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyBtZXRob2QiICk7CgogICAgICAgIHZhciBjb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBbIF07CgogICAgICAgIHN3aXRjaCAoIHN1Ym1pdHRlciApIHsKICAgICAgICAgICAgY2FzZSAiODcwOTcwIjoKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCBzdWJtaXR0ZXIgKyAiLSIgKyBmb3JtYXQgKTsKICAgICAgICAgICAgICAgIGlmICggcmVjb3JkICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgQWRtaW5EYXRhLmdldEV4dHJhQ29sbGVjdGlvbklkZW50aWZpZXJzRnJvbTg3MDk3MCggcmVjb3JkLCBvbmxpbmVBY2Nlc3MsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIjg3MDk3MSI6CiAgICAgICAgICAgICAgICAvL2lmIHVybCBpbiByZWNvcmQgZG9lcyBub3Qgd29yayBhbmQgdGhlIG1hdGVyaWFsIGRvZXMgbm90IGV4aXN0IGluIHBoeXNpY2FsIGZvcm0gaXQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlICc4NzA5NzAtYmFzaXMnIGNvbGxlY3Rpb24KICAgICAgICAgICAgICAgIGlmICggb25saW5lQWNjZXNzID09PSAibm90IGF2YWlsYWJsZSIgJiYgQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUoIHN1Ym1pdHRlciwgb25saW5lQWNjZXNzLCByZWNvcmQgKS5pbmRleE9mKCAicGh5c2ljYWwiICkgPT09IC0xICkgewogICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiODcwOTcwIiArICItIiArICJiYXNpcyIgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goIHN1Ym1pdHRlciArICItIiArIGZvcm1hdCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIjgzMDA2MCI6CiAgICAgICAgICAgICAgICBBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwKCBzdWJtaXR0ZXIsIGZvcm1hdCwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAvL2Nhc2UgIjg3MDk3NiI6CiAgICAgICAgICAgIC8vICAgIC8vU2VhcmNoIFVTIzE0MjA6IFR3byBjb2xsZWN0aW9uSWRlbnRpZmllcnMgZm9yIGVhY2ggcmVjb3JkIGZyb20gc3VibWl0dGVyIDg3MDk3NgogICAgICAgICAgICAvLyAgICAvL1RoZSBPcGVuU2VhcmNoIHdlYnNlcnZpY2Ugd2lsbCBub3Qgc2hvdyByZWNvcmRzIG5ld2VyIHRoYW4gNiBtb250aHMgZm9yIGNvbGxlY3Rpb24gJzg3MDk3Ni1hbm1lbGQnCiAgICAgICAgICAgIC8vICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiODcwOTc2LWFsbGFubWVsZCIgKTsKICAgICAgICAgICAgLy8gICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzYtYW5tZWxkIiApOwogICAgICAgICAgICAvLyAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiNzAwMDAwIjogICAvL3NvbHV0aW9uIHRvIGJ1ZyBodHRwOi8vYnVncy5kYmMuZGsvc2hvd19idWcuY2dpP2lkPTE4MzUyIC0gRkJTIHJlY29yZHMgYXJlIGFsbCBzZW50IGZyb20gUlIgaGFydmVzdGVyIHRvIGRhdGEgaW8gc3lzdGVtIHdpdGggc3VibWl0dGVyIDcwMDAwMAogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYWxTdWJtaXR0ZXIgPSByZWNvcmQuZmllbGQoIjAwMSIpLnN1YmZpZWxkKCJiIikudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goIGxvY2FsU3VibWl0dGVyICsgIi0iICsgZm9ybWF0ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIGlmICggQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsICJzY2hvb2xMaWJyYXJ5IiApICkgewogICAgICAgICAgICAgICAgICAgIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMoIHN1Ym1pdHRlciwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goIHN1Ym1pdHRlciArICItIiArIGZvcm1hdCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHJlY29yZCAhPT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gImxva2FsYmlibCIgKSB7CiAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiODcwOTcwLWxva2FsYmlibCIgKTsKICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBzdWJtaXR0ZXIgPT09ICI3MDA0MDAiICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwNC8sIC9hLyApLm1hdGNoKCAvaS8gKSApIHsKICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAtdWRsYW5kIiApOwogICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZCAhPT0gdW5kZWZpbmVkICYmIHN1Ym1pdHRlci5tYXRjaCggLzEyNTZbMDEyXTAvICkgKSB7CiAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiODcwOTcwLXVkbGFuZCIgKTsKICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBsaWJyYXJ5VHlwZSA9PT0gInJlc2VhcmNoIiApIHsKICAgICAgICAgICAgaWYgKCAhcmVjb3JkLmV4aXN0RmllbGQoIC9zMTEvICkgJiYgY29sbGVjdGlvbklkZW50aWZpZXJzLmluZGV4T2YoICI4NzA5NzAtZm9yc2siICkgPCAwICkgewogICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAtZm9yc2siICk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBzdWJtaXR0ZXIgPT09IDg3MDk3NiAmJiBmb3JtYXQgPT0gImFubWVsZCIgKSB7CiAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiODcwOTc2LWFubWVsZCIgKTsKICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBzdWJtaXR0ZXIgPT09IDg3MDk3NiAmJiBmb3JtYXQgPT0gImFsbGFubWVsZCIgKSB7CiAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzYtYWxsYW5tZWxkIiApOwogICAgfQogICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFV0aWwudW5pcXVlVmFsdWVzKCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKTsKCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzIG1ldGhvZCIgKTsKCiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25JZGVudGlmaWVyczsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgcHJvZHVjZXMgZWl0aGVyIGZpa3Rpb24gb3Igbm9uZmlrdGlvbiBhcyBnZW5yZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY3JlYXRlR2VucmUoIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkIEEgbWFyYyByZWNvcmQKICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGdlbnJlIHZhbHVlLCBlaXRoZXIgZmlrdGlvbiBvciBub25maWt0aW9uCiAgICAgKiBAZXhhbXBsZSBBZG1pbkRhdGEuY3JlYXRlR2VucmUoIHJlY29yZCApCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuY3JlYXRlR2VucmUKICAgICAqLwogICAgdGhhdC5jcmVhdGVHZW5yZSA9IGZ1bmN0aW9uKCByZWNvcmQgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5jcmVhdGVHZW5yZSBtZXRob2QiICk7CgogICAgICAgIHZhciBnZW5yZUNhdGVnb3J5ID0gMDsKCiAgICAgICAgdmFyIGdlbnJlID0gIiI7CgogICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL2QvICkubWF0Y2goIC94LyApICkgewogICAgICAgICAgICBnZW5yZSA9ICJmaWt0aW9uIjsKICAgICAgICAgICAgZ2VucmVDYXRlZ29yeSA9IDE7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9kLyApLm1hdGNoKCAveS8gKSApIHsKICAgICAgICAgICAgZ2VucmUgPSAibm9uZmlrdGlvbiI7CiAgICAgICAgICAgIGdlbnJlQ2F0ZWdvcnkgPSAxOwogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbHVlOwogICAgICAgIHZhciByZWdFeHBGaWN0aW9uID0gbmV3IFJlZ0V4cCggL3NrfF44WzItOF18MjQuNDN8MzkuMVsyLTRdfDM5LjI1fDc3LjYyLyApOwogICAgICAgIHZhciByZWdFeHBNb3ZpZUZpY3Rpb24gPSBuZXcgUmVnRXhwKCAvNzcuNTZ8NzcuNy8gKTsKCiAgICAgICAgaWYgKCBnZW5yZUNhdGVnb3J5ID09PSAwICkgewogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApID09PSAiYSIgfHwgcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkgPT09ICJyIiB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSA9PT0gInAiICkgewogICAgICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzY1WzI0XS8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlKCAvbXxufG8vICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggcmVnRXhwRmljdGlvbiApICkgewogICAgICAgICAgICAgICAgICAgICAgICBnZW5yZSA9ICJmaWt0aW9uIjsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmVDYXRlZ29yeSA9IDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSA9PT0gIm0iICkgewogICAgICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzY1Mi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlKCAvbXxufG8vICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggcmVnRXhwTW92aWVGaWN0aW9uICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdlbnJlID0gImZpa3Rpb24iOwogICAgICAgICAgICAgICAgICAgICAgICBnZW5yZUNhdGVnb3J5ID0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggZ2VucmVDYXRlZ29yeSA9PT0gMCApIHsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSA9PT0gImEiIHx8IHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApID09PSAiciIgfHwgcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkgPT09ICJwIiApIHsKICAgICAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC82NVsyNF0vLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL218bnxvLyApOwogICAgICAgICAgICAgICAgICAgIGlmICggIXZhbHVlLm1hdGNoKCByZWdFeHBGaWN0aW9uICkgJiYgIXZhbHVlLm1hdGNoKCAvTlkgVElURUx8VWRlbiBrbGFzc2VtXHUwMEU2cmtlLyApICYmIHZhbHVlICE9PSAiIiAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICBnZW5yZSA9ICJub25maWt0aW9uIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApID09PSAibSIgKSB7CiAgICAgICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvNjUyLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC9tfG58by8gKTsKICAgICAgICAgICAgICAgICAgICBpZiAoICF2YWx1ZS5tYXRjaCggcmVnRXhwTW92aWVGaWN0aW9uICkgJiYgIXZhbHVlLm1hdGNoKCAvTlkgVElURUx8VWRlbiBrbGFzc2VtXHUwMEU2cmtlLyApICYmIHZhbHVlICE9PSAiIiAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICBnZW5yZSA9ICJub25maWt0aW9uIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmNyZWF0ZUdlbnJlIG1ldGhvZCIgKTsKCiAgICAgICAgcmV0dXJuIGdlbnJlOwoKICAgIH07CgogICAgcmV0dXJuIHRoYXQ7Cgp9KCApOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tVW5pdCB0ZXN0cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlQWRtaW5JbmZvIiwgZnVuY3Rpb24oICkgewoKICAgIHN1Ym1pdHRlckZvcm1hdCA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjg3MDk3MCIsCiAgICAgICAgImZvcm1hdCI6ICJiYXNpcyIKICAgIH0KICAgIGlkZW50aWZpZXIgPSAiMSAyMzQgNTY3IDgiOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInIiLCAibiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIm41NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMjAxMzA1MjMiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjg3MDk3MCIsCiAgICAgICAgImZvcm1hdCI6ICJiYXNpcyIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJub25lIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIjIwMTMtMDUtMjMiCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgb2JqZWN0IGZvciBiYXNpcyByZWNvcmQiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluSW5mbyggc3VibWl0dGVyRm9ybWF0LCBpZGVudGlmaWVyLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBzdWJtaXR0ZXJGb3JtYXQgPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI3NjE1MDAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIKICAgIH0KICAgIGlkZW50aWZpZXIgPSAiMSAyMzQgNTY3IDgiOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjc2MTUwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInIiLCAiZCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiNzYxNTAwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IHRydWUsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJwdWJsaWMiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIG9iamVjdCBmb3IgcHVibGljIGRlbGV0ZSByZWNvcmQiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluSW5mbyggc3VibWl0dGVyRm9ybWF0LCBpZGVudGlmaWVyLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBzdWJtaXR0ZXJGb3JtYXQgPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI3NjE1MDAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIKICAgIH0KICAgIGlkZW50aWZpZXIgPSAiMSAyMzQgNTY3IDgiOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjc2MTUwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInIiLCAiZCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwNCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInIiLCAiZCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiNzYxNTAwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IHRydWUsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJwdWJsaWMiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIG9iamVjdCBmb3IgcHVibGljIGRlbGV0ZSByZWNvcmQgd2l0aCB0d28gZmllbGQgMDA0IiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkluZm8oIHN1Ym1pdHRlckZvcm1hdCwgaWRlbnRpZmllciwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyRm9ybWF0ID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiNzYxNTAwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciCiAgICB9CiAgICBpZGVudGlmaWVyID0gIjEgMjM0IDU2NyA4IjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI3NjE1MDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJyIiwgImQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJyIiwgIm4iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjc2MTUwMCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIiIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogInB1YmxpYyIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgb2JqZWN0IGZvciBwdWJsaWMgZGVsZXRlIHJlY29yZCB3aXRoIHR3byBkaWZmZXJlbnQgZmllbGQgMDA0IiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkluZm8oIHN1Ym1pdHRlckZvcm1hdCwgaWRlbnRpZmllciwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyRm9ybWF0OwogICAgZGVsZXRlIHRoaXMuaWRlbnRpZmllcjsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwiLCBmdW5jdGlvbiggKSB7CgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODcwOTcwIiwKICAgICAgICAiZm9ybWF0IjogImJhc2lzIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAibm9uZSIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPm5vbmU8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjg3MDk3MC1iYXNpczwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogInJlc2VhcmNoIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIiIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMDYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGRhdGFXZWxsQ3VzdG9tZXI+dHJ1ZTwvZGF0YVdlbGxDdXN0b21lcj4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPnBoeXNpY2FsPC9hY2Nlc3NUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAwNjAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIC0gbWV0cm9wb2wgc3VibGlicmFyeSwgUEggY2FzZSAxIiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogInJlc2VhcmNoIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIiIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMDYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGRhdGFXZWxsQ3VzdG9tZXI+dHJ1ZTwvZGF0YVdlbGxDdXN0b21lcj4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPnBoeXNpY2FsPC9hY2Nlc3NUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAwNjAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtZm9yc2s8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgMiIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8ZGF0YVdlbGxDdXN0b21lcj50cnVlPC9kYXRhV2VsbEN1c3RvbWVyPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjgzMDA2MC1rYXRhbG9nPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgLSBtZXRyb3BvbCBzdWJsaWJyYXJ5LCBQSCBjYXNlIDMiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInh4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzAwNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGRhdGFXZWxsQ3VzdG9tZXI+dHJ1ZTwvZGF0YVdlbGxDdXN0b21lcj4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPnBoeXNpY2FsPC9hY2Nlc3NUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAwNjAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtZm9yc2s8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgNCIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMTM2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICkKCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+ZGVsZXRlPC9yZWNvcmRTdGF0dXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWZvcnNrPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIC0gbWV0cm9wb2wgc3VibGlicmFyeSwgUEggY2FzZSA1IiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogInJlc2VhcmNoIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIiIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+YWN0aXZlPC9yZWNvcmRTdGF0dXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWZvcnNrPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgLSBtZXRyb3BvbCBzdWJsaWJyYXJ5LCBQSCBjYXNlIDYiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPm9ubGluZTwvYWNjZXNzVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMDYwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgNyIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+b25saW5lPC9hY2Nlc3NUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAwNjAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtZm9yc2s8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgOCIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMTkwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDE5MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8ZGF0YVdlbGxDdXN0b21lcj50cnVlPC9kYXRhV2VsbEN1c3RvbWVyPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjgzMDE5MC1rYXRhbG9nPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgLSBQSCBsaWJyYXJ5LCBQSCBjYXNlIDEzIiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAxOTAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogInJlc2VhcmNoIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIiIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMTkwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+YWN0aXZlPC9yZWNvcmRTdGF0dXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMTkwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWZvcnNrPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgLSBQSCBsaWJyYXJ5LCBQSCBjYXNlIDE0IiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDE5MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+YWN0aXZlPC9yZWNvcmRTdGF0dXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5vbmxpbmU8L2FjY2Vzc1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjgzMDE5MC1rYXRhbG9nPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgLSBQSCBsaWJyYXJ5LCBQSCBjYXNlIDE1IiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDE5MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+YWN0aXZlPC9yZWNvcmRTdGF0dXM+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5vbmxpbmU8L2FjY2Vzc1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjgzMDE5MC1rYXRhbG9nPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjg3MDk3MC1mb3JzazwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIC0gUEggbGlicmFyeSwgUEggY2FzZSAxNiIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODcwOTcwIiwKICAgICAgICAiZm9ybWF0IjogImJhc2lzIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAibm9uZSIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPm5vbmU8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+b25saW5lPC9hY2Nlc3NUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtYmFzaXM8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAob25saW5lKSIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4NzA5NzAiLAogICAgICAgICJmb3JtYXQiOiAiYmFzaXMiLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJub25lIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInh4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAibjAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICIwMDAwMTEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPm5vbmU8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPm9ubGluZTwvYWNjZXNzVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWJhc2lzPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgKGluZm9tZWRpYSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjE1MDAxNSIsCiAgICAgICAgImZvcm1hdCI6ICJmb3JsYWciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJub25lIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIm5vdCBhdmFpbGFibGUiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPm5vbmU8L2xpYnJhcnlUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5ka2FibTwvaW5kZXhpbmdBbGlhcz4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+bm9uZTwvYWNjZXNzVHlwZT4gKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+MTUwMDE1LWZvcmxhZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIChhY2Nlc3NUeXBlIGlzICdub25lJykiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSApOycsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLmFkbWluSW5mbwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZGthYm07CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciIsIGZ1bmN0aW9uKCApIHsKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UKICAgIH0KCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiB0cnVlCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiTW9kaWZ5IGFkbWluaXN0cmF0aXZlIGRhdGEgb2JqZWN0IGZvciBQSCByZWNvcmQgLSBjcmVhdGUgZGVsZXRlIHJlY29yZCIsICdBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciggYWRtaW5JbmZvLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgImRhdGFXZWxsQ3VzdG9tZXIiOiB0cnVlCgogICAgfQoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJkYXRhV2VsbEN1c3RvbWVyIjogdHJ1ZQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIk1vZGlmeSBhZG1pbmlzdHJhdGl2ZSBkYXRhIG9iamVjdCBmb3IgUEggcmVjb3JkIC0gZG8gbm90IGNyZWF0ZSBkZWxldGUgcmVjb3JkIiwgJ0FkbWluRGF0YS5tb2RpZnlBZG1pbkluZm9Gb3JEYXRhV2VsbEN1c3RvbWVyKCBhZG1pbkluZm8sIHJlY29yZCApOycsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLmFkbWluSW5mbzsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSIsIGZ1bmN0aW9uKCApIHsKCiAgICBtYXRlcmlhbFR5cGUgPSAiUGxheXN0YXRpb24gNCI7CiAgICBvdXRwdXQgPSAiUGxheXN0YXRpb24iOwoKICAgIEFzc2VydC5lcXVhbCggIkNsZWFuIG1hdGVyaWFsdHlwZSAocGxheXN0YXRpb24pIiwgJ0FkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSggbWF0ZXJpYWxUeXBlICknLCBvdXRwdXQgKTsKCiAgICBtYXRlcmlhbFR5cGUgPSAiWGJveCBPbmUiOwogICAgb3V0cHV0ID0gIlhib3giOwoKICAgIEFzc2VydC5lcXVhbCggIkNsZWFuIG1hdGVyaWFsdHlwZSAoeGJveCkiLCAnQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlKCBtYXRlcmlhbFR5cGUgKScsIG91dHB1dCApOwoKICAgIG1hdGVyaWFsVHlwZSA9ICJXaWkgVSI7CiAgICBvdXRwdXQgPSAiV2lpIjsKCiAgICBBc3NlcnQuZXF1YWwoICJDbGVhbiBtYXRlcmlhbHR5cGUgKHdpaSkiLCAnQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlKCBtYXRlcmlhbFR5cGUgKScsIG91dHB1dCApOwoKICAgIG1hdGVyaWFsVHlwZSA9ICJHcmFwaGljIG5vdmVsIjsKICAgIG91dHB1dCA9ICJHcmFwaGljIG5vdmVsIjsKCiAgICBBc3NlcnQuZXF1YWwoICJDbGVhbiBtYXRlcmlhbHR5cGUgKG5vIGNsZWFuaW5nKSIsICdBZG1pbkRhdGEuY2xlYW5NYXRlcmlhbFR5cGUoIG1hdGVyaWFsVHlwZSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMubWF0ZXJpYWxUeXBlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZSIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiNzEwMTAwIjsKICAgIG91dHB1dCA9ICJwdWJsaWMiOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBsaWJyYXJ5IHR5cGUgLSBwdWJsaWMgbGlicmFyeSIsICdBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUoIHN1Ym1pdHRlciApJywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyID0gIjYyMTUwMCI7CiAgICBvdXRwdXQgPSAic2Nob29sIjsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbGlicmFyeSB0eXBlIC0gc2Nob29sIGxpYnJhcnkiLCAnQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlKCBzdWJtaXR0ZXIgKScsIG91dHB1dCApOwoKICAgIHN1Ym1pdHRlciA9ICI4MTAwMTAiOwogICAgb3V0cHV0ID0gInJlc2VhcmNoIjsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbGlicmFyeSB0eXBlIC0gcmVzZWFyY2ggbGlicmFyeSIsICdBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUoIHN1Ym1pdHRlciApJywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyID0gIjE1OTAwNCI7CiAgICBvdXRwdXQgPSAibm9uZSI7CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGxpYnJhcnkgdHlwZSAtIG5vIGxpYnJhcnkgdHlwZSIsICdBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUoIHN1Ym1pdHRlciApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5nZXRDcmVhdGlvbkRhdGUiLCBmdW5jdGlvbiggKSB7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJuNTUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjIwMTQwMjI4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSAiMjAxNC0wMi0yOCI7CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGNyZWF0aW9uRGF0ZSBmcm9tIG41NSIsICdBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlKCBzdWJtaXR0ZXIsIHJlY29yZCApJywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyID0gIjE1MDAwOCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgIjIwMTQwMjI4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSAiMjAxNC0wMi0yOCI7CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGNyZWF0aW9uRGF0ZSBmcm9tIHN1Ym1pdHRlciAxNTAwMDgiLCAnQWRtaW5EYXRhLmdldENyZWF0aW9uRGF0ZSggc3VibWl0dGVyLCByZWNvcmQgKScsIG91dHB1dCApOwoKICAgIHN1Ym1pdHRlciA9ICI4MzAxOTAiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZCIsICIyMDE0MDIyOCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBkYXRhYmFzZSA9IHVuZGVmaW5lZDsKCiAgICBvdXRwdXQgPSAiMjAxNC0wMi0yOCI7CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGNyZWF0aW9uRGF0ZSBmcm9tIHN1Ym1pdHRlciAxNTAwMDgiLCAnQWRtaW5EYXRhLmdldENyZWF0aW9uRGF0ZSggc3VibWl0dGVyLCByZWNvcmQgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnN1Ym1pdHRlcjsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCIsIGZ1bmN0aW9uKCApIHsKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICIxNTAwMTgiLAogICAgICAgICJmb3JtYXQiOiAiYXJ0aWtsZXIiCiAgICB9OwoKICAgIG91dHB1dCA9IDxpbmRleGluZ0FsaWFzPmRrYWJtPC9pbmRleGluZ0FsaWFzPjsKCiAgICBBc3NlcnQuZXF1YWwoICJJbmRleGluZyBhbGlhcyAtIGFydGlrZWwiLCAnQWRtaW5EYXRhLmNyZWF0ZUluZGV4aW5nQWxpYXNYbWwoIGFkbWluSW5mbyApJywgb3V0cHV0ICk7CgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODcwOTc2IiwKICAgICAgICAiZm9ybWF0IjogImFubWVsZCIKICAgIH07CgogICAgb3V0cHV0ID0gPGluZGV4aW5nQWxpYXM+cmV2aWV3PC9pbmRleGluZ0FsaWFzPjsKCiAgICBBc3NlcnQuZXF1YWwoICJJbmRleGluZyBhbGlhcyAtIGFubWVsZGVsc2UiLCAnQWRtaW5EYXRhLmNyZWF0ZUluZGV4aW5nQWxpYXNYbWwoIGFkbWluSW5mbyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuYWRtaW5JbmZvOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jaGVja0hvbGRpbmdzIiwgZnVuY3Rpb24oICkgewoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMDYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIHJlc3VsdCA9IHRydWU7CgogICAgQXNzZXJ0LmVxdWFsKCAiSGFzIE1ldHJvcG9sIGhvbGRpbmdzIiwgJ0FkbWluRGF0YS5jaGVja0hvbGRpbmdzKCByZWNvcmQsIDgzMDA2MCApJywgcmVzdWx0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4NjA5MDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjg2MDkwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICByZXN1bHQgPSBmYWxzZTsKCiAgICBBc3NlcnQuZXF1YWwoICJIYXMgbm8gTWV0cm9wb2wgaG9sZGluZ3MiLCAnQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MoIHJlY29yZCwgODMwMDYwICknLCByZXN1bHQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnJlc3VsdDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIiLCBmdW5jdGlvbiggKSB7CgogICAgc3VibWl0dGVyID0gIjgzMDA2MCI7CiAgICB0eXBlID0gImRhdGFXZWxsQ3VzdG9tZXIiOwogICAgcmVzdWx0ID0gdHJ1ZTsKCiAgICBBc3NlcnQuZXF1YWwoICJJcyBkYXRhIHdlbGwgY3VzdG9tZXIiLCAnQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsIHR5cGUgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4MTAwMTAiOwogICAgdHlwZSA9ICJkYXRhV2VsbEN1c3RvbWVyIjsKICAgIHJlc3VsdCA9IGZhbHNlOwoKICAgIEFzc2VydC5lcXVhbCggIklzIG5vdCBkYXRhIHdlbGwgY3VzdG9tZXIiLCAnQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsIHR5cGUgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICIxNTAwMzEiOwogICAgdHlwZSA9ICJub25GaWN0aW9uU3VibWl0dGVyIjsKICAgIHJlc3VsdCA9IHRydWU7CgogICAgQXNzZXJ0LmVxdWFsKCAiSXMgbm9uIGZpY3Rpb24gc3VibWl0dGVyIiwgJ0FkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCB0eXBlICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiNzEwMTAwIjsKICAgIHR5cGUgPSAicHVibGljTGlicmFyeSI7CiAgICByZXN1bHQgPSB0cnVlOwoKICAgIEFzc2VydC5lcXVhbCggIklzIHB1YmxpYyBsaWJyYXJ5ICh0cnVlKSIsICdBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgdHlwZSApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjgxMDAxMCI7CiAgICB0eXBlID0gInB1YmxpY0xpYnJhcnkiOwogICAgcmVzdWx0ID0gZmFsc2U7CgogICAgQXNzZXJ0LmVxdWFsKCAiSXMgcHVibGljIGxpYnJhcnkgKGZhbHNlKSIsICdBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgdHlwZSApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjI4MDAwMSI7CiAgICB0eXBlID0gInNjaG9vbExpYnJhcnkiOwogICAgcmVzdWx0ID0gdHJ1ZTsKCiAgICBBc3NlcnQuZXF1YWwoICJJcyBzY2hvb2wgbGlicmFyeSAodHJ1ZSkiLCAnQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsIHR5cGUgKScsIHJlc3VsdCApOwoKICAgIGRlbGV0ZSB0aGlzLnN1Ym1pdHRlcjsKICAgIGRlbGV0ZSB0aGlzLnR5cGU7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUiLCBmdW5jdGlvbiggKSB7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MSI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgInBoeXNpY2FsIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBBY2Nlc3MgVHlwZSBwaHlzaWNhbCIsICdBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSggc3VibWl0dGVyLCBvbmxpbmVBY2Nlc3MsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MSI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgIm9ubGluZSIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgQWNjZXNzIFR5cGUgb25saW5lIiwgJ0FkbWluRGF0YS5nZXRBY2Nlc3NUeXBlKCBzdWJtaXR0ZXIsIG9ubGluZUFjY2VzcywgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcxIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4ZSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgInBoeXNpY2FsIiwgIm9ubGluZSIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgQWNjZXNzIFR5cGUgcGh5c2ljYWwgYW5kIG9ubGluZSIsICdBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSggc3VibWl0dGVyLCBvbmxpbmVBY2Nlc3MsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjE1MDAxMiI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CgogICAgcmVzdWx0ID0gWyAib25saW5lIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBBY2Nlc3MgVHlwZSBvbmxpbmUgYmFzZWQgb24gc3VibWl0dGVyIiwgJ0FkbWluRGF0YS5nZXRBY2Nlc3NUeXBlKCBzdWJtaXR0ZXIsIG9ubGluZUFjY2VzcywgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcxIjsKICAgIG9ubGluZUFjY2VzcyA9ICJub3QgYXZhaWxhYmxlIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgQWNjZXNzIFR5cGUgKG5laXRoZXIgcGh5c2ljYWwgbm9yIG9ubGluZSkiLCAnQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUoIHN1Ym1pdHRlciwgb25saW5lQWNjZXNzLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIGRlbGV0ZSB0aGlzLnN1Ym1pdHRlcjsKICAgIGRlbGV0ZSB0aGlzLm9ubGluZUFjY2VzczsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMucmVzdWx0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5zY2hvb2xCcmFuY2hWSVBDb2RlIiwgZnVuY3Rpb24oICkgewoKICAgIGJyYW5jaE5hbWUgPSAiNjYxNTAwLWJhbiI7CiAgICByZXN1bHQgPSAiMzEwMDE1IjsKCiAgICBBc3NlcnQuZXF1YWwoICJGaW5kIHNjaG9vbCBCcmFuY2ggVklQIENvZGUiLCAnQWRtaW5EYXRhLnNjaG9vbEJyYW5jaFZJUENvZGUoIGJyYW5jaE5hbWUgKScsIHJlc3VsdCApOwoKICAgIGRlbGV0ZSB0aGlzLmJyYW5jaE5hbWU7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclNjaG9vbExpYnJhcmllcyIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiNjYxNTAwIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYmFuIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJkYWciICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwogICAgcmVzdWx0ID0gWyAiMzAwNjE1LWthdGFsb2ciLCAiMzEwMDE1LWthdGFsb2ciLCAiMzEwMDA3LWthdGFsb2ciIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IENvbGxlY3Rpb25JZGVudGlmaWVycyBmb3Igc2Nob29sIGxpYnJhcmllcyIsICdBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU2Nob29sTGlicmFyaWVzKCBzdWJtaXR0ZXIsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCiAgICBkZWxldGUgdGhpcy5zdWJtaXR0ZXI7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5jb2xsZWN0aW9uSWRlbnRpZmllcnM7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmdldEV4dHJhQ29sbGVjdGlvbklkZW50aWZpZXJzRnJvbTg3MDk3MCIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTRjIwMTIwNyIgKTsKICAgIGZpZWxkLmFwcGVuZCggIngiLCAiRlNCMjAxMjA3IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwogICAgcmVzdWx0ID0gWyAiMTUwMDIxLWZqZXJuIiwgIjE1MDAyMS1iaWJsaW90ZWsiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IG1vcmUgY29sbGVjdGlvbiBpZGVudGlmaWVycyBmcm9tIDg3MDk3MCByZWNvcmRzIChGaWxtc3RyaWJlbikiLCAnQWRtaW5EYXRhLmdldEV4dHJhQ29sbGVjdGlvbklkZW50aWZpZXJzRnJvbTg3MDk3MCggcmVjb3JkLCBvbmxpbmVBY2Nlc3MsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNTAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAidSIsICJodHRwOi8vZWt1cnNlci5udS9rdXJzdXMvNDQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBbIF07CiAgICByZXN1bHQgPSBbICIxNTAwNTItZWt1cnNlciIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbW9yZSBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZyb20gODcwOTcwIHJlY29yZHMgKEUta3Vyc2VyIDEpIiwgJ0FkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAoIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKScsIHJlc3VsdCApOwoKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI4NTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ1IiwgImh0dHA6Ly9la3Vyc2VyLm51L2t1cnN1cy80NCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFsgXTsKICAgIHJlc3VsdCA9IFsgIjE1MDA1Mi1la3Vyc2VyIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBtb3JlIGNvbGxlY3Rpb24gaWRlbnRpZmllcnMgZnJvbSA4NzA5NzAgcmVjb3JkcyAoRS1rdXJzZXIgMikiLCAnQWRtaW5EYXRhLmdldEV4dHJhQ29sbGVjdGlvbklkZW50aWZpZXJzRnJvbTg3MDk3MCggcmVjb3JkLCBvbmxpbmVBY2Nlc3MsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjUwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInUiLCAiaHR0cDovL3d3dy50dXJ0ZW9yaS5kay9tb2QvYmlibG9naW4vaW5kZXgucGhwP2NvdXJzZT0xMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFsgXTsKICAgIHJlc3VsdCA9IFsgIjE1MDA1My10dXJ0ZW9yaSIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbW9yZSBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZyb20gODcwOTcwIHJlY29yZHMgKFR1cnRlb3JpKSIsICdBZG1pbkRhdGEuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwKCByZWNvcmQsIG9ubGluZUFjY2VzcywgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5vbmxpbmVBY2Nlc3M7CiAgICBkZWxldGUgdGhpcy5jb2xsZWN0aW9uSWRlbnRpZmllcnM7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMDYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFsgXTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgZnJvbSBzdWJtaXR0ZXIgODMwMDYwIChQSCBjYXNlIDQpIiwgJ0FkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAoIHN1Ym1pdHRlciwgZm9ybWF0LCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgoKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwoKICAgIHJlc3VsdCA9IFsgIjg3MDk3MC1mb3JzayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgZnJvbSBzdWJtaXR0ZXIgODMwMDYwIChQSCBzdWIgbGlicmFyeSAtIG5vdCBpbiBiaWJsaW90ZWsuZGssIFBIIGNhc2UgNSkiLCAnQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCggc3VibWl0dGVyLCBmb3JtYXQsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCgogICAgc3VibWl0dGVyID0gIjgzMDA2MCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFsgXTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgZnJvbSBzdWJtaXR0ZXIgODMwMDYwIChQSCBsaWJyYXJ5IGFuZCBzdWIgbGlicmFyeSAtIG5vdCBpbiBiaWJsaW90ZWsuZGssIFBIIGNhc2UgMSkiLCAnQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCggc3VibWl0dGVyLCBmb3JtYXQsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFsgXTsKCiAgICByZXN1bHQgPSBbICI4NzA5NzAtZm9yc2siIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIGZyb20gc3VibWl0dGVyIDgzMDA2MCAoUEggc3ViIGxpYnJhcnksICwgUEggY2FzZSA2KSIsICdBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwKCBzdWJtaXR0ZXIsIGZvcm1hdCwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKScsIHJlc3VsdCApOwoKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwoKICAgIHJlc3VsdCA9IFsgIjgzMDA2MC1rYXRhbG9nIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciBmcm9tIHN1Ym1pdHRlciA4MzAwNjAgKFBIIG9ubGluZSByZWNvcmQgd2l0aCBubyBob2xkaW5ncykiLCAnQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCggc3VibWl0dGVyLCBmb3JtYXQsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMuZm9ybWF0OwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5jb2xsZWN0aW9uSWRlbnRpZmllcnM7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAicmVzZWFyY2giOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzAwNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgIjgzMDA2MC1rYXRhbG9nIiwgIjg3MDk3MC1mb3JzayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKHJlc2VhcmNoIGxpYnJhcnksIFBIIGNhc2UgNCkiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgLy90aGUgbmV4dCB0ZXN0IGlzIGFsc28gY292ZXJlZCBpbiB1bml0dGVzdCBmb3IgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAicmVzZWFyY2giOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgIjg3MDk3MC1mb3JzayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKFBIIHN1YiBsaWJyYXJ5IC0gbm90IGluIGJpYmxpb3Rlay5kaywgUEggY2FzZSA1KSIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICAvL3RoZSBuZXh0IHRlc3QgaXMgYWxzbyBjb3ZlcmVkIGluIHVuaXR0ZXN0IGZvciBmdW5jdGlvbiBnZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKFBIIGxpYnJhcnkgYW5kIHN1YiBsaWJyYXJ5IC0gbm90IGluIGJpYmxpb3Rlay5kaywgLCBQSCBjYXNlIDEpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIC8vdGhlIG5leHQgdGVzdCBpcyBhbHNvIGNvdmVyZWQgaW4gdW5pdHRlc3QgZm9yIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MAogICAgc3VibWl0dGVyID0gIjgzMDA2MCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGxpYnJhcnlUeXBlID0gInJlc2VhcmNoIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICByZXN1bHQgPSBbICI4NzA5NzAtZm9yc2siIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIChQSCBzdWIgbGlicmFyeSwgLCBQSCBjYXNlIDYpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4MzAzODAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDM4MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAiODMwMzgwLWthdGFsb2ciIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIChQSCAtIG5vdCBpbiBiaWJsaW90ZWsuZGssICwgUEggY2FzZSAzKSIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICAvL3RoZSBuZXh0IHRlc3QgaXMgYWxzbyBjb3ZlcmVkIGluIHVuaXR0ZXN0IGZvciBmdW5jdGlvbiBnZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKCBQSCBvbmxpbmUgcmVjb3JkIHdpdGggbm8gaG9sZGluZ3MpICwgUEggY2FzZSA3IiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAicmVzZWFyY2giOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4ZSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAiODMwMDYwLWthdGFsb2ciLCAiODcwOTcwLWZvcnNrIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoUEggb25saW5lIHJlY29yZCB3aXRoIG5vIGhvbGRpbmdzIGFuZCBubyBTMTEpICwgUEggY2FzZSA4IiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcwIjsKICAgIGZvcm1hdCA9ICJiYXNpcyI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGxpYnJhcnlUeXBlID0gIm5vbmUiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICByZXN1bHQgPSBbICI4NzA5NzAtYmFzaXMiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIChEQkMgMSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MCI7CiAgICBmb3JtYXQgPSAiYmFzaXMiOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJub25lIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTRjIwMTIwNyIgKTsKICAgIGZpZWxkLmFwcGVuZCggIngiLCAiRlNGIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIHJlc3VsdCA9IFsgIjg3MDk3MC1iYXNpcyIsICIxNTAwMjEtZmplcm4iIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIChEQkMgMikiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MCI7CiAgICBmb3JtYXQgPSAiYmFzaXMiOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJub25lIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTRjIwMTIwNyIgKTsKICAgIGZpZWxkLmFwcGVuZCggIngiLCAiRlNCMjAxMjA3IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIHJlc3VsdCA9IFsgIjg3MDk3MC1iYXNpcyIsICIxNTAwMjEtZmplcm4iLCAiMTUwMDIxLWJpYmxpb3RlayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKERCQyAzKSIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcxIjsKICAgIGZvcm1hdCA9ICJmYWt0YWxpbmsiOwogICAgb25saW5lQWNjZXNzID0gIm5vdCBhdmFpbGFibGUiOwogICAgcmVzdWx0ID0gWyAiODcwOTcwLWJhc2lzIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoRmFrdGFsaW5rIGFzIG5hdGlvbmFsIGJpYmxpb2dyYXBoeSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcyknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcxIjsKICAgIGZvcm1hdCA9ICJmYWt0YWxpbmsiOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICByZXN1bHQgPSBbICI4NzA5NzEtZmFrdGFsaW5rIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoRmFrdGFsaW5rIGFzIEZha3RhbGluaykiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcyknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiMTI1NjAwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIGxpYnJhcnlUeXBlID0gInJlc2VhcmNoIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjEyNTYwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICByZXN1bHQgPSBbICIxMjU2MDAta2F0YWxvZyIsICI4NzA5NzAtdWRsYW5kIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoODcwOTcwLXVkbGFuZCAxKSIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiNzAwNDAwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIGxpYnJhcnlUeXBlID0gInB1YmxpYyI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImkiICk7CiAgICBmaWVsZC5hcHBlbmQoICJyIiwgIm4iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgcmVzdWx0ID0gWyAiNzAwNDAwLWthdGFsb2ciLCAiODcwOTcwLXVkbGFuZCIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKDg3MDk3MC11ZGxhbmQgMikiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjcwMDAwMCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBsaWJyYXJ5VHlwZSA9ICJwdWJsaWMiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiNzYxNTAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIHJlc3VsdCA9IFsgIjc2MTUwMC1rYXRhbG9nIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoNzAwMDAwIHRvIGxvY2FsIGlkZW50aWZpZXIgNzYxNTAwKSIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMuZm9ybWF0OwogICAgZGVsZXRlIHRoaXMubGlicmFyeVR5cGU7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnJlc3VsdDsKCn0gKQoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jcmVhdGVHZW5yZSIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDgiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgIngiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb3V0cHV0ID0gImZpa3Rpb24iCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGdlbnJlIChmaWt0aW9uKSIsICdBZG1pbkRhdGEuY3JlYXRlR2VucmUoIHJlY29yZCApOycsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jcmVhdGVHZW5yZSIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDgiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgInkiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb3V0cHV0ID0gIm5vbmZpa3Rpb24iCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGdlbnJlIChub25maWt0aW9uKSIsICdBZG1pbkRhdGEuY3JlYXRlR2VucmUoIHJlY29yZCApOycsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jcmVhdGVHZW5yZSIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI2NTIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJwIiwgIjg2IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG91dHB1dCA9ICIiCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGdlbnJlIChubyBnZW5yZSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUdlbnJlKCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUiLCBmdW5jdGlvbiggKSB7CgogICAgZGthYm1YbWwgPSA8cmVjb3JkIC8+OwogICAgZGthYm1YbWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+Q2QgKG11c2lrKTwvdHlwZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgd29ya1R5cGUgPSBbICJtdXNpYyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBtdXNpYyIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj5HcmFwaGljIG5vdmVsPC90eXBlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIGRrYWJtWG1sLmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICB3b3JrVHlwZSA9IFsgImxpdGVyYXR1cmUiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIHRlc3Qgd29ya3R5cGUgbGl0dGVyYXR1cmUiLCAnQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlKCBka2FibVhtbCApOycsIHdvcmtUeXBlICk7CgogICAgZGthYm1YbWwgPSA8cmVjb3JkIC8+OwogICAgZGthYm1YbWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50MSA9IDx0eXBlIHR5cGU9ImRrZGNwbHVzOkJpYkRLLVR5cGUiPkdyYXBoaWMgbm92ZWw8L3R5cGU+OwogICAgZWxlbWVudDEuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50MS5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudDEgKTsKICAgIGVsZW1lbnQyID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+Q2QgKG11c2lrKTwvdHlwZT47CiAgICBlbGVtZW50Mi5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQyLkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIGRrYWJtWG1sLmFwcGVuZENoaWxkKCBlbGVtZW50MiApOwogICAgd29ya1R5cGUgPSBbICJsaXRlcmF0dXJlIiwgIm11c2ljIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSB0ZXN0IHdvcmt0eXBlIGxpdHRlcmF0dXJlIEFORCBtdXNpYyIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIHdvcmtUeXBlID0gWyAibm9uZSIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBub25lIiwgJ0FkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKTsnLCB3b3JrVHlwZSApOwoKICAgIGRrYWJtWG1sID0gPHJlY29yZCAvPjsKICAgIGRrYWJtWG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudDEgPSA8c3ViamVjdCB0eXBlPSJka2RjcGx1czpnZW5yZSI+bGl0dGVyYXR1cmFuYWx5c2U8L3N1YmplY3Q+OwogICAgZWxlbWVudDEuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50MS5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudDEgKTsKICAgIGVsZW1lbnQyID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+QXJ0aWtlbDwvdHlwZT47CiAgICBlbGVtZW50Mi5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQyLkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIGRrYWJtWG1sLmFwcGVuZENoaWxkKCBlbGVtZW50MiApOwogICAgd29ya1R5cGUgPSBbICJhcnRpY2xlIiwgImFuYWx5c2lzIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSB0ZXN0IHdvcmt0eXBlIGFydGljbGUgQU5EIGFuYWx5c2lzIiwgJ0FkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKTsnLCB3b3JrVHlwZSApOwoKICAgIGRrYWJtWG1sID0gPHJlY29yZCAvPjsKICAgIGRrYWJtWG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudDEgPSA8c3ViamVjdD5mb3JmYXR0ZXJwb3J0cmFldHRlcjwvc3ViamVjdD47CiAgICBlbGVtZW50MS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGRrYWJtWG1sLmFwcGVuZENoaWxkKCBlbGVtZW50MSApOwogICAgZWxlbWVudDIgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj5BcnRpa2VsPC90eXBlPjsKICAgIGVsZW1lbnQyLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudDIuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQyICk7CiAgICB3b3JrVHlwZSA9IFsgInBvcnRyYWl0IiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSB0ZXN0IHdvcmt0eXBlIHBvcnRyYWl0IiwgJ0FkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKTsnLCB3b3JrVHlwZSApOwoKICAgIGRrYWJtWG1sID0gPHJlY29yZCAvPjsKICAgIGRrYWJtWG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0eXBlIHR5cGU9ImRrZGNwbHVzOkJpYkRLLVR5cGUiPk9tdGFsZTwvdHlwZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgd29ya1R5cGUgPSBbICJib29rZGVzY3JpcHRpb24iIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIHRlc3Qgd29ya3R5cGUgYm9va2Rlc2NyaXB0aW9uIiwgJ0FkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKTsnLCB3b3JrVHlwZSApOwoKICAgIGRrYWJtWG1sID0gPHJlY29yZCAvPjsKICAgIGRrYWJtWG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0eXBlIHR5cGU9ImRrZGNwbHVzOkJpYkRLLVR5cGUiPiYjeEM1O3Jib2c8L3R5cGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIHdvcmtUeXBlID0gWyAibGl0ZXJhdHVyZSIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBsaXRlcmF0dXJlIChcdTAwQzVyYm9nKSIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj5Va2VuZHQgbWF0ZXJpYWxldHlwZTwvdHlwZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgd29ya1R5cGUgPSBbICJub25lIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSB0ZXN0IHdvcmt0eXBlIG5vbmUgKHVua25vd24gbWF0ZXJpYWx0eXBlKSIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCgogICAgZGVsZXRlIHRoaXMuZGthYm1YbWw7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDE7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50MjsKICAgIGRlbGV0ZSB0aGlzLndvcmtUeXBlOwoKfSApOwo=","moduleName":"AdminData"},{"javascript":"","moduleName":"PallesGavebodCriteria"},{"javascript":"","moduleName":"XmlToOpenUrl"},{"javascript":"","moduleName":"LinkXmlCreator"},{"javascript":"LyoqIEBmaWxlIFNvcnQgc3R1ZmYgZnJvbSBkYmNrYXQgKi8KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLyohCiAgICBcZmlsZSBGaWVsZFNvcnRlci51c2UuanMKKi8KCkVYUE9SVEVEX1NZTUJPTFMgPSBbICJTb3J0QnlTdWJGaWVsZHMiLCAiU29ydGVyIiwgIlNvcnRCeU5hbWUiIF07CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQp1c2UoICJNYXJjIiApOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8qKiBEZWZpbmVzIGEgc29ydGVyIG9iamVjdCB0byBzb3J0IDIgZmllbGRzIGJhc2VkIG9uIGEgc3ViIGZpZWxkIHZhbHVlLgogKgogKiBAcGFyYW0ge1JlZ0V4cH0gW3BhdHRlcm5dIEFuIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIHRoZSBzdWIgZmllbGQgbmFtZXMsIHRoYXQgeW91IHdhbnQgdG8gc29ydCBieS4KICogQHBhcmFtIHtOdW1iZXJ9IFtvcmRlcl0gVGhlIHNvcnQgb3JkZXIuIE9uZSBvZjogU29ydGVyLkFTQyBvciBTb3J0ZXIuREVTQyAKICogQGNvbnN0cnVjdG9yCiAqIEBzZWUgTWFyY0NsYXNzZXMKICogQHNlZSBSZWNvcmQKICogQHNlZSBGaWVsZAogKiBAc2VlIFNvcnRlciAKICogQG5hbWUgU29ydEJ5U3ViRmllbGRzICovCmZ1bmN0aW9uIFNvcnRCeVN1YkZpZWxkcyggcGF0dGVybiwgb3JkZXIgKSB7CiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuOwoKICAgIHRoaXMub3JkZXIgPSBvcmRlcjsKICAgIGlmICggb3JkZXIgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHRoaXMub3JkZXIgPSBTb3J0ZXIuQVNDOwogICAgfTsKfTsKCi8qKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIGZpZWxkLCB0aGF0IHNob3VsZCBieSB1c2VkIGZvciBzb3J0aW5nLgogKiAKICogQHBhcmFtIHtPYmplY3R9IGZpZWxkIFRoZSBmaWVsZC4KICogCiAqIEBtZW1iZXJPZiBTb3J0QnlTdWJGaWVsZHMKICogQG1ldGhvZAogKiBAbmFtZSBTb3J0QnlTdWJGaWVsZHMuZ2V0VmFsdWUKICogQG5hbWUgU29ydEJ5U3ViRmllbGRzI2dldFZhbHVlICovClNvcnRCeVN1YkZpZWxkcy5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiggZmllbGQgKSB7CiAgICByZXR1cm4gZmllbGQuZ2V0VmFsdWUoIG5ldyBNYXRjaFN1YkZpZWxkKCB0aGlzLnBhdHRlcm4gKSApOwp9OwoKLyoqIFNvcnRzIHR3byBmaWVsZHMgYWNjb3JkaW5nIHRvIHRoZSBzdWIgZmllbGQgdmFsdWUuCiAqIAogKiBAcGFyYW0ge0ZpZWxkfSBsaHMgVGhlIGZpcnN0IGZpZWxkLgogKiBAcGFyYW0ge0ZpZWxkfSByaHMgVGhlIHNlY29uZCBmaWVsZC4KICogCiAqIEByZXR1cm4ge051bWJlcn0gLTEgaWYgbGhzIDwgcmhzLCAwIGlmIGxocyA9PSByaHMsIDEgaWYgbGhzID4gcmhzLgogKiAKICogQG1lbWJlck9mIFNvcnRCeVN1YkZpZWxkcwogKiBAbWV0aG9kCiAqIEBuYW1lIFNvcnRCeVN1YkZpZWxkcy5zb3J0CiAqIEBuYW1lIFNvcnRCeVN1YkZpZWxkc0Bzb3J0ICovClNvcnRCeVN1YkZpZWxkcy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKCBsaHMsIHJocyApIHsKICAgIHZhciBsdnMgPSB0aGlzLmdldFZhbHVlKCBsaHMgKTsKICAgIHZhciBydnMgPSB0aGlzLmdldFZhbHVlKCByaHMgKTsKICAgIHZhciBhID0gcGFyc2VJbnQoIGx2cyApOwogICAgdmFyIGIgPSBwYXJzZUludCggcnZzICk7CgogICAgaWYgKCBpc05hTiggYSApIHx8IGlzTmFOKCBiICkgKSB7CiAgICAgICAgYSA9IGx2czsKICAgICAgICBiID0gcnZzOwogICAgfTsKCiAgICBpZiAoIGEgPCBiICkgewogICAgICAgIHJldHVybiAtMTsKICAgIH0gZWxzZSBpZiAoIGEgPiBiICkgewogICAgICAgIHJldHVybiAxOwogICAgfTsKCiAgICByZXR1cm4gMDsKfTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8qKiBEZWZpbmVzIGEgc29ydGVyIG9iamVjdCB0byBzb3J0IDIgZmllbGRzIGJhc2VkIG9uIHRoZSBmaWVsZCBuYW1lLgogKgogKiBAcGFyYW0ge051bWJlcn0gW29yZGVyXSBUaGUgc29ydCBvcmRlci4gT25lIG9mOiBTb3J0ZXIuQVNDIG9yIFNvcnRlci5ERVNDIAogKiBAY29uc3RydWN0b3IKICogQHNlZSBNYXJjQ2xhc3NlcwogKiBAc2VlIFJlY29yZAogKiBAc2VlIEZpZWxkCiAqIEBzZWUgU29ydGVyIAogKiBAbmFtZSBTb3J0QnlOYW1lICovCmZ1bmN0aW9uIFNvcnRCeU5hbWUoIG9yZGVyICkgewogICAgdGhpcy5vcmRlciA9IG9yZGVyOwoKICAgIGlmICggb3JkZXIgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHRoaXMub3JkZXIgPSBTb3J0ZXIuQVNDOwogICAgfTsKfTsKCi8qKiBTb3J0cyB0d28gZmllbGRzIGFjY29yZGluZyB0byB0aGllciBuYW1lcy4KICogCiAqIEBwYXJhbSB7RmllbGR9IGxocyBUaGUgZmlyc3QgZmllbGQuCiAqIEBwYXJhbSB7RmllbGR9IHJocyBUaGUgc2Vjb25kIGZpZWxkLgogKiAKICogQHJldHVybiB7TnVtYmVyfSAtMSBpZiBsaHMgPCByaHMsIDAgaWYgbGhzID09IHJocywgMSBpZiBsaHMgPiByaHMuCiAqIAogKiBAbWVtYmVyT2YgU29ydEJ5TmFtZQogKiBAbWV0aG9kCiAqIEBuYW1lIFNvcnRCeU5hbWUuc29ydAogKiBAbmFtZSBTb3J0QnlOYW1lQHNvcnQgKi8KU29ydEJ5TmFtZS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKCBsaHMsIHJocyApIHsKICAgIHZhciBsdnMgPSBsaHMubmFtZTsKICAgIHZhciBydnMgPSByaHMubmFtZTsKCiAgICBpZiAoIGx2cyA8IHJ2cyApIHsKICAgICAgICByZXR1cm4gLTE7CiAgICB9IGVsc2UgaWYgKCBsdnMgPiBydnMgKSB7CiAgICAgICAgcmV0dXJuIDE7CiAgICB9OwoKICAgIHJldHVybiAwOwp9OwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLyoqIERlZmluZXMgYSBzb3J0ZXIgb2JqZWN0IHRvIHNvcnQgMiBmaWVsZHMgYmFzZWQgb24gYW4gYXJyYXkgb2Ygb3RoZXIgc29ydCBvYmplY3RzLgogKgogKiBAcGFyYW0ge0FycmF5fSBbc29ydGVyXSBBcnJheSBvZiBzb3J0ZXIgb2JqZWN0cy4gIAogKiBAY29uc3RydWN0b3IKICogQHNlZSBNYXJjQ2xhc3NlcwogKiBAc2VlIFJlY29yZAogKiBAc2VlIEZpZWxkCiAqIEBuYW1lIFNvcnRlciAqLwpmdW5jdGlvbiBTb3J0ZXIoIHNvcnRlcnMgKSB7CiAgICB0aGlzLnNvcnRlcnMgPSBzb3J0ZXJzOwp9OwoKLyoqIENvbnN0YW50IGZvciBhc2Mgc29ydGluZy4gCiAqCiAqIEB0eXBlIHtOdW1iZXJ9CiAqIEBuYW1lIFNvcnRlci5BU0MKICogQG5hbWUgU29ydGVyI0FTQyAqLwpTb3J0ZXIuQVNDID0gMTsKCi8qKiBDb25zdGFudCBmb3IgZGVzYyBzb3J0aW5nLiAKICoKICogQHR5cGUge051bWJlcn0KICogQG5hbWUgU29ydGVyLkRFU0MKICogQG5hbWUgU29ydGVyI0RFU0MgKi8KU29ydGVyLkRFU0MgPSAtMTsKCi8qKiBTb3J0cyB0d28gZmllbGRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkgb2Ygc29ydGVyIG9iamVjdHMuCiAqIAogKiBFYWNoIHNvcnRlciBvYmplY3QgaXMgY2FsbGVkIGluIHR1cm4gdG8gc29ydCB0aGUgdHdvIGZpZWxkcy4gSWYgYSBzb3J0ZXIgCiAqIG9iamVjdCByZXR1cm5zIGEgdmFsdWUgb3RoZXIgdGhhbiAwLCB0aGVuIHRoZSB2YWx1ZSBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlCiAqIHRoZSBuZXh0IHNvcnRlciBvYmplY3QgZnJvbSB0aGUgYXJyYXkgaXMgY2FsbGVkLgogKiAKICogSW4gY2FzZSB0aGUgbGFzdCBzb3J0ZXIgb2JqZWN0IGlzIGNhbGxlZCwgdGhlbiBpdHMgcmV0dXJuIHZhbHVlIGlzIGFsd2F5cyAKICogcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbi4KICogCiAqIEBwYXJhbSB7RmllbGR9IGxocyBUaGUgZmlyc3QgZmllbGQuCiAqIEBwYXJhbSB7RmllbGR9IHJocyBUaGUgc2Vjb25kIGZpZWxkLgogKiAKICogQHJldHVybiB7TnVtYmVyfSAtMSBpZiBsaHMgPCByaHMsIDAgaWYgbGhzID09IHJocywgMSBpZiBsaHMgPiByaHMuCiAqIAogKiBAbWVtYmVyT2YgU29ydGVyCiAqIEBtZXRob2QKICogQG5hbWUgU29ydGVyLnNvcnQKICogQG5hbWUgU29ydGVyQHNvcnQgKi8KU29ydGVyLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oIGxocywgcmhzICkgewogICAgaWYgKCB0aGlzLnNvcnRlcnMgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHJldHVybiAwOwogICAgfTsKCiAgICB2YXIgcmVzdWx0OwogICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5zb3J0ZXJzLmxlbmd0aDsgaSsrICkgewogICAgICAgIHJlc3VsdCA9IHRoaXMuc29ydGVyc1sgaSBdLnNvcnQoIGxocywgcmhzICkgKiB0aGlzLnNvcnRlcnNbIGkgXS5vcmRlcjsKCiAgICAgICAgaWYgKCByZXN1bHQgIT0gMCApIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9OwogICAgfTsKCiAgICByZXR1cm4gcmVzdWx0Owp9Owo=","moduleName":"FieldSorter"},{"javascript":"","moduleName":"DanMarc2ToDkabmElements"},{"javascript":"","moduleName":"MarcRecordValidation"},{"javascript":"","moduleName":"MarcSubfieldRules"},{"javascript":"","moduleName":"DanMarc2Preparation"},{"javascript":"","moduleName":"LegalRecordChecker"},{"javascript":"","moduleName":"DkabmValidation"},{"javascript":"","moduleName":"TingXmlValidation"},{"javascript":"","moduleName":"ResultLogger"},{"javascript":"","moduleName":"MarcRecordCreator"},{"javascript":"","moduleName":"DataIOBackendConverterE4X"}],"invocationMethod":"convertRawRecord"}}]}}