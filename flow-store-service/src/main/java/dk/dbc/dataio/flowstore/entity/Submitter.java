package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.commons.types.SubmitterContent;
import dk.dbc.dataio.commons.types.json.mixins.MixIns;
import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Lob;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Persistence domain class for submitter objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = Submitter.TABLE_NAME,
uniqueConstraints = {
    @UniqueConstraint(columnNames = { Submitter.NAME_INDEX_COLUMN }),
    @UniqueConstraint(columnNames = { Submitter.NUMBER_INDEX_COLUMN }),
})
@NamedQueries({
    @NamedQuery(name = Submitter.QUERY_FIND_ALL, query = "SELECT submitter FROM Submitter submitter ORDER BY submitter.numberIndexValue ASC")
})
public class Submitter extends VersionedEntity {
    public static final String TABLE_NAME = "submitters";
    public static final String QUERY_FIND_ALL = "Submitter.findAll";
    static final String NAME_INDEX_COLUMN = "name_idx";
    static final String NUMBER_INDEX_COLUMN = "number_idx";

    @Lob
    @Column(name = NAME_INDEX_COLUMN, nullable = false)
    private String nameIndexValue;

    @Column(name = NUMBER_INDEX_COLUMN, nullable = false)
    private Long numberIndexValue;

    String getNameIndexValue() {
        return nameIndexValue;
    }

    Long getNumberIndexValue() {
        return numberIndexValue;
    }

    /**
     * {@inheritDoc}
     * @throws NullPointerException if given null-valued data argument
     * @throws IllegalArgumentException if given empty-valued data argument
     * @throws JsonException if non-json JSON string or if given JSON is invalid SubmitterContent
     */
    @Override
    protected void preProcessContent(String data) throws JsonException {
        final SubmitterContent submitterContent = JsonUtil.fromJson(data, SubmitterContent.class, MixIns.getMixIns());
        nameIndexValue = submitterContent.getName();
        numberIndexValue = submitterContent.getNumber();
    }
}
