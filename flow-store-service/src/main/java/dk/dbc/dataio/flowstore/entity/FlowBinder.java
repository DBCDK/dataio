package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import dk.dbc.commons.jsonb.JSONBContext;
import dk.dbc.commons.jsonb.JSONBException;
import dk.dbc.dataio.commons.types.FlowBinderContent;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;

/**
 * Persistence domain class for flow binder objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string.
 */
@Entity
@Table(name = FlowBinder.TABLE_NAME)
@SqlResultSetMappings({
        @SqlResultSetMapping(name = "FlowBinder.implicit", entities = {
                @EntityResult(entityClass = FlowBinder.class)}),
        @SqlResultSetMapping(name = "FlowBinder.ident", classes = {
                @ConstructorResult(
                        targetClass = dk.dbc.dataio.commons.types.FlowBinderIdent.class,
                        columns = {
                                @ColumnResult(name = "name"),
                                @ColumnResult(name = "id")})}),
})
@NamedNativeQueries({
        @NamedNativeQuery(
                name = FlowBinder.FIND_ALL_QUERY_NAME,
                query = "SELECT * FROM " + FlowBinder.TABLE_NAME + " flowbinder ORDER BY lower(content->>'name') ASC",
                resultSetMapping = "FlowBinder.implicit"
        ),
        @NamedNativeQuery(
                name = FlowBinder.MATCH_FLOWBINDER_QUERY_NAME,
                query = "SELECT * FROM " + FlowBinder.TABLE_NAME + " WHERE content @> ?::jsonb",
                resultSetMapping = "FlowBinder.implicit"
        ),
        @NamedNativeQuery(
                name = FlowBinder.MATCH_FLOWBINDERIDENT_QUERY_NAME,
                query = "SELECT content->>'name' AS name, id FROM " + FlowBinder.TABLE_NAME +
                        " WHERE content @> ?::jsonb ORDER BY lower(content->>'name') ASC",
                resultSetMapping = "FlowBinder.ident"
        ),
})
public class FlowBinder extends Versioned {
    private static final JSONBContext jsonbContext = new JSONBContext();

    public static final String TABLE_NAME = "flow_binders";

    public static final String MATCH_FLOWBINDER_QUERY_NAME = "FlowBinder.matchFlowBinder";
    public static final String MATCH_FLOWBINDERIDENT_QUERY_NAME = "FlowBinder.matchFlowBinderIdent";
    public static final String FIND_ALL_QUERY_NAME = "FlowBinder.findAll";

    @Column(name = "flow_id")
    private Long flowId;

    @Column(name = "sink_id")
    private Long sinkId;

    @JsonIgnore
    public Long getFlowId() {
        return flowId;
    }

    @JsonIgnore
    public Long getSinkId() {
        return sinkId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setContent(String data) throws JSONBException {
        super.setContent(data);
        final FlowBinderContent flowBinderContent = jsonbContext.unmarshall(data, FlowBinderContent.class);
        flowId = flowBinderContent.getFlowId();
        sinkId = flowBinderContent.getSinkId();
    }
}
