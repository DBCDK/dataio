/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.flowstore.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import java.util.Objects;

/**
 * Persistence domain class for HarvesterConfig objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = "harvester_configs")
@SqlResultSetMapping(name="HarvesterConfig.implicit", entities = {
        @EntityResult(entityClass = HarvesterConfig.class)}
)
@NamedQueries({
    @NamedQuery(name = HarvesterConfig.QUERY_FIND_ALL_OF_TYPE,
        query = "SELECT harvesterConfig FROM HarvesterConfig harvesterConfig where harvesterConfig.type = :type"),
})
@NamedNativeQueries({
        @NamedNativeQuery(name = HarvesterConfig.QUERY_FIND_ALL_ENABLED_OF_TYPE,
                query = "SELECT * FROM harvester_configs WHERE type = ? AND content @>'{\"enabled\": true}'::jsonb",
                resultSetMapping = "HarvesterConfig.implicit"
        ),
        @NamedNativeQuery(name = HarvesterConfig.QUERY_FIND_TYPE_WITH_CONTENT,
                query = "SELECT * FROM harvester_configs WHERE type = ? AND content @>?::jsonb",
                resultSetMapping = "HarvesterConfig.implicit"
        )
})
public class HarvesterConfig extends Versioned {
    public static final String QUERY_FIND_ALL_OF_TYPE = "Harvester.findAllOfType";
    public static final String QUERY_FIND_ALL_ENABLED_OF_TYPE = "Harvester.findAllEnabledOfType";
    public static final String QUERY_FIND_TYPE_WITH_CONTENT = "Harvester.findTypeWithContent";

    @Column(name = "type", nullable = false)
    private String type;


    public String getType() {
        return type;
    }

    //
    // fluent Api

    public HarvesterConfig withId(Long id) {
        this.setId( id );
        return this;
    }

    public HarvesterConfig withVersion(Long version) {
            super.setVersion( version );
            return this;
         }


    public HarvesterConfig withContent(String content) {
        this.setContent( content) ;
        return this;
    }


    public HarvesterConfig withType(String type) {
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HarvesterConfig)) return false;
        HarvesterConfig that = (HarvesterConfig) o;
        return Objects.equals(getType(), that.getType());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getType());
    }



    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("HarvesterConfig{");
        sb.append("id=").append(getId());
        sb.append(", version=").append(getVersion());
        sb.append(", type='").append(getType()).append('\'');
        sb.append(", content='").append(getContent()).append('\'');
        sb.append('}');
        return sb.toString();
    }
}
