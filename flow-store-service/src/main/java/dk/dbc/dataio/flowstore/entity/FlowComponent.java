/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonRawValue;
import dk.dbc.dataio.commons.types.FlowComponentContent;
import dk.dbc.dataio.commons.types.FlowComponentView;
import dk.dbc.dataio.commons.types.JavaScript;
import dk.dbc.dataio.jsonb.JSONBContext;
import dk.dbc.dataio.jsonb.JSONBException;

import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.Index;
import javax.persistence.Lob;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import java.util.ArrayList;
import java.util.List;

/**
 * Persistence domain class for flow component objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = FlowComponent.TABLE_NAME,
    uniqueConstraints = {
        @UniqueConstraint(columnNames = { FlowComponent.NAME_INDEX_COLUMN })
    },
    indexes = @Index(columnList = FlowComponent.NAME_INDEX_COLUMN)
)
@NamedNativeQueries({
        @NamedNativeQuery(
                name = FlowComponent.QUERY_FIND_ALL,
                query = "SELECT * FROM flow_components ORDER BY content->'name' ASC",
                resultClass = FlowComponent.class

        )
})
public class FlowComponent extends Versioned {
    public static final String TABLE_NAME = "flow_components";
    public static final String QUERY_FIND_ALL = "FlowComponent.findAll";
    static final String NAME_INDEX_COLUMN = "name_idx";
    static final JSONBContext jsonbContext=new JSONBContext();

    @Lob
    @Column(nullable = true, columnDefinition = "json")
    @Convert(converter = JsonConverter.class)
    private String next;

    @JsonRawValue
    public String getNext() {
        return next;
    }

    public void setNext(String next) {
        if(next!= null) {
            this.next = next.isEmpty() ? null : next;
        }
    }


    FlowComponent withId(long id) {
        setId(id);
        return this;
    }

    FlowComponent withVersion( long version ) {
        setVersion( version );
        return this;
    }

    public FlowComponent withContent( String content ) throws JSONBException {
        this.setContent( content );
        return this;
    }

    public FlowComponent withNext(String next) {
        this.next = next;
        return this;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FlowComponent that = (FlowComponent) o;

        try {
            final FlowComponentContent thisContent=jsonbContext.unmarshall(getContent(), FlowComponentContent.class);
            final FlowComponentContent thatContent=jsonbContext.unmarshall(that.getContent(), FlowComponentContent.class);

            final FlowComponentContent thisNext=next != null ? jsonbContext.unmarshall(next, FlowComponentContent.class): null;
            final FlowComponentContent thatNext=next != null ? jsonbContext.unmarshall(that.getNext(), FlowComponentContent.class): null;



            if (next != null ? !thisNext.equals(thatNext) : that.next != null) return false;
            return thisContent.equals(thatContent);

        } catch (JSONBException e) {
            return false;
        }
    }

    @Override
    public int hashCode() {
        try {
            int result=jsonbContext.unmarshall(getContent(), FlowComponentContent.class).hashCode();
            result = 31 * result + (next != null ? jsonbContext.unmarshall(next, FlowComponentContent.class).hashCode() : 0);
            return result;
        } catch (JSONBException e) {
            return 0;
        }
    }

    public String generateView() {
        // Used during database migration
        return generateView(getVersion());
    }

    public String generateView(Long version) {
        try {
            final FlowComponentContent content =
                    jsonbContext.unmarshall(getContent(), FlowComponentContent.class);
            FlowComponentContent nextContent = null;
            final String next = getNext();
            if (next != null && !next.isEmpty()) {
                nextContent = jsonbContext.unmarshall(getNext(), FlowComponentContent.class);
            }
            final FlowComponentView view = new FlowComponentView()
                    .withId(getId())
                    .withVersion(version)
                    .withName(content.getName())
                    .withDescription(content.getDescription())
                    .withProject(content.getSvnProjectForInvocationJavascript())
                    .withScriptName(content.getInvocationJavascriptName())
                    .withMethod(content.getInvocationMethod())
                    .withModules(getModuleNames(content.getJavascripts()));
            if (nextContent != null) {
                view.withNextModules(getModuleNames(nextContent.getJavascripts()));
            }
            return jsonbContext.marshall(view);
        } catch (JSONBException e) {
            throw new IllegalStateException(e);
        }
    }

    private List<String> getModuleNames(List<JavaScript> scripts) {
        final List<String> moduleNames = new ArrayList<>(scripts.size());
        scripts.forEach(javaScript -> {
            final String moduleName = javaScript.getModuleName();
            if (!moduleName.isEmpty()) {
                moduleNames.add(moduleName);
            }
        });
        return moduleNames;
    }
}
