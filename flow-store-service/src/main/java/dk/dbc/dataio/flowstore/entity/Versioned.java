package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonRawValue;
import dk.dbc.commons.jsonb.JSONBException;

import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.MappedSuperclass;
import javax.persistence.Version;

/**
 * Base class for flow store entities where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@MappedSuperclass
public class Versioned {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Version
    @Column(nullable = false)
    private Long version;

    @Lob
    @Column(nullable = false, columnDefinition = "json")
    @Convert(converter = JsonConverter.class)
    private String content;

    public Long getId() {
        return id;
    }

    public void setId(Long id) { this.id = id; }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    @JsonRawValue
    public String getContent() {
        return content;
    }

    /**
     * Sets entity data content as JSON string
     * @param content entity data as JSON string
     * @throws JSONBException may be thrown by sub class if content is preprocessed as JSON
     */
    public void setContent(String content) throws JSONBException {
        this.content = content;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Versioned versioned = (Versioned) o;

        if (id != null ? !id.equals(versioned.id) : versioned.id != null) return false;
        if (version != null ? !version.equals(versioned.version) : versioned.version != null) return false;
        return content != null ? content.equals(versioned.content) : versioned.content == null;

    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (version != null ? version.hashCode() : 0);
        result = 31 * result + (content != null ? content.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "Versioned{" +
                "id=" + id +
                ", version=" + version +
                ", content='" + content + '\'' +
                '}';
    }
}
