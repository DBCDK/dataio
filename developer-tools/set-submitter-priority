#!/usr/bin/env python
# Copyright Dansk Bibliotekscenter a/s. Licensed under GNU GPL v3
# See license text at https://opensource.dbc.dk/licenses/gpl-3.0
#
# -*- coding: utf-8 -*-
# -*- mode: python -*-

import argparse
import json
import os
import requests
import sys
import warnings

from requests.packages.urllib3 import exceptions


class FlowStore:
    def __init__(self, flowstore_url):
        self.flowstore_url = flowstore_url

    def set_submitter_priority(self, submitter_number, priority):
        submitter = self._get_submitter_by_number(submitter_number)
        self._update_submitter_priority(submitter, priority)

    def _get_submitter_by_number(self, submitter_number):
        response = FlowStore.http_get(self.flowstore_url + "/submitters/searches/number/%s" % submitter_number)
        if response.status_code != requests.codes.OK:
            raise FlowStoreError("{} status code while retrieving submitter {} {}"
                                 .format(response.status_code, submitter_number, response.text))
        return json.loads(response.content)

    def _update_submitter_priority(self, submitter, priority):
        submitter_content = submitter['content']
        if priority is None:
            if 'priority' in submitter_content:
                del submitter_content['priority']
        else:
            submitter_content['priority'] = priority.upper()
        response = FlowStore.http_post(self.flowstore_url + "/submitters/%s/content" % submitter['id'],
                                       submitter_content, version=submitter['version'])
        if response.status_code != requests.codes.OK:
            raise FlowStoreError("{} status code while updating submitter {} {}"
                                 .format(response.status_code, submitter_content['number'], response.text))

    @staticmethod
    def http_post(url, json_data, version=0):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", exceptions.InsecureRequestWarning)
            response = requests.post(url, json=json_data, verify=False,
                                     headers={'content-type': 'application/json; charset=UTF-8', 'If-Match': version})
        return response

    @staticmethod
    def http_get(url):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", exceptions.InsecureRequestWarning)
            response = requests.get(url, verify=False)
        return response


class FlowStoreError(Exception):
    def __init__(self, message):
        # Call the base class constructor with the parameters it needs
        super(FlowStoreError, self).__init__(message)


def parse_args():
    parser = argparse.ArgumentParser(description='Script for setting submitter priority')
    parser.add_argument('-e', '--environment', help='dataIO environment, defaults to prod',
                        choices=['prod', 'staging'], default='prod')
    parser.add_argument('-p', '--priority', help='submitter priority, defaults to remove',
                        choices=['high', 'normal', 'low'])
    parser.add_argument('submitters', help='file containing submitter numbers, one on each line',
                        type=argparse.FileType('r'), default=sys.stdin)

    return parser.parse_args()


def main():
    args = parse_args()
    try:
        flowstore = FlowStore("http://flowstore.dataio.%s.mcp1.dbc.dk/dataio/flow-store-service" % args.environment)
        for submitter_number in args.submitters:
            submitter_number = submitter_number.strip()
            if submitter_number:
                try:
                    flowstore.set_submitter_priority(submitter_number,
                                                     args.priority if 'priority' in vars(args) else None)
                    print '[OK]', submitter_number
                except FlowStoreError as e:
                    print '[ERROR]', e
    finally:
        args.submitters.close()

    sys.exit(os.EX_OK)


if __name__ == "__main__":
    main()
