package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonRawValue;
import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;

import javax.persistence.*;

/**
 * Base class for flow store entities where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@MappedSuperclass
public class VersionedEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Version
    @Column(nullable = false)
    private Long version;

    @Lob
    @Column(nullable = false)
    private String content;

    public Long getId() {
        return id;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    @JsonRawValue
    public String getContent() {
        return content;
    }

    /**
     * Sets entity data content as JSON string doing any necessary pre-processing
     * of the data
     *
     * @param content entity data as JSON string
     *
     * @throws JsonException when given invalid (null-valued, empty-valued or non-json) JSON string
     */
    public void setContent(String content) throws JsonException {
        preProcessContent(content);
        this.content = content;
    }

    /**
     * Performs any necessary pre-processing of given data. Can for example
     * be specialized in sub class to do index value extraction.
     *
     * @param data entity content
     *
     * @throws JsonException when given invalid (null-valued, empty-valued or non-json) JSON string
     */
    protected void preProcessContent(String data) throws JsonException {
        JsonUtil.getJsonRoot(data);
    }
}

