package dk.dbc.dataio.commons.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import dk.dbc.dataio.commons.utils.invariant.InvariantUtil;

import java.io.Serializable;

/**
 * Job specification DTO class.
 */
public class JobSpecification implements Serializable {
    private static final long serialVersionUID = 731600708416455339L;

    public enum Type {TRANSIENT, PERSISTENT, TEST }

    private final String packaging;
    private final String format;
    private final String charset;
    private final String destination;
    private final long submitterId;
    private final String mailForNotificationAboutVerification;
    private final String mailForNotificationAboutProcessing;
    private final String resultmailInitials;
    // Due to GWT serialization issues we cannot use java.net.URI or java.net.URL
    private final String dataFile;
    private final Type type;

    /**
     * Class constructor
     *
     * @param packaging job packaging (rammeformat)
     * @param format  job format (indholdsformat)
     * @param charset job character set
     * @param destination job destination
     * @param submitterId submitter number(> 0)
     * @param mailForNotificationAboutVerification mail address for notification about the verification step.
     * @param mailForNotificationAboutProcessing mail address for notification about the processing step.
     * @param resultmailInitials According to transfile spec: "Initialer til identifikation af resultatmail fra DanBib".
     * @param dataFile job data file
     * @param type job type
     *
     * @throws NullPointerException if given null-valued argument
     * @throws IllegalArgumentException if given empty valued String argument
     * or if value of submitterId is <= 0
     */
    @JsonCreator
    public JobSpecification(@JsonProperty("packaging") String packaging,
                            @JsonProperty("format") String format,
                            @JsonProperty("charset") String charset,
                            @JsonProperty("destination") String destination,
                            @JsonProperty("submitterId") long submitterId,
                            @JsonProperty("mailForNotificationAboutVerification") String mailForNotificationAboutVerification,
                            @JsonProperty("mailForNotificationAboutProcessing") String mailForNotificationAboutProcessing,
                            @JsonProperty("resultmailInitials") String resultmailInitials,
                            @JsonProperty("dataFile") String dataFile,
                            @JsonProperty("type") Type type) throws NullPointerException, IllegalArgumentException {

        this.packaging = InvariantUtil.checkNotNullNotEmptyOrThrow(packaging, "packaging");
        this.format = InvariantUtil.checkNotNullNotEmptyOrThrow(format, "format");
        this.charset = InvariantUtil.checkNotNullNotEmptyOrThrow(charset, "charset");
        this.destination = InvariantUtil.checkNotNullNotEmptyOrThrow(destination, "destination");
        this.submitterId = InvariantUtil.checkLowerBoundOrThrow(submitterId, "submitterId", Constants.PERSISTENCE_ID_LOWER_BOUND);
        this.mailForNotificationAboutVerification = InvariantUtil.checkNotNullOrThrow(mailForNotificationAboutVerification, "mailForNotificationAboutVerification");
        this.mailForNotificationAboutProcessing = InvariantUtil.checkNotNullOrThrow(mailForNotificationAboutProcessing, "mailForNotificationAboutProcessing");
        this.resultmailInitials = InvariantUtil.checkNotNullOrThrow(resultmailInitials, "resultmailInitials");
        this.dataFile = InvariantUtil.checkNotNullNotEmptyOrThrow(dataFile, "dataFile");
        this.type = type;
    }

    public String getCharset() {
        return charset;
    }

    public String getDataFile() {
        return dataFile;
    }

    public String getDestination() {
        return destination;
    }

    public String getFormat() {
        return format;
    }

    public String getPackaging() {
        return packaging;
    }

    // Submitter id represents the unique submitter number and not the id generated by the system when a new submitter is created
    public long getSubmitterId() {
        return submitterId;
    }

    public String getMailForNotificationAboutVerification() {
        return mailForNotificationAboutVerification;
    }

    public String getMailForNotificationAboutProcessing() {
        return mailForNotificationAboutProcessing;
    }

    public String getResultmailInitials() {
        return resultmailInitials;
    }

    public Type getType() {
        return type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof JobSpecification)) return false;

        JobSpecification that = (JobSpecification) o;

        if (getSubmitterId() != that.getSubmitterId()) return false;
        if (!getPackaging().equals(that.getPackaging())) return false;
        if (!getFormat().equals(that.getFormat())) return false;
        if (!getCharset().equals(that.getCharset())) return false;
        if (!getDestination().equals(that.getDestination())) return false;
        if (!getMailForNotificationAboutVerification().equals(that.getMailForNotificationAboutVerification()))
            return false;
        if (!getMailForNotificationAboutProcessing().equals(that.getMailForNotificationAboutProcessing())) return false;
        if (!getResultmailInitials().equals(that.getResultmailInitials())) return false;
        if (!getDataFile().equals(that.getDataFile())) return false;
        return type == that.type;

    }

    @Override
    public int hashCode() {
        int result = getPackaging().hashCode();
        result = 31 * result + getFormat().hashCode();
        result = 31 * result + getCharset().hashCode();
        result = 31 * result + getDestination().hashCode();
        result = 31 * result + (int) (getSubmitterId() ^ (getSubmitterId() >>> 32));
        result = 31 * result + getMailForNotificationAboutVerification().hashCode();
        result = 31 * result + getMailForNotificationAboutProcessing().hashCode();
        result = 31 * result + getResultmailInitials().hashCode();
        result = 31 * result + getDataFile().hashCode();
        result = 31 * result + (type != null ? type.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "JobSpecification{" +
                "packaging='" + packaging + '\'' +
                ", format='" + format + '\'' +
                ", charset='" + charset + '\'' +
                ", destination='" + destination + '\'' +
                ", submitterId=" + submitterId +
                ", mailForNotificationAboutVerification='" + mailForNotificationAboutVerification + '\'' +
                ", mailForNotificationAboutProcessing='" + mailForNotificationAboutProcessing + '\'' +
                ", resultmailInitials='" + resultmailInitials + '\'' +
                ", dataFile='" + dataFile + '\'' +
                ", type='" + type + '\'' +
                '}';
    }
}
