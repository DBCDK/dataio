{"id":16702,"version":1,"content":{"name": "RR2Dst", "components": [{"id": 16701, "next": {"name": "RR2Dst", "description": "Flow for poster fra RR til Danmarks Statistik (dst)- poster udleveres i csv-format (string)", "javascripts": [{"javascript": "dXNlKCAiTG9nIiApOw0KdXNlKCAiQWRtaW5EYXRhIiApOw0KdXNlKCAiWG1sVXRpbCIgKTsNCnVzZSggIk1hcmNYY2hhbmdlVXRpbCIgKTsNCnVzZSggIk1hcmNYY2hhbmdlIiApOw0KdXNlKCAiRG0yVG9Ec3QiICk7DQp1c2UoICJEYW5NYXJjMlV0aWwiICk7DQoNCi8qKg0KICogRW50cnkgcG9pbnQgZm9yIGNvbnZlcnRpbmcgYSBtYXJjIHJlY29yZCBjb2xsZWN0aW9uIGluIG1hcmNYY2hhbmdlIGZyb20gUmF3UmVjb3JkUmVwbyB0byBjc3YgZ29pbmcgdG8gRFNUDQogKg0KICogQHR5cGUge2Z1bmN0aW9ufQ0KICogQHN5bnRheCBjb252ZXJ0UmF3UmVjb3JkVG9Ec3QoIHhtbENvbGxlY3Rpb24sIHN1cHBEYXRhICkNCiAqIEBwYXJhbSB7U3RyaW5nfSB4bWxDb2xsZWN0aW9uIEEgY29sbGVjdGlvbiB3aXRoIG9uZSBvciBtb3JlIG1hcmMgcmVjb3JkcyBpbiBNYXJjWGNoYW5nZSBmb3JtYXQgZnJvbSBSUiBhcyBhIHN0cmluZw0KICogQHBhcmFtIHtPYmplY3R9IHN1cHBEYXRhIEEgSlNPTiBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCBzdWJtaXR0ZXIgYW5kIGZvcm1hdCBhbmQgY3JlYXRpb24gZGF0ZQ0KICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVjb3JkIGNvbnZlcnRlZCB0byBjc3YtZm9ybWF0IGZvciBEU1QNCiAqIEBleGFtcGxlDQogY29udmVydFJhd1JlY29yZFRvRHN0KA0KICI8bWFyY3g6Y29sbGVjdGlvbiB4bWxuczptYXJjeD0iaW5mbzpsYy94bWxucy9tYXJjeGNoYW5nZS12MSI+DQogPG1hcmN4OnJlY29yZCBmb3JtYXQ9ImRhbk1BUkMyIiB0eXBlPSJCaWJsaW9ncmFwaGljIj4NCiA8bWFyY3g6bGVhZGVyPjAwMDAwbiAgICAyMjAwMDAwICAgNDUwMDwvbWFyY3g6bGVhZGVyPg0KIDxtYXJjeDpkYXRhZmllbGQgaW5kMT0iMCIgaW5kMj0iMCIgdGFnPSIwMDEiPg0KIDxtYXJjeDpzdWJmaWVsZCBjb2RlPSJhIj40MTczMTkwNzwvbWFyY3g6c3ViZmllbGQ+DQogPC9tYXJjeDpkYXRhZmllbGQ+DQogPC9tYXJjeDpyZWNvcmQ+DQogPC9tYXJjeDpjb2xsZWN0aW9uPiIsDQogeyAic3VibWl0dGVyIiA6ICI4NzA5NzAiLCAiZm9ybWF0IiA6ICJkc3QiICwgY3JlYXRpb25EYXRlOiAiMjAwNTAzMDEifQ0KICkNCg0KICogQG5hbWUgY29udmVydFJhd1JlY29yZFRvRHN0DQogKiovDQoNCg0KZnVuY3Rpb24gY29udmVydFJhd1JlY29yZFRvRHN0KCB4bWxDb2xsZWN0aW9uLCBzdXBwRGF0YSApIHsNCg0KICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNvbnZlcnRSYXdSZWNvcmRUb0RzdCBmdW5jdGlvbiIgKTsNCg0KICAgIHZhciBjc3YgPSBEbTJUb0RzdC5jcmVhdGVDc3ZGb3JEc3QoIHhtbENvbGxlY3Rpb24gKTsNCg0KICAgIExvZy5pbmZvKCAiTGVhdmluZzogY29udmVydFJhd1JlY29yZFRvRHN0IGZ1bmN0aW9uIiApOw0KDQogICAgcmV0dXJuIGNzdjsNCg0KfQ0KDQovLyBBZGRpdGlvbmFsIHRlc3QgZW50cnkgZnVuY3Rpb24NCmZ1bmN0aW9uIHRlc3RDb252ZXJ0UmVjb3JkcyggKSB7DQogICAgdXNlKCJUZXN0Q29udmVydFJlY29yZHNIZWxwZXJzIik7DQogICAgLy8gcGFzcyAgd29ya2VyIGZ1bmN0aW9uIHRvIHRlc3RDb252ZXJ0SnNvbmNzdlJlY29yZA0KICAgIFRlc3RDb252ZXJ0UmVjb3Jkc0hlbHBlcnMudGVzdENvbnZlcnRKc29uQWRkaVJlY29yZCggY29udmVydFJhd1JlY29yZFRvRHN0ICk7DQp9DQoNCmZ1bmN0aW9uIGxvY2FsQWNjdGVzdFJ1bm5lciggYWRkaVJlY29yZCApIHsNCiAgICAvLyBjcmVhdGUgYWRkaVJlYWRlciBhbmQgcGFzcyBpdCB0byByZWFkQWRkaSB0aGF0IHdpbGwgcHJvY2VzcyBpdCB3aXRoIHRoZSBtYWluIHdvcmtlciBmdW5jdGlvbg0KICAgIHVzZSggIkFkZGkiICk7DQogICAgdXNlKCJUZXN0Q29udmVydFJlY29yZHNIZWxwZXJzIik7DQoNCiAgICB2YXIgYWRkaUZpbGVSZWFkZXIgPSBBZGRpLmNyZWF0ZUFkZGlTdHJpbmdSZWFkZXIoIGFkZGlSZWNvcmQgKTsNCg0KICAgIHJldHVybiBUZXN0Q29udmVydFJlY29yZHNIZWxwZXJzLnJlYWRBZGRpKCBhZGRpRmlsZVJlYWRlciwgY29udmVydFJhd1JlY29yZFRvRHN0ICk7DQp9IA0K", "moduleName": ""}, {"javascript": "", "moduleName": "ModulesInfo"}, {"javascript": "", "moduleName": "Use"}, {"javascript": "LyoqIEBmaWxlIFJlcXVpcmVkIG1vZHVsZXMgKi8KCi8qKiAgCiAqIFRoaXMgaXMgZXhlY3V0ZWQganVzdCBhZnRlciB0aGUgbW9kdWxlIHN5c3RlbSAoVXNlLnVzZS5qcykgaGFzIGJlZW4gaW5pdGlhbGl6ZWQsCiAqIGhlbmNlIG1vZHVsZXMgd2hpY2ggYWx3YXlzIG5lZWQgdG8gYmUgbG9hZGVkIG1heSBiZSBhZGRlZCBoZXJlLgogKi8KdXNlKCAiRVM1IiApOwo=", "moduleName": "Use.RequiredModules"}, {"javascript": "Ly8gRHVtbXkgbW9kdWxlLCBUaGUgSmF2YSBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyBtb3N0IG9mIEVTNS4KLy8gVGhpcyBpcyB0byBoYW5kbGUgdGhvc2UgbW9kdWxlcyB0aGF0IGluY2x1ZGVzIEVTNQpFWFBPUlRFRF9TWU1CT0xTPVtdOwo=", "moduleName": "ES5"}, {"javascript": "", "moduleName": "Log"}, {"javascript": "Ly8gTG9nQ29yZSBtb2R1bGUgLSBpbXBsZW1lbnRzIGEgX19Mb2dDb3JlX2xvZyggbGV2ZWwsIGFyZ3MgKSBmdW5jdGlvbgoKLyogSmF2YSBNYXZlbiBkZXBzIG5lZWRlZDoKCiAgICAgICAgICAgICAgICA8IS0tIExPR0dJTkcgLS0+CiAgICAgICAgICAgICAgICA8IS0tIEluIG9yZGVyIHRvIHN1cHBvcnQgZGlmZmVyZW50IGxvZyBmcmFtZXdvcmtzLCB3ZSB1c2UgYSBmYWNhZGUgcGF0dGVybiAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGxvZ2dpbmcgVGhlIGFjdHVhbCBmYWNhZGUgcGF0dGVybiBpcyBzbGY0aiwgd2hpY2ggaXMgd2hhdCBkYmMtY29tbW9ucyAKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ29pbmcgdG8gdXNlIHRvby4gRm9yIGFjdHVhbCBsb2dnaW5nIGluIHRoZSBkZXBsb3ltZW50LCB3ZSB1c2UgbG9nNGouIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotYXBpPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjYuMTwvdmVyc2lvbj4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDxkZXBlbmRlbmN5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBJZD5vcmcuc2xmNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPnNsZjRqLWV4dDwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+IAoqLwoKLyogWW91IG1heSBhbHNvIHdhbnQgdG8gYWN0dWFsbHkgYmluZCB0byBlLmcuIGxvZzRqOgoKICAgICAgICAgICAgICAgIDwhLS0gVGhpcyBvbmUgYmluZHMgdG8gbG9nNGogaW4gdGhlIGRlcGxveW1lbnQuIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotbG9nNGoxMjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5ydW50aW1lPC9zY29wZT4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDwhLS0gSW4gbG9nIHdlIHRydXN0IDogaHR0cDovL2xvZ2dpbmcuYXBhY2hlLm9yZy9sb2c0ai8gLS0+CiAgICAgICAgICAgICAgICA8ZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3VwSWQ+bG9nNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvZzRqPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjIuMTY8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICA8IS0tIEVORCBMT0dHSU5HIC0tPgoqLwoKCi8vIFdlIGV4cG9ydCB0aGlzIHN5bWJvbCwgd2hpY2ggd2UgZXhwZWN0IHRvIGJlIHVzZWQgZnJvbSBhIExvZyBtb2R1bGUuCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdfX0xvZ0NvcmVfbG9nJywgJ19fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCcgXTsKCi8vIEFjdHVhbCBsb2cgZnVuY3Rpb24KdmFyIF9fTG9nQ29yZV9sb2cgPSBmdW5jdGlvbiggbGV2ZWwsIG1zZyApIHsKICAgIG1zZyA9ICJKUzogIiArIG1zZzsKICAgIC8vIFJoaW5vIHNwZWNpZmljIGJpbmRpbmdzIHV0aWxpemVkLgogICAgc3dpdGNoKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLnRyYWNlKCBtc2cgKTsgYnJlYWs7CiAgICBjYXNlICJkZWJ1ZyIgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5kZWJ1ZyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiaW5mbyIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuaW5mbyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAid2FybiIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIud2FybiggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiZXJyb3IiIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuZXJyb3IoIG1zZyApOyBicmVhazsKICAgIGNhc2UgImZhdGFsIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLmVycm9yKCAiRkFUQUw6ICIgKyBtc2cgKTsgYnJlYWs7CiAgICBkZWZhdWx0ICAgICAgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5lcnJvciggIlVOS05PV04gTE9HTEVWRUw6ICIgKyBsZXZlbCArICIgOiAiICsgbXNnICk7IGJyZWFrOwogICAgfQp9OwoKLy8gQ2hlY2sgbGV2ZWwgZXhwb3J0Cl9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IGZ1bmN0aW9uICggbGV2ZWwgKSB7CiAgICBzd2l0Y2ggKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc1RyYWNlRW5hYmxlZCgpOwogICAgY2FzZSAiZGVidWciIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzRGVidWdFbmFibGVkKCk7CiAgICBjYXNlICJpbmZvIiAgOiByZXR1cm4gX19Mb2dDb3JlX2xvZy5sb2dnZXIuaXNJbmZvRW5hYmxlZCgpOwogICAgY2FzZSAid2FybiIgIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzV2FybkVuYWJsZWQoKTsKICAgIGNhc2UgImVycm9yIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc0Vycm9yRW5hYmxlZCgpOwogICAgZGVmYXVsdDogcmV0dXJuIHRydWU7CiAgICB9Owp9CgoKLy8gQXR0YWNoIHRoZSBsb2dnZXIgdmFyaWFibGUgdG8gdGhlIGdsb2JhbCBsb2dnZXIgb25seSBvbmNlLCBub3QgZm9yIGVhY2gKLy8gZnVuY3Rpb24gY2FsbC4KLy8gU29ydCBvZiB0aGUgc3RhdGljIHdheSB0byBkbyBpdC4KCi8vIFRoZSBuZXh0IGxpbmUgY2FuIGJpbmQgKmRpcmVjdGx5KiB0byBsb2c0ai4gSXQgaXMgb25seSBpbmNsdWRlZCBmb3IKLy8gcmVmZXJlbmNlLCBhcwovLyB0aGUgZmFjYWRlIGJlbG93IGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gZG8gaXQuCi8vIF9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLmFwYWNoZS5sb2c0ai5Mb2dnZXIuZ2V0TG9nZ2VyKAovLyAiSmF2YVNjcmlwdC5Mb2dnZXIiICk7CgovLyBCaW5kaW5nIHRvIHRoZSBzbGY0aiBmYWNhZGUuCl9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLnNsZjRqLkxvZ2dlckZhY3RvcnkKICAgIC5nZXRMb2dnZXIoICJKYXZhU2NyaXB0LkxvZ2dlciIgKTsK", "moduleName": "LogCore"}, {"javascript": "", "moduleName": "Lodash"}, {"javascript": "LyoqIEBmaWxlIFByb3ZpZGUgYSBHbG9iYWwgc3ltYm9sICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdHbG9iYWwnIF07CgovLyBJbXBvcnRhbnQgbm90ZTogVGhpcyBtb2R1bGUgY2FuIG5vdCB1c2UgdGhlIExvZyBtb2R1bGUsIGFzIHRoZSBMb2cKLy8gbW9kdWxlIHVzZXMgdGhpcyBtb2R1bGUuIEFuZCwgaG9uZXN0ZWx5LCB3aGF0IHdvdWxkIHlvdSBsb2c/Ci8vIFJpZ2h0LiBKdXN0IGRvbid0IGRvIGl0LiBOb3csIG1vdmUgYWxvbmcsIG5vdGhpbmcgdG8gc2VlIGhlcmUuCgovKioKICogUHJvdmlkZSBjb25zaXN0ZW50IGFjY2VzcyB0byB0aGUgR2xvYmFsIHZhcmlhYmxlLgogKgogKiBXaGVuIHVzZWQsIHRoaXMgbW9kdWxlIHdpbGwgaW50cm9kdWNlIGEgZ2xvYmFsIHZhcmlhYmxlIGNhbGxlZAogKiBgR2xvYmFsYCwgdGhhdCBpcyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsIG9iamVjdC4KICogCiAqIFRoaXMgbW9kdWxlIGRvZXMgbm90IHByb3ZpZGUgYW55IG1ldGhvZHMgb3IgbWVtYmVyLCBiZXNpZGVzIHRoZQogKiBHbG9iYWwgdmFyaWFibGUuCiAqCiAqIEB0eXBlIHtvYmplY3R9CiAqIEBleGFtcGxlCi8vIFRoaXMgbG9hZHMgdGhlIEdsb2JhbCBtb2R1bGUsIGFuZCBjcmVhdGVzIGEgdmFyaWFibGUgY2FsbGVkIEdsb2JhbAp1c2UoICJHbG9iYWwiICk7CiogQG5hbWVzcGFjZQogKiBAbmFtZSBHbG9iYWwgKi8KdmFyIEdsb2JhbCA9IGZ1bmN0aW9uKCApIHsKICAgIC8qKiBHZXQgYWNjZXNzIHRvIHRoZSBHbG9iYWwgdmFyaWFibGUuCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsCiAgICAgKiB2YXJpYWJsZS4gSW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLCB0aGlzIGlzIGVxdWFsIHRvIHRoZQogICAgICogdGhpcyB2YXJpYWJsZSBhdCB0b3BsZXZlbCBzY29wZSwgYnV0IHJlcXVpcmVzIGEgYml0IG1vcmUgdG8gZ2V0CiAgICAgKiB0bywgaWYgbm90IGEgdG9wbGV2ZWwgc2NvcGUuCiAgICAgKiAKICAgICAqIEB0eXBle2Z1bmN0aW9ufQogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm4ge29iamVjdH0gQSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi8KICAgIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuICggZnVuY3Rpb24oICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0gKSggKTsKICAgIH07CiAgICAvLyByZXR1cm4gcmVzdWx0IG9mIGNhbGwgdG8gZ2V0R2xvYmFsLCBpLmUuIHJlZiB0byBnbG9iYWwKICAgIHJldHVybiBnZXRHbG9iYWwoICk7Cn0oICk7Cg==", "moduleName": "Global"}, {"javascript": "", "moduleName": "AdminData"}, {"javascript": "", "moduleName": "XmlUtil"}, {"javascript": "", "moduleName": "XMLDOM"}, {"javascript": "Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpFWFBPUlRFRF9TWU1CT0xTID0gWyAnRW5naW5lJyBdOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovKioKICoKICoKICogQGNvbnN0cnVjdG9yCiAqLwp2YXIgRW5naW5lID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgU1BJREVSTU9OS0VZID0gInNwaWRlcm1vbmtleSI7CiAgICB2YXIgUkhJTk8gPSAicmhpbm8iOwogICAgdmFyIE5BU0hPUk4gPSAibmFzaG9ybiI7CgogICAgZnVuY3Rpb24gaXNFbmdpbmUoIG5hbWUgKSB7CiAgICAgICAgc3dpdGNoKCBuYW1lICkgewogICAgICAgICAgICBjYXNlIFJISU5POiB7CiAgICAgICAgICAgICAgICByZXR1cm4gKCB0eXBlb2YgUGFja2FnZXMgPT09ICJvYmplY3QiICkgJiYgKCB0eXBlb2YgUGFja2FnZXMuamF2YSA9PT0gIm9iamVjdCIgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSBOQVNIT1JOOiB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mKCBfX2Vudmlyb25tZW50ICkgPT09ICJvYmplY3QiOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICBpZiggbmFtZSAhPT0gU1BJREVSTU9OS0VZICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gIWlzRW5naW5lKCBSSElOTyApICYmICFpc0VuZ2luZSggTkFTSE9STiApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgJ1NQSURFUk1PTktFWSc6IFNQSURFUk1PTktFWSwKICAgICAgICAnUkhJTk8nOiBSSElOTywKICAgICAgICAnTkFTSE9STic6IE5BU0hPUk4sCiAgICAgICAgJ2lzRW5naW5lJzogaXNFbmdpbmUKICAgIH0KfSgpOwo=", "moduleName": "Engine"}, {"javascript": "", "moduleName": "XPath"}, {"javascript": "", "moduleName": "XmlNamespaces"}, {"javascript": "", "moduleName": "Util"}, {"javascript": "", "moduleName": "Marc"}, {"javascript": "LyoqIEBmaWxlIGRvY3VtZW50YXRpb24gZm9yIFJlY29yZCwgRmllbGQgYW5kIFN1YmZpZWxkICovCi8vIFRoaXMgaXMgbm90IGFjdHVhbGx5IHRoZSBNYXJjQ2xhc3NlcyAoUmVjb3JkLCBGaWVsZCwgU3ViZmllbGQpLCAKLy8gYnV0IHJhdGhlciB0aGUgZG9jdW1lbnRhdGlvbiBvZiB0aGVtLgovLyBUaGUgYWN0dWFsIGltcGxlbWVudGF0aW9uIGlzIGluIE1hcmNDbGFzc2VzQ29yZS4KCnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiTWFyY0NsYXNzZXNDb3JlIiApOwoKRVhQT1JURURfU1lNQk9MUyA9IFsiTWFyY0NsYXNzZXMiXTsKCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBET0NVTUVOVEFUSU9OCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKiogTW9kdWxlIHRvIGFsbG93IHJlcHJlc2VudGF0aW9uIG9mIE1hcmMgb2JqZWN0cy4KICoKICogSW4gb3JkZXIgdG8gYWxsb3cgcmVwcmVzZW50YXRpb25zIG9mIE1hcmMgb2JqZWN0cywgdGhlIE1hcmNDbGFzc2VzCiAqIG1vZHVsZSBleHBvc2VzIHRocmVlIGNsYXNzZXM6IFJlY29yZCwgRmllbGQgYW5kIFN1YmZpZWxkLiBUaGV5CiAqIHJlcHJlc2VudCBhIE1hcmMgcmVjb3JkLCBmaWVsZCBhbmQgc3ViZmllbGQgcmVzcGVjdGl2ZWx5LgogKgogKiBBbHRob3VnaCBNYXJjQ2xhc3NlcyBpcyBwcmVzZW50ZWQgYXMgYSBuYW1lc3BhY2UsIHRoZSBSZWNvcmQsIEZpZWxkCiAqIGFuZCBTdWJmaWVsZCBjbGFzc2VzIGxpdmUgaW4gdGhlIGdsb2JhbCBuYW1lc3BhY2UuIFRoaXMgaXMgZm9yCiAqIGhpc3RvcmljYWwgcmVhc29ucyAtIHRoZXNlIGNsYXNzZXMgd2VyZSBpbnRyb2R1Y2VkIGludG8gdGhlIERCQwogKiBKYXZhU2NyaXB0IHN5c3RlbSBiZWZvcmUgbW9kdWxlIHN1cHBvcnQgd2FzIGVzdGFibGlzaGVkLgogKgogKiBAc2VlIFJlY29yZAogKiBAc2VlIEZpZWxkCiAqIEBzZWUgU3ViZmllbGQKICogQG5hbWUgTWFyY0NsYXNzZXMKICogQG5hbWVzcGFjZSAqLwpNYXJjQ2xhc3NlcyA9ICggZnVuY3Rpb24oKSB7CiAgICB2YXIgZXhwb3J0cyA9IHt9OwogICAgZXhwb3J0cy5SZWNvcmQgPSBSZWNvcmQ7CiAgICBleHBvcnRzLkZpZWxkID0gRmllbGQ7CiAgICBleHBvcnRzLlN1YmZpZWxkID0gU3ViZmllbGQ7CiAgICByZXR1cm4gZXhwb3J0czsKfSgpICk7CgoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBSRUNPUkQKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLy8gTm90ZSwgdGhhdCBhIGxvdCBwcm9wZXJ0aWVzIGlzIGFzc2lnbmVkIHRvIHRoZSBjb25zdHJ1Y3RvciwgdG8gaGF2ZSBzb21ldGhpbmcKLy8gdG8gYXR0YWNoIHRoZSBkb2N1bWVudGF0aW9uIHRvLgoKLyoqIEFic3RyYWN0aW9uIGZvciBhIE1hcmMgcmVjb3JkLgogKgogKiBUaGUgUmVjb3JkIGNsYXNzIGlzIGFuIGFic3RyYWN0aW9uIGZvciBhIE1hcmMgcmVjb3JkLgogKgogKiBJdCBjb250YWlucyBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRvIHJlcHJlc2VudCBhbmQKICogbWFuaXB1bGF0ZSBhIHJlY29yZCwgaW5jbHVkaW5nIHRoZSBoZWFkZXIuCiAqCiAqIEBleGFtcGxlIC8vIFlvdSBjb25zdHJ1Y3QgYSBuZXcgUmVjb3JkIGluc3RhbmNlIGxpa2UgdGhpczoKIHZhciByID0gbmV3IFJlY29yZCgpOwogKgogKiBAbmFtZSBSZWNvcmQKICogQGNvbnN0cnVjdG9yCiAqIEBzZWUgTWFyY0NsYXNzZXMKICogQHNlZSBGaWVsZAogKiBAc2VlIFN1YmZpZWxkICovCi8vIERvIG5vdCByZW1vdmUgdGhpcyBjb21tZW50CgovLyBQUk9QRVJUSUVTCgovKiogVGhlIGZvclVzZXJTeXN0ZW1zIHByb3BlcnR5IG9mIHRoZSByZWNvcmQuCiAqCiAqIFRoaXMgcHJvcGVydHkgaG9sZHMgdGhlIGZvclVzZXJTeXN0ZW1zIHN0cmluZyBmb3IgdGhlIHJlY29yZC4KICoKICogQHR5cGUge3N0cmluZ30KICogQG5hbWUgUmVjb3JkLmZvclVzZXJTeXN0ZW1zCiAqIEBuYW1lIFJlY29yZCNmb3JVc2VyU3lzdGVtcyAqLwpSZWNvcmQuZm9yVXNlclN5c3RlbXMgPSBuZXcgU3RyaW5nKCk7CgovKiogVGhlIGltcGxlbWVudGF0aW9uIGNvZGVzIG9mIHRoZSByZWNvcmQuCiAqCiAqIFRoaXMgcHJvcGVydHkgaG9sZHMgdGhlIGltcGxlbWVudGF0aW9uIGNvZGVzIGZvciB0aGUgcmVjb3JkLCBhcyBhIHN0cmluZy4KICoKICogQHR5cGUge3N0cmluZ30KICogQG5hbWUgUmVjb3JkLmltcGxlbWVudGF0aW9uQ29kZXMKICogQG5hbWUgUmVjb3JkI2ltcGxlbWVudGF0aW9uQ29kZXMgKi8KUmVjb3JkLmltcGxlbWVudGF0aW9uQ29kZXMgPSBuZXcgU3RyaW5nKCk7CgovKiogVGhlIHN0YXR1cyBvZiB0aGUgcmVjb3JkLgogKgogKiBUaGlzIHByb3BlcnR5IGhvbGRzIHRoZSBzdGF0dXMgb2YgdGhlIHJlY29yZCBhcyBhIHN0cmluZyB3aXRoIGEgc2luZ2xlIGNoYXJhY3RlciBpbi4KICoKICogQHR5cGUge3N0cmluZ30KICogQG5hbWUgUmVjb3JkLnJlY29yZFN0YXR1cwogKiBAbmFtZSBSZWNvcmQjcmVjb3JkU3RhdHVzICovClJlY29yZC5yZWNvcmRTdGF0dXMgPSBuZXcgU3RyaW5nKCk7CgovLyBNRVRIT0RTCgovKiogQWRkcyBhIGZpZWxkIHRvIHRoZSByZWNvcmQuCiAqCiAqIFRoaXMgbWV0aG9kIGFkZHMgYSBmaWVsZCB0byB0aGUgcmVjb3JkLgogKgogKiBJdCBjYW4gYmUgY2FsbGVkIHdpdGggZWl0aGVyIGEgRmllbGQgaW5zdGFuY2UsIG9yIHR3byBTdHJpbmdzLgogKgogKiBJZiBjYWxsZWQgd2l0aCBhIEZpZWxkIGluc3RhbmNlLCB0aGUgaW5zdGFuY2UgaXMgY29waWVkIHRvIHRoZSByZWNvcmQuCiAqCiAqIElmIGNhbGxlZCB3aXRoIHR3byBTdHJpbmdzLCBhIG5ldyBGaWVsZCBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWQsCiAqIGJhc2VkIG9uIHRoZSB2YWx1ZSBvZiB0aGUgc3RyaW5ncywgYW5kIGFwcGVuZGVkIHRvIHRoZSByZWNvcmQuIFRoZQogKiBmaXJzdCBzdHJpbmcgaXMgdGhlbiB0aGUgbmFtZSBvZiB0aGUgZmllbGQsIHRoZSBzZWNvbmQgdGhlIGZpZWxkCiAqIGluZGljYXRvci4KICoKICogKipOb3RlOioqIEZvciB0aGUgQysrIGltcGxlbWVudGF0aW9uOiBBbnkgcmVmZXJlbmNlIHRvIGV4aXN0aW5nCiAqIGZpZWxkcyBvbiB0aGlzIHJlY29yZCBtYXkgYmUgaW52YWxpZGF0ZWQgYnkgYXBwZW5kIGEgZmllbGQuIFRoaXMKICogaGFzIGEgbnVtYmVyIG9mIHBvdGVudGlhbCBiYWQgY29uc2VxdWVuY2VzLCBtb3N0IG9mIHdoaWNoIGxlYWRzIHRvCiAqIGNyYXNoZXMgb3IgdW5wcmVkaWN0YWJsZSBiZWhhdmlvdXIuIEl0IGlzIGVhc3kgdG8gZmFsbCBpbnRvIHRoZQogKiB0cmFwIG9mIGUuZy4gaXRlcmF0aW5nIGFsbCBmaWVsZHMgaW4gYSByZWNvcmQsIGFuZCBhcHBlbmQgc29tZQogKiB3aGlsZSBpdGVyYXRpbmcuIFRoaXMgaXMgYWxtb3N0IGNlcnRhaW4gdG8gbWFrZSB5b3VyIGFwcGxpY2F0aW9uCiAqIGNyYXNoLiBJbnN0ZWFkLCBjb2xsZWN0IHRoZSBuZXcgZmllbGRzIHlvdSB3aXNoIHRvIGFwcGVuZCwgdGhlbgogKiBhcHBlbmQgdGhlbSBhZnRlciB5b3VyIG1haW4gaXRlcmF0aW9uLgogKgogKiBAZXhhbXBsZQogLy8gQXBwZW5kIGFuIGV4aXN0aW5nIGZpZWxkIHRvIGEgcmVjb3JkIChmaWVsZCB3aWxsIGJlIGNvcGllZCkKIGFSZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogLy8gQ3JlYXRlIGEgbmV3IGZpZWxkLCBhbmQgYXBwZW5kIGl0IHRvIHRoZSByZWNvcmQKIGFSZWNvcmQuYXBwZW5kKCAiMDEwIiwgIjAyIiApOwogKiBAZXhhbXBsZQogLy8gVGhpcyBleGFtcGxlIGlsbHVzdHJhdGVzIHRoZSByZWxhdGlvbiBiZXR3ZWVuIGV4aXN0aW5nIHJlZmVyZW5jZXMsIGFuZCBuZXcgRmllbGRzLgogdmFyIGFSZWNvcmQgPSBuZXcgUmVjb3JkKCk7CiBhUmVjb3JkLmFwcGVuZCggIjAwMSIsICIwMiIgKTsKIHZhciBhRmllbGQgPSBhUmVjb3JkLmZpZWxkKCAiMDAxIiApOwogYUZpZWxkLm5hbWUgPSAiMDAyIiAvLyBDaGFuZ2VzIHRoZSBuYW1lIG9mIHRoZSBmaWVsZCBpbiBhUmVjb3JkCiB2YXIgbmV3UmVjb3JkID0gbmV3IFJlY29yZCgpOwogbmV3UmVjb3JkLmFwcGVuZCggYUZpZWxkICk7IC8vIGFGaWVsZCBpcyBjb3BpZWQgaW50byBuZXdSZWNvcmQKIGFGaWVsZC5uYW1lID0gIjAwMSIgLy8gQ2hhbmdlcyB0aGUgbmFtZSBvZiB0aGUgZmllbGQgaW4gYVJlY29yZCwgYnV0IG5vdCBpbiBuZXdSZWNvcmQuCiAqCiAqIEBwYXJhbSB7RmllbGR8c3RyaW5nfSBmaWVsZE9yRmllbGROYW1lIEEgRmllbGQgaW5zdGFuY2UgdG8gYWRkLCBvciB0aGUgbmFtZSBvZiBhIG5ldyBmaWVsZCB0byBjb25zdHJ1Y3QgYW5kIGFkZAogKiBAcGFyYW0ge3N0cmluZ30gW2ZpZWxkSW5kaWNhdG9yXSBUaGUgaW5kaWNhdG9yIHZhbHVlIG9mIHRoZSBuZXcgRmllbGQgdG8gYWRkLiAqTXVzdCBiZSBwcm92aWRlZCwgaWYgZmllbGRPckZpZWxkTmFtZSBpcyBhIHN0cmluZyBpbnN0YW5jZSB3aXRoIHRoZSBuYW1lIG9mIGEgZmllbGQuKgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5hcHBlbmQKICogQG5hbWUgUmVjb3JkI2FwcGVuZCAqLwpSZWNvcmQuYXBwZW5kID0gbmV3IFN0cmluZygpOwoKLyoqIENyZWF0ZSBhIGNsb25lIChjb3B5KSBvZiB0aGlzIHJlY29yZC4KICoKICogQWxsIHRoZSBmaWVsZHMgb2YgdGhpcyBmaWVsZCBhcmUgYWxzbyBjbG9uZWQgYnkgdGhpcyBmdW5jdGlvbi4KICoKICogQHJldHVybiB7UmVjb3JkfSBBbiBleGFjdCBjbG9uZSBvZiB0aGlzIHJlY29yZC4KICoKICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuY2xvbmUKICogQG5hbWUgUmVjb3JkI2Nsb25lICovClJlY29yZC5jbG9uZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBDb3VudCB0aGUgbnVtYmVyIG9mIGZpZWxkcyBpbiBhIHJlY29yZCB3aXRoIGEgZ2l2ZW4gbmFtZS4KICoKICogR2l2ZW4gdGhlIG5hbWUgb2YgYSBmaWVsZCwgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgbnVtYmVyIG9mIGZpZWxkcwogKiB3aXRoIHRoYXQgbmFtZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkTmFtZSBUaGUgbmFtZSBvZiBhIGZpZWxkLgogKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgZmllbGRzIHdpdGggdGhlIGdpdmVuIGZpZWxkTmFtZQogKgogKiBAZXhhbXBsZQogLy8gR2V0IHRoZSBudW1iZXIgb2YgNTQ1IGZpZWxkcyBpbiBhIHJlY29yZAogdmFyIG51bSA9IGFSZWNvcmQuY291bnQoICI1NDUiICk7CiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmNvdW50CiAqIEBuYW1lIFJlY29yZCNjb3VudCAqLwpSZWNvcmQuY291bnQgPSBuZXcgU3RyaW5nKCk7CgoKLyoqIEl0ZXJhdGVzIG92ZXIgdGhlIGZpZWxkcyBhbmQgY2FsbHMgYSBoYW5kbGVyIG9uIGVhY2ggZmllbGQuCiAqCiAqIFRoaXMgZnVuY3Rpb24gaGFzIDIgZm9ybXM6CiAqCiAqIElmIGdpdmVuIGEgbWF0Y2hlciBhbmQgYSBoYW5kbGVyLCB0aGVuIHRoZSBoYW5kbGVyIGlzIGNhbGxlZCBmb3IgZWFjaCBmaWVsZC4KICoKICogSWYgZ2l2ZW4gYSBtYXRjaGVyLCBhbiBhcnJheSBvZiBzb3J0ZXIgb2JqZWN0cyBhbmQgYSBoYW5kbGVyLCB0aGVuIHRoZSBtYXRjaGVkCiAqIGZpZWxkcyBhcmUgc29ydGVkIGJlZm9yZSB0aGUgaGFuZGxlciBpcyBjYWxsZWQgZm9yIGVhY2ggZmllbGQuCiAqCiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ3xPYmplY3R9IG1hdGNoZXIgQSBSZWdFeHAgb3Igc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaEZpZWxkKCByZWNvcmQsIGZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqIEBwYXJhbSB7QXJyYXl9IHNvcnRlciBBbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgaGFzIGEgZnVuY3Rpb246IHNvcnQoIGEsIGIgKS4gYSBhbmQKICogICAgICAgICAgYiBhcmUgZmllbGRzIGFuZCB0aGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiAtMSAoYSA8IGIpLCAwICggYSA9PSBiKSBvciAxIChhID4gYikuCiAqICAgICAgICAgIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIC0xIG9yIDEsIHRoZW4gdGhlIHR3byBmaWVsZHMgYXJlIHNvcnRlZCBhbmQgYW55IGZ1cnRoZXIKICogICAgICAgICAgZWxlbWVudHMgaW4gdGhlIGFycmF5IGFyZSBpZ25vcmVkIGZvciB0aGVzZSB0d28gZmllbGRzLgogKiBAcGFyYW0ge0hhbmRsZXJ8RnVuY3Rpb259IGhhbmRsZXIgVGhlIGhhbmRsZXIgdG8gY2FsbCBmb3IgZWFjaCBzdWJmaWVsZCBmb3VuZAogKiAgICAgICAgICBieSBtYXRjaGVyLgogKgogKiBAcmV0dXJuIElmIGhhbmRsZXIgcmV0dXJucyBhIHZhbHVlIHRoZW4gYWxsIHRoZSB2YWx1ZXMgYXJlIGFkZGVkIHRvZ2V0aGVyIGludG8gYQogKiAgICAgICAgICAgc2luZ2xlIHZhbHVlLgogKgogKiBAZXhhbXBsZQogLy8gUHJpbnQgYWxsIGZpZWxkcwogcmVjb3JkLmVhY2hGaWVsZCggLy4vLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICBwcmludCggZmllbGQudG9TdHJpbmcoKSArICJcbiIgKTsKfSApOwoKIC8vIExpc3QgZmllbGQgNzk1IHNvcnRlZCBieSBzdWIgZmllbGQgIsOlIgogcmVjb3JkLmVhY2hGaWVsZCggIjc5NSIsIFsgbmV3IFNvcnRCeVN1YkZpZWxkcyggL8OlLyApIF0sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgIHByaW50KCBmaWVsZC50b1N0cmluZygpICsgIlxuIiApOwp9ICk7CgogLy8gSG93IHRvIHVzZSBhIGN1c3RvbSBtYXRjaGVyIGZ1bmN0aW9uIHdpdGggZWFjaEZpZWxkCiAvLyBUaGUgZnVuY3Rpb24gbWF0Y2hlcyBhbGwgZmllbGRzICI3MDAiIHdpdGggYSBzdWJmaWVsZCAiYSIuCiByZWNvcmQuZWFjaEZpZWxkKCB7IG1hdGNoRmllbGQ6IGZ1bmN0aW9uKCByZWNvcmQsIGZpZWxkICkgewogICAgcmV0dXJuIGZpZWxkLm5hbWUgPT09ICI3MDAiICYmIGZpZWxkLmV4aXN0cyggL2EvICkgfSB9LCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICBwcmludCggZmllbGQudG9TdHJpbmcoKSArICJcbiIgICk7Cn0gKTsKCiAvL2NvbWJpbmUgZWFjaEZpZWxkIHdpdGggZWFjaFN1YkZpZWxkIHRvIHByaW50IGFsbCBzdWJmaWVsZCB2YWx1ZXMgaW4gYWxsIGZpZWxkcwogcmVjb3JkLmVhY2hGaWVsZCAoIC8uLywgZnVuY3Rpb24gKCBmaWVsZCApIHsKICAgIGZpZWxkLmVhY2hTdWJGaWVsZCAoIC8uLywgZnVuY3Rpb24gKCBmaWVsZCwgc3ViZmllbGQgKSB7CiAgICAgICAgcHJpbnQgKCBzdWJmaWVsZC52YWx1ZSArICJcbiIgKTsKICAgIH0gKTsgLy9lbmQgZWFjaFN1YkZpZWxkCiAgfSk7IC8vZW5kIGVhY2hGaWVsZAoKICoKICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuZWFjaEZpZWxkCiAqIEBuYW1lIFJlY29yZCNlYWNoRmllbGQgKi8KUmVjb3JkLmVhY2hGaWVsZCA9IG5ldyBTdHJpbmcoKTsKCi8qKiBJdGVyYXRlcyBvdmVyIHRoZSBmaWVsZHMgYW5kIGxvb2t1cCBoYW5kbGVycyBpbiBhIG1hcC4KICoKICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gaGFuZGxlIG11bHRpcGxlIGZpZWxkcyBpbiBhIHJlY29yZCB3aXRoIGRpZmZlcmVudCBmdW5jdGlvbnMKICoKICogSXQgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiBtYWtpbmcgbXVsdGlwbGUgZWFjaEZpZWxkIGNhbGxzLCBzaW5jZSBpdCBvbmx5IGxvb3BzIHRocm91Z2ggZmllbGRzIG9uY2UgYW5kCiAqIHVzZXMgbWFwIHN0cmluZyBsb29rdXAgaW5zdGVhZCBvZiByZWd1bGFyIGV4cHJlc3Npb25zLgogKiBCdXQgaXQgY2FuIG9ubHkgbWF0Y2ggb24gZXhhY3QgZmllbGQgbmFtZXMsIGJlY2F1c2Ugb2YgdGhlIG1hcCBsb29rdXAuCiAqCiAqIEBwYXJhbSB7TWF0Y2hNYXB9IG1hcCBBbiBvYmplY3QgY29udGFpbmluZyBtYXBwaW5nIGJldHdlZW4gZmllbGRuYW1lIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyB0byBjYWxsCiAqIEBwYXJhbSB7T2JqZWN0fFVuZGVmaW5lZH0gZXh0cmFEYXRhIGdpdmVuIHRvIGFsbCBmdW5jdGlvbnMgY2FsbGVkIGFzIHNlY29uZCBwYXJhbWV0ZXIKICoKICogQGV4YW1wbGUKIHZhciBtYXAgPSBuZXcgTWF0Y2hNYXAoKTsKIG1hcC5wdXQoICI3MDAiLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAvLyBoYW5kbGUgZmllbGQgNzAwCn0pOwogbWFwLnB1dCggIjc5NSIsIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgIC8vIGhhbmRsZSBmaWVsZCA3OTUKfSk7CiBtYXAucHV0KCAiMTAwIiwgIjEwMSIsIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgIC8vIGhhbmRsZSBmaWVsZCAxMDAgYW5kIDEwMQp9KTsKIHJlY29yZC5lYWNoRmllbGRNYXAobWFwKTsKIC8vIEFsdGVybmF0ZQogdmFyIG1hcDIgPSBuZXcgTWF0Y2hNYXAoKTsKIG1hcDIucHV0KCAiNzAwIiwgZnVuY3Rpb24oIGZpZWxkLCBjb2xsZWN0b3IgKSB7CiAgICBjb2xsZWN0b3IucHVzaCggZmllbGQudmFsdWUgKTsKfSk7CiB2YXIgdmFsdWVzID0gW10KIHJlY29yZC5lYWNoRmllbGRNYXAobWFwMiwgdmFsdWVzKTsKICoKICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuZWFjaEZpZWxkTWFwCiAqIEBuYW1lIFJlY29yZCNlYWNoRmllbGRNYXAgKi8KUmVjb3JkLmVhY2hGaWVsZE1hcCA9IG5ldyBTdHJpbmcoKTsKCgovKiogSXRlcmF0ZXMgb3ZlciB0aGUgZmllbGRzIGFuZCBsb29rdXAgaGFuZGxlcnMgaW4gYSBtYXAuCiAqCiAqIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGhhbmRsZSBtdWx0aXBsZSBmaWVsZHMgaW4gYSByZWNvcmQgd2l0aCBkaWZmZXJlbnQgZnVuY3Rpb25zIGFuZCBub25zcGVjaWZpZWQKICogZmllbGRzIHdpdGggYSBkZWZhdWx0IGZ1bmN0aW9uLiBTbyBhbGwgZmllbGRzIHRoYXQgYXJlIGFkZGVkIHRvIHRoZSBtYXAgdXNlIGEgc3BlY2lmaWMgZnVuY3Rpb24gYW5kIHRoZSByZW1haW5pbmcgZmllbGRzCiAqIGFyZSBjYWxsZWQgd2l0aCB0aGUgZGVmYXVsdCBmdW5jdGlvbi4KICoKICogSXQgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiBtYWtpbmcgbXVsdGlwbGUgZWFjaEZpZWxkIGNhbGxzLCBzaW5jZSBpdCBvbmx5IGxvb3BzIHRocm91Z2ggZmllbGRzIG9uY2UgYW5kCiAqIHVzZXMgbWFwIHN0cmluZyBsb29rdXAgaW4gc3RlYWQgb2YgcmVndWxhciBleHByZXNzaW9ucy4KICogQnV0IGl0IGNhbiBvbmx5IG1hdGNoIG9uIGV4YWN0IGZpZWxkIG5hbWVzLCBiZWNhdXNlIG9mIHRoZSBtYXAgbG9va3VwCiAqCiAqIEBwYXJhbSB7TWF0Y2hNYXB9IG1hcCBBbiBvYmplY3QgY29udGFpbmluZyBtYXBwaW5nIGJldHdlZW4gZmllbGQgbmFtZSBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgdG8gY2FsbAogKiBAcGFyYW0ge2RlZmF1bHRGdW5jdGlvbn0gZGVmYXVsdEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGZpZWxkcyBub3QgaSBNYXRjaE1hcAogKiBAcGFyYW0ge2V4dHJhRGF0YX0gT2JqZWN0IGdpdmVuIHRvIGFsbCBmdW5jdGlvbnMgY2FsbGVkIGFzIHNlY29uZCBwYXJhbWV0ZXIKICoKICoKICogQGV4YW1wbGUKIHZhciBtYXAgPSBuZXcgTWF0Y2hNYXAoKTsKCiBtYXAucHV0KCAiMDAxIiwgZnVuY3Rpb24oIGYsIHJlc3VsdERhdGEgKSB7IHJlc3VsdERhdGEucHVzaCggIjAwMSBjYWxsZWQgIitmLm5hbWUgKTsgfSApOwogbWFwLnB1dCggIjAwMiIsIGZ1bmN0aW9uKCBmLCByZXN1bHREYXRhICkgeyByZXN1bHREYXRhLnB1c2goICIwMDIgY2FsbGVkICIrZi5uYW1lICk7IH0gKTsKCiB2YXIgZGVmYXVsdEZ1bmN0aW9uID0gZnVuY3Rpb24gKCBmLCByZXN1bHREYXRhICkgeyByZXN1bHREYXRhLnB1c2goICJkZWZhdWx0IGNhbGxlZCAiICsgZi5uYW1lICk7IH07CgogdmFyIHJlc3VsdERhdGE9W107CgogcmVjb3JkLmVhY2hGaWVsZE1hcFdpdGhEZWZhdWx0KCBtYXAsIGRlZmF1bHRGdW5jdGlvbiwgcmVzdWx0RGF0YSApOwoKIC8vIGlmIHJlY29yZCBpcwogLy8gMDAxIDAwICphCiAvLyAwMDIgMDAgKmEKIC8vIDI0NSAwMCAqYQogLy8gMzAwIDAwICphCiAvL3Jlc3VsdCBkYXRhIGlzIG5vdyBbICIwMDEgY2FsbGVkIDAwMSIsICIwMDIgY2FsbGVkIDAwMiIsICJkZWZhdWx0IGNhbGxlZCAyNDUiLCAiZGVmYXVsdCBjYWxsZWQgMzAwIiBdCgogKgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5lYWNoRmllbGRNYXBXaXRoRGVmYXVsdAogKiBAbmFtZSBSZWNvcmQjZWFjaEZpZWxkTWFwV2l0aERlZmF1bHQgKi8KUmVjb3JkLmVhY2hGaWVsZE1hcFdpdGhEZWZhdWx0ID0gbmV3IFN0cmluZygpOwoKLyoqIEl0ZXJhdGVzIG92ZXIgdGhlIGZpZWxkcyBhbmQgY2FsbHMgYSBoYW5kbGVyIG9uIGVhY2ggZmllbGQgYXMgYSBzZXF1ZW5jZS4KICoKICogQSBzZXF1ZW5jZSBpcyBhbiBhcnJheSBvZiBtYXRjaGVycyB0aGF0IGlzIHVzZWQgdG8gZXh0cmFjdCBmaWVsZHMuIFRoZSBoYW5kbGVyIGlzIHRoZW4KICogdXNlZCBvbiB0aGUgZmlyc3QgZmllbGQgZnJvbSBlYWNoIG1hdGNoZXIsIHRoZW4gb24gdGhlIHNlY29uZCBmaWVsZCBmcm9tIGVhY2ggbWF0Y2hlciwKICogYW5kIHNvIG9uLgogKgogKiBJZiB0aGUgbWF0Y2hlcnMgbWF0Y2hlcyBvbiBkaWZmZXJlbnQgbnVtYmVyIG9mIGZpZWxkcywgdGhlbiBvbmx5IHRoZSBzbWFsbGVzdCBudW1iZXIgb2YgbWF0Y2hlZAogKiBmaWVsZHMgaXMgdXNlZCwgdGhlbiB3ZSBpbnZva2UgdGhlIGhhbmRsZXIgb24gdGhlIHN1YiBmaWVsZC4KICoKICogVGhpcyBmdW5jdGlvbiBoYXMgMiBmb3JtczoKICoKICogSWYgZ2l2ZW4gYSBtYXRjaGVyIGFuZCBhIGhhbmRsZXIsIHRoZW4gdGhlIGhhbmRsZXIgaXMgY2FsbGVkIGZvciBlYWNoIGZpZWxkLgogKgogKiBJZiBnaXZlbiBhIG1hdGNoZXIsIGFuIGFycmF5IG9mIHNvcnRlciBvYmplY3RzIGFuZCBhIGhhbmRsZXIsIHRoZW4gdGhlIG1hdGNoZWQKICogZmllbGRzIGFyZSBzb3J0ZWQgYmVmb3JlIHRoZSBoYW5kbGVyIGlzIGNhbGxlZCBmb3IgZWFjaCBmaWVsZC4KICoKICogQHBhcmFtIHtBcnJheX0gbWF0Y2hlcnMgQW4gQXJyYXkgb2YgUmVnRXhwIHRoYXQgbWF0Y2hlcyB0aGUgZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaEZpZWxkKCByZWNvcmQsIGZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqIEBwYXJhbSB7QXJyYXl9IHNvcnRlciBBbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgaGFzIGEgZnVuY3Rpb246IHNvcnQoIGEsIGIgKS4gYSBhbmQKICogICAgICAgICAgYiBhcmUgZmllbGRzIGFuZCB0aGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiAtMSAoYSA8IGIpLCAwICggYSA9PSBiKSBvciAxIChhID4gYikuCiAqICAgICAgICAgIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIC0xIG9yIDEsIHRoZW4gdGhlIHR3byBmaWVsZHMgYXJlIHNvcnRlZCBhbmQgYW55IGZ1cnRoZXIKICogICAgICAgICAgZWxlbWVudHMgaW4gdGhlIGFycmF5IGFyZSBpZ25vcmVkIGZvciB0aGVzZSB0d28gZmllbGRzLgogKiBAcGFyYW0ge0hhbmRsZXJ8RnVuY3Rpb259IGhhbmRsZXIgVGhlIGhhbmRsZXIgdG8gY2FsbCBmb3IgZWFjaCBzdWIgZmllbGQgZm91bmQKICogICAgICAgICAgYnkgbWF0Y2hlci4KICoKICogQHJldHVybiBJZiBoYW5kbGVyIHJldHVybnMgYSB2YWx1ZSB0aGVuIGFsbCB0aGUgdmFsdWVzIGFyZSBhZGRlZCB0b2dldGhlciBpbnRvIGEKICogICAgICAgICAgIHNpbmdsZSB2YWx1ZS4KICoKICogQGV4YW1wbGUKIC8vIFByaW50IGZpZWxkcyAiNzcwIiBhbmQgIjc5NSIgYXMgcGFpcnMuCiByZWNvcmQuZWFjaEZpZWxkU2VxdWVuY2UoIFsgLzc3MC8sIC83OTUvIF0sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgIHByaW50KCBmaWVsZC50b1N0cmluZygpICsgIlxuIiApOwp9ICk7CgogLy8gU2VxdWVuY2Ugd2l0aCBhIGN1c3RvbSBtYXRjaGVyLgogcmVjb3JkLmVhY2hGaWVsZFNlcXVlbmNlKCBbIHsgbWF0Y2hGaWVsZDogZnVuY3Rpb24oIHJlY29yZCwgZmllbGQgKSB7IHJldHVybiBmaWVsZC5uYW1lID09PSAiNjUyIiAmJiBmaWVsZC5leGlzdHMoIC8wLyApIH0KCQkJCQkJICAgIH0sIC83NzAvLCAvNzk1LyBdLCBmdW5jdGlvbiggZmllbGQgKSB7IHByaW50KCBmaWVsZC50b1N0cmluZygpICsgIlxuIiApOyB9ICk7CgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5lYWNoRmllbGRTZXF1ZW5jZQogKiBAbmFtZSBSZWNvcmQjZWFjaEZpZWxkU2VxdWVuY2UgKi8KUmVjb3JkLmVhY2hGaWVsZFNlcXVlbmNlID0gbmV3IFN0cmluZygpOwoKLyoqIENoZWNrcyBpZiB0aGUgcmVjb3JkIGlzIGVtcHR5LCB0aGF0IGl0IGhhcyB6ZXJvIGZpZWxkcy4KICoKICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcmVjb3JkIGlzIGVtcHR5LCBmYWxzZSBvdGhlcndpc2UuCiAqCiAqIEBleGFtcGxlCiAvLyBlbXB0eSgpIGlzIG1hbnkgdGltZXMgdXNlZCBhcyBhbiBlYXJseSBjaGVjayBpbiB0aGUgYmVnaW5uaW5nIG9mIGEgZnVuY3Rpb24KIGZ1bmN0aW9uIGYoIHJlY29yZCApIHsKCWlmKCByZWNvcmQuZW1wdHkoKSApIHsKIAkJcmV0dXJuOwogCX0KIAkKIAkvLyBOb3JtYWwgbG9naWMuLi4gCQp9CiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmVtcHR5CiAqIEBuYW1lIFJlY29yZCNlbXB0eSAqLwpSZWNvcmQuZW1wdHkgPSBuZXcgU3RyaW5nKCk7CgovKiogQ2hlY2tzIGlmIHRoaXMgcmVjb3JkIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBmaWVsZCwgdGhhdCBtYXRjaGVzIGEgY3JpdGVyaWEuCiAqCiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ3xPYmplY3R9IG1hdGNoZXIgQW4gUmVnRXhwIG9yIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKgogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgZmllbGQgbWF0Y2hlcyB0aGUgbWF0Y2hlciBhcmd1bWVudCwgRmFsc2Ugb3RoZXJ3aXNlLgogKgogKiBAZXhhbXBsZQogZnVuY3Rpb24gaGFzVGl0bGUoIHJlY29yZCApIHsKCXJldHVybiByZWNvcmQuZXhpc3RGaWVsZCggLzI0NS8gKTsKfQogLy9UaGUgZnVuY3Rpb24gaGFzVGl0bGUgY2hlY2tzIGlmIHRoZSBwYXNzZWQgcmVjb3JkIGNvbnRhaW5zIGEgZmllbGQgd2l0aCBuYW1lICIyNDUiLgoKCiB2YXIgZXhhbXBsZVJlY29yZF9PbmUgPSBuZXcgUmVjb3JkKCk7CiB2YXIgZXhhbXBsZUZpZWxkID0gbmV3IEZpZWxkICggIjI0NSIsICIwMCIgKTsKIGV4YW1wbGVSZWNvcmRfT25lLmFwcGVuZCAoIGV4YW1wbGVGaWVsZCApOwoKIGhhc1RpdGxlICggZXhhbXBsZVJlY29yZF9PbmUgKTsgLy8gPC0tIHRoaXMgY2FsbCByZXR1cm5zIFRydWUKCiB2YXIgZXhhbXBsZVJlY29yZF9Ud28gPSBuZXcgUmVjb3JkKCk7CiB2YXIgZXhhbXBsZUZpZWxkID0gbmV3IEZpZWxkICggIjI2MCIsICIwMCIgKTsKIGV4YW1wbGVSZWNvcmRfVHdvLmFwcGVuZCAoIGV4YW1wbGVGaWVsZCApOwoKIGhhc1RpdGxlICggZXhhbXBsZVJlY29yZF9Ud28gKTsgLy8gPC0tIHRoaXMgY2FsbCByZXR1cm5zIEZhbHNlCgogKgogKgogKgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5leGlzdEZpZWxkCiAqIEBuYW1lIFJlY29yZCNleGlzdEZpZWxkICovClJlY29yZC5leGlzdEZpZWxkID0gbmV3IFN0cmluZygpOwoKLyoqIEdldCBhIHJlZmVyZW5jZSB0byBhIGZpZWxkIGluIHRoZSByZWNvcmQuCiAqCiAqIEdpdmVuIHRoZSBpbmRleCBvZiBhIGZpZWxkLCBvciBhIGZpZWxkTmFtZSwgb3IgYSBmaWVsZE5hbWUgYW5kIGFuCiAqIGluZGV4LCByZXR1cm4gYSByZWZlcmVuY2UgdG8gYSBmaWVsZC4KICoKICogVGhpcyBpcyB0aGUgcHJpbWFyeSBtZXRob2QgdG8gZ2V0IGFjY2VzcyB0byB0aGUgZmllbGRzIG9mIGEKICogcmVjb3JkLiBUaGUgbWV0aG9kIGV4aXN0cyBpbiB0aHJlZSB2ZXJzaW9ucywgZGVwZW5kaW5nIG9uIHRoZQogKiBudW1iZXIgYW5kIHR5cGUgb2YgYXJndW1lbnRzIGdpdmVuLgogKgogKiBJZiBnaXZlbiBhIG51bWVyaWNhbCBpbmRleCBvbmx5LCBpdCByZXR1cm5zIHRoZSBmaWVsZCBhdCB0aGF0IHBvc2l0aW9uCiAqIGluIHRoZSByZWNvcmRzIGludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGZpZWxkcy4gVGhpcyBpcyBwcm9iYWJseQogKiBvbmx5IHVzZWZ1bCBpbiBjb25qdW5jdGlvbiB3aXRoIGUuZy4gbG9vcGluZyB0aHJvdWdoIGFsbCBmaWVsZHMgaW4KICogdGhlIHJlY29yZC4KICoKICogSWYgZ2l2ZW4gYSBuYW1lLCBpdCByZXR1cm5zIHRoZSBmaXJzdCBmaWVsZCBmb3VuZCwgdGhhdCBtYXRjaGVzIHRoZQogKiBnaXZlbiBuYW1lLgogKgogKiBJZiBnaXZlbiBhIG5hbWUgYW5kIGFuIGluZGV4IG4sIGl0IHJldHVybnMgdGhlIG4ndGggZmllbGQgd2l0aAogKiB0aGUgZ2l2ZW4gbmFtZS4KICoKICogTm90ZSwgdGhhdCBpZiB0aGUgZmllbGQgaXMgbm90IGZvdW5kLCBhbiBlbXB0eSBmaWVsZCBpcwogKiByZXR1cm5lZC4gVGhpcyBmaWVsZCBpcyBub3QgcGFydCBvZiB0aGUgcmVjb3JkLgogKgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IGZpZWxkSW5kZXhPckZpZWxkTmFtZSBJbmRleCBvZiBmaWVsZCB0byBmaW5kLCB6ZXJvLWJhc2VkLCBvciBuYW1lIG9mIGEgZmllbGQgdG8gZmluZC4KICogQHBhcmFtIHtudW1iZXJ9IFtmaWVsZE5hbWVJbmRleF0gSW5kZXggb2YgbmFtZWQgZmllbGQgdG8gZmluZCwgemVyby1iYXNlZC4gKk9ubHkgYWxsb3dlZCBpZiBmaXJzdCBhcmd1bWVudCBpcyBhIGZpZWxkTmFtZS4qCiAqIEByZXR1cm4ge0ZpZWxkfSBBIHJlZmVyZW5jZSB0byBhIGZpZWxkLCBvciBhbiBlbXB0eSBmaWVsZCwgaWYgbm90IGZvdW5kLgogKiBAZXhhbXBsZQogLy9leGFtcGxlIHJlY29yZAogdmFyIHJlY29yZCA9IG5ldyBSZWNvcmQoKTsKIGZpZWxkID0gbmV3IEZpZWxkICggIjAyMSIsICIwMCIgKTsKIGZpZWxkLmFwcGVuZCAoICJlIiwgIjk3ODA2MTgyNjAzMDAiICk7CiByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogZmllbGQgPSBuZXcgRmllbGQgKCAiMDIxIiwgIjAwIiApOwogZmllbGQuYXBwZW5kICggImEiLCAiMDYxODE2MjIxNiIgKTsKIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiBmaWVsZCA9IG5ldyBGaWVsZCAoICIxMDAiLCAiMDAiICk7CiBmaWVsZC5hcHBlbmQgKCAiYSIsICJUb2xraWVuIiApOwogZmllbGQuYXBwZW5kICggImgiLCAiSi5SLlIuIiApOwogcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKIGZpZWxkID0gbmV3IEZpZWxkICggIjI0NSIsICIwMCIgKTsKIGZpZWxkLmFwcGVuZCAoICJhIiwgIlRoZSBob2JiaXQsIG9yLCBUaGVyZSBhbmQgYmFjayBhZ2FpbiIgKTsKIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgoKIC8vIEdldCB0aGUgdGhpcmQgZmllbGQgaW4gdGhlIHJlY29yZAogdmFyIGYxID0gcmVjb3JkLmZpZWxkKCAyICk7IC8vPC0tIHRoaXMgcmVmZXJzIHRvIGZpZWxkIDEwMAoKIC8vIEJlIGF3YXJlIGlmIHlvdSB1c2Ugb25seSB0aGUgbmFtZSBvZiB0aGUgZmllbGQgYW5kIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgb2YgdGhhdCBmaWVsZAogLy8geW91IHdpbGwgZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBmaXJzdCBmaWVsZAogdmFyIGYyID0gcmVjb3JkLmZpZWxkKCAiMDIxIiApOyAgLy8gPC0tIHRoaXMgcmVmZXJzIHRvIGZpZWxkIDAyMSBjb250YWluaW5nIHN1YmZpZWxkICJlIiB2YWx1ZSA9IDk3ODA2MTgyNjAzMDAKCiAvLyBHZXQgdGhlIHNlY29uZCAwMjEgZmllbGQKIHZhciBmMyA9IHJlY29yZC5maWVsZCggIjAyMSIsIDEgKTsgLy8gPC0tIHRoaXMgcmVmZXJzIHRvIGZpZWxkIDAyMSBjb250YWluaW5nIHN1YmZpZWxkICJhIiB2YWx1ZSA9IDA2MTgxNjIyMTYKCiAvL0JlIGF3YXJlIGlmIHlvdSByZWZlciB0byBhIGZpZWxkIHdpdGggbmFtZSBhbmQgaW5kZXggdGhhdCBpcyBub3QgdGhlcmUgeW91IGdldCBhbiBlbXB0eSBmaWVsZAogdmFyIGY0ID0gcmVjb3JkLmZpZWxkKCAiMDIxIiwgMiApOyAvLyA8LS0gdGhpcyByZWZlcnMgdG8gYW4gZW1wdHkgZmllbGQsIGJlY2F1c2UgdGhlcmUgYXJlIG9ubHkgdHdvIGZpZWxkIDAyMSBpbiB0aGlzIHJlY29yZAoKICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuZmllbGQKICogQG5hbWUgUmVjb3JkI2ZpZWxkICovClJlY29yZC5maWVsZCA9IG5ldyBTdHJpbmcoKTsKCi8qKiBJdGVyYXRlcyBvdmVyIHRoZSBmaWVsZHMgYW5kIGNhbGxzIGEgaGFuZGxlciBvbiBlYWNoIGZpZWxkLiBSZXR1cm5zIHRoZSB2YWx1ZSBvZgogKiB0aGUgZmlyc3QgdmFsdWUgdGhlIGhhbmRsZXIgcmV0dXJucywgdGhhdCBpcyBub3QgdW5kZWZpbmVkLgogKgogKiBUaGlzIGZ1bmN0aW9uIGhhcyAyIGZvcm1zOgogKgogKiBJZiBnaXZlbiBhIG1hdGNoZXIgYW5kIGEgaGFuZGxlciwgdGhlbiB0aGUgaGFuZGxlciBpcyBjYWxsZWQgZm9yIGVhY2ggZmllbGQuCiAqCiAqIElmIGdpdmVuIGEgbWF0Y2hlciwgYW4gYXJyYXkgb2Ygc29ydGVyIG9iamVjdHMgYW5kIGEgaGFuZGxlciwgdGhlbiB0aGUgbWF0Y2hlZAogKiBmaWVsZHMgYXJlIHNvcnRlZCBiZWZvcmUgdGhlIGhhbmRsZXIgaXMgY2FsbGVkIGZvciBlYWNoIGZpZWxkLgogKgogKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd8T2JqZWN0fSBtYXRjaGVyIEEgUmVnRXhwIG9yIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge0FycmF5fSBzb3J0ZXIgQW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGhhcyBhIGZ1bmN0aW9uOiBzb3J0KCBhLCBiICkuIGEgYW5kCiAqICAgICAgICAgIGIgYXJlIGZpZWxkcyBhbmQgdGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gLTEgKGEgPCBiKSwgMCAoIGEgPT0gYikgb3IgMSAoYSA+IGIpLgogKiAgICAgICAgICBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyAtMSBvciAxLCB0aGVuIHRoZSB0d28gZmllbGRzIGFyZSBzb3J0ZWQgYW5kIGFueSBmdXJ0aGVyCiAqICAgICAgICAgIGVsZW1lbnRzIGluIHRoZSBhcnJheSBhcmUgaWdub3JlZCBmb3IgdGhlc2UgdHdvIGZpZWxkcy4KICogQHBhcmFtIHtIYW5kbGVyfEZ1bmN0aW9ufSBoYW5kbGVyIFRoZSBoYW5kbGVyIHRvIGNhbGwgZm9yIGVhY2ggc3ViZmllbGQgZm91bmQKICogICAgICAgICAgYnkgbWF0Y2hlci4KICoKICogQHJldHVybiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSB0aGUgaGFuZGxlciByZXR1cm5zLgogKgogKiBAZXhhbXBsZQogLy8gR2V0IHRoZSBmaXJzdCBwZXJzb24gbmFtZSBmcm9tIDc5NQogdmFyIHBlcnNvbk5hbWUgPSByZWNvcmQuZmlyc3RGaWVsZCggLzc5NS8sIGZ1bmN0aW9uKCBmaWVsZCApIHsgZmllbGQuZ2V0VmFsdWUoIC9hLyApIH0gKTsKCiAvLyBBbmQgd2l0aCBhIGN1c3RvbSBtYXRjaGVyCiB2YXIgcGVyc29uTmFtZSA9IHJlY29yZC5maXJzdEZpZWxkKCB7IG1hdGNoRmllbGQ6IGZ1bmN0aW9uKCByZWNvcmQsIGZpZWxkICkgeyByZXR1cm4gZmllbGQubmFtZSA9PT0gIjc5NSIgfSB9LCBmdW5jdGlvbiggZmllbGQgKSB7IGZpZWxkLmdldFZhbHVlKCAvYS8gKSB9ICk7CgogLy8gR2V0cyB0aGUgZmlyc3QgbmFtZSBvZiAiNzk1IiBhZnRlciB0aGUgZmllbGRzIGhhdmUgYmVlbiBzb3J0ZWQgYnkgc3ViIGZpZWxkICLDpSIKIHZhciBwZXJzb25OYW1lID0gcmVjb3JkLmZpcnN0RmllbGQoIC83OTUvLCBbIG5ldyBTb3J0QnlTdWJGaWVsZHMoIC/DpS8sIFNvcnRlci5BU0MgKSBdLCBmdW5jdGlvbiggZmllbGQgKSB7IGZpZWxkLmdldFZhbHVlKCAvYS8gKSB9ICk7CiAqCiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmZpcnN0RmllbGQKICogQG5hbWUgUmVjb3JkI2ZpcnN0RmllbGQgKi8KUmVjb3JkLmZpcnN0RmllbGQgPSBuZXcgU3RyaW5nKCk7CgovKiogUmV0dXJucyB0aGUgZmlyc3QgZmllbGQgdGhhdCBtYXRjaGVzIGEgZ2l2ZW4gbWF0Y2hlci4KICoKICogQHBhcmFtIHtSZWdFeHB9IHJlZ0V4RmllbGRNYXRjaGVyIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgICAgICAgICAgb2YgdGhlIGZpZWxkIHlvdSB3YW50IHRvIHJldHVybi4KICoKICogQHJldHVybiB7RmllbGR9IFRoZSBmaXJzdCBmaWVsZCB3aG9zZSBuYW1lIG1hdGNoZXMgdGhlIG1hdGNoZXIgaW4gcmVnRXhGaWVsZE1hdGNoZXIuCiAqCiAqIEBleGFtcGxlCiAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZmllbGQgMjQ1LgogZnVuY3Rpb24gZ2V0VGl0bGUoKSB7CglyZXR1cm4gcmVjb3JkLmdldEZpcnN0RmllbGRBc0ZpZWxkKCAvMjQ1LyApOwp9CiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmdldEZpcnN0RmllbGRBc0ZpZWxkCiAqIEBuYW1lIFJlY29yZCNnZXRGaXJzdEZpZWxkQXNGaWVsZCAqLwpSZWNvcmQuZ2V0Rmlyc3RGaWVsZEFzRmllbGQgPSBuZXcgU3RyaW5nKCk7CgovKiogUmV0dXJucyB0aGUgZmlyc3Qgc3ViZmllbGQgdmFsdWUgaW4gdGhlIHJlY29yZC4KICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gZmllbGRNYXRjaGVyIEEgUmVnRXhwIG9yIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd8T2JqZWN0fSBzdWJGaWVsZE1hdGNoZXIgQSBSZWdFeHAgb3IgU3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgc3ViZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaFN1YkZpZWxkKCBmaWVsZCwgc3ViZmllbGQgKS4KICogICAgICAgIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZS4KICoKICogQHJldHVybiB7U3RyaW5nfSBUaGUgZmlyc3QgdmFsdWUgZm91bmQgaW4gdGhlIHJlY29yZCBvciB0aGUgZW1wdHkgc3RyaW5nLgogKgogKiBAZXhhbXBsZQogZnVuY3Rpb24gZmlyc3RTdWJqZWN0KCByZWNvcmQgKSB7CglyZXR1cm4gcmVjb3JkLmdldEZpcnN0VmFsdWUoIC82NjYvLCAvZi8gKTsKfQogKgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5nZXRGaXJzdFZhbHVlCiAqIEBuYW1lIFJlY29yZCNnZXRGaXJzdFZhbHVlICovClJlY29yZC5nZXRGaXJzdFZhbHVlID0gbmV3IFN0cmluZygpOwoKLyoqIEl0ZXJhdGVzIG92ZXIgdGhlIGZpZWxkcyBhbmQgcmV0dXJucyB0aGUgdmFsdWVzIG9mIGFueSBzdWJmaWVsZCB0aGF0IG1hdGNoZXMgYSBjcml0ZXJpYS4KICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gZmllbGRNYXRjaGVyIEEgUmVnRXhwIG9yIFN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd8T2JqZWN0fSBzdWJGaWVsZE1hdGNoZXIgQW4gUmVnRXhwIG9yIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHN1YmZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hTdWJGaWVsZCggZmllbGQsIHN1YmZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqIEBwYXJhbSB7U3RyaW5nfSBzZXAgQSBzZXBhcmF0b3IgdG8gaW5zZXJ0IGJldHdlZW4gdGhlIHZhbHVlcywgaWYgbW9yZSB0aGFuIG9uZSBpcyBmb3VuZC4KICoKICogQHJldHVybiB7U3RyaW5nfSBUaGUgZm91bmQgdmFsdWVzIGFzIGEgc3RyaW5nLiBJZiBubyB2YWx1ZXMgYXJlIGZvdW5kLCB0aGUgZnVuY3Rpb24gd2lsbAogKiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoZSBlbXB0eSBzdHJpbmcuCiAqCiAqIEBleGFtcGxlCiAvLyBSZXR1cm5zIGFsbCB2YWx1ZXMgZnJvbSBmaWVsZCAiMjQ1YSIgd2l0aG91dCBhbnkgc2VwYXJhdG9yLgogZnVuY3Rpb24gZ2V0VGl0bGVzKCByZWNvcmQgKSB7CglyZXR1cm4gcmVjb3JkLmdldFZhbHVlKCAiMjQ1IiwgImEiICk7Cn0KCiAvLyBSZXR1cm5zIGFsbCB2YWx1ZXMgZnJvbSBmaWVsZCAiMjQ1YSIgd2l0aCBhIGNvbW1hIHNlcGFyYXRvci4KIGZ1bmN0aW9uIGdldFRpdGxlcyggcmVjb3JkICkgewoJcmV0dXJuIHJlY29yZC5nZXRWYWx1ZSggIjI0NSIsICJhIiwgIiwgIiApOwp9CiAqCiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmdldFZhbHVlCiAqIEBuYW1lIFJlY29yZCNnZXRWYWx1ZSAqLwpSZWNvcmQuZ2V0VmFsdWUgPSBuZXcgU3RyaW5nKCk7CgovKiogQ2hlY2tzIGlmIGEgbWF0Y2hlciBvbmx5IG1hdGNoZXMgb25lIGZpZWxkLgogKgogKiBAcGFyYW0ge1JlZ0V4cHxPYmplY3R9IG1hdGNoZXIgQSBSZWdFeHAgdGhhdCBtYXRjaGVzIHRoZSBmaWVsZCBuYW1lCiAqICAgICAgICAgIG9yIGFuIG9iamVjdCB3aXRoIGEgZnVuY3Rpb24gb2YgdGhlIG5vcm06IGZ1bmN0aW9uIG1hdGNoRmllbGQoIHJlY29yZCwgZmllbGQgKS4KICogICAgICAgIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZS4KICoKICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBvbmx5IG9uZSBmaWVsZCBtYXRjaGVzIG1hdGNoZXIsIEZhbHNlIG90aGVyd2lzZS4KICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuaXNVbmlxdWUKICogQG5hbWUgUmVjb3JkI2lzVW5pcXVlICovClJlY29yZC5pc1VuaXF1ZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBJdGVyYXRlcyBvdmVyIHRoZSBmaWVsZHMgYW5kIGNoZWNrcyBpZiBhbnkgb2YgdGhlIHN1YmZpZWxkcyBoYXMgYSBnaXZlbiB2YWx1ZS4KICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gZmllbGRNYXRjaGVyIEEgUmVnRXhwIG9yIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd8T2JqZWN0fSBzdWJGaWVsZE1hdGNoZXIgQSBSZWdFeHAgb3Igc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgc3ViZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaFN1YkZpZWxkKCBmaWVsZCwgc3ViZmllbGQgKS4KICogICAgICAgIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZS4KICogQHBhcmFtIHtSZWdFeHB9IHZhbHVlUmVnRXhwIFRoZSB2YWx1ZSB0aGF0IHlvdSB3YW50IHRvIG1hdGNoLgogKgogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgdmFsdWUgaXMgbWF0Y2hlZCwgRmFsc2Ugb3RoZXJ3aXNlLgogKgogKiBAZXhhbXBsZQogLy8gQ2hlY2tzIGlmIGEgcmVjb3JkIGlzIGEgYm9vawogZnVuY3Rpb24gaXNCb29rKCByZWNvcmQgKSB7CglyZXR1cm4gcmVjb3JkLm1hdGNoVmFsdWUoIC8wMDkvLCAvYS8sIC94eC8gKTsKfQogKgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5tYXRjaFZhbHVlCiAqIEBuYW1lIFJlY29yZCNtYXRjaFZhbHVlICovClJlY29yZC5tYXRjaFZhbHVlID0gbmV3IFN0cmluZygpOwoKLyoqIFRoZSBudW1iZXIgb2YgZmllbGRzIGluIHRoZSByZWNvcmQuCiAqCiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIG51bWJlciBvZiBmaWVsZHMgaW4gdGhlIHJlY29yZC4gSXQgaXMgbW9zdAogKiBvZnRlbiB1c2VkIHRvIGl0ZXJhdGUgdGhlIGZpZWxkcyBvZiBhIHJlY29yZC4KICoKICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGZpZWxkcyBpbiB0aGUgcmVjb3JkLgogKiBAZXhhbXBsZSAvLyBJdGVyYXRlIGFsbCBmaWVsZHMgb2YgYSByZWNvcmQgYW5kIHByaW50IHRoZW0KIGZvciggdmFyIGkgPSAwOyBpIDwgcmVjb3JkLm51bWJlck9mRmllbGRzKCk7ICsraSApIHsKICBwcmludCggcmVjb3JkLmZpZWxkKCBpICkudG9TdHJpbmcoKSApOwp9CiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLm51bWJlck9mRmllbGRzCiAqIEBuYW1lIFJlY29yZCNudW1iZXJPZkZpZWxkcyAqLwpSZWNvcmQubnVtYmVyT2ZGaWVsZHMgPSBuZXcgU3RyaW5nKCk7CgovKiogUmVtb3ZlIGEgZmllbGQgZnJvbSBhIHJlY29yZC4KICoKICogR2l2ZW4gdGhlIGluZGV4IG9mIGEgZmllbGQsIG9yIGEgZmllbGROYW1lLCBvciBhIGZpZWxkTmFtZSBhbmQgYW4KICogaW5kZXgsIHJlbW92ZXMgdGhlIGZpZWxkIGZyb20gdGhlIHJlY29yZC4KICoKICogVGhlIG1ldGhvZCBleGlzdHMgaW4gdGhyZWUgdmVyc2lvbnMsIGRlcGVuZGluZyBvbiB0aGUKICogbnVtYmVyIGFuZCB0eXBlIG9mIGFyZ3VtZW50cyBnaXZlbi4KICoKICogSWYgZ2l2ZW4gYSBudW1lcmljYWwgaW5kZXgsIGl0IHJlbW92ZXMgdGhlIGZpZWxkIGF0IHRoYXQgcG9zaXRpb24KICogaW4gdGhlIHJlY29yZHMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgZmllbGRzLgogKgogKiBJZiBnaXZlbiBhIG5hbWUsIGl0IHJlbW92ZXMgdGhlIGZpcnN0IGZpZWxkIGZvdW5kLCB0aGF0IG1hdGNoZXMgdGhlCiAqIGdpdmVuIG5hbWUuCiAqCiAqIElmIGdpdmVuIGEgbmFtZSBhbmQgYW4gaW5kZXggbiwgaXQgcmVtb3ZlcyB0aGUgbid0aCBmaWVsZCB3aXRoCiAqIHRoZSBnaXZlbiBuYW1lLgogKgogKiBJZiBubyBmaWVsZCBtYXRjaGVzIHRoZSBwYXJhbWV0ZXJzLCBub3RoaW5nIGhhcHBlbnMuCiAqCiAqICoqTm90ZToqKiBGb3IgdGhlIEMrKyBpbXBsZW1lbnRhdGlvbjogQW55IHJlZmVyZW5jZSB0byBleGlzdGluZwogKiBmaWVsZHMgb24gdGhpcyByZWNvcmQgbWF5IGJlIGludmFsaWRhdGVkIGJ5IHJlbW92aW5nIGEgZmllbGQuIFRoaXMKICogaGFzIGEgbnVtYmVyIG9mIHBvdGVudGlhbCBiYWQgY29uc2VxdWVuY2VzLCBtb3N0IG9mIHdoaWNoIGxlYWRzIHRvCiAqIGNyYXNoZXMgb3IgdW5wcmVkaWN0YWJsZSBiZWhhdmlvdXIuIEl0IGlzIGVhc3kgdG8gZmFsbCBpbnRvIHRoZQogKiB0cmFwIG9mIGUuZy4gaXRlcmF0aW5nIGFsbCBmaWVsZHMgaW4gYSByZWNvcmQsIGFuZCByZW1vdmUgc29tZSBvZgogKiB0aGVtLiBUaGlzIGlzIGFsbW9zdCBjZXJ0YWluIHRvIG1ha2UgeW91ciBhcHBsaWNhdGlvbgogKiBjcmFzaC4gSW5zdGVhZCwgY29sbGVjdCB0aGUgbmFtZXMgb3IgaW5kZXhlcyBvZiB0aGUgZmllbGRzIHlvdSB3aXNoCiAqIHRvIHJlbW92ZSwgdGhlbiByZW1vdmUgdGhlbSBhZnRlciB5b3VyIG1haW4gaXRlcmF0aW9uLgogKgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IGZpZWxkSW5kZXhPckZpZWxkTmFtZSBJbmRleCBvZiBmaWVsZCB0byByZW1vdmUsIHplcm8tYmFzZWQsIG9yIG5hbWUgb2YgYSBmaWVsZCB0byByZW1vdmUKICogQHBhcmFtIHtudW1iZXJ9IFtmaWVsZE5hbWVJbmRleF0gSW5kZXggb2YgbmFtZWQgZmllbGQgdG8gcmVtb3ZlLCB6ZXJvLWJhc2VkLiAqT25seSBhbGxvd2VkIGlmIGZpcnN0IGFyZ3VtZW50IGlzIGEgZmllbGROYW1lLioKICogQGV4YW1wbGUKIC8vIFJlbW92ZSB0aGUgdGhpcmQgZmllbGQgaW4gdGhlIHJlY29yZAogYVJlY29yZC5yZW1vdmUoIDIgKTsKIC8vIFJlbW92ZSB0aGUgZmlyc3QgNTQ1IGZpZWxkCiBhUmVjb3JkLnJlbW92ZSggIjU0NSIgKTsKIC8vIFJlbW92ZSB0aGUgc2Vjb25kIDU0NSBmaWVsZAogYVJlY29yZC5yZW1vdmUoICI1NDUiLCAxICk7CiAqIEBtZXRob2QKICogQG1lbWJlck9mIFJlY29yZAogKiBAbmFtZSBSZWNvcmQucmVtb3ZlCiAqIEBuYW1lIFJlY29yZCNyZW1vdmUgKi8KUmVjb3JkLnJlbW92ZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBSZW1vdmUgYWxsIG1hdGNoaW5nIGZpZWxkcyBmcm9tIGEgcmVjb3JkLgogKgogKiBHaXZlbiBhIGZpZWxkIG5hbWUsIHJlbW92ZXMgYWxsIG1hdGNoaW5nIGZpZWxkcyBmcm9tIHRoZSByZWNvcmQuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZE5hbWUgTmFtZSBvZiBmaWVsZCB0byByZW1vdmUKICogQGV4YW1wbGUKIC8vIFJlbW92ZSBhbGwgNTQ1IGZpZWxkcwogYVJlY29yZC5yZW1vdmVBbGwoICI1NDUiICk7CiAqIEBtZXRob2QKICogQG1lbWJlck9mIFJlY29yZAogKiBAbmFtZSBSZWNvcmQucmVtb3ZlQWxsCiAqIEBuYW1lIFJlY29yZCNyZW1vdmVBbGwgKi8KUmVjb3JkLnJlbW92ZUFsbCA9IG5ldyBTdHJpbmcoKTsKCi8qKiBSZW1vdmVzIGFueSBmaWVsZCBpbiB0aGUgcmVjb3JkLCB0aGF0IG1hdGNoZXMgYSBnaXZlbiBjcml0ZXJpYS4KICoKICogQHBhcmFtIHtSZWdFeHB8T2JqZWN0fSBtYXRjaGVyIEEgUmVnRXhwIHRoYXQgbWF0Y2hlcyB0aGUgZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaEZpZWxkKCByZWNvcmQsIGZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqCiAqIEByZXR1cm4gTm90aGluZy4KICoKICogQGV4YW1wbGUKIGZ1bmN0aW9uIHJlbW92ZVN1YmplY3RzKCByZWNvcmQgKSB7CglyZXR1cm4gcmVjb3JkLnJlbW92ZVdpdGhNYXRjaGVyKCAvNjY2LyApOwp9CiAqCiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLnJlbW92ZVdpdGhNYXRjaGVyCiAqIEBuYW1lIFJlY29yZCNyZW1vdmVXaXRoTWF0Y2hlciAqLwpSZWNvcmQucmVtb3ZlV2l0aE1hdGNoZXIgPSBuZXcgU3RyaW5nKCk7CgovKiogSXRlcmF0ZXMgb3ZlciB0aGUgZmllbGRzIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBzZWxlY3RlZCBmaWVsZHMKICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gbWF0Y2hlciBBIFJlZ0V4cCB0aGF0IG1hdGNoZXMgdGhlIGZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge0FycmF5fSBzb3J0ZXIgQW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGhhcyBhIGZ1bmN0aW9uOiBzb3J0KCBhLCBiICkuIGEgYW5kCiAqICAgICAgICAgIGIgYXJlIGZpZWxkcyBhbmQgdGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gLTEgKGEgPCBiKSwgMCAoIGEgPT0gYikgb3IgMSAoYSA+IGIpLgogKiAgICAgICAgICBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyAtMSBvciAxLCB0aGVuIHRoZSB0d28gZmllbGRzIGFyZSBzb3J0ZWQgYW5kIGFueSBmdXJ0aGVyCiAqICAgICAgICAgIGVsZW1lbnRzIGluIHRoZSBhcnJheSBhcmUgaWdub3JlZCBmb3IgdGhlc2UgdHdvIGZpZWxkcy4KICoKICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIHRoZSBzZWxlY3RlZCBmaWVsZHMuIEVhY2ggZWxlbWVudCBpcyBvZiB0eXBlIEZpZWxkLgogKgogKiBAbWV0aG9kCiAqIEBuYW1lIFJlY29yZC5zZWxlY3RGaWVsZHMKICogQG5hbWUgUmVjb3JkI3NlbGVjdEZpZWxkcyAqLwoKUmVjb3JkLnNlbGVjdEZpZWxkcyA9IG5ldyBTdHJpbmcoKTsKCi8qKiBJdGVyYXRlcyBvdmVyIHRoZSBmaWVsZHMgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHNlbGVjdGVkIGZpZWxkcyBhcyBhIHNlcXVlbmNlLgogKgogKiBBIHNlcXVlbmNlIGlzIGFuIGFycmF5IG9mIG1hdGNoZXJzIHRoYXQgaXMgdXNlZCB0byBleHRyYWN0IGZpZWxkcy4gVGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zCiAqIGZpcnN0IHRoZSBmaXJzdCBmaWVsZCBmcm9tIGVhY2ggbWF0Y2hlciwgdGhlbiBvbiB0aGUgc2Vjb25kIGZpZWxkIGZyb20gZWFjaCBtYXRjaGVyLAogKiBhbmQgc28gb24uCiAqCiAqIElmIHRoZSBtYXRjaGVycyBtYXRjaGVzIG9uIGRpZmZlcmVudCBudW1iZXIgb2YgZmllbGRzLCB0aGVuIG9ubHkgdGhlIHNtYWxsZXN0IG51bWJlciBvZiBtYXRjaGVkCiAqIGZpZWxkcyBpcyB1c2VkLgogKgogKiBAcGFyYW0ge1JlZ0V4cHxPYmplY3R9IG1hdGNoZXIgQSBSZWdFeHAgdGhhdCBtYXRjaGVzIHRoZSBmaWVsZCBuYW1lCiAqICAgICAgICAgIG9yIGFuIG9iamVjdCB3aXRoIGEgZnVuY3Rpb24gb2YgdGhlIG5vcm06IGZ1bmN0aW9uIG1hdGNoRmllbGQoIHJlY29yZCwgZmllbGQgKS4KICogICAgICAgIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZS4KICogQHBhcmFtIHtBcnJheX0gc29ydGVyIEFuIGFycmF5IG9mIG9iamVjdHMgdGhhdCBoYXMgYSBmdW5jdGlvbjogc29ydCggYSwgYiApLiBhIGFuZAogKiAgICAgICAgICBiIGFyZSBmaWVsZHMgYW5kIHRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIC0xIChhIDwgYiksIDAgKCBhID09IGIpIG9yIDEgKGEgPiBiKS4KICogICAgICAgICAgSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgLTEgb3IgMSwgdGhlbiB0aGUgdHdvIGZpZWxkcyBhcmUgc29ydGVkIGFuZCBhbnkgZnVydGhlcgogKiAgICAgICAgICBlbGVtZW50cyBpbiB0aGUgYXJyYXkgYXJlIGlnbm9yZWQgZm9yIHRoZXNlIHR3byBmaWVsZHMuCiAqCiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgc2VsZWN0ZWQgZmllbGRzLiBFYWNoIGVsZW1lbnQgaXMgb2YgdHlwZSBGaWVsZC4KICoKICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuc2VsZWN0RmllbGRzU2VxdWVuY2UKICogQG5hbWUgUmVjb3JkI3NlbGVjdEZpZWxkc1NlcXVlbmNlICovClJlY29yZC5zZWxlY3RGaWVsZHNTZXF1ZW5jZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZmllbGRzIGluIHRoaXMgcmVjb3JkLgogKgogKiAgQHJldHVybiB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGZpZWxkcy4KICogIEBleGFtcGxlCiAvLyBUaGlzIGZ1bmN0aW9uIGlzIG1vc3RseSB1c2VkIGluIGZ1bmN0aW9ucyB3aXRoIGZvci1zdHJ1Y3R1cmVzIGxpa2U6CiBmdW5jdGlvbiBwcmludEZpZWxkcyggcmVjb3JkICkgewoJZm9yKCB2YXIgaSA9IDA7IGkgPCByZWNvcmQuc2l6ZSgpOyBpKysgKSB7CgkJdmFyIGZpZWxkID0gcmVjb3JkLmZpZWxkKCBpICk7CgkJCgkJcHJpbnQoIGZpZWxkLnRvU3RyaW5nKCkgKyAiXG4iICk7Cgl9Cn0KICoKICogQG1ldGhvZAogKiBAbmFtZSBSZWNvcmQuc2l6ZQogKiBAbmFtZSBSZWNvcmQjc2l6ZSAqLwpSZWNvcmQuc2l6ZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBHZXQgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlY29yZC4KICoKICogVGhpcyBtZXRob2QgcmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVjb3JkLCBpbiBhCiAqIGZvcm1hdCB2ZXJ5IGNsb3NlIHRvIGEgc3RhbmRhcmQgTWFyYyBsaW5lIGZvcm1hdC4gVGhlIHN0cmluZyBpcwogKiBjb25zdHJ1Y3RlZCBieSBjYWxsaW5nIHRoZSB0b1N0cmluZyBtZXRob2Qgb2YgYWxsIHRoZSBmaWVsZHMgdGhlCiAqIHJlY29yZCBjb250YWlucy4KICoKICogQW55IHZhbHVlcyBvZiBAIG9yICogaW4gZmllbGRzL3N1YmZpZWxkcywgd2lsbCBiZSB3cml0dGVuIGFzCiAqIEBAIGFuZCBAKiByZXNwZWN0aXZlbHkuCiAqCiAqIEByZXR1cm4ge1N0cmluZ30gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlY29yZAogKiBAbWV0aG9kCiAqIEBtZW1iZXJPZiBSZWNvcmQKICogQG5hbWUgUmVjb3JkLnRvU3RyaW5nCiAqIEBuYW1lIFJlY29yZCN0b1N0cmluZyAqLwpSZWNvcmQudG9TdHJpbmcgPSBuZXcgU3RyaW5nKCk7CgovKiogQ3JlYXRlIGEgcmVjb3JkIGZyb20gYSBzdHJpbmcuCiAqCiAqIFRoaXMgbWV0aG9kIGNoYW5nZXMgdGhlIHJlY29yZCB0byByZXByZXNlbnQgdGhlIGlucHV0IGluIHRoZSBzdHJpbmcuCiAqCiAqIEV4aXN0aW5nIGNvbnRlbnQgb2YgdGhlIHJlY29yZCBpcyBjbGVhcmVkLiBUaGUgaW5wdXQgaXMgcGFyc2VkIHRvCiAqIGJ1aWxkIGEgbmV3IHJlY29yZCBpbiBwbGFjZS4gVGhlIHBhcnNlciBob25vcnMgdHdvICJzdGFuZGFyZCIgTWFyYwogKiByZWNvcmQgZXNjYXBlIGNvZGVzOiBAQCBhbmQgQFwqLCB3aGljaCBhcmUgdHJhbnNsYXRlZCB0byBAIGFuZCBcKgogKiByZXNwZWN0aXZlbHkuIE90aGVyIEAgY29kZXMgYXJlIG5vdCBpbnRlcnByZXRlZCwgYnV0IGFyZSBjYXJyaWVkCiAqIHRocm91Z2ggdW5jaGFuZ2VkLgogKgogKiAqKk5PVEU6KiogY29udHJvbEZpZWxkcyBhcmUgKm5vdCBzdXBwb3J0ZWQqIGJ5IHRoaXMgbWV0aG9kLgogKgogKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIEEgTWFyYyByZWNvcmQgaW4gbGluZSBmb3JtYXQuCiAqIEBtZXRob2QKICogQG1lbWJlck9mIFJlY29yZAogKiBAbmFtZSBSZWNvcmQuZnJvbVN0cmluZwogKiBAbmFtZSBSZWNvcmQjZnJvbVN0cmluZyAqLwpSZWNvcmQuZnJvbVN0cmluZyA9IG5ldyBTdHJpbmcoKTsKCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEZJRUxECi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKiBBIGZpZWxkIGluIGEgTWFyYyByZWNvcmQuCiAqCiAqIFRoZSBGaWVsZCBjbGFzcyBpcyBhbiBhYnN0cmFjdGlvbiBmb3IgYSBGaWVsZCBpbiBhIE1hcmMgcmVjb3JkLiBJdAogKiBjb250YWlucyBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRvIHJlcHJlc2VudCBhbmQKICogbWFuaXB1bGF0ZSBhIGZpZWxkLgogKgogKiBZb3UgY2FuIGNvbnN0cnVjdCBhIGZpZWxkIGluc3RhbmNlIGluIG9uZSBvZiB0d28gd2F5cywgZWl0aGVyIGFzIGFuCiAqIGVtcHR5IGZpZWxkLCBvciBieSBnaXZpbmcgaXQgYSBuYW1lIGFuZCBhbiBpbmRpY2F0b3IuCiAqCiAqIEEgZmllbGQgY2FuIGJlIGVpdGhlciBhICpub3JtYWwgZmllbGQqLCB3aXRoIG5hbWUsIGluZGljYXRvciBhbmQKICogc3ViZmllbGRzLCBvciBpdCBjYW4gYmUgYSAqY29udHJvbCBmaWVsZCosIHdpdGggbmFtZSBhbmQgdmFsdWUuIEFsbAogKiBmaWVsZHMgYXJlIGNvbnN0cnVjdGVkIGFzIG5vcm1hbCBmaWVsZHMuIElmIHlvdSB3YW50IHRvIGNyZWF0ZSBhCiAqIGNvbnRyb2wgZmllbGQsIHlvdSBtdXN0IHVzZSB0aGUgZGVmYXVsdCBjb25zdHJ1Y3RvciAobm8gYXJndW1lbnQpLAogKiB0aGVuIHNldCB0aGUgbmFtZSBhbmQgdmFsdWUgcHJvcGVydGllcyBhZnRlcndhcmRzLiBTZXR0aW5nIHRoZQogKiB2YWx1ZSBwcm9wZXJ0eSBvbiBhIGZpZWxkIHdpdGggbm8gaW5kaWNhdG9yLCBhbmQgbm8gc3ViZmllbGRzLAogKiB0dXJucyBpdCBpbnRvIGEgY29udHJvbCBmaWVsZC4gSXQgaXMgbm90IHBvc3NpYmx5IHRvIHR1cm4gYSBjb250cm9sCiAqIGZpZWxkIGJhY2sgaW50byBhIG5vcm1hbCBmaWVsZC4KICoKICogQGV4YW1wbGUKIC8vIFN5bnRheAogdmFyIGYxID0gbmV3IEZpZWxkKCk7CiB2YXIgZjIgPSBuZXcgRmllbGQoIGZpZWxkTmFtZSwgaW5kaWNhdG9yICk7CiAqIEBleGFtcGxlCiAvLyBUaGlzIGNvbnN0cnVjdHMgYSBub3JtYWwgZmllbGQsIGFuZCBhZGRzIGEgc3ViZmllbGQKIHZhciBub3JtYWxGaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMiIgKTsKIG5vcm1hbEZpZWxkLmFwcGVuZCggbmV3IFN1YmZpZWxkKCAiYSIsICJ2YWx1ZSBvZiBhIHN1YmZpZWxkIiApICk7CiAqIEBleGFtcGxlCiAvLyBUaGlzIGNvbnN0cnVjdHMgYSBub3JtYWwgZmllbGQsIHdpdGggbm8gbmFtZSBvciBpbmRpY2F0b3IsCiAvLyB3aGljaCBpcyB0aGVuIHRyYW5zZm9ybWVkIHRvIGEgY29udHJvbCBmaWVsZCBieSBzZXR0aW5ncyBpdHMgdmFsdWUKIHZhciBjb250cm9sRmllbGQgPSBuZXcgRmllbGQoKTsKIGNvbnRyb2xGaWVsZC5uYW1lID0gIjAwMiI7CiBjb250cm9sRmllbGQudmFsdWUgPSAiVGhpcyBpcyB0aGUgdmFsdWUgb2YgdGhlIGNvbnRyb2wgZmllbGQiCiAqIEBwYXJhbSB7c3RyaW5nfSBbZmllbGROYW1lXSBOYW1lIG9mIHRoZSBuZXcgZmllbGQuCiAqIEBwYXJhbSB7c3RyaW5nfSBbaW5kaWNhdG9yXSBWYWx1ZSBvZiB0aGUgaW5kaWNhdG9yLiAqTXVzdCBiZSBwcmVzZW50IGlmIGZpZWxkTmFtZSBpcyBnaXZlbi4qCiAqIEBjb25zdHJ1Y3RvcgogKiBAc2VlIE1hcmNDbGFzc2VzCiAqIEBzZWUgUmVjb3JkCiAqIEBzZWUgU3ViZmllbGQKICogQG5hbWUgRmllbGQgKi8KLy8gRG8gbm90IHJlbW92ZSB0aGlzIGNvbW1lbnQKCi8vIFBST1BFUlRJRVMKCi8qKiBUaGUgbmFtZSBvZiB0aGUgZmllbGQuCiAqCiAqIFRoaXMgcHJvcGVydHkgaG9sZHMgdGhlIG5hbWUgb2YgdGhlIGZpZWxkLgogKgogKiBAdHlwZSB7c3RyaW5nfQogKiBAbmFtZSBGaWVsZC5uYW1lCiAqIEBuYW1lIEZpZWxkI25hbWUgKi8KRmllbGQubmFtZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBUaGUgaW5kaWNhdG9yIGZvciB0aGUgZmllbGQuCiAqCiAqIFRoaXMgcHJvcGVydHkgaG9sZHMgdGhlIGluZGljYXRvciBmb3IgdGhlIGZpZWxkLCBhcyBhIHN0cmluZywgaWYKICogdGhlIGZpZWxkIGlzIGEgKm5vcm1hbCogZmllbGQuCiAqCiAqIFRoaXMgcHJvcGVydHkgaXMgb25seSBhdmFpbGFibGUsIGlmIHRoZSBmaWVsZCBpcyBhIG5vcm1hbCBmaWVsZCwKICogbm90IGEgY29udHJvbCBmaWVsZC4gQXNzaWduaW5nIHRvLCBvciByZWFkaW5nIGZyb20sIHRoaXMgcHJvcGVydHksCiAqIGlmIHRoZSBmaWVsZCBpcyBhIGNvbnRyb2wgZmllbGQsIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uLgogKgogKiBAdHlwZSB7c3RyaW5nfQogKiBAbmFtZSBGaWVsZC5pbmRpY2F0b3IKICogQG5hbWUgRmllbGQjaW5kaWNhdG9yICovCkZpZWxkLmluZGljYXRvciA9IG5ldyBTdHJpbmcoKTsKCi8qKiBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkLgogKgogKiBUaGlzIHByb3BlcnR5IGhvbGRzIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQsIGlmIHRoZSBmaWVsZCBpcyBhICpjb250cm9sKiBmaWVsZC4KICoKICogQXNzaWduaW5nIHRvIHRoaXMgcHJvcGVydHksIHdpbGwgY29udmVydCBhIG5vcm1hbCBmaWVsZCB0byBhCiAqIGNvbnRyb2wgZmllbGQsICppZiogdGhlIGZpZWxkIGRvZXMgbm90IGNvbnRhaW4gYW4gaW5kaWNhdG9yIG9yIGFueQogKiBzdWJmaWVsZHMuIElmIGl0IGRvZXMsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi4gUmVhZGluZyBmcm9tCiAqIHRoaXMgcHJvcGVydHkgd2lsbCBhbHNvIHRocm93LCBpZiB0aGUgZmllbGQgaXMgYSBub3JtYWwgZmllbGQuCiAqCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBuYW1lIEZpZWxkLnZhbHVlCiAqIEBuYW1lIEZpZWxkI3ZhbHVlICovCkZpZWxkLnZhbHVlID0gbmV3IFN0cmluZygpOwoKLy8gTUVUSE9EUwoKLyoqIEFwcGVuZCBhIHN1YmZpZWxkIHRvIGEgZmllbGQuCiAqCiAqIFRoaXMgbWV0aG9kIGFwcGVuZHMgYSBzdWJmaWVsZCB0byBhIGZpZWxkLiBJdCBjYW4gYmUgY2FsbGVkIGluCiAqIHRocmVlIGRpZmZlcmVudCB3YXlzLgogKgogKiBJZiBjYWxsZWQgd2l0aCBhIFN1YmZpZWxkIGluc3RhbmNlLCB0aGUgc3ViZmllbGQgaXMgYWRkZWQgKGNvcGllZCkKICogdG8gdGhlIGZpZWxkLgogKgogKiBJZiBjYWxsZWQgd2l0aCBhIG5hbWUgYW5kIHZhbHVlLCBhIG5ldyBzdWJmaWVsZCBpcyBjcmVhdGVkIGFuZAogKiBhZGRlZCB0byB0aGUgZmllbGQuCiAqCiAqIElmIGNhbGxlZCB3aXRoIGEgbmFtZSwgYSB2YWx1ZSwgYW5kIGEgYm9vbCBzZXQgdG8gdHJ1ZSwgYSBzdWJmaWVsZAogKiB3aWxsIGJlIGNyZWF0ZWQsIGFuZCBpdCB3aWxsIHJlcGxhY2UgdGhlIGZpcnN0IHN1YmZpZWxkIHdpdGggdGhlCiAqIHNhbWUgbmFtZSwgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIGl0IHdpbGwganVzdCBiZSBhcHBlbmRlZC4KICoKICogVGhlIGFwcGVuZCBvcGVyYXRpb24gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIG5vcm1hbCBmaWVsZHMsIG5vdAogKiBjb250cm9sIGZpZWxkcy4KICoKICogKipOb3RlOioqIEZvciB0aGUgQysrIGltcGxlbWVudGF0aW9uOiBBbnkgcmVmZXJlbmNlIHRvIGV4aXN0aW5nCiAqIHN1YmZpZWxkcyBvbiB0aGlzIHJlY29yZCBtYXkgYmUgaW52YWxpZGF0ZWQgYnkgYXBwZW5kIGEKICogc3ViZmllbGQuIFRoaXMgaGFzIGEgbnVtYmVyIG9mIHBvdGVudGlhbCBiYWQgY29uc2VxdWVuY2VzLCBtb3N0IG9mCiAqIHdoaWNoIGxlYWRzIHRvIGNyYXNoZXMgb3IgdW5wcmVkaWN0YWJsZSBiZWhhdmlvdXIuIEl0IGlzIGVhc3kgdG8KICogZmFsbCBpbnRvIHRoZSB0cmFwIG9mIGUuZy4gaXRlcmF0aW5nIGFsbCBzdWJmaWVsZHMgaW4gYSBmaWVsZCwgYW5kCiAqIGFwcGVuZCBzb21lIHdoaWxlIGl0ZXJhdGluZy4gVGhpcyBpcyBhbG1vc3QgY2VydGFpbiB0byBtYWtlIHlvdXIKICogYXBwbGljYXRpb24gY3Jhc2guIEluc3RlYWQsIGNvbGxlY3QgdGhlIG5ldyBzdWJmaWVsZHMgeW91IHdpc2ggdG8KICogYXBwZW5kLCB0aGVuIGFwcGVuZCB0aGVtIGFmdGVyIHlvdXIgbWFpbiBpdGVyYXRpb24uCiAqCiAqIEBleGFtcGxlCiAvLyBBcHBlbmQgYW4gZXhpc3RpbmcgZmVsZAogYUZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKIC8vIENyZWF0ZSBhIG5ldyBzdWJmaWVsZCwgYW5kIGFwcGVuZCBpdAogYUZpZWxkLmFwcGVuZCggImEiLCAiSSBhbSBhbiBhIHN1YmZpZWxkIiApOwogLy8gQ3JlYXRlIGEgbmV3IHN1YmZpZWxkLCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBmaWVsZCwgcmVwbGFjaW5nIHRoZSBmaXJzdCBzaW1pbGFyIHN1YmZpZWxkCiBhRmllbGQuYXBwZW5kKCAiYSIsICJJIGFtIGFuIGEgc3ViZmllbGQiLCB0cnVlICk7CiAqIEBleGFtcGxlIC8vIFRoaXMgZXhhbXBsZSBpbGx1c3RyYXRlcyB0aGUgcmVsYXRpb24gYmV0d2VlbiBleGlzdGluZyByZWZlcmVuY2VzLCBhbmQgbmV3IFN1YmZpZWxkcy4KIHZhciBhRmllbGQgPSBuZXcgRmllbGQoKTsKIGFGaWVsZC5hcHBlbmQoICJhIiwgIkkgYW0gYW4gc3ViZmllbGQiICk7CiB2YXIgYVN1YmZpZWxkID0gYUZpZWxkLnN1YmZpZWxkKCAiYSIgKTsKIGFTdWJmaWVsZC5uYW1lID0gImIiIC8vIENoYW5nZXMgdGhlIG5hbWUgb2YgdGhlIHN1YmZpZWxkIGluIGFGaWVsZAogdmFyIG5ld0ZpZWxkID0gbmV3IEZpZWxkKCk7CiBuZXdGaWVsZC5hcHBlbmQoIGFTdWJmaWVsZCApOyAvLyBhU3ViZmllbGQgaXMgY29waWVkIGludG8gbmV3RmllbGQKIGFTdWJmaWVsZC5uYW1lID0gImEiIC8vIENoYW5nZXMgdGhlIG5hbWUgb2YgdGhlIGZpZWxkIGluIGFGaWVsZCwgYnV0IG5vdCBpbiBuZXdGaWVsZC4KICoKICogQHBhcmFtIHtTdWJmaWVsZHxTdHJpbmd9IHN1YmZpZWxkT3JTdWJmaWVsZE5hbWUgVGhlIFN1YmZpZWxkIHRvIGFkZCwgb3IgdGhlIG5hbWUgb2YgYSBuZXcgc3ViZmllbGQgdG8gY3JlYXRlIGFuZCBhZGQuCiAqIEBwYXJhbSB7U3RyaW5nfSBbc3ViZmllbGRWYWx1ZV0gVGhlIHZhbHVlIG9mIHRoZSBuZXcgU3ViZmllbGQgdG8gYWRkLiAqTXVzdCBiZSBwcmVzZW50IGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN1YmZpZWxkTmFtZS4qCiAqIEBwYXJhbSB7Qm9vbH0gW3JlcGxhY2VdIElmIHRydWUsIHJlcGxhY2UgZXhpc3Rpbmcgc3ViZmllbGRzIG9mIHRoZSBzYW1lIG5hbWUuCiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuYXBwZW5kCiAqIEBuYW1lIEZpZWxkI2FwcGVuZCAqLwpGaWVsZC5hcHBlbmQgPSBuZXcgU3RyaW5nKCk7CgovKiogQ3JlYXRlIGEgY2xvbmUgKGNvcHkpIG9mIHRoaXMgZmllbGQuCiAqCiAqIEFsbCB0aGUgc3ViIGZpZWxkcyBvZiB0aGlzIGZpZWxkIGFyZSBhbHNvIGNsb25lZCBieSB0aGlzIGZ1bmN0aW9uLgogKgogKiBAcmV0dXJuIHtGaWVsZH0gQW4gZXhhY3QgY2xvbmUgb2YgdGhpcyBmaWVsZC4KICoKICogQG1ldGhvZAogKiBAbmFtZSBGaWVsZC5jbG9uZQogKiBAbmFtZSBGaWVsZCNjbG9uZSAqLwpGaWVsZC5jbG9uZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBDb3VudCB0aGUgbnVtYmVyIG9mIHN1YmZpZWxkcyBpbiBhIGZpZWxkIHdpdGggYSBnaXZlbiBuYW1lLgogKgogKiBHaXZlbiB0aGUgbmFtZSBvZiBhIHN1YmZpZWxkLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBudW1iZXIgb2YKICogc3ViZmllbGRzIHdpdGggdGhhdCBuYW1lLgogKgogKiBAcGFyYW0ge3N0cmluZ30gc3ViZmllbGROYW1lIFRoZSBuYW1lIG9mIGEgZmllbGQuCiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBzdWJmaWVsZHMgd2l0aCB0aGUgZ2l2ZW4gc3ViZmllbGROYW1lCiAqCiAqIEBleGFtcGxlCiAvLyBDb3VudCB0aGUgbnVtYmVyIG9mICJhIiBzdWJmaWVsZHMKIHZhciBudW0gPSBmaWVsZC5jb3VudCggImEiICk7CiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuY291bnQKICogQG5hbWUgRmllbGQjY291bnQgKi8KRmllbGQuY291bnQgPSBuZXcgU3RyaW5nKCk7CgovKiogSXRlcmF0ZXMgb3ZlciB0aGUgc3ViIGZpZWxkcyBhbmQgY2FsbHMgYW4gaGFuZGxlciBvbiBlYWNoIHN1YiBmaWVsZC4KICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gbWF0Y2hlciBBbiBSZWdFeHAgb3Igc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgc3ViZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaFN1YkZpZWxkKCBmaWVsZCwgc3ViZmllbGQgKS4KICogICAgICAgIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZS4KICogQHBhcmFtIHtIYW5kbGVyfEZ1bmN0aW9ufSBoYW5kbGVyIFRoZSBoYW5kbGVyIHRvIGNhbGwgZm9yIGVhY2ggc3ViZmllbGQgZm91bmQKICogICAgICAgICAgYnkgbWF0Y2hlci4KICoKICogQHJldHVybiBJZiBoYW5kbGVyIHJldHVybnMgYSB2YWx1ZSB0aGVuIGFsbCB0aGUgdmFsdWVzIGFyZSBhZGRlZCB0b2dldGhlciBpbnRvIGEKICogICAgICAgICAgIHNpbmdsZSB2YWx1ZS4KICoKICogQGV4YW1wbGUKIGZ1bmN0aW9uIGdldFZhbHVlKCBmaWVsZCApIHsKCXJldHVybiBmaWVsZC5lYWNoU3ViRmllbGQoICJhIiwgZnVuY3Rpb24oIGZpZWxkLCBzdWJGaWVsZCApIHsgcmV0dXJuIHN1YkZpZWxkLnZhbHVlOyB9ICk7Cn0KICoKICogVGhlIGZ1bmN0aW9uIGdldFZhbHVlIGlzIHBhc3NlZCBhIGZpZWxkIGFuZCBpdGVyYXRlcyBvdmVyIGEgc3ViIGZpZWxkcyB3aXRoIG5hbWUgImEiIGFuZCBjb2xsZWN0cyB0aGUgdmFsdWVzIG9mIGFsbCBzdWIgZmllbGRzIHdpdGggbmFtZSAiYSIKICoKICogQG1ldGhvZAogKiBAbmFtZSBGaWVsZC5lYWNoU3ViRmllbGQKICogQG5hbWUgRmllbGQjZWFjaFN1YkZpZWxkICovCkZpZWxkLmVhY2hTdWJGaWVsZCA9IG5ldyBTdHJpbmcoKTsKCi8qKiBJdGVyYXRlcyBvdmVyIHRoZSBzdWJmaWVsZHMgYW5kIGNhbGxzIGEgaGFuZGxlciBvbiBlYWNoIHN1YmZpZWxkIGFzIGEgc2VxdWVuY2UuCiAqCiAqIEEgc2VxdWVuY2UgaXMgYW4gYXJyYXkgb2YgbWF0Y2hlcnMgdGhhdCBpcyB1c2VkIHRvIGV4dHJhY3Qgc3ViZmllbGRzLiBUaGUgaGFuZGxlcgogKiBpcyB0aGVuIHVzZWQgb24gdGhlIGZpcnN0IHN1YmZpZWxkIGZyb20gZWFjaCBtYXRjaGVyLCB0aGVuIG9uIHRoZSBzZWNvbmQgc3ViZmllbGQKICogZnJvbSBlYWNoIG1hdGNoZXIsIGFuZCBzbyBvbi4KICoKICogSWYgdGhlIG1hdGNoZXJzIG1hdGNoZXMgb24gZGlmZmVyZW50IG51bWJlciBvZiBzdWJmaWVsZHMsIHRoZW4gb25seSB0aGUgc21hbGxlc3QKICogbnVtYmVyIG9mIG1hdGNoZWQgc3ViZmllbGRzIGluIHVzZWQsIHRoZW4gd2UgaW52b2tlIHRoZSBoYW5kbGVyIG9uIHRoZSBzdWJmaWVsZC4KICoKICogQHBhcmFtIHtBcnJheX0gbWF0Y2hlcnMgQW4gQXJyYXkgb2YgbWF0Y2hlciBvYmplY3RzIChSZWdFeHAncyBvciBPYmplY3RzKS4KICogICAgICAgICAgVXNlIFJlZ0V4cCB0byBtYXRjaCB0aGUgc3ViZmllbGQgbmFtZSBvciB1c2UgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbgogKiAgICAgICAgICBvZiB0aGUgbm9ybTogZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApLiBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhCiAqICAgICAgICAgIGJvb2xlYW4gdmFsdWUuCiAqIEBwYXJhbSB7SGFuZGxlcnxGdW5jdGlvbn0gaGFuZGxlciBUaGUgaGFuZGxlciB0byBjYWxsIGZvciBlYWNoIHN1YmZpZWxkIGZvdW5kCiAqICAgICAgICAgIGJ5IG1hdGNoZXIuCiAqCiAqIEByZXR1cm4gSWYgaGFuZGxlciByZXR1cm5zIGEgdmFsdWUgdGhlbiBhbGwgdGhlIHZhbHVlcyBhcmUgYWRkZWQgdG9nZXRoZXIgaW50byBhCiAqICAgICAgICAgICBzaW5nbGUgdmFsdWUuCiAqCiAqIEBleGFtcGxlCiBmaWVsZC5lYWNoU3ViRmllbGQoIFsgL2EvLCAvaS8gXSwgZnVuY3Rpb24oIGZpZWxkLCBzdWJGaWVsZCApIHsgcHJpbnQoIHN1YkZpZWxkLnZhbHVlICsgIiAiICkgfSApOwogKgogKiBUaGUgZnVuY3Rpb24gcHJpbnRzIHRoZSBzdWIgZmllbGRzICJhIiBhbmQgImkiIGluIHRoaXMgb3JkZXI6IEZpcnN0IGEsIGZpcnN0IGksIHNlY29uZCBhLAogKiBzZWNvbmQgaSwgYW5kIHNvIG9uLgogKgogKiBAbWV0aG9kCiAqIEBuYW1lIEZpZWxkLmVhY2hTdWJGaWVsZFNlcXVlbmNlCiAqIEBuYW1lIEZpZWxkI2VhY2hTdWJGaWVsZFNlcXVlbmNlICovCkZpZWxkLmVhY2hTdWJGaWVsZFNlcXVlbmNlID0gbmV3IFN0cmluZygpOwoKRmllbGQuZWFjaFN1YkZpZWxkTWFwID0gbmV3IFN0cmluZygpOwoKLyoqIENoZWNrcyBpZiB0aGUgZmllbGQgaXMgZW1wdHksIHRoYXQgaXQgaGFzIHplcm8gc3ViZmllbGRzLgogKgogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBmaWVsZCBpcyBlbXB0eSwgZmFsc2Ugb3RoZXJ3aXNlLgogKgogKiBAZXhhbXBsZQogLy8gZW1wdHkoKSBpcyBhbnkgdGltZXMgdXNlZCBhcyBhIGVhcmx5IGNoZWNrIGluIHRoZSBiZWdpbm5pbmcgb2YgYSBmdW5jdGlvbgogZnVuY3Rpb24gZiggZmllbGQgKSB7CglpZiggZmllbGQuZW1wdHkoKSApIHsKIAkJcmV0dXJuOwogCX0KIAkKIAkvLyBOb3JtYWwgbG9naWMuLi4gCQp9CiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuZW1wdHkKICogQG5hbWUgRmllbGQjZW1wdHkgKi8KRmllbGQuZW1wdHkgPSBuZXcgU3RyaW5nKCk7CgovKiogQ2hlY2tzIGlmIHRoZSBmaWVsZCBjb250YWlucyBhdCBsZWFzdCBvbmUgc3ViZmllbGQsIHRoYXQgbWF0Y2hlcyBhIGNyaXRlcmlhLgogKgogKiBAcGFyYW0ge1JlZ0V4cHxPYmplY3R9IG1hdGNoZXIgQSBSZWdFeHAgdGhhdCBtYXRjaGVzIHRoZSBzdWJmaWVsZCBuYW1lCiAqICAgICAgICAgIG9yIGFuIG9iamVjdCB3aXRoIGEgZnVuY3Rpb24gb2YgdGhlIG5vcm06IGZ1bmN0aW9uIG1hdGNoU3ViRmllbGQoIGZpZWxkLCBzdWJmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKgogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgc3ViIGZpZWxkIG1hdGNoZXMgdGhlIG1hdGNoZXIgYXJndW1lbnQsIEZhbHNlIG90aGVyd2lzZS4KICoKICogQGV4YW1wbGUKIGZ1bmN0aW9uIGhhc1RpdGxlKCBmaWVsZCApIHsKCXJldHVybiBmaWVsZC5leGlzdHMoIC9hLyApOwp9CiAqCiAqIFRoZSBmdW5jdGlvbiBoYXNUaXRsZSBjaGVja3MgaWYgdGhlIHBhc3NlZCBmaWVsZCBjb250YWlucyBhIHN1YiBmaWVsZCB3aXRoIG5hbWUgImEiLgogKgogKiBAbWV0aG9kCiAqIEBuYW1lIEZpZWxkLmV4aXN0cwogKiBAbmFtZSBGaWVsZCNleGlzdHMgKi8KRmllbGQuZXhpc3RzID0gbmV3IFN0cmluZygpOwoKLyoqIEl0ZXJhdGVzIG92ZXIgdGhlIHN1YmZpZWxkcyBhbmQgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHN1YmZpZWxkIHRoYXQgbWF0Y2hlcyBhIGNyaXRlcmlhLgogKgogKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd8T2JqZWN0fSBtYXRjaGVyIEEgUmVnRXhwIG9yIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHN1YmZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hTdWJGaWVsZCggZmllbGQsIHN1YmZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqIEBwYXJhbSB7SGFuZGxlcnxGdW5jdGlvbn0gaGFuZGxlciBUaGUgaGFuZGxlciB0byBjYWxsIGZvciBlYWNoIHN1YmZpZWxkIGZvdW5kCiAqICAgICAgICAgIGJ5IG1hdGNoZXIuCiAqCiAqIEByZXR1cm4gSWYgaGFuZGxlciByZXR1cm5zIGEgdmFsdWUgdGhlbiB0aGF0IHZhbHVlIGlzIHJldHVybmVkIGJ5IEZpZWxkLmZpcnN0U3ViRmllbGQKICoKICogQGV4YW1wbGUKIGZ1bmN0aW9uIGdldFRpdGxlKCBmaWVsZCApIHsKCXJldHVybiBmaWVsZC5maXJzdFN1YkZpZWxkKCAvYS8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViRmllbGQgKSB7IHJldHVybiBzdWJGaWVsZC52YWx1ZTsgfSApOwp9CiAqCiAqIFRoZSBmdW5jdGlvbiBnZXRUaXRsZSBpcyBwYXNzZWQgYSBmaWVsZCBhbmQgaXRlcmF0ZXMgb3ZlciBzdWJmaWVsZHMgd2l0aCBuYW1lICJhIiBhbmQKICogcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IG9jY3VyZW5jZSBvZiBzdWJmaWVsZCAiYSIuCiAqCiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuZmlyc3RTdWJGaWVsZAogKiBAbmFtZSBGaWVsZCNmaXJzdFN1YkZpZWxkICovCkZpZWxkLmZpcnN0U3ViRmllbGQgPSBuZXcgU3RyaW5nKCk7CgovKiogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHN1YmZpZWxkIHRoYXQgbWF0Y2hlcyBhIG1hdGNoZXIuCiAqCiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ3xPYmplY3R9IG1hdGNoZXIgQSBSZWdFeHAgb3Igc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgc3ViZmllbGQgbmFtZQogKiAgICAgICAgICBvciBhbiBvYmplY3Qgd2l0aCBhIGZ1bmN0aW9uIG9mIHRoZSBub3JtOiBmdW5jdGlvbiBtYXRjaFN1YkZpZWxkKCBmaWVsZCwgc3ViZmllbGQgKS4KICogICAgICAgIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZS4KICoKICogQHJldHVybiB7U3RyaW5nfSBJZiBoYW5kbGVyIHJldHVybnMgYSB2YWx1ZSB0aGVuIHRoYXQgdmFsdWUgaXMgcmV0dXJuZWQgYnkgRmllbGQuZmlyc3RTdWJGaWVsZAogKgogKiBAZXhhbXBsZQogZnVuY3Rpb24gZ2V0Rmlyc3RUaXRsZSggZmllbGQgKSB7CglyZXR1cm4gZmllbGQuZ2V0Rmlyc3RWYWx1ZSggL2EvICk7Cn0KICoKICogVGhlIGZ1bmN0aW9uIGdldEZpcnN0VGl0bGUgaXMgcGFzc2VkIGEgbWF0Y2hlciBhbmQgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHN1YmZpZWxkIHdpdGggbmFtZSAiYSIuCiAqCiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuZ2V0Rmlyc3RWYWx1ZQogKiBAbmFtZSBGaWVsZCNnZXRGaXJzdFZhbHVlICovCkZpZWxkLmdldEZpcnN0VmFsdWUgPSBuZXcgU3RyaW5nKCk7CgovKiogSXRlcmF0ZXMgb3ZlciB0aGUgc3ViZmllbGRzIGFuZCByZXR1cm5zIHRoZSB2YWx1ZXMgb2YgYW55IHN1YmZpZWxkIHRoYXQgbWF0Y2hlcyB0aGUgY3JpdGVyaWEuCiAqCiAqIEBwYXJhbSB7UmVnRXhwfE9iamVjdH0gbWF0Y2hlciBBIFJlZ0V4cCB0aGF0IG1hdGNoZXMgdGhlIHN1YiBmaWVsZG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hTdWJGaWVsZCggZmllbGQsIHN1YmZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqCiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSB3aXRoIGFsbCB0aGUgZm91bmQgdmFsdWVzLgogKgogKiBAZXhhbXBsZQogZnVuY3Rpb24gZ2V0VGl0bGVzKCBmaWVsZCApIHsKCXJldHVybiBmaWVsZC5nZXRWYWx1ZUFzQXJyYXkoIC9hLyApOwp9CiAqCiAqIFRoZSBmdW5jdGlvbiBnZXRUaXRsZXMgaXMgcGFzc2VkIGEgZmllbGQgYW5kIGl0ZXJhdGVzIG92ZXIgYSBzdWJmaWVsZHMgd2l0aCBuYW1lICJhIiBhbmQKICogcmV0dXJucyB0aGUgdmFsdWVzIG9mIHRoZSBhbGwgc3ViZmllbGQgd2l0aCBuYW1lICJhIgogKgogKiBAbWV0aG9kCiAqIEBuYW1lIEZpZWxkLmdldFZhbHVlQXNBcnJheQogKiBAbmFtZSBGaWVsZCNnZXRWYWx1ZUFzQXJyYXkgKi8KRmllbGQuZ2V0VmFsdWVBc0FycmF5ID0gbmV3IFN0cmluZygpOwoKLyoqIEl0ZXJhdGVzIG92ZXIgdGhlIHN1YmZpZWxkcyBhbmQgcmV0dXJucyB0aGUgdmFsdWVzIG9mIGFueSBzdWJmaWVsZCB0aGF0IG1hdGNoZXMgYSBjcml0ZXJpYS4KICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gbWF0Y2hlciBBIFJlZ0V4cCBvciBzdHJpbmcgdGhhdCBtYXRjaGVzIHRoZSBzdWJmaWVsZCBuYW1lCiAqICAgICAgICAgIG9yIGFuIG9iamVjdCB3aXRoIGEgZnVuY3Rpb24gb2YgdGhlIG5vcm06IGZ1bmN0aW9uIG1hdGNoU3ViRmllbGQoIGZpZWxkLCBzdWJmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge1N0cmluZ30gc2VwIEEgc2VwYXJhdG9yIHRvIGluc2VydCBiZXR3ZWVuIHRoZSB2YWx1ZXMsIGlmIG1vcmUgdGhhbiBvbmUgaXMgZm91bmQuCiAqCiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGZvdW5kIHZhbHVlcyBhcyBhIHN0cmluZy4gSWYgbm8gdmFsdWVzIGFyZSBmb3VuZCwgdGhlIGZ1bmN0aW9uIHdpbGwKICogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGUgZW1wdHkgc3RyaW5nLgogKgogKiBAZXhhbXBsZQogLy8gUmV0dXJucyBhbGwgdmFsdWVzIGZyb20gc3ViZmllbGQgImEiIHdpdGhvdXQgYW55IHNlcGFyYXRvci4KIGZ1bmN0aW9uIGdldFRpdGxlcyggZmllbGQgKSB7CglyZXR1cm4gZmllbGQuZ2V0VmFsdWUoICJhIiApOwp9CgogLy8gUmV0dXJucyBhbGwgdmFsdWVzIGZyb20gc3ViIGZpZWxkICJhIiB3aXRoIGEgY29tbWEgc2VwYXJhdG9yLgogZnVuY3Rpb24gZ2V0VGl0bGVzKCBmaWVsZCApIHsKCXJldHVybiBmaWVsZC5nZXRWYWx1ZSggImEiLCAiLCAiICk7Cn0KICoKICogQG1ldGhvZAogKiBAbmFtZSBGaWVsZC5nZXRWYWx1ZQogKiBAbmFtZSBGaWVsZCNnZXRWYWx1ZSAqLwpGaWVsZC5nZXRWYWx1ZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBJcyB0aGUgZmllbGQgYSBjb250cm9sIGZpZWxkIG9yIG5vdD8uCiAqCiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZmllbGQgaXMgYSBjb250cm9sIGZpZWxkLCBvdGhlcndpc2UgZmFsc2UuCiAqCgogKiBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gZmlndXJlIG91dCBpZiBhIGZpZWxkIGlzIGEgY29udHJvbCBmaWVsZC4KICoKICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZmllbGQgaXMgYSBjb250cm9sIGZpZWxkLCBmYWxzZSBvdGhlcndpc2UuCiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuaXNDb250cm9sRmllbGQKICogQG5hbWUgRmllbGQjaXNDb250cm9sRmllbGQgKi8KRmllbGQuaXNDb250cm9sRmllbGQgPSBuZXcgU3RyaW5nKCk7CgovKiogQ2hlY2tzIGlmIGEgbWF0Y2hlciBvbmx5IG1hdGNoZXMgb25lIHN1YmZpZWxkLgogKgogKiBAcGFyYW0ge1JlZ0V4cHxPYmplY3R9IG1hdGNoZXIgQSBSZWdFeHAgdGhhdCBtYXRjaGVzIHRoZSBzdWJmaWVsZCBuYW1lCiAqICAgICAgICAgIG9yIGFuIG9iamVjdCB3aXRoIGEgZnVuY3Rpb24gb2YgdGhlIG5vcm06IGZ1bmN0aW9uIG1hdGNoU3ViRmllbGQoIGZpZWxkLCBzdWJmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKgogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG9ubHkgb25lIHN1YmZpZWxkIG1hdGNoZXMgbWF0Y2hlciwgRmFsc2Ugb3RoZXJ3aXNlLgogKiBAbWV0aG9kCiAqIEBuYW1lIEZpZWxkLmlzVW5pcXVlCiAqIEBuYW1lIEZpZWxkI2lzVW5pcXVlICovCkZpZWxkLmlzVW5pcXVlID0gbmV3IFN0cmluZygpOwoKLyoqIENoZWNrcyBpZiB0aGUgdmFsdWUgb2Ygb25lIG9yIG1vcmUgc3ViZmllbGRzIG1hdGNoZXMgYSBnaXZlbiB2YWx1ZS4KICoKICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfE9iamVjdH0gbWF0Y2hlciBBbiBSZWdFeHAgdGhhdCBtYXRjaGVzIHRoZSBzdWIgZmllbGQgbmFtZSBvciBhIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHN1YiBmaWVsZCBuYW1lCiAqICAgICAgICAgIG9yIGFuIG9iamVjdCB3aXRoIGEgZnVuY3Rpb24gb2YgdGhlIG5vcm06IGZ1bmN0aW9uIG1hdGNoU3ViRmllbGQoIGZpZWxkLCBzdWJmaWVsZCApLgogKiAgICAgICAgVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBib29sZWFuIHZhbHVlLgogKiBAcGFyYW0ge1JlZ0V4cH0gdmFsdWVSZWdFeHAgVGhlIHBhdHRlcm4gdGhhdCB0aGUgdmFsdWUgb2YgdGhlIHN1YmZpZWxkcyBzaG91bGQgbWF0Y2guCiAqCiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIG1hdGNoZWQsIEZhbHNlIG90aGVyd2lzZS4KICogQG1ldGhvZAogKiBAbmFtZSBGaWVsZC5tYXRjaFZhbHVlCiAqIEBuYW1lIEZpZWxkI21hdGNoVmFsdWUgKi8KRmllbGQubWF0Y2hWYWx1ZSA9IG5ldyBTdHJpbmcoKTsKCi8qKiBSZW1vdmUgYSBzdWJmaWVsZCBmcm9tIGEgZmllbGQuCiAqCiAqIFRoZSBtZXRob2QgZXhpc3RzIGluIHRocmVlIHZlcnNpb25zLCBkZXBlbmRpbmcgb24gdGhlIG51bWJlciBhbmQgdHlwZSBvZiBhcmd1bWVudHMgZ2l2ZW4uCiAqCiAqIElmIGdpdmVuIGEgbnVtZXJpY2FsIGluZGV4LCBpdCByZW1vdmVzIHRoZSBzdWJmaWVsZCBhdCB0aGF0IHBvc2l0aW9uCiAqIGluIHRoZSBmaWVsZHMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2Ygc3ViZmllbGRzLgogKgogKiBJZiBnaXZlbiBhIG5hbWUsIGl0IHJlbW92ZXMgdGhlIGZpcnN0IHN1YmZpZWxkIGZvdW5kLCB0aGF0IG1hdGNoZXMgdGhlCiAqIGdpdmVuIG5hbWUuCiAqCiAqIElmIGdpdmVuIGEgbmFtZSBhbmQgYW4gaW5kZXggbiwgaXQgcmVtb3ZlcyB0aGUgbid0aCBzdWJmaWVsZCB3aXRoCiAqIHRoZSBnaXZlbiBuYW1lLgogKgogKiBJZiBubyBzdWJmaWVsZCBtYXRjaGVzIHRoZSBwYXJhbWV0ZXJzLCBub3RoaW5nIGhhcHBlbnMuCiAqCiAqICoqTm90ZToqKiBGb3IgdGhlIEMrKyBpbXBsZW1lbnRhdGlvbjogQW55IHJlZmVyZW5jZSB0byBleGlzdGluZwogKiBzdWJmaWVsZHMgb24gdGhpcyByZWNvcmQgbWF5IGJlIGludmFsaWRhdGVkIGJ5IHJlbW92aW5nIGEgc3ViZmllbGQuIFRoaXMKICogaGFzIGEgbnVtYmVyIG9mIHBvdGVudGlhbCBiYWQgY29uc2VxdWVuY2VzLCBtb3N0IG9mIHdoaWNoIGxlYWRzIHRvCiAqIGNyYXNoZXMgb3IgdW5wcmVkaWN0YWJsZSBiZWhhdmlvdXIuIEl0IGlzIGVhc3kgdG8gZmFsbCBpbnRvIHRoZQogKiB0cmFwIG9mIGUuZy4gaXRlcmF0aW5nIGFsbCBzdWJmaWVsZHMgaW4gYSBmaWVsZCwgYW5kIHJlbW92ZSBzb21lIG9mCiAqIHRoZW0uIFRoaXMgaXMgYWxtb3N0IGNlcnRhaW4gdG8gbWFrZSB5b3VyIGFwcGxpY2F0aW9uCiAqIGNyYXNoLiBJbnN0ZWFkLCBjb2xsZWN0IHRoZSBuYW1lcyBvciBpbmRleGVzIG9mIHRoZSBzdWJmaWVsZHMgeW91IHdpc2gKICogdG8gcmVtb3ZlLCB0aGVuIHJlbW92ZSB0aGVtIGFmdGVyIHlvdXIgbWFpbiBpdGVyYXRpb24uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJmaWVsZE5hbWUgTmFtZSBvZiBhIHN1YmZpZWxkIHRvIHJlbW92ZQogKiBAcGFyYW0ge251bWJlcn0gW3N1YmZpZWxkTmFtZUluZGV4XSBJbmRleCBvZiBuYW1lZCBzdWJmaWVsZCB0byByZW1vdmUsIHplcm8tYmFzZWQuCiAqIEBleGFtcGxlCiAvLyBSZW1vdmUgdGhlIGZpcnN0IGEgc3ViZmllbGQKIGFGaWVsZC5yZW1vdmUoICJhIiApOwogLy8gUmVtb3ZlIHRoZSBzZWNvbmQgYSBzdWJmaWVsZAogYUZpZWxkLnJlbW92ZSggImEiLCAxICk7CiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQucmVtb3ZlCiAqIEBuYW1lIEZpZWxkI3JlbW92ZSAqLwpGaWVsZC5yZW1vdmUgPSBuZXcgU3RyaW5nKCk7CgovKiogUmVtb3ZlcyBhbGwgc3ViZmllbGRzIHRoYXQgbWF0Y2hlcyBhIG1hdGNoZXIuCiAqCiAqIEBwYXJhbSB7UmVnRXhwfE9iamVjdH0gbWF0Y2hlciBBIFJlZ0V4cCB0aGF0IG1hdGNoZXMgdGhlIHN1YmZpZWxkIG5hbWUKICogICAgICAgICAgb3IgYW4gb2JqZWN0IHdpdGggYSBmdW5jdGlvbiBvZiB0aGUgbm9ybTogZnVuY3Rpb24gbWF0Y2hTdWJGaWVsZCggZmllbGQsIHN1YmZpZWxkICkuCiAqICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gdmFsdWUuCiAqCiAqIEByZXR1cm4gTm90aGluZy4KICoKICogQG1ldGhvZAogKiBAbmFtZSBGaWVsZC5yZW1vdmVXaXRoTWF0Y2hlcgogKiBAbmFtZSBGaWVsZCNyZW1vdmVXaXRoTWF0Y2hlciAqLwpGaWVsZC5yZW1vdmVXaXRoTWF0Y2hlciA9IG5ldyBTdHJpbmcoKTsKCi8qKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc3ViZmllbGRzIGluIHRoaXMgZmllbGQuCiAqCiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBzaG9ydGN1dCBmb3IgRmllbGQuY291bnQoKS4KICoKICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHN1YmZpZWxkcyBpbiB0aGlzIGZpZWxkLiBHcmVhdGVyIG9yIGVxdWFsIHRvIDAuCiAqCiAqIEBtZXRob2QKICogQG5hbWUgRmllbGQuc2l6ZQogKiBAbmFtZSBGaWVsZCNzaXplICovCkZpZWxkLnNpemUgPSBuZXcgU3RyaW5nKCk7CgovKiogR2V0IGEgcmVmZXJlbmNlIHRvIGEgc3ViZmllbGQgaW4gdGhlIGZpZWxkLgogKgogKiBHaXZlbiB0aGUgaW5kZXggb2YgYSBzdWJmaWVsZCwgb3IgYSBzdWJmaWVsZE5hbWUsIG9yIGEgc3ViZmllbGROYW1lIGFuZCBhbgogKiBpbmRleCwgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIGEgc3ViZmllbGQuCiAqCiAqIFRoaXMgaXMgdGhlIHByaW1hcnkgbWV0aG9kIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHN1YmZpZWxkcyBvZiBhCiAqIGZpZWxkLiBUaGUgbWV0aG9kIGV4aXN0cyBpbiB0aHJlZSB2ZXJzaW9ucywgZGVwZW5kaW5nIG9uIHRoZQogKiBudW1iZXIgYW5kIHR5cGUgb2YgYXJndW1lbnRzIGdpdmVuLgogKgogKiBJZiBnaXZlbiBhIG51bWVyaWNhbCBpbmRleCBvbmx5LCBpdCByZXR1cm5zIHRoZSBzdWJmaWVsZCBhdCB0aGF0IHBvc2l0aW9uCiAqIGluIHRoZSBmaWVsZCdzIGludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIHN1YmZpZWxkcy4gVGhpcyBpcyBwcm9iYWJseQogKiBvbmx5IHVzZWZ1bCBpbiBjb25qdW5jdGlvbiB3aXRoIGUuZy4gbG9vcGluZyB0aHJvdWdoIGFsbCBzdWJmaWVsZHMgaW4KICogdGhlIGZpZWxkLgogKgogKiBJZiBnaXZlbiBhIG5hbWUsIGl0IHJldHVybnMgdGhlIGZpcnN0IHN1YmZpZWxkIGZvdW5kLCB0aGF0IG1hdGNoZXMgdGhlCiAqIGdpdmVuIG5hbWUuCiAqCiAqIElmIGdpdmVuIGEgbmFtZSBhbmQgYW4gaW5kZXggbiwgaXQgcmV0dXJucyB0aGUgbid0aCBzdWJmaWVsZCB3aXRoCiAqIHRoZSBnaXZlbiBuYW1lLgogKgogKiBOb3RlLCB0aGF0IGlmIHRoZSBzdWJmaWVsZCBpcyBub3QgZm91bmQsIGFuIGVtcHR5IHN1YmZpZWxkIGlzCiAqIHJldHVybmVkLiBUaGlzIHN1YmZpZWxkIGlzIG5vdCBwYXJ0IG9mIHRoZSByZWNvcmQuCiAqCiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gc3ViZmllbGRJbmRleE9yU3ViZmllbGROYW1lIEluZGV4IG9mIHN1YmZpZWxkIHRvIGZpbmQsIHplcm8tYmFzZWQsIG9yIG5hbWUgb2YgYSBzdWJmaWVsZCB0byBmaW5kLgogKiBAcGFyYW0ge051bWJlcn0gW3N1YmZpZWxkTmFtZUluZGV4XSBJbmRleCBvZiBuYW1lZCBzdWJmaWVsZCB0byBmaW5kLCB6ZXJvLWJhc2VkLiAqT25seSBhbGxvd2VkIGlmIGZpcnN0IGFyZ3VtZW50IGlzIGEgc3ViZmllbGROYW1lLioKICogQHJldHVybiB7U3ViZmllbGR9IEEgcmVmZXJlbmNlIHRvIGEgc3ViZmllbGQsIG9yIGFuIGVtcHR5IHN1YmZpZWxkLCBpZiBub3QgZm91bmQuCiAqIEBleGFtcGxlCiAvL2V4YW1wbGUgcmVjb3JkIGFuZCBmaWVsZAogdmFyIGV4YW1wbGVSZWNvcmQgPSBuZXcgUmVjb3JkOwogdmFyIGV4YW1wbGVGaWVsZCA9IG5ldyBGaWVsZCAoICIyNjAiLCAiMDAiICk7CiBleGFtcGxlRmllbGQuYXBwZW5kICggImEiLCAiS2Fzc2VsIiApOwogZXhhbXBsZUZpZWxkLmFwcGVuZCAoICJiIiwgIkJhcmVucmVpdGVyIiApOwogZXhhbXBsZUZpZWxkLmFwcGVuZCAoICJhIiwgIlN0dXR0Z2FydCIgKTsKIGV4YW1wbGVGaWVsZC5hcHBlbmQgKCAiYiIsICJNZXR6bGVyIiApOwogZXhhbXBsZUZpZWxkLmFwcGVuZCAoICJjIiwgIjE5OTQtIiApOwogZXhhbXBsZVJlY29yZC5hcHBlbmQgKCBleGFtcGxlRmllbGQgKTsKCiAvLyBHZXQgdGhlIHRoaXJkIHN1YmZpZWxkIGluIHRoZSBleGFtcGxlIGZpZWxkCiB2YXIgczEgPSBleGFtcGxlRmllbGQuc3ViZmllbGQoIDIgKTsgLy88LS0gdGhpcyByZWZlcnMgdG8gc3ViZmllbGQgImEiIHdpdGggdGhlIHZhbHVlICJTdHV0dGdhcnQiCgogLy8gQmUgYXdhcmUgaWYgeW91IHVzZSBvbmx5IHRoZSBuYW1lIG9mIHRoZSBzdWJmaWVsZCBhbmQgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBvZiB0aGF0IHN1YmZpZWxkCiAvLyB5b3Ugd2lsbCBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIGZpcnN0IHN1YmZpZWxkCiB2YXIgczIgPSBleGFtcGxlRmllbGQuc3ViZmllbGQoICJhIiApOyAvLzwtLSB0aGlzIHJlZmVycyB0byBzdWJmaWVsZCAiYSIgd2l0aCB0aGUgdmFsdWUgIkthc3NlbCIKCiAvLyBHZXQgdGhlIHNlY29uZCAiYiIgc3ViZmllbGQKIHZhciBzMyA9IGV4YW1wbGVGaWVsZC5zdWJmaWVsZCggImIiLCAxICk7ICAvLzwtLSB0aGlzIHJlZmVycyB0byBzdWJmaWVsZCAiYiIgd2l0aCB0aGUgdmFsdWUgIk1ldHpsZXIiCgogLy8gQmUgYXdhcmUgaWYgeW91IHJlZmVyIHRvIGEgc3ViZmllbGQgd2l0aCBuYW1lIGFuZCBpbmRleCB0aGF0IGlzIG5vdCB0aGVyZSB5b3UgZ2V0IGFuIGVtcHR5IHN1YmZpZWxkCiB2YXIgczQgPSBleGFtcGxlRmllbGQuc3ViZmllbGQoICJiIiwgMiApOyAvLyA8LS0gdGhpcyByZWZlcnMgdG8gYW4gZW1wdHkgc3ViZmllbGQsIGJlY2F1c2UgdGhlcmUgYXJlIG9ubHkgdHdvIHN1YmZpZWxkICJiIiBpbiB0aGlzIGZpZWxkCgogLy8gQ29tYmluaW5nIG1ldGhvZCBmaWVsZCBmcm9tIFJlY29yZCBhbmQgbWV0aG9kIHN1YmZpZWxkIGZyb20gRmllbGQKIHZhciBzNSA9IGV4YW1wbGVSZWNvcmQuZmllbGQoICIyNjAiICkuc3ViZmllbGQoICJjIiApOyAvLyA8LS0gdGhpcyByZWZlcnMgdG8gdGhlIGZpcnN0IHN1YmZpZWxkICJjIiBpbiB0aGUgZmlyc3QgZmllbGQgIjI2MCIgaW4gdGhlIGV4YW1wbGUgcmVjb3JkCgogKiBAbWV0aG9kCiAqIEBuYW1lIEZpZWxkLnN1YmZpZWxkCiAqIEBuYW1lIEZpZWxkI3N1YmZpZWxkICovCkZpZWxkLnN1YmZpZWxkID0gbmV3IFN0cmluZygpOwoKLyoqIEdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRmllbGQuCiAqCiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGZpZWxkLCBpbiBhCiAqIGZvcm1hdCB2ZXJ5IGNsb3NlIHRvIGEgc3RhbmRhcmQgTWFyYyBsaW5lIGZvcm1hdC4KICoKICogSWYgdGhlIGZpZWxkIGlzIGEgY29udHJvbCBmaWVsZCwgaXQgd2lsbCByZXR1cm4gYSBzdHJpbmcKICogY29uc3RydWN0ZWQgZnJvbSBpdHMgbmFtZSBhbmQgaXRzIHZhbHVlLiBJZiB0aGUgZmllbGQgaXMgYSBub3JtYWwKICogZmllbGQsIGl0IHdpbGwgYnVpbGQgYSBzdHJpbmcgZnJvbSBpdHMgbmFtZSwgdGhlIGluZGljYXRvciwgYW5kIHRoZQogKiBjb21iaW5lZCByZXN1bHRzIGZyb20gY2FsbGluZyB0b1N0cmluZyBvbiBhbGwgaXRzIHN1YmZpZWxkcy4KICoKICogTm90ZSB0aGF0IHRoZSBjaGFyYWN0ZXJzICJAIiBhbmQgIlwqIiBhcmUgY29udmVydGVkIHRvICJAQCIgYW5kCiAqICJAXCoiIHJlc3BlY3RpdmVseSwgaW4gdGhlIHJlc3VsdCBmcm9tIHRvU3RyaW5nLgogKgogKiBAcmV0dXJuIHtzdHJpbmd9IEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBmaWVsZC4KICogQG1ldGhvZAogKiBAbmFtZSBGaWVsZC50b1N0cmluZwogKiBAbmFtZSBGaWVsZCN0b1N0cmluZyAqLwpGaWVsZC50b1N0cmluZyA9IG5ldyBTdHJpbmcoKTsKCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIFNVQkZJRUxECi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLyoqIEEgc3ViZmllbGQgaW4gYSBNYXJjIHJlY29yZC4KICoKICogVGhlIFN1YmZpZWxkIGNsYXNzIGlzIGFuIGFic3RyYWN0aW9uIGZvciBhIFN1YmZpZWxkIGluIGEgTWFyYwogKiByZWNvcmQuIEl0IGNvbnRhaW5zIGEgbmFtZSwgdmFsdWUgYW5kIGEgdG9TdHJpbmcgbWV0aG9kLCBhbmQgYXMKICogc3VjaCBpcyBhIHByZXR0eSBzaW1wbGUgYWJzdHJhY3Rpb24uCiAqCiAqIFlvdSBjYW4gY29uc3RydWN0IGEgc3ViZmllbGQgaW5zdGFuY2Ugb25seSBieSBnaXZpbmcgaXQgYSBuYW1lIGFuZAogKiBhIHZhbHVlIGFzIHBhcmFtZXRlcnMgdG8gdGhlIGNvbnN0cnVjdG9yLgogKgogKiBAZXhhbXBsZQogLy8gQ29uc3RydWN0IGEgc3ViZmllbGQKIHZhciBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggImEiLCAiSSBhbSBhIHN1YmZpZWxkIiApOwogKiBAcGFyYW0ge1N0cmluZ30gc3ViZmllbGROYW1lXSBOYW1lIG9mIHRoZSBuZXcgc3ViZmllbGQuCiAqIEBwYXJhbSB7U3RyaW5nfSBzdWJmaWVsZFZhbHVlIFZhbHVlIG9mIHRoZSBuZXcgc3ViZmllbGQKICogQGNvbnN0cnVjdG9yCiAqIEBzZWUgTWFyY0NsYXNzZXMKICogQHNlZSBSZWNvcmQKICogQHNlZSBGaWVsZAogKiBAbmFtZSBTdWJmaWVsZCAqLwovLyBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudAoKLy8gUFJPUEVSVElFUwoKLyoqIFRoZSBuYW1lIG9mIHRoZSBzdWJmaWVsZC4KICoKICogVGhpcyBwcm9wZXJ0eSBob2xkcyB0aGUgbmFtZSBvZiB0aGUgc3ViZmllbGQuCiAqCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBuYW1lIFN1YmZpZWxkLm5hbWUKICogQG5hbWUgU3ViZmllbGQjbmFtZSAqLwpTdWJmaWVsZC5uYW1lID0gbmV3IFN0cmluZygpOwoKLyoqIFRoZSB2YWx1ZSBvZiB0aGUgc3ViZmllbGQuCiAqCiAqIFRoaXMgcHJvcGVydHkgaG9sZHMgdGhlIHZhbHVlIG9mIHRoZSBzdWJmaWVsZC4KICoKICogQHR5cGUge1N0cmluZ30KICogQG5hbWUgU3ViZmllbGQudmFsdWUKICogQG5hbWUgU3ViZmllbGQjdmFsdWUgKi8KU3ViZmllbGQudmFsdWUgPSBuZXcgU3RyaW5nKCk7CgovLyBNRVRIT0RTCgovKiogR2V0IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdWJmaWVsZC4KICoKICogVGhpcyBtZXRob2QgcmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3ViZmllbGQsIGluIGEKICogZm9ybWF0IHZlcnkgY2xvc2UgdG8gYSBzdGFuZGFyZCBNYXJjIGxpbmUgZm9ybWF0LiBUaGlzIG1lYW5zLCB0aGF0CiAqIHRoZSBjaGFyYWN0ZXJzICJAIiBhbmQgIlwqIiBhcmUgY29udmVydGVkIHRvICJAQCIgYW5kICJAXCoiIHJlc3BlY3RpdmVseS4KICoKICogQHJldHVybiB7U3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3ViZmllbGQuCiAqIEBtZXRob2QKICogQG5hbWUgU3ViZmllbGQudG9TdHJpbmcKICogQG5hbWUgU3ViZmllbGQjdG9TdHJpbmcgKi8KU3ViZmllbGQudG9TdHJpbmcgPSBuZXcgU3RyaW5nKCk7CgovKioKICogUmV0dXJucyBhIGNsb25lIChjb3B5KSBvZiB0aGlzIFN1YmZpZWxkCiAqCiAqIEByZXR1cm4ge1N1YmZpZWxkfSBUaGUgbmV3IFN1YmZpZWxkIHRoYXQgaXMgYW4gZW50aXJlIGNsb25lIG9mIHRoaXMgc3ViZmllbGQuCiAqCiAqIEBtZXRob2QKICogQG5hbWUgU3ViZmllbGQuY2xvbmUKICogQG5hbWUgU3ViZmllbGQjY2xvbmUgKi8KU3ViZmllbGQuY2xvbmUgPSBuZXcgU3RyaW5nKCk7Cg==", "moduleName": "MarcClasses"}, {"javascript": "LyoqIEBmaWxlIFN5c3RlbSBtb2R1bGUuIFByb3ZpZGVzIFN5c3RlbSBjbGFzcywgdGhhdCBjYW4gYmUgcG9wdWxhdGVkIGJ5IG90aGVyIG1vZHVsZXMuICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdTeXN0ZW0nIF07CgovKioKICogUHJvdmlkZXMgYSBuYW1lc3BhY2UgdG8gYWRkIGxvd2xldmVsL3N5c3RlbSBsaWtlIGZ1bmN0aW9uYWxpdHkgdG8uCiAqIAogKiBNZXRob2RzIGFuZCBtb2R1bGVzIHJlbGF0ZWQgdG8gbG93LWxldmVsIHN0dWZmIGlzIGFkZGVkIGludG8gdGhpcwogKiBuYW1lc3BhY2UuIAogKgogKiBUbyBhY3R1YWxseSB1c2UgbW9zdCBvZiB0aGUgZnVuY3Rpb25zIGluIHRoaXMgbmFtZXNwYWNlLCB5b3UgbmVlZAogKiB0byBsb2FkIGFkZGl0aW9uYWwgbW9kdWxlcy4gRS5nLiB0byBiZSBhYmxlIHRvIHVzZSB0aGUgCiAqIHtAbGluayBTeXN0ZW0ucmVhZEZpbGV9IGZ1bmN0aW9uLCB5b3UgbXVzdCB1c2UgdGhlIG1vZHVsZSBgUmVhZEZpbGVgLiB0bwogKiB1c2UgdGhlIHtAbGluayBTeXN0ZW0ucHJpbnR9IGZ1bmN0aW9uIHlvdSBtdXN0IHVzZSB0aGUgbW9kdWxlCiAqIGBQcmludGAuIEZvciBhbGwgZnVuY3Rpb25zLCBpdCBpcyBpbmRpY2F0ZWQgd2hpY2ggbW9kdWxlIHRoZXkgYXJlCiAqIHBhcnQgb2YsIHRoYXQgaXMsIHdoaWNoIG1vZHVsZSB5b3Ugc2hvdWxkIHVzZSB0byBnZXQgYWNjZXNzIHRvIHRoZQogKiBmdW5jdGlvbi4KICogCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIFN5c3RlbSAqLwp2YXIgU3lzdGVtID0gZnVuY3Rpb24oICkgewogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgICAqIEFycmF5IGNvbnRhaW5pbmcgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgc3lzdGVtLCBpZiBpbnZva2VkIGludGVyYWN0aXZlbHkuCiAgICAgKiAKICAgICAqIENvbnRhaW5zIGFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBzeXN0ZW0sIGlmIHVzZWQgaW50ZXJhY3RpdmVseS4gSXMKICAgICAqIGFuIGVtcHR5IGFycmF5IGlmIG5vdC4gCiAgICAgKgogICAgICogQGV4YW1wbGUKLy8gR2V0IHRoZSBmaXJzdCBhcmd1bWVudCB0byBhIHNjcmlwdCB3aGVuIGNhbGxlZCBpbiBhIHNoZWxsCnVzZSggIlN5c3RlbSIgKTsKaWYgKCBTeXN0ZW0uYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7CiAgdmFyIGZpcnN0QXJnID0gU3lzdGVtLmFyZ3VtZW50c1swXTsKfQogICAgICoKICAgICAqIEBuYW1lIFN5c3RlbS5hcmd1bWVudHMKICAgICAqIEB0eXBlIHtTdHJpbmdbXX0KICAgICAqIEBwcm9wZXJ0eSAqLwogICAgdGhhdC5hcmd1bWVudHMgPSBbIF07CgogICAgLyoqIAogICAgICogU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGNhbGxlZCBzY3JpcHQsIGlmIGludm9rZWQgaW50ZXJhY3RpdmVseS4KICAgICAqIAogICAgICogQGV4YW1wbGUKLy8gUHJpbnQgdGhlIG5hbWUgb2YgdGhlIGNhbGxpbmcgc2NyaXB0CnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiUHJpbnQiICk7CnByaW50KCBTeXN0ZW0uc2NyaXB0bmFtZSArICJcbiIgKTsKICAgICAqIAogICAgICogQG5hbWUgU3lzdGVtLnNjcmlwdG5hbWUKICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgKiBAcHJvcGVydHkgKi8KICAgIHRoYXQuc2NyaXB0bmFtZSA9ICIiOwoKICAgIC8qKiBQcm9wZXJ0eSB0byBkZWZpbmUgdGhlIFJoaW5vIHBsYXRmb3JtLgogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtX3JoaW5vCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3JoaW5vID0gIlJoaW5vIjsKCiAgICAvKiogUHJvcGVydHkgdG8gZGVmaW5lIHRoZSBTcGlkZXJNb25rZXkgcGxhdGZvcm0uCiAgICAgKiBAbmFtZSBTeXN0ZW0ucGxhdGZvcm1fc3BpZGVybW9ua2V5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3NwaWRlcm1vbmtleSA9ICJTcGlkZXJNb25rZXkiOwoKICAgIC8qKgogICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSBwbGF0Zm9ybSB3ZSBhcmUgY3VycmVudGx5IHJ1bm5pbmcgdW5kZXIuCiAgICAgKgogICAgICogVGhpcyByZXR1cm5zIHRoZSBuYW1lIG9mIG91ciBwbGF0Zm9ybSwgb25lIG9mICJSaGlubyIgb3IgIlNwaWRlck1vbmtleSIuCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBtZWFudCBmb3IgdGhlIHZlcnkgcmFyZSBzaXR1YXRpb25zIHdoZXJlIHdlIGhhdmUgdG8gZG8KICAgICAqIHNvbWV0aGluZyBzbGlnaHRseSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHBsYXRmb3JtLCBpbiBvcmRlciB0byAKICAgICAqIHdvcmsgYXJvdW5kIGRpZmZlcmVuY2VzLgogICAgICoKICAgICAqIFVzZSB0aGUgcHJvcGVydGllcyBwbGF0Zm9ybV9yaGlubyBhbmQgcGxhdGZvcm1fc3BpZGVybW9ua2V5IHRvCiAgICAgKiBjaGVjayBhZ2FpbnN0IHRoaXMgcHJvcGVydHkuCiAgICAgKgogICAgICogKipOb3RlOioqIE1vcmUgcGxhdGZvcm1zIG1heSBiZSBhZGRlZCBpbiB0aGUgZnV0dXJlLiBBbHdheXMKICAgICAqIGNoZWNrIGV4cGxpY2l0bHkgZm9yIGEgc3BlY2lmaWMgcGxhdGZvcm0uCgogICAgICogKipOb3RlOioqIE9OTFkgVVNFIFRISVMgTUVUSE9EIEFTIEEgTEFTVCBSRVNPUlQuIFRoZSBwbGF0Zm9ybXMgYmVoYXZlIGFsbW9zdCAKICAgICAqIGV4YWN0bHkgdGhlIHNhbWUsIGFuZCB0aGUgY29kZSBzaG91bGQgbm90IGJlIHNwcmlua2xlZCB3aXRoICJpZiBwbGF0Zm9ybSB0aGVuIi4KICAgICAqIEl0IGlzIHN1c3BlY3RlZCB0aGlzIGlzIG9ubHkgbmVlZGVkIGZvciBFNFggY29kZSB0aGF0IGlzIGJyb2tlbiBhbnl3YXkuCiAgICAgKiBJZiB5b3UgdXNlIHRoaXMgZnVuY3Rpb24sIGF0IGxlYXN0IHdyYXAgaXQgaW4gYSBsaWJyYXJ5L21vZHVsZSBzdWNoIHRoYXQKICAgICAqIHlvdSBjYW4gY2hhbmdlIHRoZSBpbXBsZW1lbnRhdGlvbiBsYXRlciwgd2l0aG91dCBicmVha2luZyB0aGUgaW50ZXJmYWNlLgogICAgICogIAogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtICA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggKCB0eXBlb2YgUGFja2FnZXMgPT09ICJvYmplY3QiICkgJiYgKCB0eXBlb2YgUGFja2FnZXMuamF2YSA9PT0gIm9iamVjdCIgKSApIHsKICAgICAgICAgICAgcmV0dXJuICJSaGlubyI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJTcGlkZXJNb25rZXkiOwogICAgICAgIH0KICAgIH0oKTsgLy8gTm90ZSwgbm90IGEgZnVuY3Rpb24sIGEgdmFsdWUuCgoKICAgIHJldHVybiB0aGF0Owp9KCApOwo=", "moduleName": "System"}, {"javascript": "", "moduleName": "MarcClassesCore"}, {"javascript": "", "moduleName": "MarcMatchers"}, {"javascript": "CkVYUE9SVEVEX1NZTUJPTFMgPSBbICdOb2RlVHlwZXMnIF07Cgp2YXIgTm9kZVR5cGVzID0gIHsKICAgIEVMRU1FTlRfTk9ERSA6IDEsCiAgICBBVFRSSUJVVEVfTk9ERSA6IDIsCiAgICBURVhUX05PREUgOiAzLAogICAgQ0RBVEFfU0VDVElPTl9OT0RFIDogNCwKICAgIEVOVElUWV9SRUZFUkVOQ0VfTk9ERSA6IDUsCiAgICBFTlRJVFlfTk9ERSA6IDYsCiAgICBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgOiA3LAogICAgQ09NTUVOVF9OT0RFIDogOCwKICAgIERPQ1VNRU5UX05PREUgOiA5LAogICAgRE9DVU1FTlRfVFlQRV9OT0RFIDogMTAsCiAgICBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIDogMTEsCiAgICBOT1RBVElPTl9OT0RFIDogMTIKfTs=", "moduleName": "NodeTypes"}, {"javascript": "LyoqIEBmaWxlIE1hcmNYY2hhbmdlVXRpbCBtb2R1bGUgICovDQoNCg0KRVhQT1JURURfU1lNQk9MUyA9IFsgJ01hcmNYY2hhbmdlVXRpbCcgXTsNCg0KdXNlKCAiTG9nIiApOw0KdXNlKCAiWG1sVXRpbCIgKTsNCg0KDQovKioNCiAqIE1vZHVsZSB0aGF0IGluY2x1ZGVzIGRpZmZlcmVudCBmdW5jdGlvbnMgZm9yIG1vZGlmeWluZyBtYXJjWGNoYW5nZSByZWNvcmRzDQogKg0KICogQHR5cGUge25hbWVzcGFjZX0NCiAqIEBuYW1lc3BhY2UNCiAqLw0KDQp2YXIgTWFyY1hjaGFuZ2VVdGlsID0gZnVuY3Rpb24oKSB7DQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCByZW1vdmVzIGFsbCBsZXR0ZXIgZmllbGRzIGxpa2UgZDA5IGFuZCBzMTAgZnJvbSBhIG1hcnhDaGFuZ2UgcmVjb3JkDQogICAgICoNCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259DQogICAgICogQHN5bnRheCBNYXJjWGNoYW5nZVV0aWwucmVtb3ZlTGV0dGVyRmllbGRzKCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7RG9jdW1lbnR9IHJlY29yZCB0aGUgbWFyY1hjaGFuZ2UgcmVjb3JkDQogICAgICogQGZ1bmN0aW9uDQogICAgICogQHJldHVybiB7RG9jdW1lbnR9IHRoZSBtYXJjWGNoYW5nZSByZWNvcmQgd2l0aG91dCBsZXR0ZXIgZmllbGRzDQogICAgICogQG5hbWUgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUxldHRlckZpZWxkcw0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHJlbW92ZUxldHRlckZpZWxkcyggcmVjb3JkICkgew0KDQogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1hcmNYY2hhbmdlVXRpbC5yZW1vdmVMZXR0ZXJGaWVsZHMgZnVuY3Rpb24iICk7DQoNCiAgICAgICAgdmFyIGVsZW1lbnRzID0gWFBhdGguc2VsZWN0KCAiL21hcmN4OmNvbGxlY3Rpb24vbWFyY3g6cmVjb3JkL21hcmN4OmRhdGFmaWVsZCIsIHJlY29yZCApOw0KDQogICAgICAgIGZvciAoIHZhciBpbmRleCA9IDA7IGluZGV4IDwgZWxlbWVudHMubGVuZ3RoOyBpbmRleCsrICkgew0KDQogICAgICAgICAgICB2YXIgY2hpbGQgPSBlbGVtZW50c1sgaW5kZXggXTsNCg0KICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IFhQYXRoLnNlbGVjdE5vZGUoICJAdGFnIiwgY2hpbGQgKTsNCiAgICAgICAgICAgIGlmICggYXR0cmlidXRlLnZhbHVlLm1hdGNoKCAvW2Etel0vaSApICkgew0KICAgICAgICAgICAgICAgIFhtbFV0aWwuZGVsZXRlTm9kZSggY2hpbGQgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUxldHRlckZpZWxkcyBmdW5jdGlvbiIgKTsNCiAgICAgICAgcmV0dXJuIHJlY29yZDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiAwMDFiIGluIGFsbCBtYXJjeDpyZWNvcmRzIGluIGEgbWFyY3g6Y29sbGVjdGlvbg0KICAgICAqDQogICAgICogQHR5cGUge2Z1bmN0aW9ufQ0KICAgICAqIEBzeW50YXggTWFyY1hjaGFuZ2VVdGlsLmNoYW5nZTAwMWJWYWx1ZSggcmVjb3JkQ29sbGVjdGlvbiApDQogICAgICogQHBhcmFtIHtEb2N1bWVudH0gcmVjb3JkQ29sbGVjdGlvbiB0aGUgbWFyY1hjaGFuZ2UgcmVjb3JkIGNvbGxlY3Rpb24NCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3MDAxYlZhbHVlIHRoZSBuZXcgMDAxYiB2YWx1ZQ0KICAgICAqIEBmdW5jdGlvbg0KICAgICAqIEByZXR1cm4ge0RvY3VtZW50fSB0aGUgbWFyY1hjaGFuZ2UgcmVjb3JkIGNvbGxlY3Rpb24gd2l0aCBjb3JyZWN0ZWQgdmFsdWUgaW4gYWxsIDAwMWIgZmllbGRzDQogICAgICogQG5hbWUgTWFyY1hjaGFuZ2VVdGlsLmNoYW5nZTAwMWJWYWx1ZQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGNoYW5nZTAwMWJWYWx1ZSggcmVjb3JkQ29sbGVjdGlvbiwgbmV3MDAxYlZhbHVlICkgew0KDQogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1hcmNYY2hhbmdlVXRpbC5jaGFuZ2UwMDFiVmFsdWUgZnVuY3Rpb24iICk7DQoNCiAgICAgICAgdmFyIGZpZWxkczAwMWIgPSBYUGF0aC5zZWxlY3QoICIvbWFyY3g6Y29sbGVjdGlvbi9tYXJjeDpyZWNvcmQvbWFyY3g6ZGF0YWZpZWxkW0B0YWc9JzAwMSddL21hcmN4OnN1YmZpZWxkW0Bjb2RlPSdiJ10iLCByZWNvcmRDb2xsZWN0aW9uICk7DQoNCiAgICAgICAgZm9yICggdmFyIGluZGV4ID0gMDsgaW5kZXggPCBmaWVsZHMwMDFiLmxlbmd0aDsgaW5kZXgrKyApIHsNCiAgICAgICAgICAgIHZhciBjaGlsZCA9IGZpZWxkczAwMWJbIGluZGV4IF07DQogICAgICAgICAgICBYbWxVdGlsLmFwcGVuZFRleHQoIGNoaWxkLCBTdHJpbmcoIG5ldzAwMWJWYWx1ZSApLCB0cnVlICk7DQogICAgICAgIH0NCg0KICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IE1hcmNYY2hhbmdlVXRpbC5jaGFuZ2UwMDFiVmFsdWUgZnVuY3Rpb24iICk7DQogICAgICAgIHJldHVybiByZWNvcmRDb2xsZWN0aW9uOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE1ldGhvZCB0aGF0IHJlbW92ZXMgdW53YW50ZWQgYXN0ZXJpc2tzIGZyb20gZmllbGQgMDE1LCAwMTYsIDA4MiwgMDgzIGFuZCAyNDUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IE1hcmNYY2hhbmdlVXRpbC5yZW1vdmVBc3Rlcmlza3MoIHhtbFJlY29yZCApDQogICAgICogQHBhcmFtIHtEb2N1bWVudH0geG1sUmVjb3JkIFRoZSBvcmlnaW5hbCBkYXRhIHRoYXQgbmVlZHMgbm9ybWFsaXphdGlvbg0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSBUaGUgbmFtZXNwYWNlIG9mIHRoZSBtYXJjIHhtbCByZWNvcmQgLSBkZWZhdWx0IGlzIG14IG1hcmMyMSBzbGltDQogICAgICogQGZ1bmN0aW9uDQogICAgICogQG5hbWUgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUFzdGVyaXNrcw0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHJlbW92ZUFzdGVyaXNrcyggeG1sUmVjb3JkLCBuYW1lc3BhY2UgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUFzdGVyaXNrcyIgKTsNCiAgICAgICAgaWYgKCB1bmRlZmluZWQgPT09IG5hbWVzcGFjZSApIHsNCiAgICAgICAgICAgIG5hbWVzcGFjZSA9ICJteCI7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgZmllbGROYW1lQXJyYXkgPSBbICIwMTUiLCAiMDE2IiwgIjA4MiIsICIwODMiLCAiMjQ1IiBdOw0KICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVBcnJheS5sZW5ndGg7IGkrKyApIHsNCiAgICAgICAgICAgIHZhciBwYXRoID0gIi8iICsgbmFtZXNwYWNlICsgIjpyZWNvcmQvIiArIG5hbWVzcGFjZSArICI6ZGF0YWZpZWxkWyBAdGFnPSIgKyBmaWVsZE5hbWVBcnJheVsgaSBdICsgIiBdLyIgKyBuYW1lc3BhY2UgKyAiOnN1YmZpZWxkIjsNCiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IFhQYXRoLnNlbGVjdCggcGF0aCwgeG1sUmVjb3JkICk7DQogICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPCBlbGVtZW50cy5sZW5ndGg7IGorKyApIHsNCiAgICAgICAgICAgICAgICB2YXIgaW5wdXRUZXh0ID0gWG1sVXRpbC5nZXRUZXh0KCBlbGVtZW50c1sgaiBdICk7DQogICAgICAgICAgICAgICAgZWxlbWVudHNbIGogXS5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IGlucHV0VGV4dC5yZXBsYWNlKCAvXCpcKlwqL2csICIiICkucmVwbGFjZSggLyAgL2csICIgIik7DQogICAgICAgICAgICAgICAgdmFyIG5ld1RleHQgPSBYbWxVdGlsLmdldFRleHQoIGVsZW1lbnRzWyBqIF0gKTsNCiAgICAgICAgICAgICAgICBMb2cuZGVidWcoICJDaGFuZ2VkIHN1YmZpZWxkIHZhbHVlIGZyb20gJyIsIGlucHV0VGV4dCwgIicgdG8gJyIsIG5ld1RleHQsICInLiIgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUFzdGVyaXNrcyIgKTsNCg0KICAgIH0NCg0KICAgIHJldHVybiB7DQogICAgICAgIHJlbW92ZUxldHRlckZpZWxkczogcmVtb3ZlTGV0dGVyRmllbGRzLA0KICAgICAgICBjaGFuZ2UwMDFiVmFsdWU6IGNoYW5nZTAwMWJWYWx1ZSwNCiAgICAgICAgcmVtb3ZlQXN0ZXJpc2tzOiByZW1vdmVBc3Rlcmlza3MNCiAgICB9Ow0KDQoNCn0oKTsNCg0KLy9Vbml0dGVzdHMgYXJlIGluIE1hcmNYY2hhbmdlVXRpbC50ZXN0LmpzDQo=", "moduleName": "MarcXchangeUtil"}, {"javascript": "", "moduleName": "MarcXchange"}, {"javascript": "", "moduleName": "Dm2ToDst"}, {"javascript": "", "moduleName": "DateUtil"}, {"javascript": "RVhQT1JURURfU1lNQk9MUyA9IFsgJ19fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMScsICdfX0RhdGVVdGlsQ29yZV9mb3JtYXRJU084NjAxJyBdOwoKdXNlKCAiU3RyaW5nVXRpbCIgKTsKdXNlKCAiTG9nIiApOwoKLyogQGJyaWVmIENyZWF0ZSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QgZnJvbSBhbiBJU084NjAxIHN0cmluZwogKiBAcGFyYW0gcyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRldGltZQogKiBAcmV0dXJucyBBIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QKICoKICogVGhlIHN0cmluZyBmb3JtYXQgbXVzdCBiZSBZWVlZLU1NLUREVGhoOm1tOnNzKFopIG9yIGVtcHR5LgogKiBOb3Qgb24gYWJvdmUgZm9ybWF0LCB3aWxsIHRocm93LgogKgogKiBSZWdhcmRsZXNzIG9mIHRoZSBuYW1lLCBvbmx5IGEgbGltaXRlZCBzdWJzZXQgb2YgSVMwODYwMSBpcwogKiBhY3R1YWxseSBwYXJzZWQhICovCnZhciBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEgPSBmdW5jdGlvbiggaXNvODYwMSApIHsKICAgIExvZy5kZWJ1ZyggIkVudGVyaW5nIF9fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMSAiICsgaXNvODYwMSApOwogICAgdmFyIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVVRDLmV4ZWMoIGlzbzg2MDEgKTsKCiAgICBpZiAoIG1hdGNoZWQgKSB7CiAgICAgICAgdmFyIHJlcyA9IG5ldyBEYXRlKCAxOTcwLCAxLCAxLCAxMiwgMCwgMCwgMCApOwogICAgICAgIGlmICggbWF0Y2hlZC5sZW5ndGggPiA3ICYmIG1hdGNoZWRbIDcgXSA9PSAiWiIgKSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggWlVMVSB0aW1lem9uZSBpbmZvcm1hdGlvbiIgKTsKICAgICAgICAgICAgcmVzLnNldFVUQ0Z1bGxZZWFyKCBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgMiBdLCAxMCApIC0gMSwgcGFyc2VJbnQoIG1hdGNoZWRbIDMgXSwgMTAgKSApOwogICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA1IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA2IF0sIDEwICksIDAgKTsKICAgICAgICAgICAgLy8gQ2hlY2sgbm8gImlsbGVnYWwiIHZhbHVlcwogICAgICAgICAgICBpZiAoIHJlcy5nZXRVVENGdWxsWWVhciggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTW9udGgoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENEYXRlKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENIb3VycyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTWludXRlcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDU2Vjb25kcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApICkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoSW52YWxpZCBkYXRlIGFmdGVyIFpVTFUgLSByZWdleHAgbWF0Y2g/KS4iLAogICAgICAgICAgICAgICAgICAgICAgICBpc284NjAxICkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggbm8gdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHJlcy5zZXRGdWxsWWVhciggcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSwgcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEsIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgcmVzLnNldEhvdXJzKCBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApLCAwICk7CiAgICAgICAgICAgIC8vIENoZWNrIG5vICJpbGxlZ2FsIiB2YWx1ZXMKICAgICAgICAgICAgaWYgKCByZXMuZ2V0RnVsbFllYXIoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1vbnRoKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAyIF0sIDEwICkgLSAxIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0RGF0ZSggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0SG91cnMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDQgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1pbnV0ZXMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDUgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldFNlY29uZHMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDYgXSwgMTAgKSApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggU3RyaW5nVXRpbC5zcHJpbnRmKCAiVW5hYmxlIHRvIHVuZGVyc3RhbmQgZGF0ZSBzcGVjaWZpZWQgYXM6ICclcycgKEludmFsaWQgZGF0ZSBhZnRlciBubyBUWiAtIHJlZ2V4cCBtYXRjaD8pLiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGlzbzg2MDEgKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIExvZy5kZWJ1ZyggIlJldHVybmluZzogIiArIHJlcy50b1VUQ1N0cmluZyggKSApOwogICAgICAgIHJldHVybiByZXM7CiAgICB9IGVsc2UgewogICAgICAgIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFouZXhlYyggaXNvODYwMSApOwogICAgICAgIGlmICggbWF0Y2hlZCApIHsKICAgICAgICAgICAgTG9nLmRlYnVnKCAiTWF0Y2hlZCBhcyBzdHJpbmcgd2l0aCBub3JtYWwgdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHZhciByZXMgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEoIG1hdGNoZWRbIDEgXSArICJaIiApOwogICAgICAgICAgICBMb2cuZGVidWcoIFN0cmluZ1V0aWwuc3ByaW50ZiggIlBhcnRzOiAnJXMnLCAnJXMnLCAnJXMnIiwKICAgICAgICAgICAgICAgICAgICBtYXRjaGVkWyAyIF0sIG1hdGNoZWRbIDMgXSwgbWF0Y2hlZFsgNCBdICkgKTsKICAgICAgICAgICAgLy8gQWRqdXN0OiBJZiArLCBzdWJzdHJhY3QgdG8gZ2V0ICJyZWFsIiBVVEMuIElmIC0KICAgICAgICAgICAgaWYgKCBtYXRjaGVkWyAyIF0gPT0gIi0iICkgewogICAgICAgICAgICAgICAgcmVzLnNldFVUQ0hvdXJzKCByZXMuZ2V0VVRDSG91cnMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApICk7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDTWludXRlcyggcmVzLmdldFVUQ01pbnV0ZXMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHJlcy5nZXRVVENIb3VycyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgICAgIHJlcy5zZXRVVENNaW51dGVzKCByZXMuZ2V0VVRDTWludXRlcyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBMb2cuZGVidWcoICJSZXR1cm5pbmc6ICIgKyByZXMudG9VVENTdHJpbmcoICkgKTsKICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgfQogICAgTG9nLmRlYnVnKCAiTm8gbWF0Y2ggZm9yIElTTzg2MDEgdmFyaWFudHMgLSB0aHJvd2luZyIgKTsKICAgIHRocm93IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoTm8gcmVnZXhwIG1hdGNoKS4iLAogICAgICAgICAgICBpc284NjAxICkgKTsKfTsKX19EYXRlVXRpbENvcmVfcGFyc2VJU084NjAxLnJlZ1VUQyA9IC9eKFxkezR9KS0oXGR7Mn0pLShcZHsyfSlUKFxkezJ9KTooXGR7Mn0pOihcZHsyfSkoWnswLDF9KSQvOwpfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFogPSAvXihcZHs0fS1cZHsyfS1cZHsyfVRcZHsyfTpcZHsyfTpcZHsyfSlccyooWystXSlccyooXGR7MSwyfSk6KFxkezEsMn0pJC87CgovKiogXGJyaWVmIFJldHVybiBhbiBJU084NjAxIFogdGltZSBzdHJpbmcgcmVwIG9mIHRoZSBKYXZhU2NyaXB0IGRhdGUgb2JqZWN0IHBhc3NlZCB0byB0aGUgZnVuY3Rpb24uCiAqCiAqIFRoZSBmb3JtYXQgaXMgWVlZWS1NTS1ERFRoaDptbTpzc1oKICogQHBhcmFtIGR0IFRoZSBKYXZhU2NyaXB0IGluc3RhbmNlIHRvIGNvbnZlcnQuCiAqIEByZXR1cm4gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGV0aW1lIGluIElTTzg2MDEgbGlrZSBub3RhdGlvbiBpbiBVVEMKICoKICogTm90ZSwgaWYgdGhlIGRhdGUgaXMgaW52YWxpZCwgeW91IGdldCBhIGxvdCBvZiBOYU4ncy4uLiBzb3JyeSBhYm91dCB0aGF0LCBzbyBzdWUgbWUhIDotKSAqLwp2YXIgX19EYXRlVXRpbENvcmVfZm9ybWF0SVNPODYwMSA9IGZ1bmN0aW9uKCBkYXRlICkgewogICAgLy8gV2UgZG8gbm90IGhhdmUgcGFydGlhbCBzZWNvbmRzLi4uIHNvLCBubyB0b0lTT1N0cmluZygpLi4uCiAgICByZXR1cm4gU3RyaW5nVXRpbC5zcHJpbnRmKCAiJTA0ZC0lMDJkLSUwMmRUJTAyZDolMDJkOiUwMmRaIiwKICAgICAgICBkYXRlLmdldFVUQ0Z1bGxZZWFyKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTW9udGgoICkgKyAxLAogICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSggKSwKICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTWludXRlcyggKSwKICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoICkgKTsKfTsK", "moduleName": "DateUtilCore"}, {"javascript": "", "moduleName": "StringUtil"}, {"javascript": "", "moduleName": "ValueCheck"}, {"javascript": "LyoqIEBmaWxlIFJlY29yZFByb2Nlc3NpbmcgbW9kdWxlICAqLw0KDQoNCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdSZWNvcmRQcm9jZXNzaW5nJyBdOw0KDQp1c2UoICJMb2ciICk7DQoNCg0KLyoqDQogKiBNb2R1bGUgdGhhdCBoYW5kbGVzIHByb2Nlc3NpbmcsIHNraXBwaW5nIGFuZCBmYWlsaW5nIG9mIHJlY29yZHMNCiAqDQogKiBAdHlwZSB7bmFtZXNwYWNlfQ0KICogQG5hbWVzcGFjZQ0KICovDQoNCnZhciBSZWNvcmRQcm9jZXNzaW5nID0gZnVuY3Rpb24oICkgew0KDQogICAgLyoqDQogICAgICogRnVuY3Rpb24gdGhhdCB0ZXJtaW5hdGVzIHRoZSBwcm9jZXNzaW5nIG9mIHRoZSBjdXJyZW50IHJlY29yZCBhbmQgdGhyb3dzIGFuDQogICAgICogZXhjZXB0aW9uIHdpdGggaW5mb3JtYXRpb24gdGhhdCB0aGUgcmVjb3JkIHNob3VsZCBiZSBmYWlsZWQNCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IFJlY29yZFByb2Nlc3NpbmcudGVybWluYXRlUHJvY2Vzc2luZ0FuZEZhaWxSZWNvcmQoIGVycm9yTWVzc2FnZSApDQogICAgICogQHBhcmFtIHtTdHJpbmd9IGVycm9yTWVzc2FnZSB0aGUgZXJyb3IgbWVzc2FnZSB0byB0aHJvdyBpbiBleGNlcHRpb24NCiAgICAgKiBAZnVuY3Rpb24NCiAgICAgKiBAbmFtZSBSZWNvcmRQcm9jZXNzaW5nLnRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRGYWlsUmVjb3JkDQogICAgICovDQogICAgZnVuY3Rpb24gdGVybWluYXRlUHJvY2Vzc2luZ0FuZEZhaWxSZWNvcmQgKCBlcnJvck1lc3NhZ2UgKSB7DQoNCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogUmVjb3JkUHJvY2Vzc2luZy50ZXJtaW5hdGVQcm9jZXNzaW5nQW5kRmFpbFJlY29yZCBtZXRob2QiICk7DQoNCiAgICAgICAgLy8gU3BlY2lhbCBoYWNrcyBoZXJlLi4gRG9uJ3QgZG8gdGhpcyBhdCBob21lLiBVc2VkIGluIGRhdGFpby1zeXN0ZW0gLSBjaGVjayB3aXRoIGphNw0KICAgICAgICBpZiAoIHR5cGVvZihQYWNrYWdlcykgPT09ICdvYmplY3QnICkgew0KICAgICAgICAgICAgUGFja2FnZXMuZGsuZGJjLmphdmFzY3JpcHQucmVjb3JkcHJvY2Vzc2luZy5GYWlsUmVjb3JkLmRvVGhyb3coIGVycm9yTWVzc2FnZSApOw0KICAgICAgICB9DQogICAgICAgIC8vIEVuZCBvZiBEb24ndCBkbyB0aGlzIGF0IGhvbWUuDQoNCiAgICAgICAgdGhyb3cgew0KICAgICAgICAgICAgbmFtZTogIkZBSUxFRCIsDQogICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZ1bmN0aW9uIHRoYXQgdGVybWluYXRlcyB0aGUgcHJvY2Vzc2luZyBvZiB0aGUgY3VycmVudCByZWNvcmQgYW5kIHRocm93cyBhbg0KICAgICAqIGV4Y2VwdGlvbiB3aXRoIGluZm9ybWF0aW9uIHRoYXQgdGhlIHJlY29yZCBzaG91bGQgYmUgc2tpcHBlZCAoaWdub3JlZCkNCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IFJlY29yZFByb2Nlc3NpbmcudGVybWluYXRlUHJvY2Vzc2luZ0FuZElnbm9yZSggZXJyb3JNZXNzYWdlICkNCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXJyb3JNZXNzYWdlIHRoZSBlcnJvciBtZXNzYWdlIHRvIHRocm93IGluIGV4Y2VwdGlvbg0KICAgICAqIEBmdW5jdGlvbg0KICAgICAqIEBuYW1lIFJlY29yZFByb2Nlc3NpbmcudGVybWluYXRlUHJvY2Vzc2luZ0FuZElnbm9yZQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRJZ25vcmUgKCBlcnJvck1lc3NhZ2UgKSB7DQoNCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogUmVjb3JkUHJvY2Vzc2luZy50ZXJtaW5hdGVQcm9jZXNzaW5nQW5kSWdub3JlIG1ldGhvZCIgKTsNCg0KICAgICAgICAvLyBTcGVjaWFsIGhhY2tzIGhlcmUuLiBEb24ndCBkbyB0aGlzIGF0IGhvbWUuIFVzZWQgaW4gZGF0YWlvLXN5c3RlbSAtICBjaGVjayB3aXRoIGphNw0KICAgICAgICBpZiAoIHR5cGVvZihQYWNrYWdlcykgPT09ICdvYmplY3QnICkgew0KICAgICAgICAgICAgUGFja2FnZXMuZGsuZGJjLmphdmFzY3JpcHQucmVjb3JkcHJvY2Vzc2luZy5JZ25vcmVSZWNvcmQuZG9UaHJvdyggZXJyb3JNZXNzYWdlICk7DQogICAgICAgIH0NCiAgICAgICAgLy8gRW5kIG9mIERvbid0IGRvIHRoaXMgYXQgaG9tZS4NCiAgICAgICAgdGhyb3cgew0KICAgICAgICAgICAgbmFtZTogIklHTk9SRSIsDQogICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UNCiAgICAgICAgfQ0KDQoNCiAgICB9DQoNCiAgICByZXR1cm4gew0KICAgICAgICB0ZXJtaW5hdGVQcm9jZXNzaW5nQW5kRmFpbFJlY29yZDogdGVybWluYXRlUHJvY2Vzc2luZ0FuZEZhaWxSZWNvcmQsDQogICAgICAgIHRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRJZ25vcmU6IHRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRJZ25vcmUNCiAgICB9Ow0KDQp9KCApOw0K", "moduleName": "RecordProcessing"}, {"javascript": "", "moduleName": "DanMarc2Util"}], "svnRevision": 126314, "requireCache": null, "invocationMethod": "convertRawRecordToDst", "invocationJavascriptName": "dm2_to_dst.js", "svnProjectForInvocationJavascript": "conversion-flows/bogstat-dm2-to-dst/js"}, "content": {"name": "RR2Dst", "description": "Flow for poster fra RR til Danmarks Statistik (dst)- poster udleveres i csv-format (string)", "javascripts": [{"javascript": "dXNlKCAiTG9nIiApOw0KdXNlKCAiQWRtaW5EYXRhIiApOw0KdXNlKCAiWG1sVXRpbCIgKTsNCnVzZSggIk1hcmNYY2hhbmdlVXRpbCIgKTsNCnVzZSggIk1hcmNYY2hhbmdlIiApOw0KdXNlKCAiRG0yVG9Ec3QiICk7DQp1c2UoICJEYW5NYXJjMlV0aWwiICk7DQoNCi8qKg0KICogRW50cnkgcG9pbnQgZm9yIGNvbnZlcnRpbmcgYSBtYXJjIHJlY29yZCBjb2xsZWN0aW9uIGluIG1hcmNYY2hhbmdlIGZyb20gUmF3UmVjb3JkUmVwbyB0byBjc3YgZ29pbmcgdG8gRFNUDQogKg0KICogQHR5cGUge2Z1bmN0aW9ufQ0KICogQHN5bnRheCBjb252ZXJ0UmF3UmVjb3JkVG9Ec3QoIHhtbENvbGxlY3Rpb24sIHN1cHBEYXRhICkNCiAqIEBwYXJhbSB7U3RyaW5nfSB4bWxDb2xsZWN0aW9uIEEgY29sbGVjdGlvbiB3aXRoIG9uZSBvciBtb3JlIG1hcmMgcmVjb3JkcyBpbiBNYXJjWGNoYW5nZSBmb3JtYXQgZnJvbSBSUiBhcyBhIHN0cmluZw0KICogQHBhcmFtIHtPYmplY3R9IHN1cHBEYXRhIEEgSlNPTiBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCBzdWJtaXR0ZXIgYW5kIGZvcm1hdCBhbmQgY3JlYXRpb24gZGF0ZQ0KICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVjb3JkIGNvbnZlcnRlZCB0byBjc3YtZm9ybWF0IGZvciBEU1QNCiAqIEBleGFtcGxlDQogY29udmVydFJhd1JlY29yZFRvRHN0KA0KICI8bWFyY3g6Y29sbGVjdGlvbiB4bWxuczptYXJjeD0iaW5mbzpsYy94bWxucy9tYXJjeGNoYW5nZS12MSI+DQogPG1hcmN4OnJlY29yZCBmb3JtYXQ9ImRhbk1BUkMyIiB0eXBlPSJCaWJsaW9ncmFwaGljIj4NCiA8bWFyY3g6bGVhZGVyPjAwMDAwbiAgICAyMjAwMDAwICAgNDUwMDwvbWFyY3g6bGVhZGVyPg0KIDxtYXJjeDpkYXRhZmllbGQgaW5kMT0iMCIgaW5kMj0iMCIgdGFnPSIwMDEiPg0KIDxtYXJjeDpzdWJmaWVsZCBjb2RlPSJhIj40MTczMTkwNzwvbWFyY3g6c3ViZmllbGQ+DQogPC9tYXJjeDpkYXRhZmllbGQ+DQogPC9tYXJjeDpyZWNvcmQ+DQogPC9tYXJjeDpjb2xsZWN0aW9uPiIsDQogeyAic3VibWl0dGVyIiA6ICI4NzA5NzAiLCAiZm9ybWF0IiA6ICJkc3QiICwgY3JlYXRpb25EYXRlOiAiMjAwNTAzMDEifQ0KICkNCg0KICogQG5hbWUgY29udmVydFJhd1JlY29yZFRvRHN0DQogKiovDQoNCg0KZnVuY3Rpb24gY29udmVydFJhd1JlY29yZFRvRHN0KCB4bWxDb2xsZWN0aW9uLCBzdXBwRGF0YSApIHsNCg0KICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNvbnZlcnRSYXdSZWNvcmRUb0RzdCBmdW5jdGlvbiIgKTsNCg0KICAgIHZhciBjc3YgPSBEbTJUb0RzdC5jcmVhdGVDc3ZGb3JEc3QoIHhtbENvbGxlY3Rpb24gKTsNCg0KICAgIExvZy5pbmZvKCAiTGVhdmluZzogY29udmVydFJhd1JlY29yZFRvRHN0IGZ1bmN0aW9uIiApOw0KDQogICAgcmV0dXJuIGNzdjsNCg0KfQ0KDQovLyBBZGRpdGlvbmFsIHRlc3QgZW50cnkgZnVuY3Rpb24NCmZ1bmN0aW9uIHRlc3RDb252ZXJ0UmVjb3JkcyggKSB7DQogICAgdXNlKCJUZXN0Q29udmVydFJlY29yZHNIZWxwZXJzIik7DQogICAgLy8gcGFzcyAgd29ya2VyIGZ1bmN0aW9uIHRvIHRlc3RDb252ZXJ0SnNvbmNzdlJlY29yZA0KICAgIFRlc3RDb252ZXJ0UmVjb3Jkc0hlbHBlcnMudGVzdENvbnZlcnRKc29uQWRkaVJlY29yZCggY29udmVydFJhd1JlY29yZFRvRHN0ICk7DQp9DQoNCmZ1bmN0aW9uIGxvY2FsQWNjdGVzdFJ1bm5lciggYWRkaVJlY29yZCApIHsNCiAgICAvLyBjcmVhdGUgYWRkaVJlYWRlciBhbmQgcGFzcyBpdCB0byByZWFkQWRkaSB0aGF0IHdpbGwgcHJvY2VzcyBpdCB3aXRoIHRoZSBtYWluIHdvcmtlciBmdW5jdGlvbg0KICAgIHVzZSggIkFkZGkiICk7DQogICAgdXNlKCJUZXN0Q29udmVydFJlY29yZHNIZWxwZXJzIik7DQoNCiAgICB2YXIgYWRkaUZpbGVSZWFkZXIgPSBBZGRpLmNyZWF0ZUFkZGlTdHJpbmdSZWFkZXIoIGFkZGlSZWNvcmQgKTsNCg0KICAgIHJldHVybiBUZXN0Q29udmVydFJlY29yZHNIZWxwZXJzLnJlYWRBZGRpKCBhZGRpRmlsZVJlYWRlciwgY29udmVydFJhd1JlY29yZFRvRHN0ICk7DQp9IA0K", "moduleName": ""}, {"javascript": "", "moduleName": "ModulesInfo"}, {"javascript": "", "moduleName": "Use"}, {"javascript": "LyoqIEBmaWxlIFJlcXVpcmVkIG1vZHVsZXMgKi8KCi8qKiAgCiAqIFRoaXMgaXMgZXhlY3V0ZWQganVzdCBhZnRlciB0aGUgbW9kdWxlIHN5c3RlbSAoVXNlLnVzZS5qcykgaGFzIGJlZW4gaW5pdGlhbGl6ZWQsCiAqIGhlbmNlIG1vZHVsZXMgd2hpY2ggYWx3YXlzIG5lZWQgdG8gYmUgbG9hZGVkIG1heSBiZSBhZGRlZCBoZXJlLgogKi8KdXNlKCAiRVM1IiApOwo=", "moduleName": "Use.RequiredModules"}, {"javascript": "Ly8gRHVtbXkgbW9kdWxlLCBUaGUgSmF2YSBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyBtb3N0IG9mIEVTNS4KLy8gVGhpcyBpcyB0byBoYW5kbGUgdGhvc2UgbW9kdWxlcyB0aGF0IGluY2x1ZGVzIEVTNQpFWFBPUlRFRF9TWU1CT0xTPVtdOwo=", "moduleName": "ES5"}, {"javascript": "LyoqIEBmaWxlIEltcGxlbWVudGF0aW9uIG9mIGEgTG9nIG1vZHVsZS4gKi8KLy8gVGhpcyBtb2R1bGUgZGVwZW5kcyBvbiBhIHByb3ZpZGVkIExvZ0NvcmUgbW9kdWxlLCB3aGljaCBtdXN0Ci8vIHByb3ZpZGUgYSBmdW5jdGlvbiBfX0xvZ0NvcmVfbG9nIHRoYXQgdGFrZXMgdHdvIHN0cmluZyBhcmd1bWVudHMKLy8gYSBsZXZlbCwgYW5kIGFuIGFscmVhZHkgZm9ybWF0dGVkIG1lc3NhZy4gCi8vIEEgc2ltcGxlIExvZ0NvcmUgbW9kdWxlIHRoYXQgZG9lcyBsb2dnaW5nIHVzaW5nIFByaW50IHdpbGwgc3VmZmljZSwgb3IKLy8gaW4gbW9zdCBjYXNlcyBhIExvZ0NvcmUgbW9kdWxlIHByb3ZpZGVkIGJ5IHRoZSBlbnZpcm9ubWVudC4KdXNlKCAiTG9nQ29yZSIgKTsKdXNlKCAiTG9kYXNoIiApOyAvLyBGb3IgdGhlICdtYWdpYycgZXhwZXJpbWVudGFsIGZ1bmN0aW9uLgp1c2UoICJHbG9iYWwiICk7CgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnTG9nJyBdOwoKLyoqCiAqIE5hbWVzcGFjZSB0aGF0IGNvbnRhaW5zIGZ1bmN0aW9ucyB0byBMb2cgd2l0aC4KICogCiAqIFRoaXMgbmFtZXNwYWNlIGNvbnRhaW5zIGZ1bmN0aW9ucyB1c2VkIGZvciBsb2dnaW5nLiBFYWNoIGZ1bmN0aW9uCiAqIHJlZmxlY3RzIGEgY2VydGFpbiBsZXZlbCBvZiB1cmdlbmN5IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZC4KICogQWxsIGxvZ2dpbmcgbWV0aG9kcyBzdXBwb3J0cyBwYXNzaW5nIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50cy4gSWYgdGhlIGxvZyBzdGF0ZW1lbnQgbGV2ZWwgaXMgZW5hYmxlZAogKiBlYWNoIHBhcmFtZXRlciB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFN0cmluZyAoYnkgY2FsbGluZyBpdHMgdG9TdHJpbmcgbWV0aG9kKSwgYW5kIHRoZSBzdHJpbmdzIHdpbGwgYmUgY29uY2F0ZW5hdGVkLgogKgogKiAqKkEgbm90ZSBvbiB0aGUgbGV2ZWxzKiogIAogKiAKICogVGhlIGxvZyBsZXZlbHMgYXJlLCBmcm9tIGxvdy91bmltcG9ydGFudCB0byBoaWdoL2ltcG9ydGFudDogYHRyYWNlYCwKICogYGRlYnVnYCwgYGluZm9gLCBgd2FybmAsIGBlcnJvcmAsIGFuZCBgZmF0YWxgLiBUaGV5IGFyZSB1c2VkIHJvdWdobHkgYXMgc3VjaDoKICogCiAqICogYHRyYWNlYDogVmVyeSBkZXRhaWxlZCwgZnVuY3Rpb24gZW50ZXIvZXhpdCwgcGFyYW1ldGVyIGR1bXBzLCB1c3VhbGx5IG9ubHkgdXNlZCBmb3IgdHJhY2luZyBmdW5jdGlvbnMsIGFuZCBzcGVjaWZpYyBidWcgc29sdmluZy4KICogCiAqICogYGRlYnVnYDogRm9yIG9yZGluYXJ5IGRldmVsb3BtZW50LCBwcm9ncmFtIGZsb3csIGR1bXBpbmcgaW1wb3J0YW50IHZhbHVlcywgZXRjLgogKiAKICogKiBgaW5mb2A6IEluZm9ybWF0aW9uIGFib3V0IHRoZSBydW5uaW5nIHByb2dyYW0vc3lzdGVtIG9mIGEgbW9yZSBzdGF0dXMtbGlrZSBjaGFyYWN0ZXIsIGUuZy4gaG93IGZhciB0aGUgcHJvZ3JhbSBpcyBpbiBhIGdpdmVuIHByb2Nlc3MsIHRoYXQgc29tZXRoaW5nIHN0YXJ0ZWQgb3Igc3RvcHBlZCwgb3Igc2ltaWxhci4KICogCiAqICogYHdhcm5gOiBFeHBlY3RhdGlvbnMgdGhlIHByb2dyYW0gaGFkIGFib3V0IGZsb3cgb3IgZGF0YSBoYXMgbm90IGJlZW4gbWV0LCBidXQgdGhlIHByb2dyYW0gaXMgY2FwYWJsZSBvZiBjb250aW51aW5nLiBJdCBtaWdodCBpbmRpY2F0ZSB0aGF0IHRoZSB1c2VyL29wZXJhdG9yIGhhcyB0byBsb29rIGludG8gYW4gaXNzdWUgYW5kIHNvbHZlIGEgcHJvYmxlbS4KICogCiAqICogYGVycm9yYDogQW4gdW5leHBlY3RlZCBzaXR1YXRpb24gdGhhdCB0aGUgcHJvZ3JhbSBpcyB1bmFibGUgdG8gY29ycmVjdGx5IGhhbmRsZSwgaGFzIG9jY3VycmVkLiBUaGUgY3VycmVudCBwcm9jZXNzIGNhbiBub3QgcnVuIHVudGlsIGNvbXBsZXRpb24uIFRoaXMgbWlnaHQgYmUgbWlzc2luZyBkYXRhLCBvciBzaW1pbGFyLiBUaGUgdXNlci9vcGVyYXRvciBtdXN0IGxvb2sgaW50byB0aGUgaXNzdWUsIGFuZCBzb2x2ZSBpdC4KICogCiAqICogYGZhdGFsYDogQXMgZXJyb3IsIGJ1dCB0aGUgcHJvZ3JhbSBpcyB1bmFibGUgdG8gY29udGludWUgYXQgYWxsLCBhbmQgd2lsbCBzaHV0IGRvd24uIChOb3QgdXNlZCBtdWNoIGluIEphdmFTY3JpcHQsIGFuZCBub3Qgc3VwcG9ydGVkIGluIGFsbCBmcmFtZXdvcmtzKS4KICogCiAqICoqQSBub3RlIG9uIHBlcmZvcm1hbmNlKioKICogCiAqIFlvdSBhcmUgZW5jb3VyYWdlZCB0byBwYXNzIG11bHRpcGxlIHZhbHVlcywgaW5zdGVhZCBvZiAKICogdXNpbmcgc3RyaW5nIGNvbmNhdGVuYXRpb24gaW4gdGhlIGNhbGwgdG8gdGhlIGxvZ2dpbmcgbWV0aG9kLAogKiAgYXMgdGhlIGxvZyBtb2R1bGUgd2lsbCBza2lwIHRoZSB0b1N0cmluZyBjb252ZXJzaW9uIHByb2Nlc3MgYW5kIGNvbmNhdGVuYXRpb24sIHVudGlsIGl0IGRldGVybWluZXMgdGhhdCBpdCBuZWVkcwogKiB0byBwZXJmb3JtIHRoZSBhY3R1YWwgbG9nZ2luZy4gU2VlIHRoZSBleGFtcGxlLgogKiAKICogV2hlbiBsb2dnaW5nIHhtbCB2YXJpYWJsZXMgZm9yIGxldmVscyB0aGF0IG1pZ2h0IGJlIG9mdGVuIGJlIG9mZiAodHJhY2UsIGRlYnVnLCBpbmZvKSB5b3Ugc2hvdWxkIGNvbnNpZGVyIHVzaW5nCiAqICB7QGxpbmsgWG1sVXRpbC5sb2dYbWxTdHJpbmd9LCBpbnN0ZWFkIG9mIGNhbGxpbmcgdGhlIHhtbCBpbnN0YW5jZXMgdG9YbWxTdHJpbmcgbWV0aG9kLiBUaGlzIGVuc3VyZXMgdGhlIGJlc3QgcGVyZm9ybWFuY2UuCiAqIAogKiBAZXhhbXBsZQovLyBXaGVuIGxvZ2dpbmcsIHVzZSBtdWx0aXBsZSBwYXJhbWV0ZXJzIHRoYXQgc3VwcG9ydHMgdG9TdHJpbmcsIGluc3RlYWQgb2Ygc3RyaW5nIGNvbmNhdGVuYXRpb24uCi8vIEUuZy4gZG8gdGhpczoKTG9nLmRlYnVnKCAiVmFsdWUgb2YgZm9vLmJhcjogIiwgZm9vLmJhciwgIiwgdmFsdWUgb2YgZm9vLmZvbzogIiwgZm9vLmZvbyApOwovLyBJbnN0ZWFkIG9mIHRoaXM6CkxvZy5kZWJ1ZyggIlZhbHVlIG9mIGZvby5iYXI6ICIgKyBmb28uYmFyICsgIiwgdmFsdWUgb2YgZm9vLmZvbzogIiArIGZvby5mb28gKTsKICogCiAqIEBuYW1lc3BhY2UKICogQG5hbWUgTG9nCiAqLwp2YXIgTG9nID0gZnVuY3Rpb24oICkgewoKICAgIC8vIFN0b3JlIGEgY29weSB0byB0aGUgZnVuY3Rpb24gZnJvbSBMb2dDb3JlIC0gdGhlbiByZW1vdmUgaXQgZnJvbSB0aGUgZ2xvYmFsIHNjb3BlLgogICAgdmFyIExvZ0NvcmVfbG9nID0gX19Mb2dDb3JlX2xvZzsKICAgIGRlbGV0ZSB0aGlzLl9fTG9nQ29yZV9sb2c7CgogICAgLy8gUG9pbnRlciB0byBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhIGdpdmVuIGxvZyBsZXZlbCBpcyBlbmFibGVkLiBPcHRpb25hbGx5IHN1cHBsaWVkIGJ5IExvZ0NvcmUuCiAgICB2YXIgTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IHVuZGVmaW5lZDsKCiAgICAvLyBUaGUgb2JqZWN0IHRvIHJldHVybi4KICAgIHZhciB0aGF0ID0ge307ICAgIAogICAgCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSGVscGVyIGZ1bmN0aW9uLgogICAgLy8gQ29sbGVjdCBhbiBhcmd1bWVudHMgb2JqZWN0IHRvIGEgc3RyaW5nLiBOb3RlLCBhcmdzIGlzICpub3QqIGFuIGFycmF5LCBidXQgYW4gaW5zdGFuY2Ugb2YgYW4gYXJndW1lbnRzIG9iamVjdC4KICAgIHZhciBjb2xsZWN0ID0gZnVuY3Rpb24oIGFyZ3MgKSB7CiAgICAgICAgc3dpdGNoKCBhcmdzLmxlbmd0aCApIHsKICAgICAgICBjYXNlIDA6IHJldHVybiAiIjsKICAgICAgICBjYXNlIDE6IHJldHVybiBhcmdzWzBdLnRvU3RyaW5nKCk7CiAgICAgICAgY2FzZSAyOiByZXR1cm4gYXJnc1swXS50b1N0cmluZygpICsgYXJnc1sxXS50b1N0cmluZygpOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHZhciBteXJlcyA9IGFyZ3NbMF07CiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyArK2kgKSB7CiAgICAgICAgICAgICAgICBteXJlcyArPSBhcmdzWyBpIF0udG9TdHJpbmcoICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG15cmVzOwogICAgICAgIH07CiAgICB9OwoKICAgIC8vdGhpcyBpcyB0byBiZSBhYmxlIHRvIHRlc3QgdGhlIGludGVybmFsIGZ1bmN0aW9uIGNvbGxlY3QKICAgIHRoYXQuX19jb2xsZWN0ID0gY29sbGVjdDsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSGVscGVyIGZ1bmN0aW9uLgogICAgLy8gQ29sbGVjdCBhbiBhcmd1bWVudHMgb2JqZWN0IHRvIGEgc3RyaW5nLiBOb3RlLCBhcmdzIGlzICpub3QqIGFuIGFycmF5LgogICAgLy8gVGhpcyB2ZXJzaW9uIGRvZXMgbm90IHRocm93LCBidXQgdHJpZXMgdG8gY29sbGVjdCBhcyBtdWNoIGFzIHBvc3NpYmx5CiAgICB2YXIgc2FmZUNvbGxlY3QgPSBmdW5jdGlvbiggYXJncyApIHsKICAgICAgICB2YXIgbXlyZXMgPSAiIjsKICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpICkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgbXlyZXMgKz0gYXJnc1sgaSBdLnRvU3RyaW5nKCApOwogICAgICAgICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAgICAgICAgIG15cmVzICs9ICJbaWxsZWdhbC9udWxsL3VuZGVmaW5lZCB2YWx1ZSBhdCBwb3NpdGlvbiAiICsgaSArICJdIjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbXlyZXM7CiAgICB9OwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBBY3R1YWwgbWV0aG9kcwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBBY3R1YWwgbWV0aG9kcwogICAgLy8gQ29sbGVjdCB0aGUgYXJncywgdGhlbiBsb2cgdGhlbSB1c2luZyB0aGUgbGV2ZWwuCiAgICAvLyBOb3RlLCBhcmdzIGlzIG5vdCBhbiBhcnJheSwgYnV0IGFuIGluc3RhbmNlIG9mIGFuIGFyZ3VtZW50cyBvYmplY3QuCiAgICB2YXIgbG9nID0gZnVuY3Rpb24oIGxldmVsLCBhcmdzICkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIExvZ0NvcmVfbG9nKCBsZXZlbCwgY29sbGVjdCggYXJncyApICk7CiAgICAgICAgfSBjYXRjaCAoIGVycm9yICkgewogICAgICAgICAgICB2YXIgbXNnID0gIkVycm9yIHdoaWxlIGNhbGxpbmcgZm9ybWF0dGluZyBsb2cuIE9uZSBvciBtb3JlIHZhbHVlcyBwYXNzZWQgdG8gbG9nIHdhcyBwcm9iYWJseSBudWxsIG9yIHVuZGVmaW5lZC4gU3Vic3RpdHV0ZWQgbGluZSBmb2xsb3dzOlxuIjsKICAgICAgICAgICAgbXNnICs9IHNhZmVDb2xsZWN0KCBhcmdzICkgKyAiXG4iOwogICAgICAgICAgICBpZiAoIGVycm9yLnN0YWNrICYmICIiICE9IGVycm9yLnN0YWNrICkgewogICAgICAgICAgICAgICAgbXNnICs9ICJEaXNwbGF5aW5nIHN0YWNrOiAiICsgZXJyb3Iuc3RhY2sucmVwbGFjZSggLyhAW146XFtdKjopL2csICJcbiQxIiApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIExvZ0NvcmVfbG9nKCAid2FybiIsIG1zZyApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfTsKCgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBBY3R1YWwgdXNlciBleHBvc2VkIGZ1bmN0aW9ucy9zdHVmZgogICAgCiAgICAvLyBTZXR0aW5nIHVwIGxldmVsIHByb3BlcnRpZXMKICAgIC8qKiAKICAgICAqIEVudW0gZm9yIGxvZyBsZXZlbHMuCiAgICAgKiAKICAgICAqIFVzZSB0aGlzIGVudW0gd2hlbiBjYWxsaW5nIGlzTGV2ZWxFbmFibGVkLgogICAgICogCiAgICAgKiBUaGlzIGVudW0gaGFzIHByb3BlcnRpZXMgYHRyYWNlYCwgYGRlYnVnYCwgYGluZm9gLCBgd2FybmAgYW5kIGBlcnJvcmAuIFVzZSB0aGVtIHdoZW4gY2FsbGluZyBpc0xldmVsRW5hYmxlZC4KICAgICAqIAogICAgICogQHNlZSB7QGxpbmsgTG9nLmlzTGV2ZWxFbmFibGVkfQogICAgICogQGV4YW1wbGUKLy8gQ2hlY2sgaWYgaW5mbyBsZXZlbCBpcyBlbmFibGVkLCB0aGVuIGxvZy4KaWYgKCBMb2cuaXNMZXZlbEVuYWJsZWQoIExvZy5MZXZlbC5pbmZvICkgKSB7CiAgICBMb2cuaW5mbyggIlRoZSByZXN1bHQgb2YgY2FsbGluZyBzbG93X2Z1bmN0aW9uIGlzIDogIiwgc2xvd19mdW5jdGlvbigpICk7Cn0KICAgICAqIAogICAgICogQHJlYWRvbmx5CiAgICAgKiBAZW51bSB7U3RyaW5nfQogICAgICogQG5hbWUgTG9nLkxldmVsCiAgICAgKi8KICAgIHRoYXQuTGV2ZWwgPSB7IAogICAgICAgICAgICAvKiogVGhlIHRyYWNlIGxldmVsICovCiAgICAgICAgICAgIHRyYWNlIDogInRyYWNlIiwgCiAgICAgICAgICAgIC8qKiBUaGUgZGVidWcgbGV2ZWwgKi8KICAgICAgICAgICAgZGVidWcgOiAiZGVidWciLAogICAgICAgICAgICAvKiogVGhlIGluZm8gbGV2ZWwgKi8KICAgICAgICAgICAgaW5mbyAgOiAiaW5mbyIsIAogICAgICAgICAgICAvKiogVGhlIHdhcm4gbGV2ZWwgKi8KICAgICAgICAgICAgd2FybiAgOiAid2FybiIsCiAgICAgICAgICAgIC8qKiBUaGUgZXJyb3IgbGV2ZWwgKi8KICAgICAgICAgICAgZXJyb3IgOiAiZXJyb3IiCiAgICB9OwogICAgCiAgIC8qKgogICAgKiAgQ2hlY2sgaWYgYSBsb2cgbGV2ZWwgaXMgZW5hYmxlZC4KICAgICogIAogICAgKiAgUmV0dXJuIHRydWUgaWYgYSBsb2cgbGV2ZWwgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgKiAgCiAgICAqICBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHdoZW4gbG9nZ2luZyBvYmplY3RzIHRoYXQgYXJlIGV4cGVuc2l2ZSB0byBldmFsdWF0ZSB3aGVuIHBhc3NpbmcgdG8gdGhlIGxvZyBzeXN0ZW0uCiAgICAqICBCeSBvbmx5IGNvbmRpdGlvbmFsbHkgZXZhbHVhdGluZywgeW91IGNhbiBtYWtlIHRoZSBwcm9ncmFtIGdvIGZhc3Rlciwgd2hpY2ggY2FuIGJlIGhhbmR5IGluIHNvbWUgc2l0dWF0aW9ucy4KICAgICogIAogICAgKiAgKipOb3RlOioqIFlvdSBkbyBub3QgbmVlZCB0aGlzIGluIG1vc3Qgc2l0dWF0aW9ucywgb25seSB3aGVuIHlvdSBuZWVkIHRvIGNhbGwgc2xvdyBmdW5jdGlvbnMsIG9yIHNpbWlsYXIsIGluIGNhc2Ugb2YgbG9nZ2luZy4gVGhlIExvZyBvYmplY3Qgb25seSBjYWxscyB0aGUgdW5kZXJseWluZyBMb2cgZnJhbWV3b3JrLCBpZiBpdCBuZWVkcyB0by4KICAgICogIAogICAgKiAgKipOb3RlOioqIFRoaXMgZnVuY3Rpb25hbGl0eSByZXF1aXJlcyB0aGUgdW5kZXJseWluZyBMb2cgZnJhbWV3b3JrIHRvIHN1cHBvcnQgcmV0cmVpdmluZyB0aGlzIGtpbmQgb2YgaW5mb3JtYXRpb24uCiAgICAqICAKICAgICAqIEBzZWUge0BsaW5rIExvZy5MZXZlbH0KICAgICogIEBleGFtcGxlCi8vIE9ubHkgcGVyZm9ybSBldmFsdWF0aW9uLCBpZiBsb2cgbGV2ZWwgaXMgZW5hYmxlZAppZiAoIExvZy5pc0xldmVsRW5hYmxlZCggTG9nLkxldmVsLmRlYnVnICkgKSB7CiAgICBMb2cuZGVidWcoICJUaGUgcmVzdWx0IG9mIGNhbGxpbmcgc2xvd19mdW5jdGlvbiBpcyA6ICIsIHNsb3dfZnVuY3Rpb24oKSApOwp9CiAgICAqICAKICAgICogIEBleGFtcGxlCi8vIE5vIHJlYXNvbiB0byB1c2UgaW4gb3JkaW5hcnkgY2FzZQovLyBEb24ndCBkbyB0aGlzIG5vcm1hbGx5CmlmICggTG9nLmlzTGV2ZWxFbmFibGVkKCBMb2cuTGV2ZWwuZGVidWcgKSApIHsKICAgIExvZy5kZWJ1ZyggIkkgbmVlZCB0byBsb2cgdGhlIHZhbHVlIG9mIHNvbWV0aGluZyA6Iiwgc29tZV92YWx1ZSApOwp9Ci8vIEluc3RlYWQsIGRvIHRoaXMKTG9nLmRlYnVnKCAiSSBuZWVkIHRvIGxvZyB0aGUgdmFsdWUgb2Ygc29tZXRoaW5nIDoiLCBzb21lX3ZhbHVlICk7CiAgICAqCiAgICAqICBAc3ludGF4IExvZy5pc0xldmVsRW5hYmxlZCggbGV2ZWwgKQogICAgKiAgQHBhcmFtIGxldmVsIFRoZSBsZXZlbCB0byBldmFsdWF0ZS4gVXNlIHRoZSBMZXZlbCBwcm9wZXJ0eSBjb25zdGFudHMuCiAgICAqICBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSBsb2cgbGV2ZWwgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgKiAgCiAgICAqICBAbmFtZSBMb2cuaXNMZXZlbEVuYWJsZWQKICAgICogIEBtZXRob2QKICAgICovICAgICAKICAgIHRoYXQuaXNMZXZlbEVuYWJsZWQgPSBmdW5jdGlvbiggbGV2ZWwgKSB7CiAgICAgICAgcmV0dXJuIExvZ0NvcmVfaXNMZXZlbEVuYWJsZWQoIGxldmVsICk7CiAgICB9CiAgICAKICAgIAogICAvKioKICAgKiBMb2cgYSBtZXNzYWdlIGF0IGB0cmFjZWAgbGV2ZWwuCiAgICogCiAgICogVXNlIHRoZSB0cmFjZSBmdW5jdGlvbiB0byBsb2cgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiwgc3VjaCBhcwogICAqIGVudGVyaW5nL2xlYXZpbmcgZnVuY3Rpb25zLCB2YWx1ZXMgb2YgcGFyYW1ldGVycywgZXRjLiBNb3N0IG9mdGVuIHVzZWQKICAgKiBhcyBhIGRldGFpbGVkIGRlYnVnIGZhY2lsaXR5IGZvciBhIHNwZWNpZmljIHByb2JsZW0gCiAgICogCiAgICogQHN5bnRheCBMb2cudHJhY2UoIGFyZywgLi4uICkKICAgKiBAcGFyYW0gey4uLk9iamVjdH0gYXJnIFRoZSBhcmd1bWVudChzKSB0byBsb2cuIE11c3QgYmUgY29udmVydGFibGUgdG8gU3RyaW5nCiAgICogQG5hbWUgTG9nLnRyYWNlCiAgICogQG1ldGhvZAogICAqIEBleGFtcGxlCkxvZy50cmFjZSggIkVudGVyaW5nIGZ1bmN0aW9uIGZvbywgd2l0aCBwYXJhbXRlciBiYXI9IiwgYmFyICk7CiAgICovCiAgICB0aGF0LnRyYWNlID0gZnVuY3Rpb24oICkgewoJaWYgKCBMb2dDb3JlX2lzTGV2ZWxFbmFibGVkKCAidHJhY2UiICkgKSB7CiAgICAgICAgICAgIGxvZyggInRyYWNlIiwgYXJndW1lbnRzICk7Cgl9OwogICAgfTsKICAgIC8qKgogICAqIExvZyBhIG1lc3NhZ2UgYXQgYGRlYnVnYCBsZXZlbC4KICAgKiAKICAgKiBVc2UgdGhlIGRlYnVnIGZ1bmN0aW9uIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0b3BsZXZlbAogICAqIHByb2dyYW0gZmxvdywgaW1wb3J0YW50IHZhbHVlcyB0aGF0IGluZmx1ZW5jZXMgdGhlIHByb2dyYW0sIGV0Yy4gCiAgICogCiAgICogQHN5bnRheCBMb2cuZGVidWcoIGFyZywgLi4uICkKICAgKiBAcGFyYW0gey4uLk9iamVjdH0gYXJnIFRoZSBhcmd1bWVudChzKSB0byBsb2cuIE11c3QgYmUgY29udmVydGFibGUgdG8gU3RyaW5nCiAgICogQG5hbWUgTG9nLmRlYnVnCiAgICogQG1ldGhvZAogICAqIEBleGFtcGxlCkxvZy5kZWJ1ZyggIlNlcnZpY2UgcmV0dXJuZWQgdGhlIGZvbGxvd2luZyBhbnN3ZXI6ICIsIHNlcnZpY2VBbnN3ZXIgKTsKICAgKi8KICAgIHRoYXQuZGVidWcgPSBmdW5jdGlvbiggKSB7CglpZiAoIExvZ0NvcmVfaXNMZXZlbEVuYWJsZWQoICJkZWJ1ZyIgKSApIHsKICAgICAgICAgICAgbG9nKCAiZGVidWciLCBhcmd1bWVudHMgKTsKCX07CiAgICB9OwogICAgLyoqCiAgICogTG9nIGEgbWVzc2FnZSBhdCBgaW5mb2AgbGV2ZWwuCiAgICogCiAgICogVXNlIHRoZSBpbmZvIGZ1bmN0aW9uIHRvIGxvZyBpbmZvcm1hdGlvbiBvZiBhICdzdGF0dXMnIGxpa2UgdHlwZSwgc3VjaAogICAqIGFzIHN0YXRlIGNoYW5nZXMsIGhvdyBmYXIgYSBnaXZlbiBwcm9jZXNzIGhhcyBwcm9ncmVzc2VkLCBldGMuIAogICAqIAogICAqIEBzeW50YXggTG9nLmluZm8oIGFyZywgLi4uICkKICAgKiBAcGFyYW0gey4uLk9iamVjdH0gYXJnIFRoZSBhcmd1bWVudChzKSB0byBsb2cuIE11c3QgYmUgY29udmVydGFibGUgdG8gU3RyaW5nCiAgICogQG5hbWUgTG9nLmluZm8KICAgKiBAbWV0aG9kCiAgICogQGV4YW1wbGUKTG9nLmluZm8oICJUYXNrIHdpdGggdGFza0lkICIsIHRhc2tJZCwgIiBub3cgZG9uZSBhbmQgdW5sb2FkZWQiICk7CiAgICovCiAgICB0aGF0LmluZm8gPSBmdW5jdGlvbiggKSB7CglpZiAoIExvZ0NvcmVfaXNMZXZlbEVuYWJsZWQoICJpbmZvIiApICkgewogICAgICAgICAgICBsb2coICJpbmZvIiwgYXJndW1lbnRzICk7Cgl9OwogICAgfTsKICAgIC8qKgogICAqIExvZyBhIG1lc3NhZ2UgYXQgYHdhcm5gIGxldmVsLgogICAqIAogICAqIFVzZSB0aGUgd2FybiBmdW5jdGlvbiB0byBsb2cgd2FybmluZ3MgYWJvdXQgZXhwZWN0YXRpb25zIHRoYXQgaGF2ZSBub3QKICAgKiBiZWVuIG1ldCwgYnV0IHRoYXQgdGhlIHByb2dyYW0gaXMgc3RpbGwgYWJsZSB0byB3b3JrIGFyb3VuZC4gVGhlCiAgICogcHJvYmxlbSBzaG91bGQgbm90IGhhdmUgYSBiaWcgaW1wYWN0IG9uIHRoZSBwcm9jZXNzLCBidXQgYSB3YXJuaW5nCiAgICogc2hvdWxkIGluZGljYXRlIHRoYXQgdGhlIHVzZXIgbWF5IHdhbnQgdG8gaW52ZXN0aWdhdGUgaWYgdGhlIHdhcm5pbmcgaXMKICAgKiBhIHN5bXB0b20gb2Ygc29tZXRoaW5nIHRoYXQgc2hvdWxkIGJlIGNvcnJlY3RlZC4gCiAgICogCiAgICogQHN5bnRheCBMb2cud2FybiggYXJnLCAuLi4gKQogICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBhcmcgVGhlIGFyZ3VtZW50KHMpIHRvIGxvZy4gTXVzdCBiZSBjb252ZXJ0YWJsZSB0byBTdHJpbmcKICAgKiBAbmFtZSBMb2cud2FybgogICAqIEBtZXRob2QKICAgKiBAZXhhbXBsZQpMb2cud2FybiggIk5vIHJlc3BvbnNlIGZyb20gc2VydmljZSAtIHdpbGwgcmV0cnkgaW4gNSBtaW51dGVzIiApOwogICAqLwogICAgdGhhdC53YXJuID0gZnVuY3Rpb24oICkgewoJaWYgKCBMb2dDb3JlX2lzTGV2ZWxFbmFibGVkKCAid2FybiIgKSApIHsKICAgICAgICAgICAgbG9nKCAid2FybiIsIGFyZ3VtZW50cyApOwoJfTsKICAgIH07CiAgICAvKioKICAgKiBMb2cgYSBtZXNzYWdlIGF0IGBlcnJvcmAgbGV2ZWwuCiAgICogCiAgICogVXNlIHRoZSBlcnJvciBmdW5jdGlvbiB0byBsb2cgZXJyb3JzIGZvciBhIGdpdmVuIHByb2Nlc3MgdGhhdCB0aGUKICAgKiBwcm9ncmFtIGNhbiBub3QgY29ycmVjdC4gQW4gZXJyb3IgaW5kaWNhdGVzIHRoYXQgdGhlIGdpdmVuIHRhc2sgYXQgaGFuZAogICAqIGNhbiBub3QgYmUgY29tcGxldGVkLiBIb3dldmVyLCBvdGhlciB0YXNrcyBtYXkgdmVyeSB3ZWxsIGJlIGFibGUgdG8gYmUKICAgKiBwcm9jZXNzZWQuIFRoZSB1c2VyIHNob3VsZCBkZWZpbml0aXZlbHkgaW52ZXN0aWdhdGUgdGhlIHJlYXNvbiBmb3IgdGhlCiAgICogZXJyb3IgYW5kIGlmIHBvc3NpYmx5IGNvcnJlY3QgaXQuIAogICAqIAogICAqIEBzeW50YXggTG9nLmVycm9yKCBhcmcsIC4uLiApCiAgICogQHBhcmFtIHsuLi5PYmplY3R9IGFyZyBUaGUgYXJndW1lbnQocykgdG8gbG9nLiBNdXN0IGJlIGNvbnZlcnRhYmxlIHRvIFN0cmluZwogICAqIEBuYW1lIExvZy5lcnJvcgogICAqIEBtZXRob2QKICAgKiBAZXhhbXBsZQpMb2cuZXJyb3IoICJFcnJvciB3aGVuIGhhbmRsaW5nIHRhc2s6IHRhc2t0eXBlIHdhcyBlbXB0eS4gVGFzayBjYW4gbm90IGJlIGhhbmRsZWQiICk7CiAgICovCiAgICB0aGF0LmVycm9yID0gZnVuY3Rpb24oICkgewoJaWYgKCBMb2dDb3JlX2lzTGV2ZWxFbmFibGVkKCAiZXJyb3IiICkgKSB7CiAgICAgICAgICAgIGxvZyggImVycm9yIiwgYXJndW1lbnRzICk7Cgl9OwogICAgfTsKCiAgLyoqCiAgICogTG9nIGEgbWVzc2FnZSBhdCBgZmF0YWxgIGxldmVsLgogICAqIAogICAqIFVzZSB0aGUgZmF0YWwgZnVuY3Rpb24gdG8gbG9nIGEgZmF0YWwgcHJvYmxlbSwgdGhhdCBzdG9wcyB0aGUgcHJvZ3JhbQogICAqIGZyb20gYmVpbmcgYWJsZSB0byBwcm9jZWVkIGF0IGFsbCwgb3Igd2l0aG91dCByaXNrIG9mIHNldmVyZQogICAqIHByb2JsZW1zL2NvcnJ1cHRpb24gb2YgZGF0YS4gSXQgaXMgcHJvYmFibHkgbm90IGEgZnVuY3Rpb24gbXVjaCB1c2VkCiAgICogZnJvbSBKYXZhU2NyaXB0LiAKICAgKiAKICAgKiAqKk5vdGU6KiogTm90IGFsbCBsb2cgZnJhbWV3b3JrcyBzdXBwb3J0cyB0aGUgZmF0YWwgbGV2ZWwuIEluIHRoYXQgY2FzZSwgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW4gZXJyb3IgbGV2ZWwuCiAgICogCiAgICogQHN5bnRheCBMb2cuZmF0YWwoIGFyZywgLi4uICkKICAgKiBAcGFyYW0gey4uLk9iamVjdH0gYXJnIFRoZSBhcmd1bWVudChzKSB0byBsb2cuIE11c3QgYmUgY29udmVydGFibGUgdG8gU3RyaW5nCiAgICogQG5hbWUgTG9nLmZhdGFsCiAgICogQG1ldGhvZAogICAqIEBleGFtcGxlCkxvZy5mYXRhbCggIkNvbmZpZ3VyYXRpb24gZXJyb3IgaW4gc29tZW9iamVjdC5zb21ldmFsdWUuIFRoaXMgb3B0aW9uIHdhcyBpbmNvcnJlY3RseSBzZXQuIEFib3J0aW5nIiApOwogICAqLwogICAgdGhhdC5mYXRhbCA9IGZ1bmN0aW9uKCApIHsKCWlmICggTG9nQ29yZV9pc0xldmVsRW5hYmxlZCggImZhdGFsIiApICkgewogICAgICAgICAgICBsb2coICJmYXRhbCIsIGFyZ3VtZW50cyApOwoJfTsKICAgIH07CgogICAgLyoqCiAgICAgKiBMb2cgYSBtZXNzYWdlIGF0IGBtYWdpY2AgbGV2ZWwuCiAgICAgKiAKICAgICAqIFRoZSBtYWdpYyBmdW5jdGlvbiBpcyBhIHNwZWNpYWwgbG9nIGZ1bmN0aW9uLiBJdCBpcyB1c2VkIHRvIGxvZyBhCiAgICAgKiBmdW5jdGlvbiBjYWxsIHdpdGggdGhlIHBhcmFtZXRlcnMsIHdoZXJlIHRoZSBwYXJhbWV0ZXJzIHdpbGwgYmUKICAgICAqICdtYWdpY2FsbHknIGV2YWx1YXRlZCBiZWZvcmUgcHJpbnRlZC4gVGhlIGxldmVsIGlzICdtYWdpYycsIGFuZCB0aGUKICAgICAqIGZlYXR1cmUgaXMgZXhwZXJpbWVudGFsLCBhbmQgbWF5IG5vdCBtYWtlIGl0IHRvIHByb2R1Y3Rpb24uIAogICAgICogCiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXhwZXJpbWVudGFsLgogICAgICoKICAgICAqIEBwYXJhbSB7WE1MfSBhcmcgVGhlIGFyZ3VtZW50IHRvIGxvZy4gTXVzdCBiZSBYTUwKICAgICAqIEBuYW1lIExvZy5tYWdpYwogICAgICogQG1ldGhvZAogICAgICovCiAgICB0aGF0Lm1hZ2ljID0gZnVuY3Rpb24oIHhtbCApIHsKICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGNoZWNrcyB0aGUgY29udGVzdCAKICAgICAgICBpZiAoIHR5cGVvZiB4bWwgIT09ICJ4bWwiICkgewogICAgICAgICAgICBsb2coICJ3YXJuIiwgIm1hZ2ljIGNhbGxlZCB3aXRoIG5vbiB4bWwgYXJndW1lbnQ6ICIsIHhtbCApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcGFyYW1Ub1N0cmluZyggKSB7CiAgICAgICAgICAgIHJlcyA9IFsgXTsKICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpICkgewogICAgICAgICAgICAgICAgLy8gU3BlY2lhbGNhc2UgdW5kZWZpbmVkIC0gaWYgc29tZXRoaW5nIHJldHVybnMgdW5kZWZpbmVkCiAgICAgICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1sgaSBdID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goICJ1bmRlZmluZWQiICk7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsY2FzZSBhcnJheXMsIGFzIHRoZWlyIHRvU3RyaW5nIG1ldGhvZCBpcyBhIGJpdCB3YWNreQogICAgICAgICAgICAgICAgaWYgKCBfLmlzQXJyYXkoIGFyZ3VtZW50c1sgaSBdICkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goICJbICIgKyBhcmd1bWVudHNbIGkgXS50b1N0cmluZyggKSArICIgXSIgKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGFyZ3VtZW50c1sgaSBdID09PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgICAgICByZXMucHVzaCggJyInICsgYXJndW1lbnRzWyBpIF0udG9TdHJpbmcoICkgKyAnIicgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goIGFyZ3VtZW50c1sgaSBdLnRvU3RyaW5nKCApICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlcy5qb2luKCAiLCAiICk7CiAgICAgICAgfQoKICAgICAgICBjb250ZW50ID0geG1sLnRvU3RyaW5nKCApOwogICAgICAgIC8vIFJlcGxhY2UgdXB0byB0aGUgZmlyc3QgKCB3aXRoIHBhcmFtVG9TdHJpbmcsIGV2YWwgaXQsIGFuZCBwcmludCBpdAogICAgICAgIC8vIGNibzogZmVlbCBmcmVlIHRvIHJlcGxhY2UgdGhpcyB3aXRoIHNvbWV0aGluZyBjbGV2ZXIgdXNpbmcgcmVnZXhwcy4uLgogICAgICAgIGFsbCA9IGNvbnRlbnQuc3BsaXQoICIoIiApOwogICAgICAgIGZ1bmMgPSBhbGwuc2hpZnQoICk7CiAgICAgICAgcmVwbGFjZSA9ICJwYXJhbVRvU3RyaW5nKCIgKyBhbGwuam9pbiggIigiICk7CiAgICAgICAgbmV3YXJncyA9IGV2YWwoIHJlcGxhY2UgKTsKICAgICAgICBjb21wbGV0ZSA9IGZ1bmMgKyAiKCAiICsgbmV3YXJncyArICIgKSI7CiAgICAgICAgbG9nKCAibWFnaWMiLCBbICJGdW5jdGlvbiB3YXMgY2FsbGVkIGxpa2UgdGhpczpcbiIsIGNvbnRlbnQsICJcbkFmdGVyIHBhcmFtZXRlciBldmFsdWF0aW5nOlxuIiwgY29tcGxldGUgXSApOwogICAgfTsKCgogIC8qKgogICAqIFdyYXAgYW4gb2JqZWN0IHNvIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB3YXJuaW5nIGluIHRoZSBsb2cgaWYgdGhlIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkLgogICAqCiAgICogTm9ybWFsbHkgbG9nZ2luZyBhbiB1bmRlZmluZWQgb3IgbnVsbCB2YWx1ZSBwcm9kdWNlcyBhIHdhcm5pbmcgaW4gdGhlIGxvZyBmaWxlIGluY2x1ZGluZyBhIHN0YWNrIHRyYWNlCiAgICogZm9yIHRoZSBsb2dnaW5nIHBvc2l0aW9uLiBJZiBhIHZhbHVlIGlzIGFsbG93ZWQgdG8gYmUgdW5kZWZpbmVkLCB0aGlzIHdhcm5pbmcgY2FuIGJlIGF2b2lkZWQgYnkgd3JhcHBpbmcKICAgKiB0aGUgdmFsdWUgaW4gc2FmZVZhbHVlLgogICAqCiAgICogSXQgZG9lcyB0aGlzIGJ5IHdyYXBwaW5nIHRoZSBvYmplY3QgaW4gYSB0ZW1wb3Jhcnkgb2JqZWN0IGltcGxlbWVudGluZyB0b1N0cmluZyB3aXRoIGNoZWNrcyBmb3IgbnVsbC91bmRlZmluZWQKICAgKgogICAqIEBzeW50YXggTG9nLnNhZmVWYWx1ZSh2YWx1ZSkKICAgKiBAcGFyYW0ge09iamVjdHxVbmRlZmluZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLiBNdXN0IGJlIGNvbnZlcnRhYmxlIHRvIFN0cmluZyBvciBudWxsL3VuZGVmaW5lZAogICAqIEBuYW1lIExvZy5zYWZlVmFsdWUKICAgKiBAbWV0aG9kCiAgICogQGV4YW1wbGUKTG9nLmRlYnVnKCAiVmFsdWUgaXMgIiwgTG9nLnNhZmVWYWx1ZSggdmFsdWUgKSApOwogICAqLwoKICAgIHRoYXQuc2FmZVZhbHVlID0gZnVuY3Rpb24oIHZhbHVlICkgewogICAgICAgIHZhciByZXMgPSB7fTsKICAgICAgICByZXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICI8dW5kZWZpbmVkPiI7CiAgICAgICAgICAgIH0gZWxzZQogICAgICAgICAgICBpZiAoIHZhbHVlID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIjxudWxsPiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH07CgogICAgLy8gU2V0dXAgdGhlIHR3byAiYWR2YW5jZWQiIGZ1bmN0aW9ucyBmcm9tIGFib3ZlCiAgICBpZiAoIHRoaXMuX19Mb2dDb3JlX2lzTGV2ZWxFbmFibGVkICkgewoJTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IF9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZDsKCWRlbGV0ZSB0aGlzLl9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZDsKICAgIH0gZWxzZSB7CgkvLyBEdW1teSBmdW5jdGlvbiAtIGFsbCBpcyB0cnVlCglMb2dDb3JlX2lzTGV2ZWxFbmFibGVkID0gZnVuY3Rpb24oIGxldmVsICkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgIC8vIG1iZDogMjAxMy0xMC0zMQogICAgICAgIC8vIFRoZSBDKysgbG9nZ2luZyBmcmFtZXdvcmsgZG9lcyBub3QsIGFuZCBwcm9iYWJseSB3aWxsIG5vdCwgc3VwcG9ydCBzb21ldGhpbmcKICAgICAgICAvLyBsaWtlIGlzTGV2ZWxFbmFibGVkLCBhbmQgaXQgaXMgYWxzbyBzcGVlZHkgZW5vdWdoIHRvIG5vdCBtYXR0ZXIuCiAgICAgICAgLy8gVGhlIGNoZWNrIHRoZW4gZW5kcyB1cCBhZGRpbmcgYSBsb3Qgb2Ygbm9pc2UgaW50byBzb21lIGFwcGxpY2F0aW9ucywgc3VjaCBhcyAKICAgICAgICAvLyBlc2dhcm90aCwgd2hlcmUgYSB3YXJuaW5nIGlzIGxvZ2dlZCBmb3IgZWFjaCBKYXZhU2NyaXB0IGVudmlyb25tZW50IGNyZWF0ZWQuCiAgICAgICAgLy8gU28sIGl0IGlzIGJlc3Qgbm90IHRvIGRvIHRoaXMgY2hlY2sgdW5kZXIgQysrLgogICAgICAgIC8vIEJ1dCwgaWYgdGhpcyBpcyBKYXZhLCBjaGVjayBpZiB0aGUgcGVyZm9ybWFuY2UgY291bGQgYmUgaW1wcm92ZWQgYnkgCiAgICAgICAgLy8gYWRkaW5nIGEgIm5hdGl2ZSIgX19Mb2dDb3JlX2lzTGV2ZWxFbmFibGVkIGZ1bmN0aW9uLgogICAgICAgIC8vIFRoaXMgY2hlY2sgaXMgYW4gZXhjZXB0aW9uIHRvIHRoZSBydWxlIHRoYXQgd2UgZG8gbm90IGNoZWNrIGZvciBwbGF0Zm9ybXMgaW4gbm9uICpDb3JlIG1vZHVsZXMuCiAgICAgICAgLy8gWW91IGFyZSBub3QgZW50aXRsZWQgdG8gZG8gdGhpcyBvdGhlciBwbGFjZXMuIEZlZWwgZnJlZSB0byBjb21wbGFpbiBhYm91dCB0aGlzIHVuZmFpcm5lc3Mgb2YgbGlmZQogICAgICAgIC8vIG9uIHlvdXIgZmF2b3JpdGUgc29jaWFsIG5ldHdvcmssIG9yIHNvbWV0aGluZywgYXMgbG9uZyBhcyB5b3UgZG9uJ3QgZXhwZWN0IGFueW9uZSB0byBjYXJlLi4uIDstKQogICAgICAgIGlmICggR2xvYmFsLlBhY2thZ2VzICYmIEdsb2JhbC5QYWNrYWdlcy5qYXZhICkgewogICAgICAgICAgICB0aGF0Lndhcm4oICJKYXZhIGludGVycHJlbnRlciBkZXRlY3RlZCwgYW5kIExvZ0NvcmUgbW9kdWxlIGRvZXMgbm90IGV4cG9ydCBfX0xvZ0NvcmVfaXNMZXZlbEVuYWJsZWQgLSBtYXkgaW1wYWN0IGxvZ2dpbmcgcGVyZm9ybWFuY2UiICk7CiAgICAgICAgfSAKICAgIH0KCgogICAgLy8gUmV0dXJuIHRoZSBMb2cgb2JqZWN0CiAgICByZXR1cm4gdGhhdDsKfSggKTsKCg==", "moduleName": "Log"}, {"javascript": "Ly8gTG9nQ29yZSBtb2R1bGUgLSBpbXBsZW1lbnRzIGEgX19Mb2dDb3JlX2xvZyggbGV2ZWwsIGFyZ3MgKSBmdW5jdGlvbgoKLyogSmF2YSBNYXZlbiBkZXBzIG5lZWRlZDoKCiAgICAgICAgICAgICAgICA8IS0tIExPR0dJTkcgLS0+CiAgICAgICAgICAgICAgICA8IS0tIEluIG9yZGVyIHRvIHN1cHBvcnQgZGlmZmVyZW50IGxvZyBmcmFtZXdvcmtzLCB3ZSB1c2UgYSBmYWNhZGUgcGF0dGVybiAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGxvZ2dpbmcgVGhlIGFjdHVhbCBmYWNhZGUgcGF0dGVybiBpcyBzbGY0aiwgd2hpY2ggaXMgd2hhdCBkYmMtY29tbW9ucyAKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ29pbmcgdG8gdXNlIHRvby4gRm9yIGFjdHVhbCBsb2dnaW5nIGluIHRoZSBkZXBsb3ltZW50LCB3ZSB1c2UgbG9nNGouIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotYXBpPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjYuMTwvdmVyc2lvbj4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDxkZXBlbmRlbmN5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBJZD5vcmcuc2xmNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPnNsZjRqLWV4dDwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+IAoqLwoKLyogWW91IG1heSBhbHNvIHdhbnQgdG8gYWN0dWFsbHkgYmluZCB0byBlLmcuIGxvZzRqOgoKICAgICAgICAgICAgICAgIDwhLS0gVGhpcyBvbmUgYmluZHMgdG8gbG9nNGogaW4gdGhlIGRlcGxveW1lbnQuIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotbG9nNGoxMjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5ydW50aW1lPC9zY29wZT4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDwhLS0gSW4gbG9nIHdlIHRydXN0IDogaHR0cDovL2xvZ2dpbmcuYXBhY2hlLm9yZy9sb2c0ai8gLS0+CiAgICAgICAgICAgICAgICA8ZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3VwSWQ+bG9nNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvZzRqPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjIuMTY8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICA8IS0tIEVORCBMT0dHSU5HIC0tPgoqLwoKCi8vIFdlIGV4cG9ydCB0aGlzIHN5bWJvbCwgd2hpY2ggd2UgZXhwZWN0IHRvIGJlIHVzZWQgZnJvbSBhIExvZyBtb2R1bGUuCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdfX0xvZ0NvcmVfbG9nJywgJ19fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCcgXTsKCi8vIEFjdHVhbCBsb2cgZnVuY3Rpb24KdmFyIF9fTG9nQ29yZV9sb2cgPSBmdW5jdGlvbiggbGV2ZWwsIG1zZyApIHsKICAgIG1zZyA9ICJKUzogIiArIG1zZzsKICAgIC8vIFJoaW5vIHNwZWNpZmljIGJpbmRpbmdzIHV0aWxpemVkLgogICAgc3dpdGNoKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLnRyYWNlKCBtc2cgKTsgYnJlYWs7CiAgICBjYXNlICJkZWJ1ZyIgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5kZWJ1ZyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiaW5mbyIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuaW5mbyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAid2FybiIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIud2FybiggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiZXJyb3IiIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuZXJyb3IoIG1zZyApOyBicmVhazsKICAgIGNhc2UgImZhdGFsIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLmVycm9yKCAiRkFUQUw6ICIgKyBtc2cgKTsgYnJlYWs7CiAgICBkZWZhdWx0ICAgICAgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5lcnJvciggIlVOS05PV04gTE9HTEVWRUw6ICIgKyBsZXZlbCArICIgOiAiICsgbXNnICk7IGJyZWFrOwogICAgfQp9OwoKLy8gQ2hlY2sgbGV2ZWwgZXhwb3J0Cl9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IGZ1bmN0aW9uICggbGV2ZWwgKSB7CiAgICBzd2l0Y2ggKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc1RyYWNlRW5hYmxlZCgpOwogICAgY2FzZSAiZGVidWciIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzRGVidWdFbmFibGVkKCk7CiAgICBjYXNlICJpbmZvIiAgOiByZXR1cm4gX19Mb2dDb3JlX2xvZy5sb2dnZXIuaXNJbmZvRW5hYmxlZCgpOwogICAgY2FzZSAid2FybiIgIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzV2FybkVuYWJsZWQoKTsKICAgIGNhc2UgImVycm9yIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc0Vycm9yRW5hYmxlZCgpOwogICAgZGVmYXVsdDogcmV0dXJuIHRydWU7CiAgICB9Owp9CgoKLy8gQXR0YWNoIHRoZSBsb2dnZXIgdmFyaWFibGUgdG8gdGhlIGdsb2JhbCBsb2dnZXIgb25seSBvbmNlLCBub3QgZm9yIGVhY2gKLy8gZnVuY3Rpb24gY2FsbC4KLy8gU29ydCBvZiB0aGUgc3RhdGljIHdheSB0byBkbyBpdC4KCi8vIFRoZSBuZXh0IGxpbmUgY2FuIGJpbmQgKmRpcmVjdGx5KiB0byBsb2c0ai4gSXQgaXMgb25seSBpbmNsdWRlZCBmb3IKLy8gcmVmZXJlbmNlLCBhcwovLyB0aGUgZmFjYWRlIGJlbG93IGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gZG8gaXQuCi8vIF9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLmFwYWNoZS5sb2c0ai5Mb2dnZXIuZ2V0TG9nZ2VyKAovLyAiSmF2YVNjcmlwdC5Mb2dnZXIiICk7CgovLyBCaW5kaW5nIHRvIHRoZSBzbGY0aiBmYWNhZGUuCl9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLnNsZjRqLkxvZ2dlckZhY3RvcnkKICAgIC5nZXRMb2dnZXIoICJKYXZhU2NyaXB0LkxvZ2dlciIgKTsK", "moduleName": "LogCore"}, {"javascript": "", "moduleName": "Lodash"}, {"javascript": "LyoqIEBmaWxlIFByb3ZpZGUgYSBHbG9iYWwgc3ltYm9sICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdHbG9iYWwnIF07CgovLyBJbXBvcnRhbnQgbm90ZTogVGhpcyBtb2R1bGUgY2FuIG5vdCB1c2UgdGhlIExvZyBtb2R1bGUsIGFzIHRoZSBMb2cKLy8gbW9kdWxlIHVzZXMgdGhpcyBtb2R1bGUuIEFuZCwgaG9uZXN0ZWx5LCB3aGF0IHdvdWxkIHlvdSBsb2c/Ci8vIFJpZ2h0LiBKdXN0IGRvbid0IGRvIGl0LiBOb3csIG1vdmUgYWxvbmcsIG5vdGhpbmcgdG8gc2VlIGhlcmUuCgovKioKICogUHJvdmlkZSBjb25zaXN0ZW50IGFjY2VzcyB0byB0aGUgR2xvYmFsIHZhcmlhYmxlLgogKgogKiBXaGVuIHVzZWQsIHRoaXMgbW9kdWxlIHdpbGwgaW50cm9kdWNlIGEgZ2xvYmFsIHZhcmlhYmxlIGNhbGxlZAogKiBgR2xvYmFsYCwgdGhhdCBpcyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsIG9iamVjdC4KICogCiAqIFRoaXMgbW9kdWxlIGRvZXMgbm90IHByb3ZpZGUgYW55IG1ldGhvZHMgb3IgbWVtYmVyLCBiZXNpZGVzIHRoZQogKiBHbG9iYWwgdmFyaWFibGUuCiAqCiAqIEB0eXBlIHtvYmplY3R9CiAqIEBleGFtcGxlCi8vIFRoaXMgbG9hZHMgdGhlIEdsb2JhbCBtb2R1bGUsIGFuZCBjcmVhdGVzIGEgdmFyaWFibGUgY2FsbGVkIEdsb2JhbAp1c2UoICJHbG9iYWwiICk7CiogQG5hbWVzcGFjZQogKiBAbmFtZSBHbG9iYWwgKi8KdmFyIEdsb2JhbCA9IGZ1bmN0aW9uKCApIHsKICAgIC8qKiBHZXQgYWNjZXNzIHRvIHRoZSBHbG9iYWwgdmFyaWFibGUuCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsCiAgICAgKiB2YXJpYWJsZS4gSW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLCB0aGlzIGlzIGVxdWFsIHRvIHRoZQogICAgICogdGhpcyB2YXJpYWJsZSBhdCB0b3BsZXZlbCBzY29wZSwgYnV0IHJlcXVpcmVzIGEgYml0IG1vcmUgdG8gZ2V0CiAgICAgKiB0bywgaWYgbm90IGEgdG9wbGV2ZWwgc2NvcGUuCiAgICAgKiAKICAgICAqIEB0eXBle2Z1bmN0aW9ufQogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm4ge29iamVjdH0gQSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi8KICAgIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuICggZnVuY3Rpb24oICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0gKSggKTsKICAgIH07CiAgICAvLyByZXR1cm4gcmVzdWx0IG9mIGNhbGwgdG8gZ2V0R2xvYmFsLCBpLmUuIHJlZiB0byBnbG9iYWwKICAgIHJldHVybiBnZXRHbG9iYWwoICk7Cn0oICk7Cg==", "moduleName": "Global"}, {"javascript": "", "moduleName": "AdminData"}, {"javascript": "", "moduleName": "XmlUtil"}, {"javascript": "", "moduleName": "XMLDOM"}, {"javascript": "Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpFWFBPUlRFRF9TWU1CT0xTID0gWyAnRW5naW5lJyBdOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovKioKICoKICoKICogQGNvbnN0cnVjdG9yCiAqLwp2YXIgRW5naW5lID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgU1BJREVSTU9OS0VZID0gInNwaWRlcm1vbmtleSI7CiAgICB2YXIgUkhJTk8gPSAicmhpbm8iOwogICAgdmFyIE5BU0hPUk4gPSAibmFzaG9ybiI7CgogICAgZnVuY3Rpb24gaXNFbmdpbmUoIG5hbWUgKSB7CiAgICAgICAgc3dpdGNoKCBuYW1lICkgewogICAgICAgICAgICBjYXNlIFJISU5POiB7CiAgICAgICAgICAgICAgICByZXR1cm4gKCB0eXBlb2YgUGFja2FnZXMgPT09ICJvYmplY3QiICkgJiYgKCB0eXBlb2YgUGFja2FnZXMuamF2YSA9PT0gIm9iamVjdCIgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSBOQVNIT1JOOiB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mKCBfX2Vudmlyb25tZW50ICkgPT09ICJvYmplY3QiOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICBpZiggbmFtZSAhPT0gU1BJREVSTU9OS0VZICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gIWlzRW5naW5lKCBSSElOTyApICYmICFpc0VuZ2luZSggTkFTSE9STiApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgJ1NQSURFUk1PTktFWSc6IFNQSURFUk1PTktFWSwKICAgICAgICAnUkhJTk8nOiBSSElOTywKICAgICAgICAnTkFTSE9STic6IE5BU0hPUk4sCiAgICAgICAgJ2lzRW5naW5lJzogaXNFbmdpbmUKICAgIH0KfSgpOwo=", "moduleName": "Engine"}, {"javascript": "", "moduleName": "XPath"}, {"javascript": "LyoqIEBmaWxlIE5hbWVzcGFjZXMgYW5kIG1hcHMgb2YgbmFtZXNwYWNlcyBmb3IgdXNlIHdpdGggWE1MRE9NIGFuZCBYUGF0aCAqLwpFWFBPUlRFRF9TWU1CT0xTID0gWyAnWG1sTmFtZXNwYWNlcycgXTsKCi8qKgogKiBNb2R1bGUgdGhhdCBob2xkcyBhIG51bWJlciBvZiBuYW1lc3BhY2UgZGVjbGFyYXRpb25zLi4KICoKICogVGhpcyBuYW1lc3BhY2UgaG9sZHMgYSBudW1iZXIgb2YgbmFtZXNwYWNlIGRlY2xhcmF0aW9ucyB0aGF0IGFyZSB1c2VkCiAqIGFzIGNvbnN0YW50cyBpbiBwYXJ0cyBvZiB0aGUgY29kZS4KICoKICogQHR5cGUge25hbWVzcGFjZX0KICogQG5hbWVzcGFjZQogKiBAbmFtZSBYbWxOYW1lc3BhY2VzICovCnZhciBYbWxOYW1lc3BhY2VzID0gZnVuY3Rpb24oICkgewoKICAgIHZhciB0aGF0ID0ge307CgogICAgdGhhdC5uYW1lc3BhY2VNYXAgPSB7fTsKICAgIHRoYXQucmV2ZXJzZU5hbWVzcGFjZU1hcCA9IHt9OwoKICAgIHRoYXQuTmFtZXNwYWNlID0gZnVuY3Rpb24gKHByZWZpeCwgdXJpKSB7CiAgICAgICAgdmFyIG5zID0ge307CiAgICAgICAgbnMucHJlZml4ID0gcHJlZml4OwogICAgICAgIG5zLnVyaSA9IHVyaTsKICAgICAgICBucy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByZWZpeCArICI9IiArIHVyaSB9OyAvLyBGb3IgbG9nZ2luZwogICAgICAgIHRoYXQubmFtZXNwYWNlTWFwW3ByZWZpeF0gPSB1cmk7CiAgICAgICAgdGhhdC5yZXZlcnNlTmFtZXNwYWNlTWFwW3VyaV0gPSBwcmVmaXg7CiAgICAgICAgcmV0dXJuIG5zOwogICAgfTsKCiAgICAvKiogeG1sbnMgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGB4bWxuc2AuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy54bWxucyAqLwogICAgdGhhdC54bWxucyA9IHRoYXQuTmFtZXNwYWNlKCAieG1sbnMiLCAiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8iICk7CiAgICAvKiogdWJmIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgdWJmYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly93d3cuZGJjLmRrL3ViZmAKICAgICAqCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy51YmYgKi8KICAgIHRoYXQudWJmID0gdGhhdC5OYW1lc3BhY2UoICJ1YmYiLCAiaHR0cDovL3d3dy5kYmMuZGsvdWJmIiApOwogICAgLyoqIG9ycyBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYG9yc2AuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vb3NzLmRiYy5kay9ucy9vcGVucmVzb3VyY2VzaGFyaW5nYC4KICAgICAqCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5vcnMgKi8KICAgIHRoYXQub3JzID0gdGhhdC5OYW1lc3BhY2UoICJvcnMiLCAiaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbnJlc291cmNlc2hhcmluZyIgKTsKICAgIC8qKiBob2xkaW5ncyBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGhzYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly9vc3MuZGJjLmRrL25zL2hvbGRpbmdzYC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmhvbGRpbmdzICovCiAgICB0aGF0LmhvbGRpbmdzID0gdGhhdC5OYW1lc3BhY2UoICJocyIsICJodHRwOi8vb3NzLmRiYy5kay9ucy9ob2xkaW5ncyIgKTsKICAgIC8qKiBpbGw1IG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaWxsNWAuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGAKICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmlsbDUgKi8KICAgIHRoYXQuaWxsNSA9IHRoYXQuTmFtZXNwYWNlKCAiaWxsNSIsICJodHRwOi8vd3d3LmxvYy5nb3YvejM5NTAvYWdlbmN5L2RlZm5zL2lsbDUiICk7CiAgICAvKiogemlnaG9sZGluZ3MgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBuYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly93d3cubG9jLmdvdi96Mzk1MC9hZ2VuY3kvZGVmbnMvSG9sZGluZ3NTY2hlbWE4YC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLnppZ2hvbGRpbmdzICovCiAgICB0aGF0LnppZ2hvbGRpbmdzID0gdGhhdC5OYW1lc3BhY2UoICJuIiwgImh0dHA6Ly93d3cubG9jLmdvdi96Mzk1MC9hZ2VuY3kvZGVmbnMvSG9sZGluZ3NTY2hlbWE4IiApOwogICAgLyoqIG9wZW5hZ2VuY3kgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBvYWAuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vb3NzLmRiYy5kay9ucy9vcGVuYWdlbmN5YC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLm9wZW5hZ2VuY3kgKi8KICAgIHRoYXQub3BlbmFnZW5jeSA9IHRoYXQuTmFtZXNwYWNlKCAib2EiLCAiaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbmFnZW5jeSIgKTsKICAgIC8qKiB0aW5nIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgdGluZ2AuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vd3d3LmRiYy5kay90aW5nYC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLnRpbmcgKi8KICAgIHRoYXQudGluZyA9IHRoYXQuTmFtZXNwYWNlKCAidGluZyIsICJodHRwOi8vd3d3LmRiYy5kay90aW5nIiApOwogICAgLyoqIGVzIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgZXNgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvZXNgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMuZXMgKi8KICAgIHRoYXQuZXMgPSB0aGF0Lk5hbWVzcGFjZSggImVzIiwgImh0dHA6Ly9vc3MuZGJjLmRrL25zL2VzIiApOwogICAgLyoqIGRrYWJtIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgZGthYm1gLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL2JpYmxzdGFuZGFyZC5kay9hYm0vbmFtZXNwYWNlL2RrYWJtL2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5ka2FibSAqLwogICAgdGhhdC5ka2FibSA9IHRoYXQuTmFtZXNwYWNlKCAiZGthYm0iLCAiaHR0cDovL2JpYmxzdGFuZGFyZC5kay9hYm0vbmFtZXNwYWNlL2RrYWJtLyIgKTsKICAgIC8qKiBhYyBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGFjYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly9iaWJsc3RhbmRhcmQuZGsvYWMvbmFtZXNwYWNlL2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5hYyAqLwogICAgdGhhdC5hYyA9IHRoYXQuTmFtZXNwYWNlKCAiYWMiLCAiaHR0cDovL2JpYmxzdGFuZGFyZC5kay9hYy9uYW1lc3BhY2UvIiApOwogICAgLyoqIGRrZGNwbHVzIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgZGtkY3BsdXNgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL2JpYmxzdGFuZGFyZC5kay9hYm0vbmFtZXNwYWNlL2RrZGNwbHVzL2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5ka2RjcGx1cyAqLwogICAgdGhhdC5ka2RjcGx1cyA9IHRoYXQuTmFtZXNwYWNlKCAiZGtkY3BsdXMiLCAiaHR0cDovL2JpYmxzdGFuZGFyZC5kay9hYm0vbmFtZXNwYWNlL2RrZGNwbHVzLyIgKTsKICAgIC8qKiBvc3MgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBvc3NgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvb3NzdHlwZXNgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMub3NzICovCiAgICB0aGF0Lm9zcyA9IHRoYXQuTmFtZXNwYWNlKCAib3NzIiwgImh0dHA6Ly9vc3MuZGJjLmRrL25zL29zc3R5cGVzIiApOwogICAgLyoqIGRjIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgZGNgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS9gLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMuZGMgKi8KICAgIHRoYXQuZGMgPSB0aGF0Lk5hbWVzcGFjZSggImRjIiwgImh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiApOwogICAgLyoqIG9haSBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYG9haWAuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vd3d3Lm9wZW5hcmNoaXZlcy5vcmcvT0FJLzIuMC9gLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMub2FpICovCiAgICB0aGF0Lm9haSA9IHRoYXQuTmFtZXNwYWNlKCAib2FpIiwgImh0dHA6Ly93d3cub3BlbmFyY2hpdmVzLm9yZy9PQUkvMi4wLyIgKTsKCiAgICAvKiogb2FpX2RjIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgb2FpX2RjYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly93d3cub3BlbmFyY2hpdmVzLm9yZy9PQUkvMi4wL29haV9kYy9gLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMub2FpX2RjICovCiAgICB0aGF0Lm9haV9kYyA9IHRoYXQuTmFtZXNwYWNlKCAib2FpX2RjIiwgImh0dHA6Ly93d3cub3BlbmFyY2hpdmVzLm9yZy9PQUkvMi4wL29haV9kYy8iICk7CiAgICAvKiogZGN0ZXJtcyBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGRjdGVybXNgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICovCiAgICB0aGF0LmRjdGVybXMgPSB0aGF0Lk5hbWVzcGFjZSggImRjdGVybXMiLCAiaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zLyIgKTsKICAgIC8qKiB4c2kgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGB4c2lgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMueHNpICovCiAgICB0aGF0LnhzaSA9IHRoYXQuTmFtZXNwYWNlKCAieHNpIiwgImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiApOwogICAgLyoqIG1hcmN4IG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgbWFyY3hgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaW5mbzpsYy94bWxucy9tYXJjeGNoYW5nZS12MWAuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5tYXJjeCAqLwogICAgdGhhdC5tYXJjeCA9IHRoYXQuTmFtZXNwYWNlKCAibWFyY3giLCAiaW5mbzpsYy94bWxucy9tYXJjeGNoYW5nZS12MSIgKTsKICAgIC8qKiBteCBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYG14YC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly93d3cubG9jLmdvdi9NQVJDMjEvc2xpbWAuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5teCAqLwogICAgdGhhdC5teCA9IHRoYXQuTmFtZXNwYWNlKCAibXgiLCAiaHR0cDovL3d3dy5sb2MuZ292L01BUkMyMS9zbGltIiApOwogICAgLyoqIGRvY2Jvb2sgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBkb2Nib29rYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly9kb2Nib29rLm9yZy9ucy9kb2Nib29rYC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmRvY2Jvb2sgKi8KICAgIHRoYXQuZG9jYm9vayA9IHRoYXQuTmFtZXNwYWNlKCAiZG9jYm9vayIsICJodHRwOi8vZG9jYm9vay5vcmcvbnMvZG9jYm9vayIgKTsKICAgIC8qKiBvc28gbmFtZXNwYWNlLgogICAgICoKIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBvc29gLiAgICAgKiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbnNlYXJjaG9iamVjdHNgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMub3NvICovCiAgICB0aGF0Lm9zbyA9IHRoYXQuTmFtZXNwYWNlKCAib3NvIiwgImh0dHA6Ly9vc3MuZGJjLmRrL25zL29wZW5zZWFyY2hvYmplY3RzIiApOwogICAgLyoqIHhzZCBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYHhzZGAuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMueHNkICovCiAgICB0aGF0LnhzZCA9IHRoYXQuTmFtZXNwYWNlKCAieHNkIiwgImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIyIgKTsKICAgIC8qKiB4bWwgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGB4bWxgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlYC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLnhtbCAqLwogICAgdGhhdC54bWwgPSB0aGF0Lk5hbWVzcGFjZSggInhtbCIsICJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UiICk7CiAgICAvKiogcmRmIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgcmRmYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMucmRmICovCiAgICB0aGF0LnJkZiA9IHRoYXQuTmFtZXNwYWNlKCAicmRmIiwgImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiICk7CiAgICAvKiogc2tvcyBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYHNrb3NgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL3d3dy53My5vcmcvMjAwOC8wNS9za29zI2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5za29zICovCiAgICB0aGF0LnNrb3MgPSB0aGF0Lk5hbWVzcGFjZSggInNrb3MiLCAiaHR0cDovL3d3dy53My5vcmcvMjAwOC8wNS9za29zIyIgKTsKICAgIC8qKiBmb2FmIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgZm9hZmAuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8veG1sbnMuY29tL2ZvYWYvMC4xYC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmZvYWYgKi8KICAgIHRoYXQuZm9hZiA9IHRoYXQuTmFtZXNwYWNlKCAiZm9hZiIsICJodHRwOi8veG1sbnMuY29tL2ZvYWYvMC4xIiApOwogICAgLyoqIG9mIG5hbWVzcGFjZS4KICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBvZmAuCiAgICAgKiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbmZvcm1hdGAuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5vZiAqLwogICAgdGhhdC5vZiA9IHRoYXQuTmFtZXNwYWNlKCAib2YiLCAiaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbmZvcm1hdCIgKTsKICAgIC8qKiBvZm8gbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBvZm9gLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbmZvcm1hdG91dHB1dGAuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5vZm8gKi8KICAgIHRoYXQub2ZvID0gdGhhdC5OYW1lc3BhY2UoICJvZm8iLCAiaHR0cDovL29zcy5kYmMuZGsvbnMvb3BlbmZvcm1hdG91dHB1dCIgKTsKICAgIC8qKiBiaWJkayBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGJpYmRrYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly9vc3MuZGJjLmRrL25zL29wZW5mb3JtYXRvdXRwdXQvYmlibGlvdGVrZGtkaXNwbGF5YC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmJpYmRrICovCiAgICB0aGF0LmJpYmRrID0gdGhhdC5OYW1lc3BhY2UoICJiaWJkayIsICJodHRwOi8vb3NzLmRiYy5kay9ucy9vcGVuZm9ybWF0b3V0cHV0L2JpYmxpb3Rla2RrZGlzcGxheSIgKTsKICAgIC8qKiBvcyBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYG9zYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGh0dHA6Ly9vc3MuZGJjLmRrL25zL29wZW5zZWFyY2hgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMub3MgKi8KICAgIHRoYXQub3MgPSB0aGF0Lk5hbWVzcGFjZSggIm9zIiwgImh0dHA6Ly9vc3MuZGJjLmRrL25zL29wZW5zZWFyY2giICk7CiAgICAvKiogaXNvMTg2MjYgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBuMWAuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vaWxsdHJhbnNhY3Rpb25zLm9yZy8yMDEzL2lzbzE4NjI2YC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmlzbzE4NjI2ICovCiAgICB0aGF0LmlzbzE4NjI2ID0gdGhhdC5OYW1lc3BhY2UoICJuMSIsICJodHRwOi8vaWxsdHJhbnNhY3Rpb25zLm9yZy8yMDEzL2lzbzE4NjI2IiApOwogICAgLyoqIGxuIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgbG5gLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvbGlua3NgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMubG4gKi8KICAgIHRoYXQubG4gPSB0aGF0Lk5hbWVzcGFjZSggImxuIiwgImh0dHA6Ly9vc3MuZGJjLmRrL25zL2xpbmtzIiApOwoKICAgIC8qKiBmb3htbCBuYW1lc3BhY2UuCiAgICAgKgogICAgICogVGhlIHByZWZpeCBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGZveG1sYC4gVGhlIHVyaSBmb3IgdGhpcyBuYW1lc3BhY2UgaXMgYGluZm86ZmVkb3JhL2ZlZG9yYS1zeXN0ZW06ZGVmL2ZveG1sI2AuCiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfQogICAgICogQG5hbWUgWG1sTmFtZXNwYWNlcy5mb3htbCAqLwogICAgdGhhdC5mb3htbCA9IHRoYXQuTmFtZXNwYWNlKCAiZm94bWwiLCAiaW5mbzpmZWRvcmEvZmVkb3JhLXN5c3RlbTpkZWYvZm94bWwjIiApOwoKICAgIC8qKiBmZWRvcmEgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBmZWRvcmFgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaW5mbzpmZWRvcmEvYC4KICAgICAqIEB0eXBlIHtOYW1lc3BhY2V9CiAgICAgKiBAbmFtZSBYbWxOYW1lc3BhY2VzLmZlZG9yYSAqLwogICAgdGhhdC5mZWRvcmEgPSB0aGF0Lk5hbWVzcGFjZSggImZlZG9yYSIsICJpbmZvOmZlZG9yYS8iICk7CgogICAgLyoqIFNPQVAtRU5WIG5hbWVzcGFjZS4KICAgICAqCiAgICAgKiBUaGUgcHJlZml4IGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgU09BUC1FTlZgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS9gLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMuc29hcGVudiAqLwogICAgdGhhdC5zb2FwZW52ID0gdGhhdC5OYW1lc3BhY2UoICJTT0FQLUVOViIsICJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VudmVsb3BlLyIgKTsKCiAgICAvKiogIFRoZSBuYW1lc3BhY2UgZm9yIHRoZQogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBkYXRhaW9jb250YWluZXJgLiBUaGUgdXJpIGZvciB0aGlzIG5hbWVzcGFjZSBpcyBgaHR0cDovL29zcy5kYmMuZGsvbnMvZGF0YS1jb250YWluZXJgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMuZGF0YWlvY29udGFpbmVyICovCiAgICB0aGF0LmRhdGFpb2NvbnRhaW5lciA9IHRoYXQuTmFtZXNwYWNlKCAiZGF0YWlvY29udGFpbmVyIiwgImh0dHA6Ly9vc3MuZGJjLmRrL25zL2RhdGEtY29udGFpbmVyIiApOwoKICAgIC8qKiBmZWRvcmEgbmFtZXNwYWNlLgogICAgICoKICAgICAqIFRoZSBwcmVmaXggZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGB6c2AuIFRoZSB1cmkgZm9yIHRoaXMgbmFtZXNwYWNlIGlzIGBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9ucy9zZWFyY2gtd3Mvc3J1UmVzcG9uc2VgLgogICAgICogQHR5cGUge05hbWVzcGFjZX0KICAgICAqIEBuYW1lIFhtbE5hbWVzcGFjZXMuenMgKi8KICAgIHRoYXQuenMgPSB0aGF0Lk5hbWVzcGFjZSggInpzIiwgImh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL25zL3NlYXJjaC13cy9zcnVSZXNwb25zZSIgKTsKCiAgICByZXR1cm4gdGhhdDsKfSggKTsKCg==", "moduleName": "XmlNamespaces"}, {"javascript": "", "moduleName": "Util"}, {"javascript": "", "moduleName": "Marc"}, {"javascript": "", "moduleName": "MarcClasses"}, {"javascript": "LyoqIEBmaWxlIFN5c3RlbSBtb2R1bGUuIFByb3ZpZGVzIFN5c3RlbSBjbGFzcywgdGhhdCBjYW4gYmUgcG9wdWxhdGVkIGJ5IG90aGVyIG1vZHVsZXMuICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdTeXN0ZW0nIF07CgovKioKICogUHJvdmlkZXMgYSBuYW1lc3BhY2UgdG8gYWRkIGxvd2xldmVsL3N5c3RlbSBsaWtlIGZ1bmN0aW9uYWxpdHkgdG8uCiAqIAogKiBNZXRob2RzIGFuZCBtb2R1bGVzIHJlbGF0ZWQgdG8gbG93LWxldmVsIHN0dWZmIGlzIGFkZGVkIGludG8gdGhpcwogKiBuYW1lc3BhY2UuIAogKgogKiBUbyBhY3R1YWxseSB1c2UgbW9zdCBvZiB0aGUgZnVuY3Rpb25zIGluIHRoaXMgbmFtZXNwYWNlLCB5b3UgbmVlZAogKiB0byBsb2FkIGFkZGl0aW9uYWwgbW9kdWxlcy4gRS5nLiB0byBiZSBhYmxlIHRvIHVzZSB0aGUgCiAqIHtAbGluayBTeXN0ZW0ucmVhZEZpbGV9IGZ1bmN0aW9uLCB5b3UgbXVzdCB1c2UgdGhlIG1vZHVsZSBgUmVhZEZpbGVgLiB0bwogKiB1c2UgdGhlIHtAbGluayBTeXN0ZW0ucHJpbnR9IGZ1bmN0aW9uIHlvdSBtdXN0IHVzZSB0aGUgbW9kdWxlCiAqIGBQcmludGAuIEZvciBhbGwgZnVuY3Rpb25zLCBpdCBpcyBpbmRpY2F0ZWQgd2hpY2ggbW9kdWxlIHRoZXkgYXJlCiAqIHBhcnQgb2YsIHRoYXQgaXMsIHdoaWNoIG1vZHVsZSB5b3Ugc2hvdWxkIHVzZSB0byBnZXQgYWNjZXNzIHRvIHRoZQogKiBmdW5jdGlvbi4KICogCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIFN5c3RlbSAqLwp2YXIgU3lzdGVtID0gZnVuY3Rpb24oICkgewogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgICAqIEFycmF5IGNvbnRhaW5pbmcgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgc3lzdGVtLCBpZiBpbnZva2VkIGludGVyYWN0aXZlbHkuCiAgICAgKiAKICAgICAqIENvbnRhaW5zIGFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBzeXN0ZW0sIGlmIHVzZWQgaW50ZXJhY3RpdmVseS4gSXMKICAgICAqIGFuIGVtcHR5IGFycmF5IGlmIG5vdC4gCiAgICAgKgogICAgICogQGV4YW1wbGUKLy8gR2V0IHRoZSBmaXJzdCBhcmd1bWVudCB0byBhIHNjcmlwdCB3aGVuIGNhbGxlZCBpbiBhIHNoZWxsCnVzZSggIlN5c3RlbSIgKTsKaWYgKCBTeXN0ZW0uYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7CiAgdmFyIGZpcnN0QXJnID0gU3lzdGVtLmFyZ3VtZW50c1swXTsKfQogICAgICoKICAgICAqIEBuYW1lIFN5c3RlbS5hcmd1bWVudHMKICAgICAqIEB0eXBlIHtTdHJpbmdbXX0KICAgICAqIEBwcm9wZXJ0eSAqLwogICAgdGhhdC5hcmd1bWVudHMgPSBbIF07CgogICAgLyoqIAogICAgICogU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGNhbGxlZCBzY3JpcHQsIGlmIGludm9rZWQgaW50ZXJhY3RpdmVseS4KICAgICAqIAogICAgICogQGV4YW1wbGUKLy8gUHJpbnQgdGhlIG5hbWUgb2YgdGhlIGNhbGxpbmcgc2NyaXB0CnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiUHJpbnQiICk7CnByaW50KCBTeXN0ZW0uc2NyaXB0bmFtZSArICJcbiIgKTsKICAgICAqIAogICAgICogQG5hbWUgU3lzdGVtLnNjcmlwdG5hbWUKICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgKiBAcHJvcGVydHkgKi8KICAgIHRoYXQuc2NyaXB0bmFtZSA9ICIiOwoKICAgIC8qKiBQcm9wZXJ0eSB0byBkZWZpbmUgdGhlIFJoaW5vIHBsYXRmb3JtLgogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtX3JoaW5vCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3JoaW5vID0gIlJoaW5vIjsKCiAgICAvKiogUHJvcGVydHkgdG8gZGVmaW5lIHRoZSBTcGlkZXJNb25rZXkgcGxhdGZvcm0uCiAgICAgKiBAbmFtZSBTeXN0ZW0ucGxhdGZvcm1fc3BpZGVybW9ua2V5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3NwaWRlcm1vbmtleSA9ICJTcGlkZXJNb25rZXkiOwoKICAgIC8qKgogICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSBwbGF0Zm9ybSB3ZSBhcmUgY3VycmVudGx5IHJ1bm5pbmcgdW5kZXIuCiAgICAgKgogICAgICogVGhpcyByZXR1cm5zIHRoZSBuYW1lIG9mIG91ciBwbGF0Zm9ybSwgb25lIG9mICJSaGlubyIgb3IgIlNwaWRlck1vbmtleSIuCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBtZWFudCBmb3IgdGhlIHZlcnkgcmFyZSBzaXR1YXRpb25zIHdoZXJlIHdlIGhhdmUgdG8gZG8KICAgICAqIHNvbWV0aGluZyBzbGlnaHRseSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHBsYXRmb3JtLCBpbiBvcmRlciB0byAKICAgICAqIHdvcmsgYXJvdW5kIGRpZmZlcmVuY2VzLgogICAgICoKICAgICAqIFVzZSB0aGUgcHJvcGVydGllcyBwbGF0Zm9ybV9yaGlubyBhbmQgcGxhdGZvcm1fc3BpZGVybW9ua2V5IHRvCiAgICAgKiBjaGVjayBhZ2FpbnN0IHRoaXMgcHJvcGVydHkuCiAgICAgKgogICAgICogKipOb3RlOioqIE1vcmUgcGxhdGZvcm1zIG1heSBiZSBhZGRlZCBpbiB0aGUgZnV0dXJlLiBBbHdheXMKICAgICAqIGNoZWNrIGV4cGxpY2l0bHkgZm9yIGEgc3BlY2lmaWMgcGxhdGZvcm0uCgogICAgICogKipOb3RlOioqIE9OTFkgVVNFIFRISVMgTUVUSE9EIEFTIEEgTEFTVCBSRVNPUlQuIFRoZSBwbGF0Zm9ybXMgYmVoYXZlIGFsbW9zdCAKICAgICAqIGV4YWN0bHkgdGhlIHNhbWUsIGFuZCB0aGUgY29kZSBzaG91bGQgbm90IGJlIHNwcmlua2xlZCB3aXRoICJpZiBwbGF0Zm9ybSB0aGVuIi4KICAgICAqIEl0IGlzIHN1c3BlY3RlZCB0aGlzIGlzIG9ubHkgbmVlZGVkIGZvciBFNFggY29kZSB0aGF0IGlzIGJyb2tlbiBhbnl3YXkuCiAgICAgKiBJZiB5b3UgdXNlIHRoaXMgZnVuY3Rpb24sIGF0IGxlYXN0IHdyYXAgaXQgaW4gYSBsaWJyYXJ5L21vZHVsZSBzdWNoIHRoYXQKICAgICAqIHlvdSBjYW4gY2hhbmdlIHRoZSBpbXBsZW1lbnRhdGlvbiBsYXRlciwgd2l0aG91dCBicmVha2luZyB0aGUgaW50ZXJmYWNlLgogICAgICogIAogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtICA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggKCB0eXBlb2YgUGFja2FnZXMgPT09ICJvYmplY3QiICkgJiYgKCB0eXBlb2YgUGFja2FnZXMuamF2YSA9PT0gIm9iamVjdCIgKSApIHsKICAgICAgICAgICAgcmV0dXJuICJSaGlubyI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJTcGlkZXJNb25rZXkiOwogICAgICAgIH0KICAgIH0oKTsgLy8gTm90ZSwgbm90IGEgZnVuY3Rpb24sIGEgdmFsdWUuCgoKICAgIHJldHVybiB0aGF0Owp9KCApOwo=", "moduleName": "System"}, {"javascript": "", "moduleName": "MarcClassesCore"}, {"javascript": "", "moduleName": "MarcMatchers"}, {"javascript": "CkVYUE9SVEVEX1NZTUJPTFMgPSBbICdOb2RlVHlwZXMnIF07Cgp2YXIgTm9kZVR5cGVzID0gIHsKICAgIEVMRU1FTlRfTk9ERSA6IDEsCiAgICBBVFRSSUJVVEVfTk9ERSA6IDIsCiAgICBURVhUX05PREUgOiAzLAogICAgQ0RBVEFfU0VDVElPTl9OT0RFIDogNCwKICAgIEVOVElUWV9SRUZFUkVOQ0VfTk9ERSA6IDUsCiAgICBFTlRJVFlfTk9ERSA6IDYsCiAgICBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgOiA3LAogICAgQ09NTUVOVF9OT0RFIDogOCwKICAgIERPQ1VNRU5UX05PREUgOiA5LAogICAgRE9DVU1FTlRfVFlQRV9OT0RFIDogMTAsCiAgICBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIDogMTEsCiAgICBOT1RBVElPTl9OT0RFIDogMTIKfTs=", "moduleName": "NodeTypes"}, {"javascript": "LyoqIEBmaWxlIE1hcmNYY2hhbmdlVXRpbCBtb2R1bGUgICovDQoNCg0KRVhQT1JURURfU1lNQk9MUyA9IFsgJ01hcmNYY2hhbmdlVXRpbCcgXTsNCg0KdXNlKCAiTG9nIiApOw0KdXNlKCAiWG1sVXRpbCIgKTsNCg0KDQovKioNCiAqIE1vZHVsZSB0aGF0IGluY2x1ZGVzIGRpZmZlcmVudCBmdW5jdGlvbnMgZm9yIG1vZGlmeWluZyBtYXJjWGNoYW5nZSByZWNvcmRzDQogKg0KICogQHR5cGUge25hbWVzcGFjZX0NCiAqIEBuYW1lc3BhY2UNCiAqLw0KDQp2YXIgTWFyY1hjaGFuZ2VVdGlsID0gZnVuY3Rpb24oKSB7DQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCByZW1vdmVzIGFsbCBsZXR0ZXIgZmllbGRzIGxpa2UgZDA5IGFuZCBzMTAgZnJvbSBhIG1hcnhDaGFuZ2UgcmVjb3JkDQogICAgICoNCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259DQogICAgICogQHN5bnRheCBNYXJjWGNoYW5nZVV0aWwucmVtb3ZlTGV0dGVyRmllbGRzKCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7RG9jdW1lbnR9IHJlY29yZCB0aGUgbWFyY1hjaGFuZ2UgcmVjb3JkDQogICAgICogQGZ1bmN0aW9uDQogICAgICogQHJldHVybiB7RG9jdW1lbnR9IHRoZSBtYXJjWGNoYW5nZSByZWNvcmQgd2l0aG91dCBsZXR0ZXIgZmllbGRzDQogICAgICogQG5hbWUgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUxldHRlckZpZWxkcw0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHJlbW92ZUxldHRlckZpZWxkcyggcmVjb3JkICkgew0KDQogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1hcmNYY2hhbmdlVXRpbC5yZW1vdmVMZXR0ZXJGaWVsZHMgZnVuY3Rpb24iICk7DQoNCiAgICAgICAgdmFyIGVsZW1lbnRzID0gWFBhdGguc2VsZWN0KCAiL21hcmN4OmNvbGxlY3Rpb24vbWFyY3g6cmVjb3JkL21hcmN4OmRhdGFmaWVsZCIsIHJlY29yZCApOw0KDQogICAgICAgIGZvciAoIHZhciBpbmRleCA9IDA7IGluZGV4IDwgZWxlbWVudHMubGVuZ3RoOyBpbmRleCsrICkgew0KDQogICAgICAgICAgICB2YXIgY2hpbGQgPSBlbGVtZW50c1sgaW5kZXggXTsNCg0KICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IFhQYXRoLnNlbGVjdE5vZGUoICJAdGFnIiwgY2hpbGQgKTsNCiAgICAgICAgICAgIGlmICggYXR0cmlidXRlLnZhbHVlLm1hdGNoKCAvW2Etel0vaSApICkgew0KICAgICAgICAgICAgICAgIFhtbFV0aWwuZGVsZXRlTm9kZSggY2hpbGQgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUxldHRlckZpZWxkcyBmdW5jdGlvbiIgKTsNCiAgICAgICAgcmV0dXJuIHJlY29yZDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiAwMDFiIGluIGFsbCBtYXJjeDpyZWNvcmRzIGluIGEgbWFyY3g6Y29sbGVjdGlvbg0KICAgICAqDQogICAgICogQHR5cGUge2Z1bmN0aW9ufQ0KICAgICAqIEBzeW50YXggTWFyY1hjaGFuZ2VVdGlsLmNoYW5nZTAwMWJWYWx1ZSggcmVjb3JkQ29sbGVjdGlvbiApDQogICAgICogQHBhcmFtIHtEb2N1bWVudH0gcmVjb3JkQ29sbGVjdGlvbiB0aGUgbWFyY1hjaGFuZ2UgcmVjb3JkIGNvbGxlY3Rpb24NCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3MDAxYlZhbHVlIHRoZSBuZXcgMDAxYiB2YWx1ZQ0KICAgICAqIEBmdW5jdGlvbg0KICAgICAqIEByZXR1cm4ge0RvY3VtZW50fSB0aGUgbWFyY1hjaGFuZ2UgcmVjb3JkIGNvbGxlY3Rpb24gd2l0aCBjb3JyZWN0ZWQgdmFsdWUgaW4gYWxsIDAwMWIgZmllbGRzDQogICAgICogQG5hbWUgTWFyY1hjaGFuZ2VVdGlsLmNoYW5nZTAwMWJWYWx1ZQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGNoYW5nZTAwMWJWYWx1ZSggcmVjb3JkQ29sbGVjdGlvbiwgbmV3MDAxYlZhbHVlICkgew0KDQogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1hcmNYY2hhbmdlVXRpbC5jaGFuZ2UwMDFiVmFsdWUgZnVuY3Rpb24iICk7DQoNCiAgICAgICAgdmFyIGZpZWxkczAwMWIgPSBYUGF0aC5zZWxlY3QoICIvbWFyY3g6Y29sbGVjdGlvbi9tYXJjeDpyZWNvcmQvbWFyY3g6ZGF0YWZpZWxkW0B0YWc9JzAwMSddL21hcmN4OnN1YmZpZWxkW0Bjb2RlPSdiJ10iLCByZWNvcmRDb2xsZWN0aW9uICk7DQoNCiAgICAgICAgZm9yICggdmFyIGluZGV4ID0gMDsgaW5kZXggPCBmaWVsZHMwMDFiLmxlbmd0aDsgaW5kZXgrKyApIHsNCiAgICAgICAgICAgIHZhciBjaGlsZCA9IGZpZWxkczAwMWJbIGluZGV4IF07DQogICAgICAgICAgICBYbWxVdGlsLmFwcGVuZFRleHQoIGNoaWxkLCBTdHJpbmcoIG5ldzAwMWJWYWx1ZSApLCB0cnVlICk7DQogICAgICAgIH0NCg0KICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IE1hcmNYY2hhbmdlVXRpbC5jaGFuZ2UwMDFiVmFsdWUgZnVuY3Rpb24iICk7DQogICAgICAgIHJldHVybiByZWNvcmRDb2xsZWN0aW9uOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE1ldGhvZCB0aGF0IHJlbW92ZXMgdW53YW50ZWQgYXN0ZXJpc2tzIGZyb20gZmllbGQgMDE1LCAwMTYsIDA4MiwgMDgzIGFuZCAyNDUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IE1hcmNYY2hhbmdlVXRpbC5yZW1vdmVBc3Rlcmlza3MoIHhtbFJlY29yZCApDQogICAgICogQHBhcmFtIHtEb2N1bWVudH0geG1sUmVjb3JkIFRoZSBvcmlnaW5hbCBkYXRhIHRoYXQgbmVlZHMgbm9ybWFsaXphdGlvbg0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSBUaGUgbmFtZXNwYWNlIG9mIHRoZSBtYXJjIHhtbCByZWNvcmQgLSBkZWZhdWx0IGlzIG14IG1hcmMyMSBzbGltDQogICAgICogQGZ1bmN0aW9uDQogICAgICogQG5hbWUgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUFzdGVyaXNrcw0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHJlbW92ZUFzdGVyaXNrcyggeG1sUmVjb3JkLCBuYW1lc3BhY2UgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUFzdGVyaXNrcyIgKTsNCiAgICAgICAgaWYgKCB1bmRlZmluZWQgPT09IG5hbWVzcGFjZSApIHsNCiAgICAgICAgICAgIG5hbWVzcGFjZSA9ICJteCI7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgZmllbGROYW1lQXJyYXkgPSBbICIwMTUiLCAiMDE2IiwgIjA4MiIsICIwODMiLCAiMjQ1IiBdOw0KICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVBcnJheS5sZW5ndGg7IGkrKyApIHsNCiAgICAgICAgICAgIHZhciBwYXRoID0gIi8iICsgbmFtZXNwYWNlICsgIjpyZWNvcmQvIiArIG5hbWVzcGFjZSArICI6ZGF0YWZpZWxkWyBAdGFnPSIgKyBmaWVsZE5hbWVBcnJheVsgaSBdICsgIiBdLyIgKyBuYW1lc3BhY2UgKyAiOnN1YmZpZWxkIjsNCiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IFhQYXRoLnNlbGVjdCggcGF0aCwgeG1sUmVjb3JkICk7DQogICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPCBlbGVtZW50cy5sZW5ndGg7IGorKyApIHsNCiAgICAgICAgICAgICAgICB2YXIgaW5wdXRUZXh0ID0gWG1sVXRpbC5nZXRUZXh0KCBlbGVtZW50c1sgaiBdICk7DQogICAgICAgICAgICAgICAgZWxlbWVudHNbIGogXS5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IGlucHV0VGV4dC5yZXBsYWNlKCAvXCpcKlwqL2csICIiICkucmVwbGFjZSggLyAgL2csICIgIik7DQogICAgICAgICAgICAgICAgdmFyIG5ld1RleHQgPSBYbWxVdGlsLmdldFRleHQoIGVsZW1lbnRzWyBqIF0gKTsNCiAgICAgICAgICAgICAgICBMb2cuZGVidWcoICJDaGFuZ2VkIHN1YmZpZWxkIHZhbHVlIGZyb20gJyIsIGlucHV0VGV4dCwgIicgdG8gJyIsIG5ld1RleHQsICInLiIgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgTWFyY1hjaGFuZ2VVdGlsLnJlbW92ZUFzdGVyaXNrcyIgKTsNCg0KICAgIH0NCg0KICAgIHJldHVybiB7DQogICAgICAgIHJlbW92ZUxldHRlckZpZWxkczogcmVtb3ZlTGV0dGVyRmllbGRzLA0KICAgICAgICBjaGFuZ2UwMDFiVmFsdWU6IGNoYW5nZTAwMWJWYWx1ZSwNCiAgICAgICAgcmVtb3ZlQXN0ZXJpc2tzOiByZW1vdmVBc3Rlcmlza3MNCiAgICB9Ow0KDQoNCn0oKTsNCg0KLy9Vbml0dGVzdHMgYXJlIGluIE1hcmNYY2hhbmdlVXRpbC50ZXN0LmpzDQo=", "moduleName": "MarcXchangeUtil"}, {"javascript": "", "moduleName": "MarcXchange"}, {"javascript": "", "moduleName": "Dm2ToDst"}, {"javascript": "", "moduleName": "DateUtil"}, {"javascript": "RVhQT1JURURfU1lNQk9MUyA9IFsgJ19fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMScsICdfX0RhdGVVdGlsQ29yZV9mb3JtYXRJU084NjAxJyBdOwoKdXNlKCAiU3RyaW5nVXRpbCIgKTsKdXNlKCAiTG9nIiApOwoKLyogQGJyaWVmIENyZWF0ZSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QgZnJvbSBhbiBJU084NjAxIHN0cmluZwogKiBAcGFyYW0gcyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRldGltZQogKiBAcmV0dXJucyBBIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QKICoKICogVGhlIHN0cmluZyBmb3JtYXQgbXVzdCBiZSBZWVlZLU1NLUREVGhoOm1tOnNzKFopIG9yIGVtcHR5LgogKiBOb3Qgb24gYWJvdmUgZm9ybWF0LCB3aWxsIHRocm93LgogKgogKiBSZWdhcmRsZXNzIG9mIHRoZSBuYW1lLCBvbmx5IGEgbGltaXRlZCBzdWJzZXQgb2YgSVMwODYwMSBpcwogKiBhY3R1YWxseSBwYXJzZWQhICovCnZhciBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEgPSBmdW5jdGlvbiggaXNvODYwMSApIHsKICAgIExvZy5kZWJ1ZyggIkVudGVyaW5nIF9fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMSAiICsgaXNvODYwMSApOwogICAgdmFyIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVVRDLmV4ZWMoIGlzbzg2MDEgKTsKCiAgICBpZiAoIG1hdGNoZWQgKSB7CiAgICAgICAgdmFyIHJlcyA9IG5ldyBEYXRlKCAxOTcwLCAxLCAxLCAxMiwgMCwgMCwgMCApOwogICAgICAgIGlmICggbWF0Y2hlZC5sZW5ndGggPiA3ICYmIG1hdGNoZWRbIDcgXSA9PSAiWiIgKSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggWlVMVSB0aW1lem9uZSBpbmZvcm1hdGlvbiIgKTsKICAgICAgICAgICAgcmVzLnNldFVUQ0Z1bGxZZWFyKCBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgMiBdLCAxMCApIC0gMSwgcGFyc2VJbnQoIG1hdGNoZWRbIDMgXSwgMTAgKSApOwogICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA1IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA2IF0sIDEwICksIDAgKTsKICAgICAgICAgICAgLy8gQ2hlY2sgbm8gImlsbGVnYWwiIHZhbHVlcwogICAgICAgICAgICBpZiAoIHJlcy5nZXRVVENGdWxsWWVhciggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTW9udGgoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENEYXRlKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENIb3VycyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTWludXRlcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDU2Vjb25kcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApICkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoSW52YWxpZCBkYXRlIGFmdGVyIFpVTFUgLSByZWdleHAgbWF0Y2g/KS4iLAogICAgICAgICAgICAgICAgICAgICAgICBpc284NjAxICkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggbm8gdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHJlcy5zZXRGdWxsWWVhciggcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSwgcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEsIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgcmVzLnNldEhvdXJzKCBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApLCAwICk7CiAgICAgICAgICAgIC8vIENoZWNrIG5vICJpbGxlZ2FsIiB2YWx1ZXMKICAgICAgICAgICAgaWYgKCByZXMuZ2V0RnVsbFllYXIoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1vbnRoKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAyIF0sIDEwICkgLSAxIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0RGF0ZSggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0SG91cnMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDQgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1pbnV0ZXMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDUgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldFNlY29uZHMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDYgXSwgMTAgKSApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggU3RyaW5nVXRpbC5zcHJpbnRmKCAiVW5hYmxlIHRvIHVuZGVyc3RhbmQgZGF0ZSBzcGVjaWZpZWQgYXM6ICclcycgKEludmFsaWQgZGF0ZSBhZnRlciBubyBUWiAtIHJlZ2V4cCBtYXRjaD8pLiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGlzbzg2MDEgKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIExvZy5kZWJ1ZyggIlJldHVybmluZzogIiArIHJlcy50b1VUQ1N0cmluZyggKSApOwogICAgICAgIHJldHVybiByZXM7CiAgICB9IGVsc2UgewogICAgICAgIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFouZXhlYyggaXNvODYwMSApOwogICAgICAgIGlmICggbWF0Y2hlZCApIHsKICAgICAgICAgICAgTG9nLmRlYnVnKCAiTWF0Y2hlZCBhcyBzdHJpbmcgd2l0aCBub3JtYWwgdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHZhciByZXMgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEoIG1hdGNoZWRbIDEgXSArICJaIiApOwogICAgICAgICAgICBMb2cuZGVidWcoIFN0cmluZ1V0aWwuc3ByaW50ZiggIlBhcnRzOiAnJXMnLCAnJXMnLCAnJXMnIiwKICAgICAgICAgICAgICAgICAgICBtYXRjaGVkWyAyIF0sIG1hdGNoZWRbIDMgXSwgbWF0Y2hlZFsgNCBdICkgKTsKICAgICAgICAgICAgLy8gQWRqdXN0OiBJZiArLCBzdWJzdHJhY3QgdG8gZ2V0ICJyZWFsIiBVVEMuIElmIC0KICAgICAgICAgICAgaWYgKCBtYXRjaGVkWyAyIF0gPT0gIi0iICkgewogICAgICAgICAgICAgICAgcmVzLnNldFVUQ0hvdXJzKCByZXMuZ2V0VVRDSG91cnMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApICk7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDTWludXRlcyggcmVzLmdldFVUQ01pbnV0ZXMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHJlcy5nZXRVVENIb3VycyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgICAgIHJlcy5zZXRVVENNaW51dGVzKCByZXMuZ2V0VVRDTWludXRlcyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBMb2cuZGVidWcoICJSZXR1cm5pbmc6ICIgKyByZXMudG9VVENTdHJpbmcoICkgKTsKICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgfQogICAgTG9nLmRlYnVnKCAiTm8gbWF0Y2ggZm9yIElTTzg2MDEgdmFyaWFudHMgLSB0aHJvd2luZyIgKTsKICAgIHRocm93IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoTm8gcmVnZXhwIG1hdGNoKS4iLAogICAgICAgICAgICBpc284NjAxICkgKTsKfTsKX19EYXRlVXRpbENvcmVfcGFyc2VJU084NjAxLnJlZ1VUQyA9IC9eKFxkezR9KS0oXGR7Mn0pLShcZHsyfSlUKFxkezJ9KTooXGR7Mn0pOihcZHsyfSkoWnswLDF9KSQvOwpfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFogPSAvXihcZHs0fS1cZHsyfS1cZHsyfVRcZHsyfTpcZHsyfTpcZHsyfSlccyooWystXSlccyooXGR7MSwyfSk6KFxkezEsMn0pJC87CgovKiogXGJyaWVmIFJldHVybiBhbiBJU084NjAxIFogdGltZSBzdHJpbmcgcmVwIG9mIHRoZSBKYXZhU2NyaXB0IGRhdGUgb2JqZWN0IHBhc3NlZCB0byB0aGUgZnVuY3Rpb24uCiAqCiAqIFRoZSBmb3JtYXQgaXMgWVlZWS1NTS1ERFRoaDptbTpzc1oKICogQHBhcmFtIGR0IFRoZSBKYXZhU2NyaXB0IGluc3RhbmNlIHRvIGNvbnZlcnQuCiAqIEByZXR1cm4gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGV0aW1lIGluIElTTzg2MDEgbGlrZSBub3RhdGlvbiBpbiBVVEMKICoKICogTm90ZSwgaWYgdGhlIGRhdGUgaXMgaW52YWxpZCwgeW91IGdldCBhIGxvdCBvZiBOYU4ncy4uLiBzb3JyeSBhYm91dCB0aGF0LCBzbyBzdWUgbWUhIDotKSAqLwp2YXIgX19EYXRlVXRpbENvcmVfZm9ybWF0SVNPODYwMSA9IGZ1bmN0aW9uKCBkYXRlICkgewogICAgLy8gV2UgZG8gbm90IGhhdmUgcGFydGlhbCBzZWNvbmRzLi4uIHNvLCBubyB0b0lTT1N0cmluZygpLi4uCiAgICByZXR1cm4gU3RyaW5nVXRpbC5zcHJpbnRmKCAiJTA0ZC0lMDJkLSUwMmRUJTAyZDolMDJkOiUwMmRaIiwKICAgICAgICBkYXRlLmdldFVUQ0Z1bGxZZWFyKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTW9udGgoICkgKyAxLAogICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSggKSwKICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTWludXRlcyggKSwKICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoICkgKTsKfTsK", "moduleName": "DateUtilCore"}, {"javascript": "", "moduleName": "StringUtil"}, {"javascript": "", "moduleName": "ValueCheck"}, {"javascript": "LyoqIEBmaWxlIFJlY29yZFByb2Nlc3NpbmcgbW9kdWxlICAqLw0KDQoNCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdSZWNvcmRQcm9jZXNzaW5nJyBdOw0KDQp1c2UoICJMb2ciICk7DQoNCg0KLyoqDQogKiBNb2R1bGUgdGhhdCBoYW5kbGVzIHByb2Nlc3NpbmcsIHNraXBwaW5nIGFuZCBmYWlsaW5nIG9mIHJlY29yZHMNCiAqDQogKiBAdHlwZSB7bmFtZXNwYWNlfQ0KICogQG5hbWVzcGFjZQ0KICovDQoNCnZhciBSZWNvcmRQcm9jZXNzaW5nID0gZnVuY3Rpb24oICkgew0KDQogICAgLyoqDQogICAgICogRnVuY3Rpb24gdGhhdCB0ZXJtaW5hdGVzIHRoZSBwcm9jZXNzaW5nIG9mIHRoZSBjdXJyZW50IHJlY29yZCBhbmQgdGhyb3dzIGFuDQogICAgICogZXhjZXB0aW9uIHdpdGggaW5mb3JtYXRpb24gdGhhdCB0aGUgcmVjb3JkIHNob3VsZCBiZSBmYWlsZWQNCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IFJlY29yZFByb2Nlc3NpbmcudGVybWluYXRlUHJvY2Vzc2luZ0FuZEZhaWxSZWNvcmQoIGVycm9yTWVzc2FnZSApDQogICAgICogQHBhcmFtIHtTdHJpbmd9IGVycm9yTWVzc2FnZSB0aGUgZXJyb3IgbWVzc2FnZSB0byB0aHJvdyBpbiBleGNlcHRpb24NCiAgICAgKiBAZnVuY3Rpb24NCiAgICAgKiBAbmFtZSBSZWNvcmRQcm9jZXNzaW5nLnRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRGYWlsUmVjb3JkDQogICAgICovDQogICAgZnVuY3Rpb24gdGVybWluYXRlUHJvY2Vzc2luZ0FuZEZhaWxSZWNvcmQgKCBlcnJvck1lc3NhZ2UgKSB7DQoNCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogUmVjb3JkUHJvY2Vzc2luZy50ZXJtaW5hdGVQcm9jZXNzaW5nQW5kRmFpbFJlY29yZCBtZXRob2QiICk7DQoNCiAgICAgICAgLy8gU3BlY2lhbCBoYWNrcyBoZXJlLi4gRG9uJ3QgZG8gdGhpcyBhdCBob21lLiBVc2VkIGluIGRhdGFpby1zeXN0ZW0gLSBjaGVjayB3aXRoIGphNw0KICAgICAgICBpZiAoIHR5cGVvZihQYWNrYWdlcykgPT09ICdvYmplY3QnICkgew0KICAgICAgICAgICAgUGFja2FnZXMuZGsuZGJjLmphdmFzY3JpcHQucmVjb3JkcHJvY2Vzc2luZy5GYWlsUmVjb3JkLmRvVGhyb3coIGVycm9yTWVzc2FnZSApOw0KICAgICAgICB9DQogICAgICAgIC8vIEVuZCBvZiBEb24ndCBkbyB0aGlzIGF0IGhvbWUuDQoNCiAgICAgICAgdGhyb3cgew0KICAgICAgICAgICAgbmFtZTogIkZBSUxFRCIsDQogICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZ1bmN0aW9uIHRoYXQgdGVybWluYXRlcyB0aGUgcHJvY2Vzc2luZyBvZiB0aGUgY3VycmVudCByZWNvcmQgYW5kIHRocm93cyBhbg0KICAgICAqIGV4Y2VwdGlvbiB3aXRoIGluZm9ybWF0aW9uIHRoYXQgdGhlIHJlY29yZCBzaG91bGQgYmUgc2tpcHBlZCAoaWdub3JlZCkNCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IFJlY29yZFByb2Nlc3NpbmcudGVybWluYXRlUHJvY2Vzc2luZ0FuZElnbm9yZSggZXJyb3JNZXNzYWdlICkNCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXJyb3JNZXNzYWdlIHRoZSBlcnJvciBtZXNzYWdlIHRvIHRocm93IGluIGV4Y2VwdGlvbg0KICAgICAqIEBmdW5jdGlvbg0KICAgICAqIEBuYW1lIFJlY29yZFByb2Nlc3NpbmcudGVybWluYXRlUHJvY2Vzc2luZ0FuZElnbm9yZQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRJZ25vcmUgKCBlcnJvck1lc3NhZ2UgKSB7DQoNCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogUmVjb3JkUHJvY2Vzc2luZy50ZXJtaW5hdGVQcm9jZXNzaW5nQW5kSWdub3JlIG1ldGhvZCIgKTsNCg0KICAgICAgICAvLyBTcGVjaWFsIGhhY2tzIGhlcmUuLiBEb24ndCBkbyB0aGlzIGF0IGhvbWUuIFVzZWQgaW4gZGF0YWlvLXN5c3RlbSAtICBjaGVjayB3aXRoIGphNw0KICAgICAgICBpZiAoIHR5cGVvZihQYWNrYWdlcykgPT09ICdvYmplY3QnICkgew0KICAgICAgICAgICAgUGFja2FnZXMuZGsuZGJjLmphdmFzY3JpcHQucmVjb3JkcHJvY2Vzc2luZy5JZ25vcmVSZWNvcmQuZG9UaHJvdyggZXJyb3JNZXNzYWdlICk7DQogICAgICAgIH0NCiAgICAgICAgLy8gRW5kIG9mIERvbid0IGRvIHRoaXMgYXQgaG9tZS4NCiAgICAgICAgdGhyb3cgew0KICAgICAgICAgICAgbmFtZTogIklHTk9SRSIsDQogICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UNCiAgICAgICAgfQ0KDQoNCiAgICB9DQoNCiAgICByZXR1cm4gew0KICAgICAgICB0ZXJtaW5hdGVQcm9jZXNzaW5nQW5kRmFpbFJlY29yZDogdGVybWluYXRlUHJvY2Vzc2luZ0FuZEZhaWxSZWNvcmQsDQogICAgICAgIHRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRJZ25vcmU6IHRlcm1pbmF0ZVByb2Nlc3NpbmdBbmRJZ25vcmUNCiAgICB9Ow0KDQp9KCApOw0K", "moduleName": "RecordProcessing"}, {"javascript": "LyoqIEBmaWxlIERhbk1hcmMyVXRpbCBtb2R1bGUgICovDQoNCg0KRVhQT1JURURfU1lNQk9MUyA9IFsgJ0Rhbk1hcmMyVXRpbCcgXTsNCg0KdXNlKCAiTG9nIiApOw0KdXNlKCAiTWFyYyIgKTsNCg0KLyoqDQogKiBNb2R1bGUgdGhhdCBpbmNsdWRlcyBkaWZmZXJlbnQgZ2VuZXJpYyBmdW5jdGlvbnMgZm9yIG1vZGlmeWluZyBEYW5NYXJjMiByZWNvcmRzDQogKg0KICogQHR5cGUge25hbWVzcGFjZX0NCiAqIEBuYW1lc3BhY2UNCiAqLw0KDQp2YXIgRGFuTWFyYzJVdGlsID0gZnVuY3Rpb24oKSB7DQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCByZW1vdmVzIGJsYW5rcyBmcm9tIGZhdXN0IGluIHRoZSBmb2xsb3dpbmcgZmllbGRzDQogICAgICogMDAxYSwgMDAyYWNkLCAwMTFhLCAwMTNhLCAwMTRhLCAwMTZhLCAwMTdhLCAwMThhLCA1MjBuDQogICAgICogT25seSBmaWVsZCA1MjAgaGFzIHN1YmZpZWxkIG4NCiAgICAgKg0KICAgICAqIEB0eXBlIHttZXRob2R9DQogICAgICogQHN5bnRheCBEYW5NYXJjMlV0aWwucmVtb3ZlQmxhbmtzRnJvbUZhdXN0KCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgbWFyYyByZWNvcmQgYXMgUmVjb3JkIG9iamVjdA0KICAgICAqIEByZXR1cm4ge1JlY29yZH0gVGhlIHVwZGF0ZWQgcmVjb3JkDQogICAgICogQG1ldGhvZA0KICAgICAqIEBuYW1lIERhbk1hcmMyVXRpbC5yZW1vdmVCbGFua3NGcm9tRmF1c3QNCiAgICAgKi8NCg0KICAgIGZ1bmN0aW9uIHJlbW92ZUJsYW5rc0Zyb21GYXVzdCggcmVjb3JkICkgew0KDQogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIERhbk1hcmMyVXRpbC5yZW1vdmVCbGFua3NGcm9tRmF1c3QiICk7DQoNCiAgICAgICAgdmFyIG1hcCA9IG5ldyBNYXRjaE1hcCgpOw0KICAgICAgICBtYXAucHV0KCAiMDAxIiwgIjAxMSIsICIwMTMiLCAiMDE0IiwgIjAxNSIsICIwMTYiLCAiMDE3IiwgIjAxOCIsICJmMDciLCBmdW5jdGlvbiggZmllbGQgKSB7DQogICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoICJhIiwgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsNCiAgICAgICAgICAgICAgICBzdWJmaWVsZC52YWx1ZSA9IHN1YmZpZWxkLnZhbHVlLnJlcGxhY2UoIC8gL2csICIiICk7DQogICAgICAgICAgICB9ICk7IC8vZW5kIGVhY2hTdWJGaWVsZA0KICAgICAgICB9ICk7DQogICAgICAgIG1hcC5wdXQoICIwMDIiLCBmdW5jdGlvbiggZmllbGQgKSB7DQogICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC9bYWNkXS8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7DQogICAgICAgICAgICAgICAgc3ViZmllbGQudmFsdWUgPSBzdWJmaWVsZC52YWx1ZS5yZXBsYWNlKCAvIC9nLCAiIiApOw0KICAgICAgICAgICAgfSApOyAvL2VuZCBlYWNoU3ViRmllbGQNCiAgICAgICAgfSApOw0KICAgICAgICBtYXAucHV0KCAiNTIwIiwgZnVuY3Rpb24oIGZpZWxkICkgew0KICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAibiIsIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7DQogICAgICAgICAgICAgICAgc3ViZmllbGQudmFsdWUgPSBzdWJmaWVsZC52YWx1ZS5yZXBsYWNlKCAvIC9nLCAiIiApOw0KICAgICAgICAgICAgfSApOw0KICAgICAgICB9ICk7DQoNCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZE1hcCggbWFwICk7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBEYW5NYXJjMlV0aWwucmVtb3ZlQmxhbmtzRnJvbUZhdXN0IiApOw0KDQogICAgICAgIHJldHVybiByZWNvcmQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTWV0aG9kIHRoYXQgcmVuYW1lcyBmaWVsZCBzMTAgdG8gOTk2DQogICAgICoNCiAgICAgKiBAdHlwZSB7bWV0aG9kfQ0KICAgICAqIEBzeW50YXggRGFuTWFyYzJVdGlsLmNvbnZlcnRTMTB0bzk5NiggcmVjb3JkICkNCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkIG1hcmMgcmVjb3JkIGFzIFJlY29yZCBvYmplY3QNCiAgICAgKiBAcmV0dXJuIHtSZWNvcmR9IFRoZSB1cGRhdGVkIHJlY29yZA0KICAgICAqIEBtZXRob2QNCiAgICAgKiBAbmFtZSBEYW5NYXJjMlV0aWwuY29udmVydFMxMHRvOTk2DQogICAgICovDQogICAgZnVuY3Rpb24gY29udmVydFMxMHRvOTk2KCByZWNvcmQgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgRGFuTWFyYzJVdGlsLmNvbnZlcnRTMTB0bzk5NiIgKTsNCg0KICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAiczEwIiwgZnVuY3Rpb24oIGZpZWxkICkgew0KICAgICAgICAgICAgZmllbGQubmFtZSA9ICI5OTYiOw0KICAgICAgICB9ICk7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBEYW5NYXJjMlV0aWwuY29udmVydFMxMHRvOTk2IiApOw0KDQogICAgICAgIHJldHVybiByZWNvcmQ7DQogICAgfQ0KDQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCBzb3J0cyB0aGUgZmllbGRzIG9mIGEgbWFyYyByZWNvcmQgaW4gYXNjZW5kaW5nIG9yZGVyLg0KICAgICAqDQogICAgICogQHR5cGUge21ldGhvZH0NCiAgICAgKiBAc3ludGF4IERhbk1hcmMyVXRpbC5zb3J0RmllbGRzKCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgVGhlIG1hcmMgcmVjb3JkIHRoYXQgbmVlZHMgdG8gYmUgc29ydGVkDQogICAgICogQHJldHVybiB7UmVjb3JkfSBBIG5ldyBtYXJjIHJlY29yZCB3aXRoIHNvcnRlZCBmaWVsZHMNCiAgICAgKiBAbWV0aG9kDQogICAgICogQG5hbWUgRGFuTWFyYzJVdGlsLnNvcnRGaWVsZHMNCiAgICAgKi8NCiAgICBmdW5jdGlvbiBzb3J0RmllbGRzKCByZWNvcmQgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVXRpbC5zb3J0RmllbGRzIG1ldGhvZCIgKTsNCg0KICAgICAgICB2YXIgc29ydGVkUmVjb3JkID0gbmV3IFJlY29yZCgpOw0KICAgICAgICBzb3J0ZWRSZWNvcmQucmVjb3JkU3RhdHVzID0gcmVjb3JkLnJlY29yZFN0YXR1czsNCiAgICAgICAgc29ydGVkUmVjb3JkLmZvclVzZXJTeXN0ZW1zID0gcmVjb3JkLmZvclVzZXJTeXN0ZW1zOw0KICAgICAgICBzb3J0ZWRSZWNvcmQuaW1wbGVtZW50YXRpb25Db2RlcyA9IHJlY29yZC5pbXBsZW1lbnRhdGlvbkNvZGVzOw0KDQogICAgICAgIHZhciBmaWVsZHMgPSBbXTsNCg0KICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsNCiAgICAgICAgICAgIGlmICggLTEgPT09IGZpZWxkcy5pbmRleE9mKCBmaWVsZC5uYW1lICkgKSB7DQogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIGZpZWxkLm5hbWUgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSApOw0KDQogICAgICAgIHZhciBzb3J0ZWRBcnJheSA9IGZpZWxkcy5zb3J0KCk7DQoNCiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc29ydGVkQXJyYXkubGVuZ3RoOyBpKysgKSB7DQogICAgICAgICAgICB2YXIgZmllbGROYW1lID0gc29ydGVkQXJyYXlbIGkgXTsNCiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIGZpZWxkTmFtZSwgZnVuY3Rpb24oIGZpZWxkICkgew0KICAgICAgICAgICAgICAgIHNvcnRlZFJlY29yZC5hcHBlbmQoIGZpZWxkICk7DQogICAgICAgICAgICB9ICk7DQogICAgICAgIH0NCg0KICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlV0aWwuc29ydEZpZWxkcyBtZXRob2QiICk7DQoNCiAgICAgICAgcmV0dXJuIHNvcnRlZFJlY29yZDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCBzb3J0cyB0aGUgc3ViZmllbGRzIG9mIHRoZSBpbnB1dEZpZWxkIGluIHRoZSBnaXZlbiBzb3J0T3JkZXIuDQogICAgICogU3ViZmllbGRzIG5vdCBzcGVjaWZpZWQgaW4gc29ydE9yZGVyIGFyZSBhcHBlbmRlZCBpbiB0aGUgZW5kDQogICAgICogLy9UT0RPOiB3ZSBjb3VsZCBjcmVhdGUgYSB0YWJsZSB3aXRoIHNvcnQgb3JkZXIgZm9yIGFsbCBmaWVsZHMsDQogICAgICogIHNvIHdlIGp1c3QgbmVlZCB0byBtYWludGFpbiBzdWJmaWVsZCBvcmRlcnMgaW4gb25lIHBsYWNlLg0KICAgICAqDQogICAgICogQGZ1bmN0aW9uDQogICAgICogQHN5bnRheCBEYW5NYXJjMlV0aWwuc29ydFN1YmZpZWxkcyAoIGlucHV0RmllbGQsIHNvcnRPcmRlciApDQogICAgICogQHBhcmFtIHtGaWVsZH0gaW5wdXRGaWVsZCBUaGUgaW5wdXQgZmllbGQNCiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBzb3J0T3JkZXIgQW4gQXJyYXkgb2Ygc3ViZmllbGQgbmFtZXMgc3BlY2lmeWluZyB0aGUgb3JkZXJpbmcgb2Ygc3ViZmllbGRzDQogICAgICogQHJldHVybiB7RmllbGR9IGEgbmV3IEZpZWxkIHdpdGggdGhlIChzcGVjaWZpZWQpIHN1YmZpZWxkcyBmcm9tIHRoZSBpbnB1dCBmaWVsZCBvcmRlcmVkIGJ5IHRoZSBzcGVjaWZpZWQgc29ydCBvcmRlcg0KICAgICAqIEBuYW1lIERhbk1hcmMyVXRpbC5zb3J0U3ViZmllbGRzDQogICAgICovDQogICAgZnVuY3Rpb24gc29ydFN1YmZpZWxkcyggaW5wdXRGaWVsZCwgc29ydE9yZGVyICkgew0KDQogICAgICAgIExvZy50cmFjZSggJ0VudGVyaW5nIERhbk1hcmMyVXRpbC5zb3J0U3ViZmllbGRzJyApOw0KDQogICAgICAgIHZhciBvdXRwdXRGaWVsZCA9IG5ldyBGaWVsZCggaW5wdXRGaWVsZC5uYW1lLCBpbnB1dEZpZWxkLmluZGljYXRvciApOw0KICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzb3J0T3JkZXIubGVuZ3RoOyBpKysgKSB7DQogICAgICAgICAgICBpbnB1dEZpZWxkLmVhY2hTdWJGaWVsZCggc29ydE9yZGVyWyBpIF0sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7DQogICAgICAgICAgICAgICAgb3V0cHV0RmllbGQuYXBwZW5kKCBzdWJmaWVsZC5uYW1lLCBzdWJmaWVsZC52YWx1ZSApOw0KICAgICAgICAgICAgfSApDQogICAgICAgIH0NCiAgICAgICAgaW5wdXRGaWVsZC5lYWNoU3ViRmllbGQoIC8uLywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsNCiAgICAgICAgICAgIGlmICggLTEgPT09IHNvcnRPcmRlci5pbmRleE9mKCBzdWJmaWVsZC5uYW1lICkgKSB7DQogICAgICAgICAgICAgICAgb3V0cHV0RmllbGQuYXBwZW5kKCBzdWJmaWVsZC5uYW1lLCBzdWJmaWVsZC52YWx1ZSApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9ICk7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAnTGVhdmluZyBEYW5NYXJjMlV0aWwuc29ydFN1YmZpZWxkcycgKTsNCg0KICAgICAgICByZXR1cm4gb3V0cHV0RmllbGQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBmdWxsIG5hbWUgb2YgYSBwZXJzb24sDQogICAgICogY29uc2lzdGluZyBvZiBmaXJzdCBuYW1lIGFuZCBsYXN0IG5hbWUuDQogICAgICoNCiAgICAgKiBAdHlwZSB7bWV0aG9kfQ0KICAgICAqIEBzeW50YXggRGFuTWFyYzJVdGlsLmNyZWF0ZVBlcnNvbk5hbWVGcm9tTWFyY0ZpZWxkKCBmaWVsZCApDQogICAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkIEEgc3BlY2lmaWMgZmllbGQgaW4gdGhlIG1hcmMgcmVjb3JkDQogICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgcGVyc29uIG5hbWUgZnJvbSBzdWJmaWVsZCBhIGNvbmNhdGluYXRlZCB3aXRoIHN1YmZpZWxkIGgNCiAgICAgKiBAbWV0aG9kDQogICAgICogQG5hbWUgRGFuTWFyYzJVdGlsLmNyZWF0ZVBlcnNvbk5hbWVGcm9tTWFyY0ZpZWxkDQogICAgICovDQogICAgZnVuY3Rpb24gY3JlYXRlUGVyc29uTmFtZUZyb21NYXJjRmllbGQoIGZpZWxkICkgew0KDQogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBNYXJjUmVjb3JkLmNyZWF0ZVBlcnNvbk5hbWVGcm9tTWFyY0ZpZWxkIG1ldGhvZCIgKTsNCg0KICAgICAgICB2YXIgZmlyc3ROYW1lID0gZmllbGQuZ2V0VmFsdWUoICJoIiApOw0KICAgICAgICB2YXIgbGFzdE5hbWUgPSBmaWVsZC5nZXRWYWx1ZSggImEiICk7DQogICAgICAgIHZhciBmdWxsTmFtZSA9ICIiOw0KDQogICAgICAgIGlmICggIiIgIT09IGZpcnN0TmFtZSApIHsNCiAgICAgICAgICAgIGZ1bGxOYW1lID0gZmlyc3ROYW1lICsgIiAiICsgbGFzdE5hbWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBmdWxsTmFtZSA9IGxhc3ROYW1lOw0KICAgICAgICB9DQogICAgICAgIExvZy5kZWJ1ZyggIkNyZWF0ZWQgZnVsbCBuYW1lOiAiLCBmdWxsTmFtZSApOw0KDQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IE1hcmNSZWNvcmQuY3JlYXRlUGVyc29uTmFtZUZyb21NYXJjRmllbGQgbWV0aG9kIiApOw0KDQogICAgICAgIHJldHVybiBmdWxsTmFtZTsNCg0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIHN0cmluZyBjb250YWluaW5nIGFsbCB0aGUgc3ViZmllbGQgbmFtZXMgaW4gYSBmaWVsZC4NCiAgICAgKg0KICAgICAqIEB0eXBlIHttZXRob2R9DQogICAgICogQHN5bnRheCBEYW5NYXJjMlV0aWwuZ2V0QWxsU3ViZmllbGROYW1lcyggZmllbGQgKQ0KICAgICAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIEEgc3BlY2lmaWMgZmllbGQgaW4gdGhlIG1hcmMgcmVjb3JkDQogICAgICogQHJldHVybiB7U3RyaW5nfSBhIHN0cmluZyB3aXRoIGFsbCB0aGUgc3ViZmllbGQgbmFtZXMgY29uY2F0aW5hdGVkDQogICAgICogQG1ldGhvZA0KICAgICAqIEBuYW1lIERhbk1hcmMyVXRpbC5nZXRBbGxTdWJmaWVsZE5hbWVzDQogICAgICovDQogICAgZnVuY3Rpb24gZ2V0QWxsU3ViZmllbGROYW1lcyggZmllbGQgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IE1hcmNSZWNvcmQuZ2V0QWxsU3ViZmllbGROYW1lcyBtZXRob2QiICk7DQoNCiAgICAgICAgdmFyIHN1YmZpZWxkTmFtZVN0cmluZyA9ICIiOw0KICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC8uLywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsNCiAgICAgICAgICAgIHN1YmZpZWxkTmFtZVN0cmluZyArPSBzdWJmaWVsZC5uYW1lOw0KICAgICAgICB9ICk7DQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IE1hcmNSZWNvcmQuZ2V0QWxsU3ViZmllbGROYW1lcyBtZXRob2QiICk7DQoNCiAgICAgICAgcmV0dXJuIHN1YmZpZWxkTmFtZVN0cmluZzsNCg0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZ1bmN0aW9uIHRoYXQgcmVtb3ZlcyBlbXB0eSBzdWJmaWVsZHMgZnJvbSB0aGUgcmVjb3JkLg0KICAgICAqDQogICAgICogQHR5cGUge2Z1bmN0aW9ufQ0KICAgICAqIEBzeW50YXggRGFuTWFyYzJVdGlsLnJlbW92ZUVtcHR5U3ViZmllbGRzKCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgQSBtYXJjIHJlY29yZA0KICAgICAqIEByZXR1cm4ge1JlY29yZH0gVGhlIHVwZGF0ZWQgcmVjb3JkDQogICAgICogQG1ldGhvZA0KICAgICAqIEBuYW1lIERhbk1hcmMyVXRpbC5yZW1vdmVFbXB0eVN1YmZpZWxkcw0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHJlbW92ZUVtcHR5U3ViZmllbGRzKCByZWNvcmQgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVXRpbC5yZW1vdmVFbXB0eVN1YmZpZWxkcyBmdW5jdGlvbiIgKTsNCg0KICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsNCiAgICAgICAgICAgIGZpZWxkLnJlbW92ZVdpdGhNYXRjaGVyKCB7DQogICAgICAgICAgICAgICAgbWF0Y2hTdWJGaWVsZDogZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCBzdWJmaWVsZC52YWx1ZSA9PT0gIiIgJiYgIXN1YmZpZWxkLm5hbWUubWF0Y2goIC9bMC0xXS8gKSApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9ICkNCiAgICAgICAgfSApOw0KDQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IERhbk1hcmMyVXRpbC5yZW1vdmVFbXB0eVN1YmZpZWxkcyBmdW5jdGlvbiIgKTsNCg0KICAgICAgICByZXR1cm4gcmVjb3JkOw0KDQogICAgfQ0KDQogICAgLyoqDQogICAgICogRnVuY3Rpb24gdGhhdCByZW1vdmVzIGVtcHR5IGZpZWxkcyBmcm9tIHRoZSByZWNvcmQuDQogICAgICoNCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259DQogICAgICogQHN5bnRheCBEYW5NYXJjMlV0aWwucmVtb3ZlRW1wdHlGaWVsZHMoIHJlY29yZCApDQogICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZCBBIG1hcmMgcmVjb3JkDQogICAgICogQHJldHVybiB7UmVjb3JkfSBUaGUgdXBkYXRlZCByZWNvcmQNCiAgICAgKiBAbWV0aG9kDQogICAgICogQG5hbWUgRGFuTWFyYzJVdGlsLnJlbW92ZUVtcHR5RmllbGRzDQogICAgICovDQogICAgZnVuY3Rpb24gcmVtb3ZlRW1wdHlGaWVsZHMoIHJlY29yZCApIHsNCg0KICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJVdGlsLnJlbW92ZUVtcHR5RmllbGRzIGZ1bmN0aW9uIiApOw0KDQogICAgICAgIHZhciBpID0gMDsNCiAgICAgICAgdmFyIHJlbW92ZUFycmF5ID0gW107DQogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8uLywgZnVuY3Rpb24oIGZpZWxkICkgew0KICAgICAgICAgICAgaWYgKCBmaWVsZC5zaXplKCkgPCAxICkgew0KICAgICAgICAgICAgICAgIHJlbW92ZUFycmF5LnB1c2goIGkgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGkrKzsNCiAgICAgICAgfSApOw0KICAgICAgICByZW1vdmVBcnJheS5yZXZlcnNlKCk7DQogICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8IHJlbW92ZUFycmF5Lmxlbmd0aDsgaisrICkgew0KICAgICAgICAgICAgcmVjb3JkLnJlbW92ZSggcmVtb3ZlQXJyYXlbIGogXSApDQogICAgICAgIH0NCg0KICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlV0aWwucmVtb3ZlRW1wdHlGaWVsZHMgZnVuY3Rpb24iICk7DQoNCiAgICAgICAgcmV0dXJuIHJlY29yZDsNCg0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZ1bmN0aW9uIHRoYXQgdW4tZW1iZWRzIHRyYWNrIGZpZWxkcyAoNzk1KS4NCiAgICAgKg0KICAgICAqIEB0eXBlIHtmdW5jdGlvbn0NCiAgICAgKiBAc3ludGF4IERhbk1hcmMyVXRpbC51bkVtYmVkRmllbGRzKCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgYSBtYXJjIHJlY29yZA0KICAgICAqIEByZXR1cm4ge1JlY29yZH0gVGhlIHVwZGF0ZWQgcmVjb3JkDQogICAgICogQG1ldGhvZA0KICAgICAqIEBuYW1lIERhbk1hcmMyVXRpbC51bkVtYmVkRmllbGRzDQogICAgICovDQogICAgZnVuY3Rpb24gdW5FbWJlZEZpZWxkcyggcmVjb3JkICkgew0KDQogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBEYW5NYXJjMlV0aWwudW5FbWJlZEZpZWxkcyBmdW5jdGlvbiIgKTsNCg0KICAgICAgICB2YXIgb2xkRmllbGRzID0gW107DQogICAgICAgIHZhciB0cmFja1JlY29yZCA9IG5ldyBSZWNvcmQoKTsNCiAgICAgICAgdmFyIG5ld0ZpZWxkID0gdW5kZWZpbmVkOw0KICAgICAgICB2YXIgcmVmU3ViZmllbGQgPSB1bmRlZmluZWQ7DQoNCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggL2FbMC05XVswLTldLywgZnVuY3Rpb24oIGZpZWxkICkgew0KICAgICAgICAgICAgaWYgKCBmaWVsZC5leGlzdHMoIC9cdTAwZTUvICkgKSB7DQogICAgICAgICAgICAgICAgcmVmU3ViZmllbGQgPSBmaWVsZC5zdWJmaWVsZCggIlx1MDBlNSIgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZpZWxkLmVhY2hTdWJGaWVsZCggLy4vLCBmdW5jdGlvbiggZmllbGQsIHN1YmZpZWxkICkgew0KICAgICAgICAgICAgICAgIGlmICggc3ViZmllbGQubmFtZSA9PSAxICYmIHN1YmZpZWxkLnZhbHVlLm1hdGNoKCAvWzAtOV17NX0vICkgKSB7ICAvL2lzIHRoaXMgYSByaWdodCBtYXRjaD8/DQogICAgICAgICAgICAgICAgICAgIGlmICggbmV3RmllbGQgIT09IHVuZGVmaW5lZCApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrUmVjb3JkLmFwcGVuZCggbmV3RmllbGQgKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IG5ldyBGaWVsZCggc3ViZmllbGQudmFsdWUuc3Vic3RyKCAwLCAzICksICIwMCIgKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCByZWZTdWJmaWVsZCAhPT0gdW5kZWZpbmVkICkgew0KICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQuYXBwZW5kKCByZWZTdWJmaWVsZCApOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc3ViZmllbGQubmFtZSAhPT0gIlx1MDBlNSIgKSB7DQogICAgICAgICAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9ICk7DQogICAgICAgICAgICBvbGRGaWVsZHMucHVzaCggU3RyaW5nKCBmaWVsZC5uYW1lICkgKTsNCiAgICAgICAgICAgIHRyYWNrUmVjb3JkLmFwcGVuZCggbmV3RmllbGQgKTsNCiAgICAgICAgICAgIG5ld0ZpZWxkID0gdW5kZWZpbmVkOw0KICAgICAgICAgICAgcmVmU3ViZmllbGQgPSB1bmRlZmluZWQ7DQogICAgICAgIH0gKTsNCiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgb2xkRmllbGRzLmxlbmd0aDsgaSsrICkgew0KICAgICAgICAgICAgcmVjb3JkLnJlbW92ZSggb2xkRmllbGRzWyBpIF0gKTsNCiAgICAgICAgfQ0KICAgICAgICB0cmFja1JlY29yZC5lYWNoRmllbGQoIC8uLywgZnVuY3Rpb24oIGZpZWxkICkgew0KICAgICAgICAgICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsNCiAgICAgICAgfSApOw0KDQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IERhbk1hcmMyVXRpbC51bkVtYmVkRmllbGRzIGZ1bmN0aW9uIiApOw0KDQogICAgICAgIHJldHVybiByZWNvcmQ7DQoNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGdW5jdGlvbiB0aGF0IHJlc2V0cyBpbmRpY2F0b3JzLCByZW1vdmVzIGJsYW5rcyBmcm9tIGZhdXN0IGFuZCBzb3J0cyB0aGUgZmllbGRzIGluIGEgcmVjb3JkLg0KICAgICAqDQogICAgICogQHR5cGUge2Z1bmN0aW9ufQ0KICAgICAqIEBzeW50YXggRGFuTWFyYzJVdGlsLnRyaW1SZWNvcmQoIHJlY29yZCApDQogICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZCBhIG1hcmMgcmVjb3JkDQogICAgICogQHJldHVybiB7UmVjb3JkfSBUaGUgdXBkYXRlZCByZWNvcmQNCiAgICAgKiBAZnVuY3Rpb24NCiAgICAgKiBAbmFtZSBEYW5NYXJjMlV0aWwudHJpbVJlY29yZA0KICAgICAqLw0KDQogICAgZnVuY3Rpb24gdHJpbVJlY29yZCggcmVjb3JkICkgew0KDQogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBEYW5NYXJjMlV0aWwudHJpbVJlY29yZCBmdW5jdGlvbiIgKTsNCg0KICAgICAgICByZWNvcmQgPSBEYW5NYXJjMlV0aWwuc29ydEZpZWxkcyggcmVjb3JkICk7DQogICAgICAgIHJlY29yZCA9IERhbk1hcmMyVXRpbC5yZW1vdmVCbGFua3NGcm9tRmF1c3QoIHJlY29yZCApOw0KICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsNCiAgICAgICAgICAgIGZpZWxkLmluZGljYXRvciA9ICIwMCI7DQogICAgICAgIH0gKTsNCg0KICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlV0aWwudHJpbVJlY29yZCBmdW5jdGlvbiIgKTsNCg0KICAgICAgICByZXR1cm4gcmVjb3JkOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZ1bmN0aW9uIHRoYXQgcmVwbGFjZXMgb25lIGZvcm0gb2YgYWxwaGFiZXRpemluZyBub3RhdGlvbiB3aXRoIGFub3RoZXIuDQogICAgICoNCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259DQogICAgICogQHN5bnRheCBEYW5NYXJjMlV0aWwucmVwbGFjZU5vbmZpbGluZ05vdGF0aW9uKCByZWNvcmQgKQ0KICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgYSBtYXJjIHJlY29yZA0KICAgICAqIEByZXR1cm4ge1JlY29yZH0gVGhlIHVwZGF0ZWQgcmVjb3JkDQogICAgICogQGZ1bmN0aW9uDQogICAgICogQG5hbWUgRGFuTWFyYzJVdGlsLnJlcGxhY2VOb25maWxpbmdOb3RhdGlvbg0KICAgICAqLw0KDQogICAgZnVuY3Rpb24gcmVwbGFjZU5vbmZpbGluZ05vdGF0aW9uKCByZWNvcmQgKSB7DQoNCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVXRpbC5yZXBsYWNlTm9uZmlsaW5nTm90YXRpb24gZnVuY3Rpb24iICk7DQoNCiAgICAgICAgLy9oZWxwZXIgZnVuY3Rpb24NCiAgICAgICAgZnVuY3Rpb24gX19yZXBsYWNlTm9uZmlsaW5nQ2hhcnMoIGZpZWxkICkgew0KICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7DQogICAgICAgICAgICAgICAgaWYgKCBzdWJmaWVsZC52YWx1ZS5tYXRjaCggL1x1MDA5OC4qXHUwMDlDL2kgKSApIHsNCiAgICAgICAgICAgICAgICAgICAgc3ViZmllbGQudmFsdWUgPSBzdWJmaWVsZC52YWx1ZS5yZXBsYWNlKCAvXHUwMDk4KC4qKVx1MDA5Qy9pLCAiJDHCpCIgKTsgIC8vIFx1MDBBNA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBtYXAgPSBuZXcgTWF0Y2hNYXAoKTsNCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZE1hcFdpdGhEZWZhdWx0KCBtYXAsIF9fcmVwbGFjZU5vbmZpbGluZ0NoYXJzLCB7fSApOw0KDQogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IERhbk1hcmMyVXRpbC5yZXBsYWNlTm9uZmlsaW5nTm90YXRpb24gZnVuY3Rpb24iICk7DQoNCiAgICAgICAgcmV0dXJuIHJlY29yZDsNCiAgICB9DQoNCg0KICAgIHJldHVybiB7DQogICAgICAgIHJlbW92ZUJsYW5rc0Zyb21GYXVzdDogcmVtb3ZlQmxhbmtzRnJvbUZhdXN0LA0KICAgICAgICBjb252ZXJ0UzEwdG85OTY6IGNvbnZlcnRTMTB0bzk5NiwNCiAgICAgICAgc29ydEZpZWxkczogc29ydEZpZWxkcywNCiAgICAgICAgc29ydFN1YmZpZWxkczogc29ydFN1YmZpZWxkcywNCiAgICAgICAgZ2V0QWxsU3ViZmllbGROYW1lczogZ2V0QWxsU3ViZmllbGROYW1lcywNCiAgICAgICAgY3JlYXRlUGVyc29uTmFtZUZyb21NYXJjRmllbGQ6IGNyZWF0ZVBlcnNvbk5hbWVGcm9tTWFyY0ZpZWxkLA0KICAgICAgICByZW1vdmVFbXB0eUZpZWxkczogcmVtb3ZlRW1wdHlGaWVsZHMsDQogICAgICAgIHJlbW92ZUVtcHR5U3ViZmllbGRzOiByZW1vdmVFbXB0eVN1YmZpZWxkcywNCiAgICAgICAgdW5FbWJlZEZpZWxkczogdW5FbWJlZEZpZWxkcywNCiAgICAgICAgdHJpbVJlY29yZDogdHJpbVJlY29yZCwNCiAgICAgICAgcmVwbGFjZU5vbmZpbGluZ05vdGF0aW9uOiByZXBsYWNlTm9uZmlsaW5nTm90YXRpb24NCiAgICB9Ow0KDQoNCn0oKTs=", "moduleName": "DanMarc2Util"}], "svnRevision": 126314, "requireCache": null, "invocationMethod": "convertRawRecordToDst", "invocationJavascriptName": "dm2_to_dst.js", "svnProjectForInvocationJavascript": "conversion-flows/bogstat-dm2-to-dst/js"}, "version": 2}], "description": "Flow for poster fra RR til Danmarks Statistik (dst) "},"view":"{\"id\": 16702, \"name\": \"RR2Dst\", \"version\": 1, \"components\": [{\"id\": 16701, \"name\": \"RR2Dst\", \"version\": 2, \"revision\": \"126314\", \"nextRevision\": \"126314\"}], \"description\": \"Flow for poster fra RR til Danmarks Statistik (dst) \", \"timeOfComponentUpdate\": null}"}