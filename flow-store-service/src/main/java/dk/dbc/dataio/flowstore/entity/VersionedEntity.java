/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonRawValue;
import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;

import javax.persistence.*;

/**
 * Base class for flow store entities where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@MappedSuperclass
public class VersionedEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Version
    @Column(nullable = false)
    private Long version;

    @Lob
    @Column(nullable = false)
    private String content;

    public Long getId() {
        return id;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    @JsonRawValue
    public String getContent() {
        return content;
    }

    /**
     * Sets entity data content as JSON string doing any necessary pre-processing
     * of the data
     *
     * @param content entity data as JSON string
     *
     * @throws JsonException when given invalid (null-valued, empty-valued or non-json) JSON string
     */
    public void setContent(String content) throws JsonException {
        preProcessContent(content);
        this.content = content;
    }

    /**
     * Performs any necessary pre-processing of given data. Can for example
     * be specialized in sub class to do index value extraction.
     *
     * @param data entity content
     *
     * @throws JsonException when given invalid (null-valued, empty-valued or non-json) JSON string
     */
    protected void preProcessContent(String data) throws JsonException {
        JsonUtil.getJsonRoot(data);
    }
}

