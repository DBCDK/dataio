/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.gui.client.pages.item.show;


import com.google.gwt.cell.client.ButtonCell;
import com.google.gwt.cell.client.Cell;
import com.google.gwt.cell.client.CheckboxCell;
import com.google.gwt.cell.client.TextCell;
import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Element;
import com.google.gwt.dom.client.InputElement;
import com.google.gwt.dom.client.NativeEvent;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.safehtml.shared.SafeHtml;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.cellview.client.Header;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.Event;
import com.google.gwt.view.client.Range;
import com.google.gwt.view.client.SelectionChangeEvent;
import com.google.gwt.view.client.SingleSelectionModel;
import dk.dbc.dataio.gui.client.model.DiagnosticModel;
import dk.dbc.dataio.gui.client.model.ItemModel;

import java.util.List;


/**
 * This class is the View class for the Items Show View
 */
public class View extends ViewWidget {

    ViewGinjector viewInjector = GWT.create(ViewGinjector.class);

    protected Boolean fixedColumnVisible = false;

    class Context {
        SingleSelectionModel<ItemModel> selectionModel = new SingleSelectionModel<>();
        HandlerRegistration handlerRegistration = null;
        ItemsListView listView;

        public Context(ItemsListView listView) {
            this.listView = listView;
        }
    }

    Context allContext = new Context(allItemsList);
    Context failedContext = new Context(failedItemsList);
    Context ignoredContext = new Context(ignoredItemsList);
    public AsyncItemViewDataProvider dataProvider;

    public View() {
        super("");
        dataProvider = new AsyncItemViewDataProvider(this);
        setupColumns(allItemsList);
        dataProvider.addDataDisplay(allItemsList.itemsTable);
        setupColumns(failedItemsList);
        dataProvider.addDataDisplay(failedItemsList.itemsTable);
        setupColumns(ignoredItemsList);
        dataProvider.addDataDisplay(ignoredItemsList.itemsTable);
        setupColumns(jobDiagnosticTabContent);
    }

    /*
     * Package scoped Constructor used for unit testing.
     */
    View(Boolean setupColumns) {
        super("");

        dataProvider = new AsyncItemViewDataProvider(this);
        if(setupColumns) {
            setupColumns(allItemsList);
            setupColumns(failedItemsList);
            setupColumns(ignoredItemsList);
            setupColumns(jobDiagnosticTabContent);
        }
    }

    /**
     * Enables or disables one of the items table in the view
     * Thereby also enables or disables events from being generated by the selection
     * @param enable True: Selection is possible, false: Selection is not possible (and no events are triggered)
     * @param context The context (All, Failed or Ignored table)
     */
    public void enableSelection(boolean enable, Context context) {
        if (enable) {
            if (context.handlerRegistration == null) {
                context.handlerRegistration = context.selectionModel.addSelectionChangeHandler(new SelectionChangeHandlerClass(context));
            }
            context.listView.itemsTable.setSelectionModel(context.selectionModel);
        } else {
            if (context.handlerRegistration != null) {
                context.handlerRegistration.removeHandler();
                context.handlerRegistration = null;
            }
            context.listView.itemsTable.setSelectionModel(null);
        }
    }

    /**
     * Force a data refresh of the itemsTables belonging to allItemsList, failedItemsList, ignoredItemsList.
     */
    public void refreshItemsTable() {
        allItemsList.itemsTable.setVisibleRangeAndClearData(new Range(0, 20), true);
        failedItemsList.itemsTable.setVisibleRangeAndClearData(new Range(0, 20), true);
        ignoredItemsList.itemsTable.setVisibleRangeAndClearData(new Range(0, 20), true);
    }

    /**
     * Enables or disables all selections in all Items Tables
     * Thereby also enables or disables events from being generated by the selection
     * @param enable True: Selection is possible, false: Selection is not possible (and no events are triggered)
     */
    public void setSelectionEnabled(boolean enable) {
        enableSelection(enable, allContext);
        enableSelection(enable, failedContext);
        enableSelection(enable, ignoredContext);
    }

    public void setItemModels(ItemsListView listView, List<ItemModel> itemModels){
        presenter.setItemModels(listView, itemModels);
    }

    /**
     * Private methods
     */

    /**
     * This method sets up all columns in the view
     * It is called before data has been applied to the view - data is being applied in the setItems method
     */
    @SuppressWarnings("unchecked")
    void setupColumns(final ItemsListView listView) {
        listView.itemsTable.setWidth("100%", true);
        listView.itemsTable.addColumn(constructItemColumn(), getTexts().column_Item());
        listView.itemsTable.addColumn(constructRecordIdColumn(), getTexts().column_RecordId());
        listView.itemsTable.addColumn(constructStatusColumn(), getTexts().column_Status());
        listView.itemsTable.addColumn(constructFixedColumn(), new HidableColumnHeader(getTexts().column_Fixed()));
        listView.itemsTable.addColumn(constructTrackingIdColumn(), getTexts().column_Trace());
        listView.itemsTable.setVisibleRange(0, 20);
        listView.itemsPager.setDisplay(listView.itemsTable);
    }

    @SuppressWarnings("unchecked")
    void setupColumns(final JobDiagnosticTabContent jobDiagnosticTabContent) {
        jobDiagnosticTabContent.jobDiagnosticTable.addColumn(constructDiagnosticLevelColumn(), getTexts().column_Level());
        jobDiagnosticTabContent.jobDiagnosticTable.addColumn(constructDiagnosticMessageColumn(), getTexts().column_Message());
    }

    Column constructDiagnosticLevelColumn() {
        return new TextColumn<DiagnosticModel>() {
            @Override
            public String getValue(DiagnosticModel model) {
                return model.getLevel();
            }
        };
    }

    Column constructDiagnosticMessageColumn() {
        return new TextColumn<DiagnosticModel>() {
            @Override
            public String getValue(DiagnosticModel model) {
                return model.getMessage();
            }
        };
    }


    /**
     * This method constructs the Item column
     * Should have been private, but is package-private to enable unit test
     *
     * @return the constructed Item column
     */
    Column constructItemColumn() {
        return new TextColumn<ItemModel>() {
            @Override
            public String getValue(ItemModel model) {
                return getTexts().text_Item() + " " + model.getItemNumber();
            }
        };
    }

    /**
     * This method constructs the RecordId column
     * Should have been private, but is package-private to enable unit test
     *
     * @return the constructed RecordId column
     */
    Column constructRecordIdColumn() {
        return new TextColumn<ItemModel>() {
            @Override
            public String getValue(ItemModel model) {
                return model.getRecordId();
            }
        };
    }

    /**
     * This method constructs the Status column
     * Should have been private, but is package-private to enable unit test
     *
     * @return the constructed Status column
     */
    Column constructStatusColumn() {
        return new TextColumn<ItemModel>() {
            @Override
            public String getValue(ItemModel model) {
                return formatStatus(model.getStatus());
            }
        };
    }

    /**
     * This method constructs the Tracking ID column
     * Should have been private, but is package-private to enable unit test
     *
     * @return the constructed Tracking ID column
     */
    Column constructTrackingIdColumn() {
        Column<ItemModel, String> column = new Column<ItemModel, String>(new TrackingButtonCell()) {
            @Override
            public String getValue(ItemModel model) {
                return getTexts().button_Trace();
            }
        };
        column.setFieldUpdater((index, config, buttonText) -> presenter.traceItem(config.getTrackingId()));
        return column;
    }

    /**
     * This method constructs a double click event handler. On double click event, the method calls
     * the presenter with the selection model selected value.
     * @return the double click handler
     */
    Column constructFixedColumn() {
        CheckboxCell checkboxCell = new CheckboxCell(true, false);
        return new Column<ItemModel, Boolean>(checkboxCell) {
            @Override
            public Boolean getValue(ItemModel itemModel) {
                return itemModel.getWorkflowNoteModel().isProcessed();
            }
            @Override
            public void onBrowserEvent(Cell.Context context, Element elem, ItemModel itemModel, NativeEvent event) {
                if (Event.as(event).getTypeInt() == Event.ONCHANGE) {
                    presenter.setWorkflowNoteModel(itemModel, ((InputElement) elem.getFirstChild()).isChecked());
                }
                super.onBrowserEvent(context, elem, itemModel, event);
            }
            @Override
            public String getCellStyleNames(Cell.Context context, ItemModel model) {
                return fixedColumnVisible ? "visible center" : "invisible";
            }
        };
    }

    private String formatStatus(ItemModel.LifeCycle lifeCycle) {
        switch (lifeCycle) {
            case PARTITIONING:
                return getTexts().lifecycle_Partitioning();
            case PROCESSING:
                return getTexts().lifecycle_Processing();
            case DELIVERING:
                return getTexts().lifecycle_Delivering();
            case DONE:
                return getTexts().lifecycle_Done();
            default:
                return getTexts().lifecycle_Unknown();
        }
    }

    Texts getTexts() {
        return viewInjector.getTexts();
    }

    /*
     * Private classes
     */

    /**
     * Selection Handler class - to take action upon selection of a row
     */
    class SelectionChangeHandlerClass implements SelectionChangeEvent.Handler {
        private Context context;
        public SelectionChangeHandlerClass(Context context) {
            super();
            this.context = context;
        }
        public void onSelectionChange(SelectionChangeEvent event) {
            ItemModel selected = context.selectionModel.getSelectedObject();
            if (selected != null) {
                presenter.itemSelected(context.listView, selected);
            }
        }
    }

    /**
     * Normal Column Header class (to be hidden upon request)
     */
    class HidableColumnHeader extends Header<String> {
        private String headerText;
        public HidableColumnHeader(String text) {
            super(new TextCell());
            headerText = text;
        }
        @Override
        public String getValue() {
            return headerText;
        }
        @Override
        public String getHeaderStyleNames() {
            return fixedColumnVisible ? "visible" : "invisible";
        }
    }

    /**
     * Specialized version of a ButtonCell, sets up a Mouseover text with the tracking id
     */
    class TrackingButtonCell extends ButtonCell {
        @Override
        public void render(Context context, SafeHtml data, SafeHtmlBuilder sb) {
            ItemModel model = (ItemModel) context.getKey();
            sb.appendHtmlConstant("<span title='" + getTexts().text_TrackingId() + " " + model.getTrackingId() + "'>");
            super.render(context, data, sb);
            sb.appendHtmlConstant("</span>");
        }
    }
}