/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import dk.dbc.dataio.commons.types.FlowBinderContent;
import dk.dbc.dataio.jsonb.JSONBContext;
import dk.dbc.dataio.jsonb.JSONBException;

import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Transient;
import java.util.HashSet;
import java.util.Set;

/**
 * Persistence domain class for flow binder objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string.

 * Note that this entity contains foreign key relations to its attached submitters.
 */
@Entity
@Table(name = FlowBinder.TABLE_NAME)
@SqlResultSetMapping(name="FlowBinder.implicit", entities = {
        @EntityResult(entityClass = FlowBinder.class)}
)
@NamedNativeQueries({
        @NamedNativeQuery(
                name = FlowBinder.FIND_ALL_QUERY_NAME,
                query = "SELECT * FROM " + FlowBinder.TABLE_NAME + " flowbinder ORDER BY lower(content->>'name') ASC",
                resultSetMapping = "FlowBinder.implicit"
        ),
        @NamedNativeQuery(
                name = FlowBinder.MATCH_FLOWBINDER_QUERY_NAME,
                query = "SELECT * FROM " + FlowBinder.TABLE_NAME + " WHERE content @> ?::jsonb",
                resultSetMapping = "FlowBinder.implicit"
        ),
})
public class FlowBinder extends Versioned {

    private static final JSONBContext jsonbContext = new JSONBContext();

    public static final String TABLE_NAME = "flow_binders";
    public static final String SUBMITTER_JOIN_TABLE_NAME = "flow_binders_submitters";
    public static final String SUBMITTER_IDS_FIELD = "submitterIds";

    public static final String MATCH_FLOWBINDER_QUERY_NAME = "FlowBinder.matchFlowBinder";
    public static final String FIND_ALL_QUERY_NAME = "FlowBinder.findAll";

    static final String BINDER_JOIN_COLUMN = "flow_binder_id";
    static final String FLOW_JOIN_COLUMN = "flow_id";
    static final String SINK_JOIN_COLUMN = "sink_id";
    static final String SUBMITTER_JOIN_COLUMN = "submitter_id";

    @OneToMany(fetch = FetchType.LAZY)
    @JoinTable(name = SUBMITTER_JOIN_TABLE_NAME,
            joinColumns = @JoinColumn(name = BINDER_JOIN_COLUMN),
            inverseJoinColumns = @JoinColumn(name = SUBMITTER_JOIN_COLUMN))
    private Set<Submitter> submitters;

    // flow is accessed through java EE, so we will suppress pmd-warnings
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = FLOW_JOIN_COLUMN)
    private Flow flow; // NOPMD

    // sink is accessed through java EE, so we will suppress pmd-warnings
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = SINK_JOIN_COLUMN)
    private SinkEntity sinkEntity; // NOPMD

    @Transient
    private Long flowId;

    @Transient
    private Set<Long> submitterIds;

    @Transient
    private Long sinkId;

    @JsonIgnore
    public Long getFlowId() {
        return flowId;
    }

    @JsonIgnore
    public Set<Long> getSubmitterIds() {
        return new HashSet<>(submitterIds);
    }

    @JsonIgnore
    public Long getSinkId() {
        return sinkId;
    }

    public void setFlow(Flow flow) {
        this.flow = flow;
    }

    public void setSubmitters(Set<Submitter> submitters) {
        this.submitters = new HashSet<>(submitters);
    }

    public void setSinkEntity(SinkEntity sinkEntity) {
        this.sinkEntity = sinkEntity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setContent(String data) throws JSONBException {
        super.setContent(data);
        final FlowBinderContent flowBinderContent = jsonbContext.unmarshall(data, FlowBinderContent.class);
        submitterIds = new HashSet<>(flowBinderContent.getSubmitterIds());
        flowId = flowBinderContent.getFlowId();
        sinkId = flowBinderContent.getSinkId();
    }
}
