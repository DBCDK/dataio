/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.commons.types.FlowComponent;
import dk.dbc.dataio.commons.types.FlowComponentView;
import dk.dbc.dataio.commons.types.FlowContent;
import dk.dbc.dataio.commons.types.FlowView;
import dk.dbc.dataio.jsonb.JSONBContext;
import dk.dbc.dataio.jsonb.JSONBException;

import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.Lob;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import java.util.ArrayList;
import java.util.List;

/**
 * Persistence domain class for flow objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = Flow.TABLE_NAME)
@SqlResultSetMapping(name="Flow.implicit", entities = {
        @EntityResult(entityClass = Flow.class)}
)
@NamedNativeQueries({
        @NamedNativeQuery(
                name = Flow.QUERY_FIND_ALL,
                query = "SELECT * FROM Flows ORDER BY lower(content->>'name') ASC",
                resultSetMapping = "Flow.implicit"
        ),
        @NamedNativeQuery(name = Flow.QUERY_FIND_BY_NAME,
                query = "SELECT * FROM flows WHERE (content->>'name') = ?",
                resultSetMapping = "Flow.implicit"
        )
})
public class Flow extends Versioned {
    public static final String TABLE_NAME = "flows";
    public static final String QUERY_FIND_ALL = "Flow.findAll";
    public static final String QUERY_FIND_BY_NAME = "Flow.findByName";

    public static JSONBContext jsonbContext= new JSONBContext();

    @Lob
    @Column(nullable = false, columnDefinition = "json")
    @Convert(converter = JsonConverter.class)
    private String view;

    public String getView() {
        return view;
    }

    @PrePersist
    @PreUpdate
    public void preChange() {
        // We have to do this @Pre as opposed to @Post to ensure
        // the view value reaches the database, but this means
        // that the version field has not yet been given its new
        // value when the view string is generated.
        final Long version = getVersion();
        view = generateView(version == null ? 1 : version + 1);
    }

    @Override
    public boolean equals(Object o) {
        try {
            final FlowContent thisFlowContent = jsonbContext.unmarshall(getContent(), FlowContent.class);
            final FlowContent otherFlowContent = jsonbContext.unmarshall(((Versioned) o).getContent(), FlowContent.class);

            return thisFlowContent.equals(otherFlowContent);
        } catch (JSONBException e) {
            return false;
        }
         }

    @Override
    public int hashCode() {
        final FlowContent thisFlowContent;
        try {
            thisFlowContent = jsonbContext.unmarshall(getContent(), FlowContent.class);
            return thisFlowContent.hashCode();
        } catch (Exception e) {
            return 0;
        }
    }

    public String generateView() {
        // Used during database migration
        return generateView(getVersion());
    }

    public String generateView(Long version) {
        try {
            final FlowContent flowContent = jsonbContext.unmarshall(getContent(), FlowContent.class);
            final FlowView view = new FlowView()
                    .withId(getId())
                    .withVersion(version)
                    .withName(flowContent.getName())
                    .withDescription(flowContent.getDescription())
                    .withTimeOfComponentUpdate(flowContent.getTimeOfFlowComponentUpdate())
                    .withComponents(generateComponentViews(flowContent.getComponents()));
            return jsonbContext.marshall(view);
        } catch (JSONBException e) {
            throw new IllegalStateException(e);
        }
    }

    private List<FlowComponentView> generateComponentViews(List<FlowComponent> components) {
        final List<FlowComponentView> componentViews = new ArrayList<>(components.size());
        for (FlowComponent component : components) {
            final FlowComponentView view = new FlowComponentView()
                    .withId(component.getId())
                    .withVersion(component.getVersion())
                    .withName(component.getContent().getName())
                    .withRevision(String.valueOf(component.getContent().getSvnRevision()));
            if (component.getNext() != null) {
                view.withNextRevision(String.valueOf(component.getNext().getSvnRevision()));
            }
            componentViews.add(view);
        }
        return componentViews;
    }
}
