package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.flowstore.util.json.JsonException;
import org.codehaus.jackson.annotate.JsonRawValue;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Lob;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrePersist;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Date;

/**
 * Base class for flow store entities where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@MappedSuperclass
@IdClass(EntityPrimaryKey.class)
public class Entity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    // Hardening: Is it problematic that we use a timestamp as version? It opens up a small window (millisecond granularity) for clashes during insert.
    @Id
    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private Date version;

    @Lob
    @Column(nullable = false)
    private String content;

    public void setId(Long id) {
        this.id = id;
    }

    public Long getId() {
        return id;
    }

    public Date getVersion() {
        return version;
    }

    @JsonRawValue
    public String getContent() {
        return content;
    }

    @PrePersist
    private void onCreate() {
        version = new Date();
    }

    /**
     * Sets data content as JSON string while extracting special
     * index values
     *
     * @param content flow data as JSON string
     *
     * @throws JsonException when given invalid (null-valued, empty-valued or non-json)
     *                       JSON string, or if JSON object does not contain 'name'
     *                       member with non-empty text value
     */
    public void setContent(String content) throws JsonException {
        extractIndexValuesFromContent(content);
        this.content = content;
    }

    /**
     * Extracts necessary index values from given data
     *
     * @param data entity content
     *
     * @throws JsonException on failure to extract value from json data
     */
    protected void extractIndexValuesFromContent(String data) throws JsonException { }
}
