package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;
import org.codehaus.jackson.JsonNode;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Lob;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Persistence domain class for submitter objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = Submitter.TABLE_NAME,
uniqueConstraints = {
    @UniqueConstraint(columnNames = { Submitter.NAME_INDEX_COLUMN }),
    @UniqueConstraint(columnNames = { Submitter.NUMBER_INDEX_COLUMN }),
})
@NamedQueries({
    @NamedQuery(name = Submitter.QUERY_FIND_ALL, query = "SELECT submitter FROM Submitter submitter ORDER BY submitter.nameIndexValue ASC")
})
public class Submitter extends VersionedEntity {
    public static final String TABLE_NAME = "submitters";
    public static final String QUERY_FIND_ALL = "Submitter.findAll";
    static final String NAME_INDEX_COLUMN = "name_idx";
    static final String NUMBER_INDEX_COLUMN = "number_idx";

    @Lob
    @Column(name = NAME_INDEX_COLUMN, nullable = false)
    private String nameIndexValue;

    @Column(name = NUMBER_INDEX_COLUMN, nullable = false)
    private Long numberIndexValue;

    String getNameIndexValue() {
        return nameIndexValue;
    }

    Long getNumberIndexValue() {
        return numberIndexValue;
    }

    /**
     * {@inheritDoc}
     * @throws JsonException if given invalid (null-valued, empty-valued or non-json) JSON string.
     *                       If name field of given json data does not exists, is null, is empty or is non-textual.
     *                       If number field of given json data does not exists, is null or is non-numeric.
     */
    @Override
    protected void preProcessContent(String submitterData) throws JsonException {
        final JsonNode json = JsonUtil.getJsonRoot(submitterData);
        nameIndexValue = JsonUtil.getNonEmptyTextValueOrThrow(json.path("name"), "submitter.content.name");
        numberIndexValue = JsonUtil.getLongValueOrThrow(json.path("number"), "submitter.content.number");
    }
}
