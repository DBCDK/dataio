package dk.dbc.dataio.flowstore.entity;

import dk.dbc.commons.jsonb.JSONBException;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityResult;
import jakarta.persistence.NamedNativeQueries;
import jakarta.persistence.NamedNativeQuery;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SqlResultSetMapping;
import jakarta.persistence.Table;

import java.util.Objects;

/**
 * Persistence domain class for HarvesterConfig objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = "harvester_configs")
@SqlResultSetMapping(name = "HarvesterConfig.implicit", entities = {
        @EntityResult(entityClass = HarvesterConfig.class)}
)
@NamedQueries({
        @NamedQuery(name = HarvesterConfig.QUERY_FIND_ALL_OF_TYPE,
                query = "SELECT harvesterConfig FROM HarvesterConfig harvesterConfig where harvesterConfig.type = :type"),
})
@NamedNativeQueries({
        @NamedNativeQuery(name = HarvesterConfig.QUERY_FIND_ALL_ENABLED_OF_TYPE,
                query = "SELECT * FROM harvester_configs WHERE type = ? AND content @>'{\"enabled\": true}'::jsonb",
                resultSetMapping = "HarvesterConfig.implicit"
        ),
        @NamedNativeQuery(name = HarvesterConfig.QUERY_FIND_TYPE_WITH_CONTENT,
                query = "SELECT * FROM harvester_configs WHERE type = ? AND content @>?::jsonb",
                resultSetMapping = "HarvesterConfig.implicit"
        )
})
public class HarvesterConfig extends Versioned {
    public static final String QUERY_FIND_ALL_OF_TYPE = "Harvester.findAllOfType";
    public static final String QUERY_FIND_ALL_ENABLED_OF_TYPE = "Harvester.findAllEnabledOfType";
    public static final String QUERY_FIND_TYPE_WITH_CONTENT = "Harvester.findTypeWithContent";

    @Column(name = "type", nullable = false)
    private String type;


    public String getType() {
        return type;
    }

    //
    // fluent Api

    public HarvesterConfig withId(Long id) {
        this.setId(id);
        return this;
    }

    public HarvesterConfig withVersion(Long version) {
        super.setVersion(version);
        return this;
    }


    public HarvesterConfig withContent(String content) throws JSONBException {
        this.setContent(content);
        return this;
    }


    public HarvesterConfig withType(String type) {
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HarvesterConfig)) return false;
        HarvesterConfig that = (HarvesterConfig) o;
        return Objects.equals(getType(), that.getType());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getType());
    }


    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("HarvesterConfig{");
        sb.append("id=").append(getId());
        sb.append(", version=").append(getVersion());
        sb.append(", type='").append(getType()).append('\'');
        sb.append(", content='").append(getContent()).append('\'');
        sb.append('}');
        return sb.toString();
    }
}
