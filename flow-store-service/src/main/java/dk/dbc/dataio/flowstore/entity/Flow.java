package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import dk.dbc.commons.jsonb.JSONBContext;
import dk.dbc.commons.jsonb.JSONBException;
import dk.dbc.dataio.commons.types.FlowComponent;
import dk.dbc.dataio.commons.types.FlowComponentView;
import dk.dbc.dataio.commons.types.FlowContent;
import dk.dbc.dataio.commons.types.FlowView;
import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityResult;
import jakarta.persistence.Lob;
import jakarta.persistence.NamedNativeQueries;
import jakarta.persistence.NamedNativeQuery;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.SqlResultSetMapping;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Persistence domain class for flow objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = Flow.TABLE_NAME)
@SqlResultSetMapping(name = "Flow.implicit", entities = {
        @EntityResult(entityClass = Flow.class)}
)
@NamedNativeQueries({
        @NamedNativeQuery(name = Flow.QUERY_FIND_ALL,
                query = "SELECT view FROM Flows ORDER BY lower(view->>'name') ASC"
        ),
        @NamedNativeQuery(name = Flow.QUERY_FIND_BY_NAME,
                query = "SELECT * FROM flows WHERE (content->>'name') = ?",
                resultSetMapping = "Flow.implicit"
        )
})
public class Flow extends Versioned {
    public static final String TABLE_NAME = "flows";
    public static final String QUERY_FIND_ALL = "Flow.findAll";
    public static final String QUERY_FIND_BY_NAME = "Flow.findByName";

    private static final JSONBContext JSONB_CONTEXT = new JSONBContext();

    @Lob
    @Column(nullable = false, columnDefinition = "json")
    @Convert(converter = JsonConverter.class)
    private String view;

    @Lob
    @JsonIgnore
    private byte[] jsar;
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModified;

    public String getView() {
        return view;
    }

    @PrePersist
    @PreUpdate
    public void preChange() {
        // We have to do this @Pre as opposed to @Post to ensure
        // the view value reaches the database, but this means
        // that the version field has not yet been given its new
        // value when the view string is generated.
        final Long version = getVersion();
        view = generateView(version == null ? 1 : version + 1);
    }

    public byte[] getJsar() {
        return jsar;
    }

    public void setJsar(byte[] jsar) {
        this.jsar = jsar;
    }

    public Date getLastModified() {
        return lastModified;
    }

    public void setLastModified(Date lastModified) {
        this.lastModified = lastModified;
    }

    public String generateView() {
        // Used during database migration
        return generateView(getVersion());
    }

    public String generateView(Long version) {
        try {
            FlowContent flowContent = jsar == null ? JSONB_CONTEXT.unmarshall(getContent(), FlowContent.class) : new FlowContent(jsar, lastModified);
            FlowView view = new FlowView()
                    .withId(getId())
                    .withVersion(version)
                    .withName(flowContent.getName())
                    .withDescription(flowContent.getDescription())
                    .withTimeOfComponentUpdate(lastModified) // Components are no more
                    .withComponents(generateComponentViews(flowContent.getComponents() == null ? List.of() : flowContent.getComponents()));
            return JSONB_CONTEXT.marshall(view);
        } catch (JSONBException e) {
            throw new IllegalStateException(e);
        }
    }

    private List<FlowComponentView> generateComponentViews(List<FlowComponent> components) {
        return components.stream().map(FlowComponent::toView).collect(Collectors.toList());
    }
}
