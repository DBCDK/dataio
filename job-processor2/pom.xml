<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>jse-app</artifactId>
        <groupId>dk.dbc</groupId>
        <version>2.0-SNAPSHOT</version>
        <relativePath>../jse-app</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>dataio-job-processor2</artifactId>

    <properties>
        <main-class>dk.dbc.dataio.jobprocessor2.Jobprocessor</main-class>
        <!--suppress UnresolvedMavenProperty -->
        <start.cmd>java -javaagent:"/work/opentelemetry-javaagent.jar" -Xms${INIT_HEAP:-128m} -Xmx${MAX_HEAP:-2g} -XX:+ExitOnOutOfMemoryError -Dlogback.configurationFile=logback-jobstore.xml -jar /work/${project.build.finalName}.jar</start.cmd>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.opentelemetry.instrumentation</groupId>
            <artifactId>opentelemetry-instrumentation-annotations</artifactId>
            <version>2.13.3</version>
        </dependency>
        <dependency>
            <groupId>dk.dbc</groupId>
            <artifactId>artemis-jse-app</artifactId>
        </dependency>
        <dependency>
            <groupId>dk.dbc</groupId>
            <artifactId>dataio-commons-utils-flow-store-service-connector</artifactId>
            <type>ejb</type>
        </dependency>
        <dependency>
            <groupId>dk.dbc</groupId>
            <artifactId>dataio-javascript</artifactId>
            <version>2.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>dk.dbc</groupId>
            <artifactId>dataio-commons-utils-test</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback.db</groupId>
            <artifactId>logback-classic-db</artifactId>
        </dependency>
        <dependency>
            <groupId>dk.dbc</groupId>
            <artifactId>jscommon</artifactId>
            <version>2012.1-SNAPSHOT</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>job-processor2</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.45-SNAPSHOT</version>
                <executions>
                    <execution>
                        <id>build</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration combine.self="override">
                    <tagName>devel</tagName>
                    <images>
                        <image>
                            <name>docker-metascrum.artifacts.dbccloud.dk/${project.artifactId}:${tag}</name>
                            <build>
                                <from>${java.image}</from>
                                <user>java</user>
                                <env>
                                    <LOG_FORMAT default-value="json"/>
                                    <LOG_LEVEL default-value="INFO"/>
                                    <TZ default-value="Europe/Copenhagen"/>
                                </env>
                                <assemblies>
                                    <assembly>
                                        <descriptorRef>artifact</descriptorRef>
                                        <targetDir>/work</targetDir>
                                    </assembly>
                                    <assembly>
                                        <name>open-telemetry</name>
                                        <user>java</user>
                                        <mode>dir</mode>
                                        <targetDir>/work</targetDir>
                                        <inline>
                                            <fileSets>
                                                <fileSet>
                                                    <directory>.</directory>
                                                    <outputDirectory>.</outputDirectory>
                                                    <includes>
                                                        <include>opentelemetry-javaagent.jar</include>
                                                    </includes>
                                                </fileSet>
                                            </fileSets>
                                        </inline>
                                    </assembly>
                                </assemblies>
                                <cmd>${start.cmd}</cmd>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>docker-push</id>
            <properties>
                <!--suppress UnresolvedMavenProperty -->
                <tag>${BUILD_NUMBER}</tag>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>push</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
