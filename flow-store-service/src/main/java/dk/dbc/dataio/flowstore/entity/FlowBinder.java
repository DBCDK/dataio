/*
 * DataIO - Data IO
 * Copyright (C) 2015 Dansk Bibliotekscenter a/s, Tempovej 7-11, DK-2750 Ballerup,
 * Denmark. CVR: 15149043
 *
 * This file is part of DataIO.
 *
 * DataIO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataIO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DataIO.  If not, see <http://www.gnu.org/licenses/>.
 */

package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import dk.dbc.dataio.commons.types.FlowBinderContent;
import dk.dbc.dataio.commons.types.SubmitterContent;
import dk.dbc.dataio.commons.utils.invariant.InvariantUtil;
import dk.dbc.dataio.jsonb.JSONBContext;
import dk.dbc.dataio.jsonb.JSONBException;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Persistence domain class for flow binder objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string.

 * Note that this entity contains foreign key relations to its attached submitters.
 */
@Entity
@Table(name = FlowBinder.TABLE_NAME,
uniqueConstraints = {
    @UniqueConstraint(columnNames = { FlowBinder.NAME_INDEX_COLUMN }),
})
@NamedQueries({
    @NamedQuery(name = FlowBinder.QUERY_FIND_FLOWBINDER, query = FlowBinder.FIND_FLOWBINDER_QUERY_STRING),
    @NamedQuery(name = FlowBinder.QUERY_FIND_ALL, query = "SELECT flowbinder FROM FlowBinder flowbinder ORDER BY flowbinder.nameIndexValue ASC"),
    @NamedQuery(name = FlowBinder.QUERY_FIND_ALL_SEARCH_INDEXES_FOR_FLOWBINDER, query = FlowBinder.FIND_ALL_SEARCH_INDEXES_FOR_FLOWBINDER),
    @NamedQuery(name = FlowBinder.QUERY_FIND_ALL_FLOWBINDERS_FOR_SUBMITTER, query = FlowBinder.QUERY_FIND_ALL_SEARCH_INDEXES_BY_SUBMITTER)
})
public class FlowBinder extends VersionedEntity {

    private static final JSONBContext jsonbContext = new JSONBContext();

    public static final String TABLE_NAME = "flow_binders";
    public static final String SUBMITTER_JOIN_TABLE_NAME = "flow_binders_submitters";
    public static final String SUBMITTER_IDS_FIELD = "submitterIds";

    public static final String QUERY_FIND_FLOWBINDER = "FlowBinder.findFlowBinder";
    public static final String QUERY_FIND_ALL = "FlowBinder.findAll";
    public static final String QUERY_FIND_ALL_SEARCH_INDEXES_FOR_FLOWBINDER = "FlowBinderSearchIndexEntry.findAllEntriesForFlowBinder";
    public static final String QUERY_FIND_ALL_FLOWBINDERS_FOR_SUBMITTER = "FlowBinderSearchIndexEntry.findAllEntriesForFlowBinderWithSubmitter";

    public static final String DB_QUERY_PARAMETER_SUBMITTER = "submitter";
    public static final String DB_QUERY_PARAMETER_FORMAT = "format";
    public static final String DB_QUERY_PARAMETER_DESTINATION = "destination";
    public static final String DB_QUERY_PARAMETER_CHARSET = "charset";
    public static final String DB_QUERY_PARAMETER_PACKAGING = "packaging";
    public static final String DB_QUERY_PARAMETER_FLOWBINDER = "flowBinder";

    public static final String FIND_FLOWBINDER_QUERY_STRING =
            "SELECT indexes.flowBinder"
            + " FROM FlowBinderSearchIndexEntry indexes"
            + " WHERE indexes.packaging = :" + FlowBinder.DB_QUERY_PARAMETER_PACKAGING
            + " AND indexes.format = :" + FlowBinder.DB_QUERY_PARAMETER_FORMAT
            + " AND indexes.charset = :" + FlowBinder.DB_QUERY_PARAMETER_CHARSET
            + " AND indexes.submitter = :" + FlowBinder.DB_QUERY_PARAMETER_SUBMITTER
            + " AND indexes.destination = :" + FlowBinder.DB_QUERY_PARAMETER_DESTINATION;
    
    public static final String FIND_ALL_SEARCH_INDEXES_FOR_FLOWBINDER =
            "SELECT searchIndexEntry"
            + " FROM FlowBinderSearchIndexEntry searchIndexEntry "
            + " WHERE searchIndexEntry.flowBinder.id = :" + FlowBinder.DB_QUERY_PARAMETER_FLOWBINDER;

    public static final String QUERY_FIND_ALL_SEARCH_INDEXES_BY_SUBMITTER =
            "SELECT searchIndexEntry"
                    + " FROM FlowBinderSearchIndexEntry searchIndexEntry "
                    + " WHERE searchIndexEntry.submitter = :" + FlowBinder.DB_QUERY_PARAMETER_SUBMITTER;

    static final String NAME_INDEX_COLUMN = "name_idx";
    static final String BINDER_JOIN_COLUMN = "flow_binder_id";
    static final String FLOW_JOIN_COLUMN = "flow_id";
    static final String SINK_JOIN_COLUMN = "sink_id";
    static final String SUBMITTER_JOIN_COLUMN = "submitter_id";

    @Lob
    @Column(name = NAME_INDEX_COLUMN, nullable = false)
    private String nameIndexValue;

    @OneToMany(fetch = FetchType.LAZY)
    @JoinTable(name = SUBMITTER_JOIN_TABLE_NAME,
            joinColumns = @JoinColumn(name = BINDER_JOIN_COLUMN),
            inverseJoinColumns = @JoinColumn(name = SUBMITTER_JOIN_COLUMN))
    private Set<Submitter> submitters;

    // flow is accessed through java EE, so we will suppress pmd-warnings
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = FLOW_JOIN_COLUMN)
    private Flow flow; // NOPMD

    // sink is accessed through java EE, so we will suppress pmd-warnings
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = SINK_JOIN_COLUMN)
    private Sink sink; // NOPMD

    @Transient
    private Long flowId;

    @Transient
    private Set<Long> submitterIds;

    @Transient
    private Long sinkId;

    @JsonIgnore
    public Long getFlowId() {
        return flowId;
    }

    @JsonIgnore
    public Set<Long> getSubmitterIds() {
        return new HashSet<>(submitterIds);
    }

    @JsonIgnore
    public Long getSinkId() {
        return sinkId;
    }

    public void setFlow(Flow flow) {
        this.flow = flow;
    }

    public void setSubmitters(Set<Submitter> submitters) {
        this.submitters = new HashSet<>(submitters);
    }

    public void setSink(Sink sink) {
        this.sink = sink;
    }

    String getNameIndexValue() {
        return nameIndexValue;
    }

    /**
     * {@inheritDoc}
     * @throws NullPointerException if given null-valued data argument
     * @throws IllegalArgumentException if given empty-valued data argument
     * @throws JSONBException if non-json JSON string or if given JSON is invalid FlowBinderContent.
     */
    @Override
    protected void preProcessContent(String data) throws JSONBException {
        final FlowBinderContent flowBinderContent = jsonbContext.unmarshall(data, FlowBinderContent.class);
        nameIndexValue = flowBinderContent.getName();
        submitterIds = new HashSet<>(flowBinderContent.getSubmitterIds());
        flowId = flowBinderContent.getFlowId();
        sinkId = flowBinderContent.getSinkId();
    }

    /**
     * Generates search index entries for given flow binder
     *
     * @param flowBinder flow binder instance
     *
     * @return list of search index entries
     *
     * @throws NullPointerException if given null-valued flow binder
     * @throws JSONBException if flow binder contains invalid JSON content
     */
    public static List<FlowBinderSearchIndexEntry> generateSearchIndexEntries(final FlowBinder flowBinder) throws JSONBException {
        InvariantUtil.checkNotNullOrThrow(flowBinder, "flowBinder");
        final FlowBinderContent flowBinderContent = jsonbContext.unmarshall(flowBinder.getContent(), FlowBinderContent.class);
        final String packaging = flowBinderContent.getPackaging();
        final String format = flowBinderContent.getFormat();
        final String charset = flowBinderContent.getCharset();
        final String destination = flowBinderContent.getDestination();
        final List<FlowBinderSearchIndexEntry> index = new ArrayList<>(flowBinder.getSubmitterIds().size());
        for (final Submitter submitter : flowBinder.submitters) {
            final SubmitterContent submitterContent = jsonbContext.unmarshall(submitter.getContent(), SubmitterContent.class);
            final FlowBinderSearchIndexEntry entry = new FlowBinderSearchIndexEntry();
            entry.setPackaging(packaging);
            entry.setFormat(format);
            entry.setCharset(charset);
            entry.setDestination(destination);
            entry.setSubmitter(submitterContent.getNumber());
            entry.setFlowBinder(flowBinder);
            index.add(entry);
        }
        return index;
    }
}
