package dk.dbc.dataio.jobstore.service.dbhelper;

import dk.dbc.dataio.jsonb.JSONBContext;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * This abstract class constitutes a wrapper for a java.sql.PreparedStatement
 * whose execution will result in a java.sql.ResultSet.
 */
public abstract class QueryStatement extends WrappedStatement implements AutoCloseable {
    public interface QueryResult {}

    /**
     * Executes wrapped statement
     * @return result of execution as QueryResult instance
     * @throws SQLException in case of database error
     */
    public abstract QueryResult execute() throws SQLException;

    /**
     * Constructor
     * @param connection active database connection (session)
     * @param jsonbContext JSON binding context
     * @param sqlTemplate SQL statement template
     */
    public QueryStatement(Connection connection, JSONBContext jsonbContext, String sqlTemplate) {
        this.connection = connection;
        this.jsonbContext = jsonbContext;
        this.sqlTemplate = sqlTemplate;
    }

    /**
     * Executes the SQL query in this wrapped PreparedStatement object and returns
     * the ResultSet object generated by the query.
     * @return a ResultSet object that contains the data produced by the query, never null
     * @throws SQLException if a database access error occurs
     */
    public ResultSet executeAndGetResultSet() throws SQLException {
        createStatement();
        return statement.executeQuery();
    }

    /**
     * Executes the SQL query in this wrapped PreparedStatement object assuming
     * returned ResultSet object contains only a single row with a single integer
     * column.
     * @return integer value
     * @throws SQLException if a database access error occurs, or if unable to
     * extract integer value from ResultSet
     */
    public int executeAndGetInt() throws SQLException {
        final ResultSet resultSet = executeAndGetResultSet();
        if (resultSet.next() && resultSet.isLast()) {
            return resultSet.getInt(1);
        } else {
            throw new SQLException("Unable to get integer value from result set");
        }
    }
}
