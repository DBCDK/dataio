{"id":11,"version":4,"content":{"name":"RR2Brønd","description":"Javascriptbehandling af poster fra RR til Brønd 3.5","components":[{"id":9,"version":4,"content":{"name":"RR2Brønd","svnProjectForInvocationJavascript":"datawell-convert","svnRevision":78666,"invocationJavascriptName":"trunk/js/marc_fbs.js","javascripts":[{"javascript":"","moduleName":""},{"javascript":"LyoqIEBmaWxlIE1vZHVsZXNJbmZvIG1vZHVsZS4gR2V0IGluZm9ybWF0aW9uIGFib3V0IGxvYWRlZCBtb2R1bGVzICovCgovLyBXQVJOSU5HOiBJZiB5b3UgYnJlYWsgdGhpcyBmaWxlLCB0aGUgbW9kdWxlIHN5c3RlbSB3aWxsIHN0b3Agd29ya2luZyEgCgovLyBqc2xpYiBkZXBlbmRzIG9uIGFuZCBsb2FkcyB0aGlzIG1vZHVsZS4KLy8gVGhlIGJpbmFyeSB1c2VzIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOgovLyAKLy8gX19Nb2R1bGVzSW5mby5jaGVja0RlcEFscmVhZHlMb2FkZWQKLy8gX19Nb2R1bGVzSW5mby5hZGRQdXNoTW9kdWxlCi8vIF9fTW9kdWxlc0luZm8ucG9wTW9kdWxlTG9hZFN0YWNrCi8vIF9fTW9kdWxlc0luZm8ucmVtb3ZlTW9kdWxlCi8vCi8vIEl0IGlzIGFsc28gdXNlZCBpbmRpcmVjdGx5IGJ5IFVzZS51c2UuanMKLy8gCgovLyBWYXJpb3VzIGZpbGVzIGluIHNjcmlwdHMvKi51c2UuanMgZGVwZW5kcyBvbiB0aGUgaW50ZXJmYWNlIGluIHRoaXMgZmlsZS4KCi8vIE5vdGUsIGZvciB2YXJpb3VzIG1vcmUgb3IgbGVzcyBvYnZpb3VzIHJlYXNvbnMsIHlvdSBjYW4gKm5vdCogdXNlIGFueSBvdGhlciBtb2R1bGVzCi8vIGZyb20gdGhpcyBmaWxlLiBNa2F5PwoKLy8gVGhpcyBpcyBub3QgbWVhbnQgdG8gYmUgZXh0ZXJuYWxseSBleHBvc2VkLgp2YXIgX19Nb2R1bGVzSW5mbyA9IGZ1bmN0aW9uKCApIHsKICAgIHZhciB0aGF0ID0ge307CgogICAgLy8gSGFzaCBmcm9tIG1vZHVsZU5hbWUgdG8gbW9kdWxlSW5mbzogbmFtZSwgdXJsLCBzeW1ib2xzLCBwb3NzaWJseSBvdGhlcnMgYXQgYSBsYXRlciB0aW1lLgogICAgdmFyIF9fbW9kdWxlcyA9IHt9OwoKICAgIC8vIFN0YWNrIG9mIG1vZHVsZXMgdGhhdCBhcmUgY3VycmVudGx5IGJlZWluZyBsb2FkZWQKICAgIHZhciBfX21vZHVsZUxvYWRTdGFjayA9IFsgXTsKCiAgICAvLyBDb3B5IG9mIHNlYXJjaFBhdGhzIGFzIHRoZXkgbG9va2VkLCB3aGVuIHRoZSBNb2R1bGVzSW5mbyBtb2R1bGUgd2FzIGxvYWRlZCwgYnkgdGhlIHVzZSBzeXN0ZW0uCiAgICB2YXIgX19zZWFyY2hQYXRocyA9IFsgXTsKICAgIAogICAgdGhhdC5hZGRTZWFyY2hQYXRoID0gZnVuY3Rpb24oIHBhdGggKSB7CiAgICAgICAgX19zZWFyY2hQYXRocy5wdXNoKCBwYXRoICk7CiAgICB9OwogICAgCiAgICAvLyBSZXR1cm4gcmVmZXJlbmNlIHRvIHRoZSBzZWFyY2hwYXRocyBpbiB1c2Ugd2hlbiB0aGUgbW9kdWxlc0luZm8gbW9kdWxlIHdhcyBsb2FkZWQuCiAgICAvLyBBIGNvcHkgaXMgcmV0dXJuZWQuCiAgICB0aGF0LmdldFNlYXJjaFBhdGhzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF9fc2VhcmNoUGF0aHMuc2xpY2UoMCk7CiAgICB9CiAgICAKICAgIC8qIERlYnVnIGZ1bmN0aW9uCiAgICB0aGF0LnByaW50X2J1ZmZlciA9ICIiOwogICAgdmFyIG15cHJpbnQgPSBmdW5jdGlvbigpIHsKICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kgKSB7CiAgICAgICAgICAgIHRoYXQucHJpbnRfYnVmZmVyICs9IGFyZ3VtZW50c1tpXTsKICAgICAgICB9CiAgICB9CiovCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGRvZXMgdHdvIHRoaW5ncy4gRmlyc3QgaXQgY2hlY2tzIGlmIHdlIGFyZSBjdXJyZW50bHkgbG9hZGluZyBhIG1vZHVsZS4KICAgIC8vIElmIHRoYXQgaXMgdGhlIGNhc2UsIHRoZW4gaXQgYXNzdW1lcyB0aGF0IHRoZSBtb2R1bGUgbmVlZCB0byB1c2UgdGhlIG1vZHVsZU5hbWUsIGFuZCBhZGRzIGl0CiAgICAvLyB0byB0aGUgbGlzdCBvZiB1c2VzIGZvciB0aGUgY3VycmVudGx5IGxvYWRpbmcgbW9kdWxlLgogICAgLy8gU2Vjb25kbHksIGl0IGNoZWNrcyBpZiB0aGUgbW9kdWxlIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkIGFuZCByZXR1cm5zIHRydWUgb2YgZmFsc2UKICAgIC8vISBcdG9kbyBUaGlzIGlzIGFsbW9zdCBhbHdheXMgY2FsbGVkIG9uY2Ugd2l0aCB0aGUgbW9kdWxlIGl0IHNlbGYsIHdoaWxlIHdlIGFyZSBsb2FkaW5nIGl0LiBJIGFtIG5vdCBzdXJlIHdoeT8KICAgIHRoYXQuY2hlY2tEZXBBbHJlYWR5TG9hZGVkID0gZnVuY3Rpb24oIG1vZHVsZU5hbWUgKSB7CiAgICAgICAgLy8gICAgICAgIG15cHJpbnQoICJjaGVja0RlcEFscmVhZHlMb2FkZWQoICIgKyBtb2R1bGVOYW1lICsgIik7XG4iICk7CiAgICAgICAgaWYgKCB0aGlzLmlzTG9hZGluZ01vZHVsZSggKSApIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnRfbW9kdWxlID0gdGhpcy5jdXJyZW50TG9hZGluZ01vZHVsZSggKTsKICAgICAgICAgICAgaWYgKCBjdXJyZW50X21vZHVsZSAhPT0gbW9kdWxlTmFtZSApIHsgLy8gTm90IHN1cmUgd2h5IHRoaXMgaGFwcGVucy4KICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIG15cHJpbnQoICIgIGlzTG9hZGluZ01vZHVsZTogIiArIHRoaXMuY3VycmVudExvYWRpbmdNb2R1bGUoKSArICIgaGFzIHVzZXM6ICIgKyBfX21vZHVsZXNbIHRoaXMuY3VycmVudExvYWRpbmdNb2R1bGUoKSBdLnVzZXMgKyAiXG4iICk7CiAgICAgICAgICAgICAgICBpZiAoIC0xID09IF9fbW9kdWxlc1sgdGhpcy5jdXJyZW50TG9hZGluZ01vZHVsZSggKSBdLnVzZXMuaW5kZXhPZiggbW9kdWxlTmFtZSApICkgewogICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBteXByaW50KCAiICAgIHB1c2hpbmcgIiArIHRoaXMuY3VycmVudExvYWRpbmdNb2R1bGUoKSArICIgPT0+ICIgKyBtb2R1bGVOYW1lICsgIlxuIiApOwogICAgICAgICAgICAgICAgICAgIF9fbW9kdWxlc1sgdGhpcy5jdXJyZW50TG9hZGluZ01vZHVsZSggKSBdLnVzZXMucHVzaCggbW9kdWxlTmFtZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmhhc01vZHVsZSggbW9kdWxlTmFtZSApOwogICAgfTsKCiAgICB0aGF0Lmhhc01vZHVsZSA9IGZ1bmN0aW9uKCBtb2R1bGVOYW1lICkgewogICAgICAgIHJldHVybiBtb2R1bGVOYW1lIGluIF9fbW9kdWxlczsKICAgIH0KCiAgICB0aGF0LmdldE1vZHVsZSA9IGZ1bmN0aW9uKCBtb2R1bGVOYW1lICkgewogICAgICAgIGlmICggIXRoaXMuaGFzTW9kdWxlKCBtb2R1bGVOYW1lICkgKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggImdldE1vZHVsZTogTW9kdWxlICciICsgbW9kdWxlTmFtZSArICInIGlzIG5vdCByZWdpc3RlcmVkIiApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gX19tb2R1bGVzWyBtb2R1bGVOYW1lIF07CiAgICB9OwoKICAgIHRoYXQuYWRkUHVzaE1vZHVsZSA9IGZ1bmN0aW9uKCBtb2R1bGVOYW1lLCB1cmwgKSB7CiAgICAgICAgaWYgKCB0aGlzLmhhc01vZHVsZSggbW9kdWxlTmFtZSApICkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICJhZGRQdXNoTW9kdWxlOiBNb2R1bGUgJyIgKyBtb2R1bGVOYW1lICsgIicgaXMgYWxyZWFkeSByZWdpc3RlcmVkIHdpdGggdXJsOiAnIiArIHRoaXMuZ2V0TW9kdWxlKCBtb2R1bGVOYW1lICkudXJsICsgIiciICk7CiAgICAgICAgfQogICAgICAgIF9fbW9kdWxlc1sgbW9kdWxlTmFtZSBdID0gewogICAgICAgICAgICBuYW1lOiBtb2R1bGVOYW1lLAogICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgc3ltYm9sczogWyBdLAogICAgICAgICAgICB1c2VzOiBbIF0KICAgICAgICB9OwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIF9fbW9kdWxlTG9hZFN0YWNrLnB1c2goIG1vZHVsZU5hbWUgKTsKICAgICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAgICAgZGVsZXRlIF9fbW9kdWxlc1sgbW9kdWxlTmFtZSBdOwogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgIH07CgogICAgLy8gU2V0IHRoZSB1cmwgb24gYSBtb2R1bGUuIFRoaXMgaXMgdXNlZCB0byBzZXQgdGhlIFVSTCBmb3IgYSBtb2R1bGUsIGFmdGVyIGxvYWRpbmcuLi4KICAgIC8vIFVzZSBjYXNlIGlzIHRoZSBNb2R1bGVzSW5mbyB1cmwuLi4KICAgIHRoYXQuc2V0TW9kdWxlVXJsID0gZnVuY3Rpb24oIG1vZHVsZU5hbWUsIHVybCApIHsKICAgICAgICBpZiAoICF0aGlzLmhhc01vZHVsZSggbW9kdWxlTmFtZSApICkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICJzZXRNb2R1bGVVcmw6IE1vZHVsZSAnIiArIG1vZHVsZU5hbWUgKyAiJyBpcyBub3QgcmVnaXN0ZXJlZCIgKTsKICAgICAgICB9CiAgICAgICAgX19tb2R1bGVzWyBtb2R1bGVOYW1lIF0udXJsID0gdXJsOwogICAgfQoKICAgIHRoYXQucmVtb3ZlTW9kdWxlID0gZnVuY3Rpb24oIG1vZHVsZU5hbWUgKSB7CiAgICAgICAgaWYgKCAhdGhpcy5oYXNNb2R1bGUoIG1vZHVsZU5hbWUgKSApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAicmVtb3ZlTW9kdWxlOiBNb2R1bGUgJyIgKyBtb2R1bGVOYW1lICsgIicgaXMgbm90IHJlZ2lzdGVyZWQiICk7CiAgICAgICAgfQogICAgICAgIGRlbGV0ZSBfX21vZHVsZXNbIG1vZHVsZU5hbWUgXTsKICAgIH07CgogICAgdGhhdC5wb3BNb2R1bGVMb2FkU3RhY2sgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuIF9fbW9kdWxlTG9hZFN0YWNrLnBvcCggKTsKICAgIH07CgogICAgdGhhdC5pc0xvYWRpbmdNb2R1bGUgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuIF9fbW9kdWxlTG9hZFN0YWNrLmxlbmd0aCAhPT0gMDsKICAgIH07CgogICAgdGhhdC5jdXJyZW50TG9hZGluZ01vZHVsZSA9IGZ1bmN0aW9uKCApIHsKICAgICAgICBpZiAoICF0aGlzLmlzTG9hZGluZ01vZHVsZSggKSApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAiY3VycmVudExvYWRNb2R1bGU6IE5vdCBjdXJyZW50bHkgbG9hZGluZyBhIG1vZHVsZSIgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIF9fbW9kdWxlTG9hZFN0YWNrWyBfX21vZHVsZUxvYWRTdGFjay5sZW5ndGggLSAxIF07CiAgICB9OwoKICAgIC8vIFRoZSBzeW1ib2xzIGFycmF5IHBhc3NlZCwgaXMgY29waWVkCiAgICB0aGF0LmFkZFN5bWJvbHMgPSBmdW5jdGlvbiggbW9kdWxlTmFtZSwgc3ltYm9scyApIHsKICAgICAgICBpZiAoICF0aGlzLmhhc01vZHVsZSggbW9kdWxlTmFtZSApICkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICJhZGRTeW1ib2xzOiBNb2R1bGUgJyIgKyBtb2R1bGVOYW1lICsgIicgaXMgbm90IHJlZ2lzdGVyZWQiICk7CiAgICAgICAgfQogICAgICAgIHRoaXMuZ2V0TW9kdWxlKCBtb2R1bGVOYW1lICkuc3ltYm9scyA9IHN5bWJvbHMubWFwKCBmdW5jdGlvbiggeCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB4OwogICAgICAgICAgICB9ICk7CiAgICB9OwoKICAgIHRoYXQubW9kdWxlTmFtZXMgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgdmFyIHJlcyA9IFsgXTsKICAgICAgICBmb3IgKCB2YXIgbSBpbiBfX21vZHVsZXMgKSB7CiAgICAgICAgICAgIGlmICggX19tb2R1bGVzLmhhc093blByb3BlcnR5KCBtICkgKSB7CiAgICAgICAgICAgICAgICByZXMucHVzaCggX19tb2R1bGVzWyBtIF0ubmFtZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICB9OwoKICAgIHRoYXQuc2V0VmVyc2lvbiA9IGZ1bmN0aW9uKCBtb2R1bGVOYW1lLCB2ZXJzaW9uICkgewogICAgICAgIHRoaXMuZ2V0TW9kdWxlKCBtb2R1bGVOYW1lICkudmVyc2lvbiA9IHZlcnNpb247CiAgICB9OwoKICAgIHRoYXQuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uKCBtb2R1bGVOYW1lICkgewogICAgICAgIHJldHVybiB0aGlzLmdldE1vZHVsZSggbW9kdWxlTmFtZSApLnZlcnNpb247CiAgICB9OwoKICAgIC8vIFRoaXMgaXMgYSBiaXQgc2lsbHksIGl0IGluc2VydHMgaXRzZWxmLCB0aGVuIHJlbHkgb24gdGhlIAogICAgLy8gbW9kdWxlIHN5c3RlbSB0byBjb3JyZWN0IHRoZSB1cmwsIGlmIG5lZWRlZC4gCiAgICAvLyBUaGVyZSBhcmUgaGlzdG9yaWNhbCByZWFzb25zIHdoeSBpdCBlbmRlZCB1cCBsaWtlIHRoaXMKICAgIC8vIFJpZ2h0IG5vdywgaXQgaXMgaGFyZCB0byBjaGFuZ2UsIGJlY2F1c2UgaXQgd2lsbCBicmVhawogICAgLy8gaWYgbm90IGNvb3JkaW5hdGVkLCBzbyBsZWF2ZSBpdCBsaWtlIHRoaXMuCiAgICB0aGF0LmFkZFB1c2hNb2R1bGUoICJNb2R1bGVzSW5mbyIsICJ0aGUgaW5mbyBtb2R1bGUgaXRzZWxmIiApOwogICAgdGhhdC5wb3BNb2R1bGVMb2FkU3RhY2soICk7CgogICAgcmV0dXJuIHRoYXQ7Cn0oICk7CgovLyBBbiBpbnRlcmZhY2UgdGhhdCBjYW4gYmUgcHVibGljYWxseSB1c2VkCi8qKiAKICogTW9kdWxlIHRvIGdldCBpbmZvcm1hdGlvbiBhYm91dCBtb2R1bGVzLgogKgogKiBUaGlzIG5hbWVzcGFjZSBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBhIGNvdXBsZSBvZiBtZXRob2RzLCB0aGF0CiAqIHJldHVybnMgaW5mb3JtYXRpb24gZGVzY3JpYmluZyB3aGVyZSBtb2R1bGVzIHdlcmUgbG9hZGVkIGZyb20uCiAqCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIE1vZHVsZXNJbmZvICovCnZhciBNb2R1bGVzSW5mbyA9IGZ1bmN0aW9uKCApIHsKICAgIHZhciB0aGF0ID0ge307CiAgICB2YXIgbW9kdWxlc19pbmZvID0gX19Nb2R1bGVzSW5mbzsKCiAgICAvKioKICAgICAqIFJldHVybnMgYSBzdHJpbmcgd2l0aCBhbiB1cmwgZm9yIGFsbCBsb2FkZWQgbW9kdWxlcy4KICAgICAqIAogICAgICogVGhpcyBtZXRob2QgaXMgbWVhbnQgYXMgYW4gYWlkIGZvciBlLmcuIHNlcnZlciBwcm9ncmFtcywgdGhhdCBjYW4KICAgICAqIHJlcG9ydCwgdXNpbmcgdGhlaXIgbG9nIG9yIHNpbWlsYXIsIHdoZXJlIG1vZHVsZXMgd2hlcmUgbG9hZGVkIGZyb20uCiAgICAgKiAKICAgICAqIEBzeW50YXggTW9kdWxlc0luZm8uZ2V0TW9kdWxlVXJscygpOwogICAgICogQHJldHVybiB7U3RyaW5nfSBBIHN0cmluZyBvZiBtb2R1bGUgbmFtZXMgYW5kIHRoZWlyIGFzc29jaWF0ZWQgdXJscwogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTW9kdWxlc0luZm8uZ2V0TW9kdWxlVXJscyAqLwogICAgdGhhdC5nZXRNb2R1bGVVcmxzID0gZnVuY3Rpb24oICkgewogICAgICAgIHZhciBrZXlzID0gbW9kdWxlc19pbmZvLm1vZHVsZU5hbWVzKCApLnNvcnQoICk7CiAgICAgICAgdmFyIHJlcyA9ICIiOwogICAgICAgIHZhciBwcmUgPSAiIjsKICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpICkgewogICAgICAgICAgICByZXMgKz0gcHJlICsga2V5c1sgaSBdICsgIiA9PiAiICsgbW9kdWxlc19pbmZvLmdldE1vZHVsZSgga2V5c1sgaSBdICkudXJsOwogICAgICAgICAgICBwcmUgPSAiXG4iOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgfTsKICAgIAogICAgLyoqIFJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgdXJsIGZvciBhIHNpbmdsZSwgbmFtZWQgbW9kdWxlLgogICAgICoKICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIHVybCBvZiBhIHNpbmdsZSBuYW1lIG1vZHVsZSwgb3IgYW4KICAgICAqIGV4Y2VwdGlvbiwgaWYgdGhlIG1vZHVsZSBpcyBub3QgZm91bmQuCiAgICAgKgogICAgICogQHN5bnRheCBNb2R1bGVzSW5mby5nZXRNb2R1bGVVcmwoIG1vZHVsZSApCiAgICAgKiBAcmV0dXJuIFRoZSBVUkwgZm9yIHRoZSBtb2R1bGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNb2R1bGVzSW5mby5nZXRNb2R1bGVVcmwgKi8KICAgIHRoYXQuZ2V0TW9kdWxlVXJsID0gZnVuY3Rpb24oIG1vZHVsZSApIHsKICAgICAgICByZXR1cm4gbW9kdWxlc19pbmZvLmdldE1vZHVsZSggbW9kdWxlICkudXJsOwogICAgfQoKICAgIHJldHVybiB0aGF0Owp9KCApOwo=","moduleName":"ModulesInfo"},{"javascript":"","moduleName":"Use"},{"javascript":"","moduleName":"Log"},{"javascript":"Ly8gTG9nQ29yZSBtb2R1bGUgLSBpbXBsZW1lbnRzIGEgX19Mb2dDb3JlX2xvZyggbGV2ZWwsIGFyZ3MgKSBmdW5jdGlvbgoKLyogSmF2YSBNYXZlbiBkZXBzIG5lZWRlZDoKCiAgICAgICAgICAgICAgICA8IS0tIExPR0dJTkcgLS0+CiAgICAgICAgICAgICAgICA8IS0tIEluIG9yZGVyIHRvIHN1cHBvcnQgZGlmZmVyZW50IGxvZyBmcmFtZXdvcmtzLCB3ZSB1c2UgYSBmYWNhZGUgcGF0dGVybiAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGxvZ2dpbmcgVGhlIGFjdHVhbCBmYWNhZGUgcGF0dGVybiBpcyBzbGY0aiwgd2hpY2ggaXMgd2hhdCBkYmMtY29tbW9ucyAKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ29pbmcgdG8gdXNlIHRvby4gRm9yIGFjdHVhbCBsb2dnaW5nIGluIHRoZSBkZXBsb3ltZW50LCB3ZSB1c2UgbG9nNGouIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotYXBpPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjYuMTwvdmVyc2lvbj4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDxkZXBlbmRlbmN5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBJZD5vcmcuc2xmNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPnNsZjRqLWV4dDwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+IAoqLwoKLyogWW91IG1heSBhbHNvIHdhbnQgdG8gYWN0dWFsbHkgYmluZCB0byBlLmcuIGxvZzRqOgoKICAgICAgICAgICAgICAgIDwhLS0gVGhpcyBvbmUgYmluZHMgdG8gbG9nNGogaW4gdGhlIGRlcGxveW1lbnQuIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotbG9nNGoxMjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5ydW50aW1lPC9zY29wZT4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDwhLS0gSW4gbG9nIHdlIHRydXN0IDogaHR0cDovL2xvZ2dpbmcuYXBhY2hlLm9yZy9sb2c0ai8gLS0+CiAgICAgICAgICAgICAgICA8ZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3VwSWQ+bG9nNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvZzRqPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjIuMTY8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICA8IS0tIEVORCBMT0dHSU5HIC0tPgoqLwoKCi8vIFdlIGV4cG9ydCB0aGlzIHN5bWJvbCwgd2hpY2ggd2UgZXhwZWN0IHRvIGJlIHVzZWQgZnJvbSBhIExvZyBtb2R1bGUuCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdfX0xvZ0NvcmVfbG9nJywgJ19fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCcgXTsKCi8vIEFjdHVhbCBsb2cgZnVuY3Rpb24KdmFyIF9fTG9nQ29yZV9sb2cgPSBmdW5jdGlvbiggbGV2ZWwsIG1zZyApIHsKICAgIG1zZyA9ICJKUzogIiArIG1zZzsKICAgIC8vIFJoaW5vIHNwZWNpZmljIGJpbmRpbmdzIHV0aWxpemVkLgogICAgc3dpdGNoKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLnRyYWNlKCBtc2cgKTsgYnJlYWs7CiAgICBjYXNlICJkZWJ1ZyIgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5kZWJ1ZyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiaW5mbyIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuaW5mbyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAid2FybiIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIud2FybiggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiZXJyb3IiIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuZXJyb3IoIG1zZyApOyBicmVhazsKICAgIGNhc2UgImZhdGFsIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLmVycm9yKCAiRkFUQUw6ICIgKyBtc2cgKTsgYnJlYWs7CiAgICBkZWZhdWx0ICAgICAgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5lcnJvciggIlVOS05PV04gTE9HTEVWRUw6ICIgKyBsZXZlbCArICIgOiAiICsgbXNnICk7IGJyZWFrOwogICAgfQp9OwoKLy8gQ2hlY2sgbGV2ZWwgZXhwb3J0Cl9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IGZ1bmN0aW9uICggbGV2ZWwgKSB7CiAgICBzd2l0Y2ggKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc1RyYWNlRW5hYmxlZCgpOwogICAgY2FzZSAiZGVidWciIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzRGVidWdFbmFibGVkKCk7CiAgICBjYXNlICJpbmZvIiAgOiByZXR1cm4gX19Mb2dDb3JlX2xvZy5sb2dnZXIuaXNJbmZvRW5hYmxlZCgpOwogICAgY2FzZSAid2FybiIgIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzV2FybkVuYWJsZWQoKTsKICAgIGNhc2UgImVycm9yIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc0Vycm9yRW5hYmxlZCgpOwogICAgZGVmYXVsdDogcmV0dXJuIHRydWU7CiAgICB9Owp9CgoKLy8gQXR0YWNoIHRoZSBsb2dnZXIgdmFyaWFibGUgdG8gdGhlIGdsb2JhbCBsb2dnZXIgb25seSBvbmNlLCBub3QgZm9yIGVhY2gKLy8gZnVuY3Rpb24gY2FsbC4KLy8gU29ydCBvZiB0aGUgc3RhdGljIHdheSB0byBkbyBpdC4KCi8vIFRoZSBuZXh0IGxpbmUgY2FuIGJpbmQgKmRpcmVjdGx5KiB0byBsb2c0ai4gSXQgaXMgb25seSBpbmNsdWRlZCBmb3IKLy8gcmVmZXJlbmNlLCBhcwovLyB0aGUgZmFjYWRlIGJlbG93IGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gZG8gaXQuCi8vIF9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLmFwYWNoZS5sb2c0ai5Mb2dnZXIuZ2V0TG9nZ2VyKAovLyAiSmF2YVNjcmlwdC5Mb2dnZXIiICk7CgovLyBCaW5kaW5nIHRvIHRoZSBzbGY0aiBmYWNhZGUuCl9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLnNsZjRqLkxvZ2dlckZhY3RvcnkKICAgIC5nZXRMb2dnZXIoICJKYXZhU2NyaXB0LkxvZ2dlciIgKTsK","moduleName":"LogCore"},{"javascript":"","moduleName":"Underscore"},{"javascript":"","moduleName":"UnitTest"},{"javascript":"LyoqIEBmaWxlIFZhcmlvdXMgdXRpbGl0aWVzICovCgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnVXRpbCcgXTsKdXNlKCAiVW5kZXJzY29yZSIgKTsKCi8qKgogKiBWYXJpb3VzIHV0aWxpdGllcy4KICogCiAqIFZhcmlvdXMgdXRpbGl0aWVzLCBtb3N0bHkgcmVsYXRlZCB0byBvYmplY3RzLgogKiAKICogQG5hbWUgVXRpbAogKiBAbmFtZXNwYWNlIAogKi8KdmFyIFV0aWwgPSBmdW5jdGlvbiggKSB7CiAgICAvKioKICAgICAqIE1hcCBhIGZ1bmN0aW9uIGFjcm9zcyB0aGUgbWF0Y2hlcyBvZiBhIFJlZ0V4cC4gCiAgICAgKgogICAgICogKipUT0RPOioqIFJKRSBuZWVkcyB0byBkb2N1bWVudCB0aGlzLCBhbmQgZ2l2ZSBhdCBsZWFzdCBvbmUgZXhhbXBsZSBvbiBob3cgdG8gdXNlIGl0LgogICAgICoKICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAqIEBtZXRob2QKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yIG1hdGNoZXMuCiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmUgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBtYXAsIHRoaXMgZ2V0cyB0aGUgbWF0Y2hlZCByZWdleC1ncm91cHMgYXMgcGFyYW1ldGVycyAodGhlIGZ1bGwgbWF0Y2ggYXMgdGhlIGZpcnN0IG9mIHRoZW0pLgogICAgICogQG5hbWUgVXRpbC5mb3JFYWNoR3JvdXBlZFJlZ0V4cE1hdGNoCiAgICAgKi8KCiAgICBmdW5jdGlvbiBmb3JFYWNoR3JvdXBlZFJlZ0V4cE1hdGNoKCBzdHIsIHJlLCBmbiApIHsKICAgICAgICAvLyBKYXZhU2NyaXB0IHF1aXJjazogdGhlIGVhc2llc3Qgd2F5IHRvIG1hcCBhIGZ1bmN0aW9uIGFjcm9zcyB0aGUgX2dyb3Vwc18gb2YgdGhlIG1hdGNoZXMgb2YgYSByZWdleCBpcyB0byBjYWxsIHJlcGxhY2UgYW5kIHRocm93IHRoZSByZXN1bHQgYXdheS4gCiAgICAgICAgc3RyLnJlcGxhY2UoIHJlLCBmbiApOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIGZvckVhY2hHcm91cGVkUmVnRXhwTWF0Y2g6IGZvckVhY2hHcm91cGVkUmVnRXhwTWF0Y2gsCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0IHRoZSB0eXBlIG9mIGFuIG9iamVjdC4KICAgICAgICAgKiAKICAgICAgICAgKiBHZXQgdGhlIHR5cGUgb2YgYW4gb2JqZWN0LCB1c2luZyBzb21lIHRyaWNrcyBmcm9tIHRoZSBiYWcgb2YgUkpFLi4uCiAgICAgICAgICogCiAgICAgICAgICogQHR5cGUge2Z1bmN0aW9ufQogICAgICAgICAqIEBzeW50YXggVXRpbC5nZXRUeXBlKG9iaik7CiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGdldCB0aGUgdHlwZSBmb3IuCiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSB0eXBlb2Ygb2JqLCBvciBuYW1lIG9mIG9iai5jb25zdHJ1Y3RvciBpZiBhdmFpbGFibGUuCiAgICAgICAgICogQG5hbWUgVXRpbC5nZXRUeXBlCiAgICAgICAgICogQG1ldGhvZAogICAgICAgICAqLwogICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mKCBvYmogKTsKICAgICAgICAgICAgaWYgKCB0eXBlID09PSAib2JqZWN0IiAmJiBvYmogIT09IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICkgewogICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gUmVnRXhwKCAiZnVuY3Rpb24gKFteKF1bXihdKikiICkoIG9iai5jb25zdHJ1Y3Rvci50b1NvdXJjZSggKSApOwogICAgICAgICAgICAgICAgaWYgKCBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPT0gMiApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hbIDEgXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHlwZTsKICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldCB0aGUga2V5cyBmcm9tIGFuIG9iamVjdCBhcyBhbiBhcnJheS4KICAgICAgICAgKiAKICAgICAgICAgKiBHZXQgYW4gYXJyYXkgb2Yga2V5cyBvZiB0aGUgb2JqZWN0LCB1c2luZyBzb21lIHRyaWNrcyBmcm9tIHRoZSBiYWcgb2YKICAgICAgICAgKiBSSkUgCiAgICAgICAgICogCiAgICAgICAgICogQHR5cGUge2Z1bmN0aW9ufQogICAgICAgICAqIEBzeW50YXggVXRpbC5hcnJheU9mS2V5cyhvYmopOwogICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBnZXQgdGhlIGtleXMgZm9yLgogICAgICAgICAqIEByZXR1cm4ge29iamVjdFtdfSBSZXR1cm5zIGEgbmV3IGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBrZXlzIG9mIG9iai4KICAgICAgICAgKiBAbmFtZSBVdGlsLmFycmF5T2ZLZXlzCiAgICAgICAgICogQG1ldGhvZCAqLwogICAgICAgIGFycmF5T2ZLZXlzOiBmdW5jdGlvbiggb2JqICkgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0gWyBdOwogICAgICAgICAgICBmb3IgKCB2YXIgZWxlbSBpbiBvYmogKSBpZiAoIG9iai5oYXNPd25Qcm9wZXJ0eSggZWxlbSApICkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCBlbGVtICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBJcyB0aGlzIGFuIG9iamVjdC4KICAgICAgICAgKiAKICAgICAgICAgKiBGaWd1cmVzIG91dCBpZiB0aGlzIGlzIGFuIG9iamVjdCwgdXNpbmcgc29tZSB0cmlja3MgZnJvbSB0aGUgYmFnIG9mIFJKRS4KICAgICAgICAgKiAKICAgICAgICAgKiBAdHlwZSB7ZnVuY3Rpb259CiAgICAgICAgICogQHN5bnRheCBVdGlsLmdldFR5cGUob2JqKTsKICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gdGVzdCBmb3IgYmVlaW5nIGFuIG9iamVjdC4KICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG9iaiBpcyBhbiBvYmplY3QgKG5vdCBudWxsIG9yIGFycmF5KQogICAgICAgICAqIEBuYW1lIFV0aWwuaXNPYmplY3QKICAgICAgICAgKiBAbWV0aG9kICovCiAgICAgICAgaXNPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgIHRocm93ICJkZXByZWNhdGVkIjsKICAgICAgICAgICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiggb2JqICkgPT09ICJvYmplY3QiICYmICEoIG9iaiBpbnN0YW5jZW9mIEFycmF5ICkgJiYgISggb2JqIGluc3RhbmNlb2YgRGF0ZSApOwogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0IGEgbmV3IG9iamVjdCB3aXRoIHNvcnRlZCBrZXlzLgogICAgICAgICAqIAogICAgICAgICAqIEdldCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzL3ZhbHVlcyBhcyB0aGUgb2JqLCBidXQgaW5zZXJ0ZWQgaW4KICAgICAgICAgKiBhbHBoYWJldGljYWwgb3JkZXIsIHVzaW5nIHNvbWUgdHJpY2tzIGZyb20gdGhlIGJhZyBvZiBSSkUuCiAgICAgICAgICogCiAgICAgICAgICogQHR5cGUge2Z1bmN0aW9ufQogICAgICAgICAqIEBzeW50YXggVXRpbC5rZXlTb3J0ZWRPYmplY3Qob2JqKTsKICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gc29ydCBrZXlzIGZvci4KICAgICAgICAgKiBAcmV0dXJuIHtvYmplY3R9IEEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMvdmFsdWVzIGFzIHRoZSBvYmosIGJ1dCBpbnNlcnRlZCBpbiBhbHBoYWJldGljYWwgb3JkZXIKICAgICAgICAgKiBAbmFtZSBVdGlsLmtleVNvcnRlZE9iamVjdAogICAgICAgICAqIEBtZXRob2QgKi8KICAgICAgICBrZXlTb3J0ZWRPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgIGlmICggb2JqID09PSBudWxsIHx8IHR5cGVvZiggb2JqICkgIT09ICJvYmplY3QiIHx8ICggb2JqIGluc3RhbmNlb2YgQXJyYXkgKSB8fCAoIG9iaiBpbnN0YW5jZW9mIERhdGUgKSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgICAgICBfLmtleXMoIG9iaiApLnNvcnQoICkuZm9yRWFjaCggZnVuY3Rpb24oIGtleSApIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbIGtleSBdID0gb2JqWyBrZXkgXTsKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIENyZWF0ZSBvYmplY3QgdGhhdCBoYXMgdGhlIGFyZ3VtZW50IGFzIHByb3RvdHlwZQogICAgICAgICAqIAogICAgICAgICAqIFNlZSBDcm9ja2ZvcmQgcGFnZSAyMi4gSW4gc29tZSBvZiBDcm9ja2ZvcmRzIG5vdGVzLCB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAKCSAqICJiZWdldCIuIFRoaXMgd2lsbCBiZWNvbWUgT2JqZWN0LmNyZWF0ZSBpbiBFUzUuCiAgICAgICAgICogIAogICAgICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAgICAgKiBAc3ludGF4IFV0aWwua2V5U29ydGVkT2JqZWN0KG9iaik7CiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHNvcnQga2V5cyBmb3IuCiAgICAgICAgICogQHJldHVybiB7b2JqZWN0fSBBIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzL3ZhbHVlcyBhcyB0aGUgb2JqLCBidXQgaW5zZXJ0ZWQgaW4gYWxwaGFiZXRpY2FsIG9yZGVyCiAgICAgICAgICogQG5hbWUgVXRpbC5rZXlTb3J0ZWRPYmplY3QKICAgICAgICAgKiBAbWV0aG9kICovCgljcmVhdGU6IGZ1bmN0aW9uICggcHJvdG90eXBlX29iamVjdCApewoJICAgIHZhciBGID0gZnVuY3Rpb24gKCkge307CgkgICAgRi5wcm90b3R5cGUgPSBwcm90b3R5cGVfb2JqZWN0OwoJICAgIHJldHVybiBuZXcgRigpOwoJfQogICAgfTsKfSggKTsK","moduleName":"Util"},{"javascript":"LyoqIEBmaWxlIFByb3ZpZGUgYSBHbG9iYWwgc3ltYm9sICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdHbG9iYWwnIF07CgovLyBJbXBvcnRhbnQgbm90ZTogVGhpcyBtb2R1bGUgY2FuIG5vdCB1c2UgdGhlIExvZyBtb2R1bGUsIGFzIHRoZSBMb2cKLy8gbW9kdWxlIHVzZXMgdGhpcyBtb2R1bGUuIEFuZCwgaG9uZXN0ZWx5LCB3aGF0IHdvdWxkIHlvdSBsb2c/Ci8vIFJpZ2h0LiBKdXN0IGRvbid0IGRvIGl0LiBOb3csIG1vdmUgYWxvbmcsIG5vdGhpbmcgdG8gc2VlIGhlcmUuCgovKioKICogUHJvdmlkZSBjb25zaXN0ZW50IGFjY2VzcyB0byB0aGUgR2xvYmFsIHZhcmlhYmxlLgogKgogKiBXaGVuIHVzZWQsIHRoaXMgbW9kdWxlIHdpbGwgaW50cm9kdWNlIGEgZ2xvYmFsIHZhcmlhYmxlIGNhbGxlZAogKiBgR2xvYmFsYCwgdGhhdCBpcyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsIG9iamVjdC4KICogCiAqIFRoaXMgbW9kdWxlIGRvZXMgbm90IHByb3ZpZGUgYW55IG1ldGhvZHMgb3IgbWVtYmVyLCBiZXNpZGVzIHRoZQogKiBHbG9iYWwgdmFyaWFibGUuCiAqCiAqIEB0eXBlIHtvYmplY3R9CiAqIEBleGFtcGxlCi8vIFRoaXMgbG9hZHMgdGhlIEdsb2JhbCBtb2R1bGUsIGFuZCBjcmVhdGVzIGEgdmFyaWFibGUgY2FsbGVkIEdsb2JhbAp1c2UoICJHbG9iYWwiICk7CiogQG5hbWVzcGFjZQogKiBAbmFtZSBHbG9iYWwgKi8KdmFyIEdsb2JhbCA9IGZ1bmN0aW9uKCApIHsKICAgIC8qKiBHZXQgYWNjZXNzIHRvIHRoZSBHbG9iYWwgdmFyaWFibGUuCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsCiAgICAgKiB2YXJpYWJsZS4gSW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLCB0aGlzIGlzIGVxdWFsIHRvIHRoZQogICAgICogdGhpcyB2YXJpYWJsZSBhdCB0b3BsZXZlbCBzY29wZSwgYnV0IHJlcXVpcmVzIGEgYml0IG1vcmUgdG8gZ2V0CiAgICAgKiB0bywgaWYgbm90IGEgdG9wbGV2ZWwgc2NvcGUuCiAgICAgKiAKICAgICAqIEB0eXBle2Z1bmN0aW9ufQogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm4ge29iamVjdH0gQSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi8KICAgIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuICggZnVuY3Rpb24oICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0gKSggKTsKICAgIH07CiAgICAvLyByZXR1cm4gcmVzdWx0IG9mIGNhbGwgdG8gZ2V0R2xvYmFsLCBpLmUuIHJlZiB0byBnbG9iYWwKICAgIHJldHVybiBnZXRHbG9iYWwoICk7Cn0oICk7Cg==","moduleName":"Global"},{"javascript":"","moduleName":"EsAddi"},{"javascript":"","moduleName":"XmlNamespaces"},{"javascript":"LyoqCiAqIEBmaWxlIEZpbGUgdGhhdCBwcm92aWRlcyBhIG1vZHVsZSB0byBoYW5kbGUgc29tZSBzbWFsbCBjb252ZXJzaW9uCiAqIGlzc3VlcyB3aXRoIFhNTCBzdHJpbmdzIGFuZCBvYmplY3RzIGFuZCBvdGhlciB1dGlsaXRpZXMuICovCgp1c2UoICJVbml0VGVzdCIgKTsKdXNlKCAiTG9nIiApOwp1c2UoICJWYWx1ZUNoZWNrIiApOwpFWFBPUlRFRF9TWU1CT0xTID0gWyAiWG1sVXRpbCIgXTsKLyoqCiAqIFV0aWxpdHkgbWV0aG9kcyBmb3IgWE1MIGhhbmRsaW5nLgogKiAKICogVmFyaW91cyB1dGlsaXR5IG1ldGhvZHMgZm9yIFhNTCBoYW5kbGluZy4gU29tZSBtb3N0bHkgdG8gZW5zdXJlIHNhbWUKICogdHJlYXRtZW50IG9mIFhNTCBjb2RlIGFjcm9zcyB2YXJpb3VzIGltcGxlbWVudGF0aW9ucy4gCiAqIAogKiBAdHlwZSB7bmFtZXNwYWNlfQogKiBAbmFtZXNwYWNlIAogKiBAbmFtZSBYbWxVdGlsCiAqLwp2YXIgWG1sVXRpbCA9IGZ1bmN0aW9uKCApIHsKCiAgICAvLyBPYmplY3QgdGhhdCBldmVudHVhbGx5IGdldHMgZXhwb3J0ZWQKICAgIHZhciB0aGF0ID0ge307CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYW4gWE1MIG9iamVjdCBmcm9tIGEgc3RyaW5nLiAgCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gc2FmZWx5IGNyZWF0ZXMgYW4gWE1MIG9iamVjdCBmcm9tIGEgc3RyaW5nLiBJZiBhCiAgICAgKiBwcmVwcm9jZXNzaW5nIGRpcmVjdGl2ZSBpcyBwcmVzZW50LCBpdCByZW1vdmVzIGl0LCBsaWtld2lzZSBmb3IKICAgICAqIERPQ1RZUEUsIHdoaXRlc3BhY2UgYmVmb3JlIGFuZCBhZnRlciwgYW5kIHNvIG9uLiBBbiBlcnJvciB3aWxsCiAgICAgKiBiZSB0aHJvd24sIGlmIHRoZSByZXN1bHRpbmcgc3RyaW5nLCBhZnRlciBzdHJpcHBpbmcgd2hpdGVzcGFjZSwKICAgICAqIGV0Yy4gaXMgbm90IHdlbGxmb3JtZWQgWE1MLgogICAgICoKICAgICAqIElmIHlvdSBjYWxsIHRoaXMgbWV0aG9kIHdpdGggYW4gWE1MIG9iamVjdCwgaXQgd2lsbCBsb2cgYQogICAgICogd2FybmluZy4gWW91IHNob3VsZCBjb25zaWRlciB0aGlzIGEgZmF1bHQgaW4gdGhlIGNhbGxpbmcgY29kZS4KICAgICAqCiAgICAgKiBUaGVyZSBpcyBubyByZWFzb24gdG8gY2FsbCB0aGlzIG1ldGhvZCB3aGVuIGNvbnN0cnVjdGluZyBzbWFsbAogICAgICogWE1MIHNuaXBwZXRzLiBJdCBpcyBtZWFudCB0byBiZSBjYWxsZWQgd2l0aCBYTUwgc3RyaW5ncyB0aGF0CiAgICAgKiB0eXBpY2FsbHkgaXMgcGFzc2VkIGluIHRvIHRoZSBzeXN0ZW0gZnJvbSBvdXRzaWRlLCBlLmcuIGEKICAgICAqIHdlYnNlcnZpY2Ugb3Igc2ltaWxhci4gU2VlIHRoZSBleGFtcGxlIGZvciB3aGF0IHRvIGRvIGFuZCBub3QgdG8gZG8uCiAgICAgKgogICAgICogQGV4YW1wbGUKLy8gVGhpcyBpcyBob3cgdGhlIG1ldGhvZCBpcyBtZWFudCB0byBiZSB1c2VkCnZhciB4ID0gWG1sVXRpbC5mcm9tU3RyaW5nKCBzb21lU2VtaVVua25vd25TdHJpbmdQYXNzZWRVc0Zyb21BV2ViU2VydmljZU9yU2ltaWxhciApOwovLyBUaGlzIGlzIGEgYnVnLCB0aGF0IHdpbGwgdHJpZ2dlciBhIHdhcm5pbmcgaW4gdGhlIGxvZzoKdmFyIHggPSBYbWxVdGlsLmZyb21TdHJpbmcoIHNvbWV0aGluZ1RoYXRJc1hNTEFscmVhZHkgKTsKLy8gVGhpcyBpcyBhbiBpbmVmZmVjaWVudCB3YXkgdG8gY3JlYXRlIGEgc21hbGwgcGllY2Ugb2YgWE1MOgp2YXIgeCA9IFhtbFV0aWwuZnJvbVN0cmluZyggIjxzb21lPnhtbDwvc29tZT4iICk7Ci8vIFRoZSBhYm92ZSBpcyBiZXR0ZXIgd3JpdHRlbiBhcyB0aGlzOgp2YXIgeCA9IDxzb21lPnhtbDwvc29tZT47CiAgICAgKiAKICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB4bWxTdHJpbmcgQSBzdHJpbmcgY29udGFpbmluZyBYTUwsIHBvc3NpYmx5IHdpdGggYSBwcmVwcm9jZXNzaW5nIGRpcmVjdGl2ZSBhbmQgb3RoZXIgY3J1ZnQuCiAgICAgKiBAcmV0dXJuIHtYTUx9IEFuIFhNTCBvYmplY3QgY3JlYXRlZCBmcm9tIHRoZSBzdHJpbmcuCiAgICAgKiBAc3ludGF4IFhtbFV0aWwuZnJvbVN0cmluZyggeG1sU3RyaW5nICk7CiAgICAgKiBAc2VlIFhtbFV0aWwucHJldHR5UHJpbnQKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIFhtbFV0aWwuZnJvbVN0cmluZyAqLwogICAgdGhhdC5mcm9tU3RyaW5nID0gZnVuY3Rpb24oIHhtbFN0cmluZyApIHsKICAgICAgICBMb2cudHJhY2UoICItPlhtbFV0aWwuZnJvbVN0cmluZygpIiApOyAvLyBBVVRPOjpCVUcjODk3NgogICAgICAgIC8vIFdhcm4gaWYgcGFzc2VkIG9iamVjdCBpcyB3cm9uZyB0eXBlLgogICAgICAgIGlmICggeG1sU3RyaW5nIGluc3RhbmNlb2YgWE1MICkgewogICAgICAgICAgICBMb2cud2FybiggIlhtbFV0aWwgY2FsbGVkIHdpdGggeG1sIHBhcmFtZXRlciwgZXhwZWN0ZWQgc3RyaW5nITogIiArIHhtbFN0cmluZy50b1hNTFN0cmluZyggKSApOwogICAgICAgICAgICByZXR1cm4geG1sU3RyaW5nOwogICAgICAgIH0KICAgICAgICAvLyBMb2cuZGVidWcoICJYbWxVdGlsLmZyb21TdHJpbmc6IHhtbFN0cmluZyBiZWZvcmUgcmVwbGFjZTpcbiIsIHhtbFN0cmluZyApOwogICAgICAgIHhtbFN0cmluZyA9IHhtbFN0cmluZy5yZXBsYWNlKCAvXltcc1xuXSo8LywgIjwiICk7CiAgICAgICAgLy8gTG9nLmRlYnVnKCAiWG1sVXRpbC5mcm9tU3RyaW5nOiB4bWxTdHJpbmcgYWZ0ZXIgcmVwbGFjZSAxOlxuIiwgeG1sU3RyaW5nICk7CiAgICAgICAgeG1sU3RyaW5nID0geG1sU3RyaW5nLnJlcGxhY2UoIC9ePFw/eG1sLipcPz5bXHNcbl0qLywgIiIgKTsgLy8gc3RyaW5nIDw/eG1sLi4uPiBmcm9tIGhlYWQKICAgICAgICAvLyBMb2cuZGVidWcoICJYbWxVdGlsLmZyb21TdHJpbmc6IHhtbFN0cmluZyBhZnRlciByZXBsYWNlIDI6XG4iLCB4bWxTdHJpbmcgKTsKICAgICAgICB4bWxTdHJpbmcgPSB4bWxTdHJpbmcucmVwbGFjZSggL148XCFET0NUWVBFLio/XD5bXHNcbl0qLywgIiIgKTsgLy8gc3RyaXAgPCFET0NUWVBFLi4uPiBmcm9tIGhlYWQKICAgICAgICAvLyBMb2cuZGVidWcoICJYbWxVdGlsLmZyb21TdHJpbmc6IHhtbFN0cmluZyBhZnRlciByZXBsYWNlIDM6XG4iLCB4bWxTdHJpbmcgKTsKICAgICAgICB4bWxTdHJpbmcgPSB4bWxTdHJpbmcucmVwbGFjZSggL148XCEtLVtcc1xTXSo/LS0+W1xzXG5dKi8sICIiICk7IC8vIGJ1ZyAxNDA3Mzogc3RyaXAgbGVhZGluZyBjb21tZW50cwogICAgICAgIC8vIExvZy5kZWJ1ZyggIlhtbFV0aWwuZnJvbVN0cmluZzogeG1sU3RyaW5nIGFmdGVyIHJlcGxhY2UgNDpcbiIsIHhtbFN0cmluZyApOwogICAgICAgIHhtbFN0cmluZyA9IHhtbFN0cmluZy5yZXBsYWNlKCAvW1xzXG5dKiQvLCAiIiApOyAvLyBSZW1vdmUgc3BhY2VzIGluIHRoZSBlbmQKICAgICAgICAvLyBMb2cuZGVidWcoICJYbWxVdGlsLmZyb21TdHJpbmc6IHhtbFN0cmluZyBhZnRlciByZXBsYWNlIDU6XG4iLCB4bWxTdHJpbmcgKTsKICAgICAgICB2YXIgcmVzID0gbmV3IFhNTCggeG1sU3RyaW5nICk7IC8vIFRoaXMgaXMgbmVlZGVkIGZvciByZWFzb25zIHRoYXQgYXJlIG5vdCB0b3RhbGx5IGNsZWFyIHRvIG1lICk7CiAgICAgICAgLy8gTG9nLmRlYnVnKCAiWG1sVXRpbC5mcm9tU3RyaW5nOiByZXN1bHRpbmcgeG1sOlxuIiwgcmVzICk7CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH07CgogICAgLyoqCiAgICAgKiBQcmV0dHkgcHJpbnQgYW4gWE1MIGRvY3VtZW50L3NuaXBwZXQsIHdpdGggcmVzdHJpY3Rpb25zLgogICAgICoKICAgICAqIFRoaXMgbWV0aG9kIHRha2VzIGFuZCBYTUwgb2JqZWN0IChub3QgWE1MTGlzdCkgYW5kIHByb2R1Y2VzIGEgc3RyaW5nCiAgICAgKiByZXByZXNlbnRpbmcgdGhlIG9iamVjdCB0aGF0IGlzIHN1aXRlZCBmb3IgZS5nLiB1c2Ugd2l0aCBkaWZmIAogICAgICogCiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgc2xvdyEgQ29tcGFyZWQgdG8gdGhlIGJ1aWx0aW4gdG9YTUxTdHJpbmcsCiAgICAgKiB0aGUgbWV0aG9kIGlzIDEwLTMwIHRpbWVzIGFzIHNsb3cuIEl0IHNob3VsZCBub3QgYmUgdXNlZCBmb3IKICAgICAqIHByb2dyYW1zIHRoYXQgbmVlZHMgdG8gcnVuIHF1aWNrbHkuIEFsc286IFRoZSBvdXRwdXQgc3RyaW5nIG1heQogICAgICogbm90IGFsd2F5cyByZXByZXNlbnQgdGhlIGV4YWN0IFhNTCBpbnB1dDogSW5zaWduaWZpY2FudAogICAgICogd2hpdGVzcGFjZSBjYW4gYmUgaW50cm9kdWNlZCBiZXR3ZWVuIGVsZW1lbnRzLCBidXQgbm90ICppbioKICAgICAqIHRleHQgZWxlbWVudHMuIENvbnRhaW5zIG5vIHN1cHBvcnQgZm9yIG91dHB1dHRpbmcgQ0RBVEEsCiAgICAgKiB0b3BsZXZlbC1jb21tZW50cyBvciBwcmVwcm9jZXNzaW5nIG5vZGVzLCBhcyB0aGVyZSBpcyBubyBrbm93biB3YXkgdG8KICAgICAqIGdldCB0aGVzZSBub2RlcyBpbnRvIHRoZSBYTUwgb2JqZWN0LiBPbmx5IHRoZSBjb250cm9sCiAgICAgKiBjaGFyYWN0ZXJzIG9mIHhtbCAxLjAgYXJlIHN1cHBvcnRlZCAoeDksIHhBLCB4RCkuCiAgICAgKgogICAgICogQHN5bnRheCBYbWxVdGlsLnByZXR0eVByaW50KCB4bWwsIG9wdGlvbnMgKQogICAgICogQHBhcmFtIHtYTUx9IHhtbCBBbiB4bWwgb2JqZWN0IChub3QgWE1MTGlzdCkgdG8gcHJldHR5IHByaW50CiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPYmplY3Qgd2l0aCBvcHRpb25zIGZvciB0aGUgY3JlYXRpb24gb2YgdGhlIFhNTCBzdHJpbmcgcmVwcmVzZW50YXRpb24uCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNvcnRBdHRyaWJ1dGVzPXRydWVdIElmIHRydWUsIHRoZSBhdHRyaWJ1dGVzIHdpbGwgYmUgc29ydGVkIHdoZW4gb3V0cHV0CiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRpZmZJbXByb3ZlPXRydWVdIElmIHRydWUsIG91dHB1dCB3aWxsIGJlIGJldHRlciBzdWl0ZWQgZm9yIGRpZmYgKGF0dHJpYnV0ZXMgYW5kIG5hbWVzcGFjZXMgb24gc2luZ2xlIGxpbmVzKS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5pbmRlbnRMZXZlbD0yXSBMZXZlbCBvZiBpbmRlbnQgZm9yIGVhY2ggWE1MIGxldmVsCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgc3RyaW5nIHdpdGggYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgWE1MIChzZWUgbm90ZSkKICAgICAqIEBleGFtcGxlCi8vIFRoaXMgZXhhbXBsZSwgZnJvbSB1c2luZyBhIEphdmFTY3JpcHQgc2hlbGwsIGRlbW9uc3RyYXRlcyB0aGUgZm9ybWF0dGluZyBvZiBhIHNpbXBsZSBYTUwgZG9jdW1lbnQKanM+IFhtbFV0aWwucHJldHR5UHJpbnQoIDxyb290IGE9J2FhdCcgICBjPSdjYXQnIGI9J2JhdCc+PGZvbyBmb29hYXQ9J2Zvb2FhdGF0JyAgZm9vYmF0PSdmb29iYXRhdCc+YmFyPC9mb28+PC9yb290PiwgeyBkaWZmSW1wcm92ZSA6IHRydWUgfSApOwo8cm9vdAogICAgYT0iYWF0IgogICAgYj0iYmF0IgogICAgYz0iY2F0Ij4KICA8Zm9vCiAgICAgIGZvb2FhdD0iZm9vYWF0YXQiCiAgICAgIGZvb2JhdD0iZm9vYmF0YXQiPmJhcjwvZm9vPgo8L3Jvb3Q+CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBYbWxVdGlsLnByZXR0eVByaW50ICovCiAgICB0aGF0LnByZXR0eVByaW50ID0gZnVuY3Rpb24oIHhtbCwgb3B0aW9ucyApIHsKICAgICAgICAvLyBOb3RlOiBUZWNobmljYWxseSB0aGlzIHNob3VsZCBiZSBhIHJlaW1wbGVtZW50YXRpb24gb2YgdG9YTUxTdHJpbmcgZnJvbSB0aGUgRUNNQSBzdGFuZGFyZCwKICAgICAgICAvLyBwcCAxMC4yLjEsIGJ1dCB0aGF0IHdhcyBqdXN0IHRvbyBjcmF6eSwgc28gSSBkaWQgdGhpcyBpbnN0ZWFkLiAKICAgICAgICAvLyBOb3JtYWwgdG9YTUxTdHJpbmcgY2FuIGluc2VydCBub24tc2lnbmlmaWNhbnQgd2hpdGVzcGFjZSBpbiB0ZXh0IGVsZW1lbnRzLCBhbmQgYmV0d2VlbiBlbGVtZW50cy4KICAgICAgICAvLyBUaGlzIGltcGxlbWVudGF0aW9uIG9ubHkgaW5zZXJ0cyB3aGl0ZXNwYWNlIGJldHdlZW4gZWxlbWVudHMsIG5vdCAqaW4qIGVsZW1lbnRzLgogICAgICAgIC8vIE5vdGU6IFRoZSB1c2Ugb2YgYSBidWZmZXIgdG8gY29sbGVjdCBnZW5lcmF0ZWQgc3RyaW5ncyBpbiwgaXMgaW50ZW50aW9uYWwgYW5kIGR1ZSB0byAocmVhbCkgcGVyZm9ybWFuY2UgaXNzdWVzIAogICAgICAgIC8vIGluIHN0cmluZyBjb25jYXRlbmF0aW9uLgogICAgICAgIExvZy50cmFjZSggIi0+WG1sVXRpbC5wcmV0dHlQcmludCIgKTsKICAgICAgICAvLyBTZXQgdXAgZGVmYXVsdCBvcHRpb25zCiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgaWYgKCBvcHRpb25zLnNvcnRBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIG9wdGlvbnMuc29ydEF0dHJpYnV0ZXMgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBvcHRpb25zLmRpZmZJbXByb3ZlID0gb3B0aW9ucy5kaWZmSW1wcm92ZSB8fCBmYWxzZTsKICAgICAgICBpZiAoIG9wdGlvbnMuZGlmZkltcHJvdmUgKSB7CiAgICAgICAgICAgIG9wdGlvbnMuc29ydEF0dHJpYnV0ZXMgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBvcHRpb25zLmluZGVudExldmVsID0gb3B0aW9ucy5pbmRlbnRMZXZlbCB8fCAyOwogICAgICAgIExvZy5kZWJ1ZyggImRpZmZJbXByb3ZlOiAiICsgb3B0aW9ucy5kaWZmSW1wcm92ZS50b1N0cmluZyggKSArICIsIHNvcnRBdHRyaWJ1dGVzOiAiICsgb3B0aW9ucy5zb3J0QXR0cmlidXRlcy50b1N0cmluZyggKSArCiAgICAgICAgICAgICIsIGluZGVudExldmVsOiAiICsgb3B0aW9ucy5pbmRlbnRMZXZlbC50b1N0cmluZyggKSApOwoKCiAgICAgICAgLy8gRml4IGluZGVudHByZWZpeCAtIGFkZCBvbmUgYmVjYXVzZSBqb2luIGlzICJpbi1iZXR3ZWVuIi4KICAgICAgICB2YXIgaW5kZW50UHJlZml4ID0gbmV3IEFycmF5KCBvcHRpb25zLmluZGVudExldmVsICsgMSApLmpvaW4oICIgIiApOyAvLyBuZXcgQXJyYXkgT0sKCiAgICAgICAgLy8gVGhpcyBpcyBhICJmdW5jdGlvbiBnbG9iYWwiIGJ1ZmZlciB0aGF0IGlzIHVzZWQgdG8gY29sbGVjdCB0aGUgCiAgICAgICAgLy8gcmVzdWx0IGluLiBUaGUgaWRlYSBpcyB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBzdHJpbmcgb3BlcmF0aW9ucwogICAgICAgIHZhciBidWZmZXIgPSBbIF07CgogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgIC8vIEVzY2FwZXMgc29tZSBrZXkgY2hhcnMuCiAgICAgICAgLy8gTGlmdGVkIGZyb20gYSBnaXN0LCBubyBsaWNlbnNlLgogICAgICAgIC8vIE5COiBBZGp1c3RlZCB0byB3b3JrIGFsbW9zdCBhY2NvcmRpbmcgdG8gRUNNQQogICAgICAgIC8vIDEwLjIuMS4xIDogRXNjYXBlRWxlbWVudFZhbHVlCiAgICAgICAgLy8gMTAuMi4xLjIgOiBFc2NhcGVBdHRyaWJ1dGVWYWx1ZQogICAgICAgIHZhciBYTUxfQ0hBUl9NQVAgPSB7CiAgICAgICAgICAgICc8JzogJyZsdDsnLAogICAgICAgICAgICAnPic6ICcmZ3Q7JywKICAgICAgICAgICAgJyYnOiAnJmFtcDsnLAogICAgICAgICAgICAnIic6ICcmcXVvdDsnLAogICAgICAgICAgICAiJyI6ICcmYXBvczsnLAogICAgICAgICAgICAiXHUwMDBBIjogIiYjeEE7IiwKICAgICAgICAgICAgIlx1MDAwRCI6ICImI3hEOyIsCiAgICAgICAgICAgICJcdTAwMDkiOiAiJiN4OTsiLAogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGVzY2FwZVhtbCggcyApIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSggL1s8PiZcIlwnXHJcdFxuXS9nLCBmdW5jdGlvbiggY2ggKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFhNTF9DSEFSX01BUFsgY2ggXTsKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9OwoKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBGb3JtYXQgYSBzaW5nbGUgbmFtZXNwYWNlCiAgICAgICAgdmFyIGZvcm1hdE5hbWVzcGFjZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UgKSB7CiAgICAgICAgICAgIHZhciBuYW1lID0gbmFtZXNwYWNlLnByZWZpeDsKICAgICAgICAgICAgaWYgKCBuYW1lICE9ICIiICkgewogICAgICAgICAgICAgICAgbmFtZSA9ICI6IiArIG5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlcyA9IFsgXTsKICAgICAgICAgICAgcmVzLnB1c2goICJ4bWxucyIgKTsKICAgICAgICAgICAgcmVzLnB1c2goIG5hbWUgKTsKICAgICAgICAgICAgcmVzLnB1c2goICc9IicgKTsKICAgICAgICAgICAgcmVzLnB1c2goIGVzY2FwZVhtbCggU3RyaW5nKCBuYW1lc3BhY2UudmFsdWVPZiggKSApICkgKTsKICAgICAgICAgICAgcmVzLnB1c2goICciJyApOwogICAgICAgICAgICByZXR1cm4gcmVzLmpvaW4oICIiICk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gRm9ybWF0IGFsbCB0aGUgYXZhaWxhYmxlIG5hbWVzcGFjZXMgZm9yIGEgcGFydGljdWxhciBub2RlLi4uCiAgICAgICAgdmFyIGZvcm1hdE5hbWVzcGFjZXMgPSBmdW5jdGlvbiggeG1sLCBsZXZlbCApIHsKICAgICAgICAgICAgdmFyIG5hbWVzcGFjZXMgPSB4bWwubmFtZXNwYWNlRGVjbGFyYXRpb25zKCApOwogICAgICAgICAgICBpZiAoIG5hbWVzcGFjZXMubGVuZ3RoID09IDAgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBvcHRpb25zLnNvcnRBdHRyaWJ1dGVzICkgewogICAgICAgICAgICAgICAgbmFtZXNwYWNlcy5zb3J0KCBmdW5jdGlvbiggYSwgYiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEucHJlZml4ID4gYi5wcmVmaXg7CiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZXMgPSBbIF07CiAgICAgICAgICAgIHZhciBuZXdsaW5lID0gIiI7CiAgICAgICAgICAgIHZhciBpbmRlbnQgPSAiICI7CiAgICAgICAgICAgIGlmICggb3B0aW9ucy5kaWZmSW1wcm92ZSAmJiBuYW1lc3BhY2VzLmxlbmd0aCA+IDEgKSB7CiAgICAgICAgICAgICAgICBuZXdsaW5lID0gIlxuIjsKICAgICAgICAgICAgICAgIGluZGVudCA9IGxldmVsICsgaW5kZW50UHJlZml4ICsgaW5kZW50UHJlZml4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIHZhciBpIGluIG5hbWVzcGFjZXMgKSB7CiAgICAgICAgICAgICAgICByZXMucHVzaCggbmV3bGluZSApOwogICAgICAgICAgICAgICAgcmVzLnB1c2goIGluZGVudCApOwogICAgICAgICAgICAgICAgcmVzLnB1c2goIGZvcm1hdE5hbWVzcGFjZSggbmFtZXNwYWNlc1sgaSBdICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzLmpvaW4oICIiICk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gRm9ybWF0IGEgc2luZ2xlIGF0dHJpYnV0ZSwgbm8gaW5kZW50LCBubyBuZXdsaW5lLCBubyBub3RoaW5nCiAgICAgICAgLy8gVGFrZXMgaW50byBhY291bnQgbmFtZXNwYWNlcyBhbmQgcHJlZml4IHZhbHVlcy4KICAgICAgICB2YXIgZm9ybWF0QXR0cmlidXRlID0gZnVuY3Rpb24oIHhtbCApIHsKICAgICAgICAgICAgdmFyIHJlcyA9IFsgXTsKICAgICAgICAgICAgdmFyIG5hbWUgPSB4bWwubG9jYWxOYW1lKCApOwogICAgICAgICAgICB2YXIgbnMgPSB4bWwubmFtZXNwYWNlKCApOwogICAgICAgICAgICBpZiAoIG5zICYmIG5zLnByZWZpeCAhPSAiIiApIHsKICAgICAgICAgICAgICAgIG5hbWUgPSBucy5wcmVmaXggKyAiOiIgKyBuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcy5wdXNoKCBuYW1lICk7CiAgICAgICAgICAgIHJlcy5wdXNoKCAnPSInICk7CiAgICAgICAgICAgIHJlcy5wdXNoKCBlc2NhcGVYbWwoIFN0cmluZyggeG1sLnZhbHVlT2YoICkgKSApICk7CiAgICAgICAgICAgIHJlcy5wdXNoKCAnIicgKTsKICAgICAgICAgICAgcmV0dXJuIHJlcy5qb2luKCAiIiApOwogICAgICAgIH07CgogICAgICAgIC8vIEZvcm1hdCBhbGwgYXR0cmlidXRlcyBvZiBhbiBlbGVtZW50CiAgICAgICAgLy8gVGFrZXMgaW50byBhY2NvdW50IGluZGVudCBhbmQgbmV3bGluZXMgKGlmIG1vcmUgdGhhbiBvbmUgYXR0cmlidXRlKQogICAgICAgIC8vIFRoZSByZXR1cm5lZCByZXN1bHQgYWx3YXlzIHN0YXJ0cyB3aXRoIGF0IGxlYXN0IGEgc2luZ2xlIHNwYWNlIG9yIGEgbmV3bGluZQogICAgICAgIHZhciBmb3JtYXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24oIHhtbCwgbGV2ZWwgKSB7CiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhhdC5nZXRBdHRyaWJ1dGVzKCB4bWwgKTsKICAgICAgICAgICAgaWYgKCBhdHRyaWJ1dGVzLmxlbmd0aCA9PSAwICkgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIElmIGFwcGxpY2FibGUsIHNvcnQsIGJ1dCBvbmx5IGJ5IGxvY2FsTmFtZS4gUHJlZml4J2VzIHdpbGwgYmUgImludGVybWl4ZWQiLgogICAgICAgICAgICBpZiAoIG9wdGlvbnMuc29ydEF0dHJpYnV0ZXMgKSB7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnNvcnQoIGZ1bmN0aW9uKCBhLCBiICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5sb2NhbE5hbWUoICkgPiBiLmxvY2FsTmFtZSggKTsKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlcyA9IFsgXTsKICAgICAgICAgICAgdmFyIG5ld2xpbmUgPSAiIjsKICAgICAgICAgICAgdmFyIGluZGVudCA9ICIgIjsKICAgICAgICAgICAgaWYgKCBvcHRpb25zLmRpZmZJbXByb3ZlICYmIGF0dHJpYnV0ZXMubGVuZ3RoID4gMSApIHsKICAgICAgICAgICAgICAgIG5ld2xpbmUgPSAiXG4iOwogICAgICAgICAgICAgICAgaW5kZW50ID0gbGV2ZWwgKyBpbmRlbnRQcmVmaXggKyBpbmRlbnRQcmVmaXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICggdmFyIGkgaW4gYXR0cmlidXRlcyApIHsKICAgICAgICAgICAgICAgIHJlcy5wdXNoKCBuZXdsaW5lICk7CiAgICAgICAgICAgICAgICByZXMucHVzaCggaW5kZW50ICk7CiAgICAgICAgICAgICAgICByZXMucHVzaCggZm9ybWF0QXR0cmlidXRlKCBhdHRyaWJ1dGVzWyBpIF0gKSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXMuam9pbiggIiIgKTsKICAgICAgICB9OwoKCiAgICAgICAgLy8gRm9ybWF0IGFuIG9iamVjdCwgdGhhdCBpcywgdGhpcyBvYmplY3QsIGFuZCBhbGwgY2hpbGRyZW4uCiAgICAgICAgLy8geG1sIC0gdGhlIHhtbCBvYmplY3QvZWxlbWVudCB0byBmb3JtYXQKICAgICAgICAvLyBpbmRlbnQgLSB3aGV0ZXIgdG8gZG8gaW5kZW50L2Zvcm1hdCBmaXJzdCBsaW5lIG9mIGVsZW1lbnQgb3Igbm90CiAgICAgICAgLy8gbGV2ZWwgLSB0aGUgY3VycmVudCBpbmRlbnRhdGlvbiBsZXZlbCAoYXMgYSBzdHJpbmcpCiAgICAgICAgdmFyIGZvcm1hdE5vZGUgPSBmdW5jdGlvbiggeG1sLCBpbmRlbnQsIGxldmVsICkgewoKICAgICAgICAgICAgLy8gRG8gZGlmZmVyZW50IHRoaW5ncyBmb3IgZWxlbWVudCwgdGV4dCwgY29tbWVudCBhbmQgcHJlcHJvY2Vzc2VyIGluc3RydWN0aW9uCiAgICAgICAgICAgIHZhciBub2RlS2luZCA9IHhtbC5ub2RlS2luZCggKTsKICAgICAgICAgICAgaWYgKCBub2RlS2luZCA9PSAiZWxlbWVudCIgKSB7CiAgICAgICAgICAgICAgICAvLyBGb3JtYXQgbmFtZXNwYWNlcywgYXR0cmlidXRlcyBhbmQgY2hpbGRyZW4uCgogICAgICAgICAgICAgICAgdmFyIG5hbWUgPSB4bWwubmFtZSggKS5sb2NhbE5hbWU7CiAgICAgICAgICAgICAgICB2YXIgbnMgPSB4bWwubmFtZXNwYWNlKCApOwogICAgICAgICAgICAgICAgaWYgKCBucy5wcmVmaXggIT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5zLnByZWZpeCArICI6IiArIG5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIGluZGVudCApIHsKICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCggIlxuIiApOwogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCBsZXZlbCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goICI8IiApOwogICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goIG5hbWUgKTsKICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCBmb3JtYXROYW1lc3BhY2VzKCB4bWwsIGxldmVsICkgKTsKICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCBmb3JtYXRBdHRyaWJ1dGVzKCB4bWwsIGxldmVsICkgKTsKCiAgICAgICAgICAgICAgICAvLyBGb3IgY2hpbGRyZW46CiAgICAgICAgICAgICAgICAvLyBUaGUgaWRlYSBpcyB0byBoYXZlIGVhY2ggZWxlbWVudCBmb3JtYXQgaXRzZWxmIHJlY3Vyc2l2ZWx5LgogICAgICAgICAgICAgICAgLy8gRm9ybWF0dGluZyBpbmNsdWRlcyBuZXdsaW5lIGFuZCBpbmRlbnRzIGJlZm9yZSB0aGUgZWxlbWVudCwgYnV0IG5vdCBhZnRlci4KICAgICAgICAgICAgICAgIC8vIFRleHQgZWxlbWVudHMgZG8gbm90IGluc2VydCBuZXdsaW5lcyBiZWZvcmUgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgLy8gRWxlbWVudHMgZm9sbG93aW5nIGEgdGV4dGVsZW1lbnQgaXMgbm90IGFsbG93ZWQgdG8gbmV3bGluZSBhbmQgaW5kZW50IGJlZm9yZSwgYnV0IG1heSBkbyBhZnRlci4KICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgY29udHJvbGxlZCBieSB0aGUgImluZGVudCIgdmFyaWFibGUuCiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZmluYWwgZWxlbWVudCBpcyBhIG5ld2xpbmUsIHRoZSBjbG9zaW5nIHRhZyBpcyBub3Qgc2V0CiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGVsZW1lbnQgY29udGFpbnMgYW55IHRleHQgbm9kZXMsIHdlIGRvIG5vdCB3YW50IHRvIGluZGVudCB0aGUgY29udGVudCBvZiB0aGlzIAogICAgICAgICAgICAgICAgLy8gZWxlbWVudC4gKFRoaXMgZG9lcyBub3QgaW5mbHVlbmNlIGUuZy4gYXR0cmlidXRlcyBvbiBzZXBhcmF0ZSBsaW5lcykuCgogICAgICAgICAgICAgICAgLy8gVXNlZCBmb3IgaXRlcmF0aW9uCiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB4bWwuY2hpbGRyZW4oICk7CgogICAgICAgICAgICAgICAgLy8gVXNlZCB0byB0cmFjayBpZiB0aGUgY2hpbGRyZW5zIG1hZGUgYW55IGNvbnRlbnQKICAgICAgICAgICAgICAgIC8vIE9wdGltaXN0aWNhbGx5IGFzc3VtZSB0aGF0IGNoaWxkcmVuIG1lYW5zIHRoYXQgd2UgbmVlZCBhIGNsb3NpbmcgdGFnCiAgICAgICAgICAgICAgICB2YXIgY29udGVudEluZGV4ID0gYnVmZmVyLnB1c2goICI+IiApOwoKICAgICAgICAgICAgICAgIC8vIEFjdHVhbGx5IGZpZ3VyZSBvdXQgaWYgd2UgY2FuIGludHJvZHVjZSBzcGFjZXMvZm9ybWF0dGluZyBpbnRvIGFuIGVsZW1lbnQvbWl4ZWQgY29udGVudAogICAgICAgICAgICAgICAgdmFyIGxhc3RXYXNOb25Ucml2aWFsVGV4dE5vZGUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBpIGluIGNoaWxkcmVuICkgewogICAgICAgICAgICAgICAgICAgIGZvcm1hdE5vZGUoIGNoaWxkcmVuWyBpIF0sICFsYXN0V2FzTm9uVHJpdmlhbFRleHROb2RlLCBsZXZlbCArIGluZGVudFByZWZpeCApOwogICAgICAgICAgICAgICAgICAgIGxhc3RXYXNOb25Ucml2aWFsVGV4dE5vZGUgPSAoICggY2hpbGRyZW5bIGkgXS5ub2RlS2luZCggKSA9PSAidGV4dCIgJiYgU3RyaW5nKCBjaGlsZHJlblsgaSBdLnZhbHVlT2YoICkgKSAhPSAiIiApICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gRGlkIHdlIGdlbmVyYXRlIGFueSBjb250ZW50IGF0IGFsbD8gSWYgbm90LCBjbG9zZSB0YWcgYnkgaXQgc2VsZi4KICAgICAgICAgICAgICAgIGlmICggY29udGVudEluZGV4ID09IGJ1ZmZlci5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyWyBjb250ZW50SW5kZXggLSAxIF0gPSAiLz4iOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiBsYXN0IHdhcyBhIG5vbiB0cml2aWFsIHRleHQgbm9kZSwgZG8gbm90IGluc2VydCBhIG5ld2xpbmUgYmVmb3JlIGNsb3NlIHRhZwogICAgICAgICAgICAgICAgICAgIC8vIGJ1ZmZlcltjb250ZW50SW5kZXgtMV0gPSAiPiI7IC8vIGFscmVhZHkgZG9uZQogICAgICAgICAgICAgICAgICAgIGlmICggIWxhc3RXYXNOb25Ucml2aWFsVGV4dE5vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCAiXG4iICsgbGV2ZWwgKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCAiPC8iICsgbmFtZSArICI+IiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlS2luZCA9PSAidGV4dCIgKSB7CiAgICAgICAgICAgICAgICBidWZmZXIucHVzaCggZXNjYXBlWG1sKCBTdHJpbmcoIHhtbC52YWx1ZU9mKCApICkgKSApOwogICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlS2luZCA9PSAiY29tbWVudCIgKSB7CiAgICAgICAgICAgICAgICBidWZmZXIucHVzaCggIlxuIiArIGxldmVsICsgeG1sLnZhbHVlT2YoKSApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gV2UgZG8gbm90IGFjdHVhbGx5IGV4cGVjdCB0byBnZXQgaGVyZSEKICAgICAgICAgICAgICAgIExvZy53YXJuKCAiWG1sVXRpbC5wcmV0dHlQcmludDogVW5leHBlY3RlZCBub2RlS2luZCAiICsgbm9kZUtpbmQgKyAiIG9jY3VyZWQuIFJldmVydGluZyB0byB0b1hNTFN0cmluZygpIiApOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCggbm9kZUtpbmQudG9YTUxTdHJpbmcoICkgKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggIldoaWxlIHRyeWluZyB0byBnZW5lcmF0ZSBYTUwgZm9yIHVua25vd24gbm9kZUtpbmQgOiAnIiArIG5vZGVLaW5kICsgIicsIGFuIGVycm9yIG9jY3VycmVkOiAiICsgZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgZm9ybWF0Tm9kZSggeG1sLCBmYWxzZSwgIiIgKTsKICAgICAgICByZXR1cm4gYnVmZmVyLmpvaW4oICIiICk7CiAgICB9OwoKICAgIC8qKiAKICAgICAqIE1ha2Ugb2JqZWN0IHRoYXQgdXNlcyB0b1hNTFN0cmluZyBhcyB0b1N0cmluZy4KICAgICAqIAogICAgICogVGhpcyBmdW5jdGlvbiAid3JhcHMiIHRoZSB4bWwgb2JqZWN0IHBhc3NlZCB0byBpdCwgYW5kIGNyZWF0ZXMgYSBuZXcgb2JqZWN0IHRoYXQgdXNlcyB0aGUgdG9YTUxTdHJpbmcgYXMgdG9TdHJpbmcuCiAgICAgKiBJdCBpcyBtb3N0bHkgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aGVuIGxvZ2dpbmcgWE1MIG9iamVjdHMuIEJ5IHVzaW5nIHRoaXMgbWV0aG9kLCB0aGUgdG9YTUxTdHJpbmcgaXMgb25seSBjYWxsZWQgaWYgdGhlIAogICAgICogbG9nIGxldmVsIGlzIGVuYWJsZWQsIHdoaWNoIGNhbiByZXN1bHQgaW4gaHVnZSBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMgd2hlbiBsZXZlbHMgYXJlIGRpc2FibGVkLgogICAgICogIFNlZSB0aGUgZXhhbXBsZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgICAqIAogICAgICogQGV4YW1wbGUKLy8gRG8gdGhpcywgd2hlbiB5b3UgbmVlZCB0byBsb2cgc29tZSBYTUwgKGdvb2QpOgpMb2cuZGVidWcoICJUaGUgeG1sIGlzOiAiLCBYbWxVdGlsLmxvZ1hNTFN0cmluZyggeG1sICkgKTsKLy8gaW5zdGVhZCBvZiB0aGlzIChiYWQsIGRvbid0IGRvIHRoaXMpOiAKTG9nLmRlYnVnKCAiVGhlIHhtbCBpczogIiwgeG1sLnRvWE1MU3RyaW5nKCkgKTsKICAgICAqIAogICAgICogQHBhcmFtIHtYTUx9IHhtbCBBbiB4bWwgb2JqZWN0IHRvIGNhbGwgdG9YTUxTdHJpbmcgb24uCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGZvciBkZWxheWVkIHRvU3RyaW5nIGludm9jYXRpb25zLgogICAgICogQHN5bnRheCBYbWxVdGlsLmxvZ1hNTFN0cmluZyggeG1sICk7CiAgICAgKiBAbmFtZSBYbWxVdGlsLmxvZ1hNTFN0cmluZwogICAgICogQG1ldGhvZAogICAgICovCiAgICB0aGF0LmxvZ1hNTFN0cmluZyA9IGZ1bmN0aW9uICggeG1sICkgewogICAgICAgIHZhciByZXMgPSB7fTsKICAgICAgICByZXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB4bWwudG9YTUxTdHJpbmcoKTsKICAgICAgICB9ICAgCiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KICAgIAogICAgCiAgICAvKioKICAgICAqIEdldCB0aGUgYXR0cmlidXRlcyBvZiBhbiB4bWwgb2JqZWN0LgogICAgICoKICAgICAqIFRoaXMgZnVuY3Rpb24gZ2V0IHRoZSBhdHRyaWJ1dGVzIG9mIGFuIHhtbCBvYmplY3QgaW4gYSBwb3J0YWJsZSB3YXkuCiAgICAgKgogICAgICogVGhlIGNhbGwgdG8gYXR0cmlidXRlcyBvbiBhbiB4bWwgb2JqZWN0IGRvZXMgbm90IHdvcmsgd2VsbCBhY3Jvc3MgUmhpbm8KICAgICAqIGFuZCBTcGlkZXJtb25rZXkuIFRoaXMgY2FsbCByZXR1cm5zIHRoZSBzYW1lIG9uIGJvdGggcGxhdGZvcm1zLiAKICAgICAqCiAgICAgKiAqKk5vdGU6KiogVGhpcyBmaWx0ZXJzIG91dCBhbnkgYXR0cmlidXRlcyB0aGF0IHRydWx5IGFyZQogICAgICogbmFtZXNwYWNlcy4gUmhpbm8gZGVsaXZlcnMgdGhvc2UsIGFuZCB3ZSBkbyBub3Qgd2FudCB0aGVtLgogICAgICogCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAcGFyYW0ge1hNTH0geG1sIEFuIHhtbCBvYmplY3QgKG5vdCBYTUxMaXN0KSB0byBnZXQgdGhlIGF0dHJpYnV0ZXMgZnJvbS4KICAgICAqIEByZXR1cm4ge1hNTFtdfSBBbiBhcnJheSBvZiBhdHRyaWJ1dGVzIGluc3RhbmNlcyAoWE1MIG9iamVjdHMpLiBUaGV5IGhhdmUgbWV0aG9kcyBsaWtlIG5hbWUsIG5hbWVzcGFjZSwgbG9jYWxuYW1lIGFuZCB5b3UgY2FuIGdldCB0aGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBieSB1c2luZyB0aGUgdmFsdWVPZiBtZXRob2QuCiAgICAgKiBAc3ludGF4IFhtbFV0aWwuZ2V0QXR0cmlidXRlcyggeG1sICk7CiAgICAgKiBAbmFtZSBYbWxVdGlsLmdldEF0dHJpYnV0ZXMgKi8KICAgIHRoYXQuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uKCB4bWwgKSB7CiAgICAgICAgdmFyIHJlcyA9IFsgXTsKICAgICAgICB2YXIgYXR0cmlidXRlc0FsbCA9IHhtbC5AKjo6ICogOwogICAgICAgIGZvciAoIHZhciBpIGluIGF0dHJpYnV0ZXNBbGwgKSB7CiAgICAgICAgICAgIC8vIFRoaXMgaXMgc29ydCBhIGhldXJpc3RpYy4gSXQgbXVzdCBiZSBhdHRyaWJ1dGVzLCBidXQKICAgICAgICAgICAgLy8gUmhpbm8gcHV0cyBpbiBuYW1lc3BhY2VzIGFzIHdlbGwuIEJ1dCwgdGhlIG5hbWVzcGFjZSBSaGlubyBwdXRzIGluCiAgICAgICAgICAgIC8vIGhhcyBhbiB1bmRlZmluZWQgIm5hbWVzcGFjZXMiIGZ1bmN0aW9uLi4uIFNvLCB3ZSBjaGVjayBmb3IgdGhhdC4KICAgICAgICAgICAgLy8gQWxzbywgYXR0cmlidXRlcyBtYXJrZWQgd2l0aCB0aGUgbmFtZSB4bWxucyBhcmUgbm90IGF0dHJpYnV0ZXMsIGJ1dCBuYW1lc3BhY2VzLi4uIAogICAgICAgICAgICBpZiAoIGF0dHJpYnV0ZXNBbGxbIGkgXS5uYW1lc3BhY2UoICkgIT0gdW5kZWZpbmVkICYmIGF0dHJpYnV0ZXNBbGxbIGkgXS5sb2NhbE5hbWUoICkgIT0gInhtbG5zIiApIHsKICAgICAgICAgICAgICAgIHJlcy5wdXNoKCBhdHRyaWJ1dGVzQWxsWyBpIF0gKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgfTsKCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIHRoYXQgc29ydHMgWE1MIGVsZW1lbnRzIGFsZmFiZXRoaWNhbGx5IChlbGVtZW50IG5hbWUpLgogICAgICoKICAgICAqIEZ1bmN0aW9uIHRoYXQgc29ydCB0aGUgZWxlbWVudHMgb2YgYW4gWE1MIG9iamVjdCBhZnRlciBlbGVtZW50IG5hbWUgCiAgICAgKgogICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gbW9kaWZpZXMgdGhlIG9iamVjdCBwYXNzZWQgdG8gaXQuIFRoZQogICAgICogcmV0dXJuZWQgcmVmZXJlbmNlIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnB1dCBwYXJhbWV0ZXIuCiAgICAgKgogICAgICogQHR5cGUge2Z1bmN0aW9ufQogICAgICogQG1ldGhvZAogICAgICogQHN5bnRheCBYbWxVdGlsLnNvcnRFbGVtZW50KCB4bWwgKQogICAgICogQHBhcmFtIHtYTUx9IHhtbCBYTUwgb2JqZWt0IHRvIGJlIHNvcnRlZAogICAgICogQHJldHVybiB7WE1MfSBYTUwgb2JqZWN0IHdpdGggYWxmYWJldGhpY2FsbHkgc29ydGVkIGVsZW1lbnRzCiAgICAgKiBAbmFtZSBYbWxVdGlsLnNvcnRFbGVtZW50cyAqLwogICAgdGhhdC5zb3J0RWxlbWVudHMgPSBmdW5jdGlvbiggeG1sICkgewogICAgICAgIExvZy50cmFjZSggIi0+WG1sVXRpbC5zb3J0RWxlbWVudHMoKSIgKTsgLy8gQVVUTzo6QlVHIzg5NzYKICAgICAgICB2YXIgZWxlbWVudExpc3QgPSB4bWwuKjsKICAgICAgICB2YXIgZWxlbWVudEFycmF5ID0gWyBdOwogICAgICAgIGZvciBlYWNoKCB2YXIgaXRlbSBpbiBlbGVtZW50TGlzdCApIHsKICAgICAgICAgICAgZWxlbWVudEFycmF5LnB1c2goIGl0ZW0ubmFtZSggKSApOwogICAgICAgIH0KICAgICAgICBlbGVtZW50QXJyYXkuc29ydCggKTsKICAgICAgICB2YXIgeG1sT3V0ID0geG1sOwogICAgICAgIGRlbGV0ZSB4bWxPdXQuKjsKICAgICAgICBmb3IgKCB2YXIgaSBpbiBlbGVtZW50QXJyYXkgKSB7CiAgICAgICAgICAgIGlmICggZWxlbWVudEFycmF5Lmhhc093blByb3BlcnR5KCBpICkgKSB7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRBcnJheVsgaSBdOwogICAgICAgICAgICAgICAgZm9yIGVhY2goIHZhciBjaGlsZCBpbiBlbGVtZW50TGlzdCApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5hbWUoICkgPT09IGVsZW1lbnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbE91dC5lbGVtZW50ID0gY2hpbGQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIExvZy5kZWJ1ZyggeG1sT3V0ICk7CiAgICAgICAgcmV0dXJuIHhtbE91dDsKCiAgICB9OwoKICAgIC8qKgogICAgICogRnVuY3Rpb24gdGhhdCBmaWx0ZXJzIGFuIFhNTExpc3QsIHVzaW5nIGEgcHJlZGljYXRlIGZ1bmN0aW9uLgogICAgICogCiAgICAgKiBGaWx0ZXJzIHRoZSBYTUxMaXN0IG9iamVjdCwgYW5kIGNhbGxzIHRoZSBwcmVkaWNhdGVGdW5jdGlvbiBmb3IgZWFjaAogICAgICogZWxlbWVudC4gSWYgdGhlIHByZWRpY2F0ZUZ1bmN0aW9uIHJldHVybnMgdHJ1ZSwgdGhlIGVsZW1lbnQgaXMgYWRkZWQgdG8KICAgICAqIHRoZSByZXN1bHQuIElmIG5vIGVsZW1lbnRzIG1hdGNoLCBhbiBlbXB0eSBYTUxMaXN0IG9iamVjdCBpcyByZXR1cm5lZC4gCiAgICAgKiAKICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAqIEBtZXRob2QKICAgICAqIEBzeW50YXggWG1sVXRpbC5maWx0ZXJYTUxMaXN0UHJlZGljYXRlKCB4bWxsaXN0LCBwcmVkaWNhdGVGdW5jdGlvbiApOwogICAgICogQHBhcmFtIHtYTUxMaXN0fSB4bWxsaXN0IFRoZSBYTUxMaXN0IG9iamVjdCB0byBmaWx0ZXIKICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHByZWRpY2F0ZUZ1bmN0aW9uIFRoZSBwcmVkaWNhdGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbGVtZW50CiAgICAgKiBAZXhhbXBsZQovLyBGaWx0ZXIgYWxsIFhNTExpc3Qgbm9kZXMgaW4gdGhlIHhtbGxpc3QgdmFyaWFibGUsIHRoYXQgaGF2ZSBhbiBhdHRyaWJ1dGUgY2FsbGVkIGZvb2Jhciwgd2l0aG91dCBhIG5hbWVzcGFjZQpYbWxVdGlsLmZpbHRlclhNTExpc3RQcmVkaWNhdGUoIHhtbGxpc3QsIAogIGZ1bmN0aW9uICggZWxlbWVudCApIHsgcmV0dXJuIFhtbFV0aWwuaGFzQXR0cmlidXRlKCBlbGVtZW50LCB1bmRlZmluZWQsICJmb29iYXIiICk7IH0gCik7CiAgICAgKiBAcmV0dXJuIHtYTUxMaXN0fSBBIG5ldyBYTUxMaXN0IG9iamVjdCB3aXRoIHRoZSBlbGVtZW50cyBmcm9tIHRoZSB4bWxsaXN0IHdoZXJlIHRoZSBwcmVkaWNhdGUgZnVuY3Rpb24gcmV0dXJuZWQgdHJ1ZQogICAgICogQG5hbWUgWG1sVXRpbC5maWx0ZXJYTUxMaXN0UHJlZGljYXRlICovCiAgICB0aGF0LmZpbHRlclhNTExpc3RQcmVkaWNhdGUgPSBmdW5jdGlvbiggeG1sbGlzdCwgcHJlZGljYXRlRnVuY3Rpb24gKSB7CiAgICAgICAgVmFsdWVDaGVjay5jaGVja1RoYXQoICJ4bWxsaXN0IiwgeG1sbGlzdCApLmlzLmRlZmluZWQuYW5kLmhhcy50eXBlKCAieG1sIiApOwogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAicHJlZGljYXRlRnVuY3Rpb24iLCBwcmVkaWNhdGVGdW5jdGlvbiApLmlzLmRlZmluZWQuYW5kLmhhcy50eXBlKCAiZnVuY3Rpb24iICk7CiAgICAgICAgdmFyIG91dHB1dCA9IG5ldyBYTUxMaXN0KCApOwogICAgICAgIGZvciBlYWNoKCB2YXIgZWxlbWVudCBpbiB4bWxsaXN0ICkgewogICAgICAgICAgICBpZiAoIHByZWRpY2F0ZUZ1bmN0aW9uKCBlbGVtZW50ICkgKSB7CiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gZWxlbWVudDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgfTsKCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIGEgZ2l2ZW4geG1sIG9iamVjdCBoYXMgYSBnaXZlbiBhdHRyaWJ1dGUuCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIHRoZSB4bWwgb2JqZWN0IGhhcyBhIGdpdmVuIGF0dHJpYnV0ZSB3aXRoCiAgICAgKiBhdHRyaWJ1dGVOYW1lLCBhbmQgb3B0aW9uYWxseSBhIHNwZWNpZmljIG5hbWVzcGFjZS4gCiAgICAgKgogICAgICogKipOb3RlOioqIFRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUsIGV2ZW4gaWYgdGhlIHZhbHVlIG9mIHRoZQogICAgICogYXR0cmlidXRlIGlzIHRoZSBlbXB0eSBzdHJpbmcuIFRoaXMgaXMgYSBiaXQgaGFyZGVyIHRoYW4gaXQKICAgICAqIHNvdW5kcywgd2hlbiBuZWVkZWQgdG8gd29yayBvbiBib3RoIEMrKyBhbmQgSmF2YSBiYWNrZW5kcwogICAgICogCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAc3ludGF4IFhtbFV0aWwuaGFzQXR0cmlidXRlKCB4bWwsIG5zLCBhdHRyaWJ1dGVOYW1lICk7CiAgICAgKiBAcGFyYW0ge1hNTH0geG1sIFRoZSB4bWwgb2JqZWN0IHRvIGNoZWNrIGZvciBhbiBhdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7TmFtZXNwYWNlfSBucyBUaGUgbmFtZXNwYWNlIGZvciB0aGUgYXR0cmlidXRlTmFtZSwgb3IgdW5kZWZpbmVkIGlmIG5vIG5hbWVzcGFjZSBzaG91bGQgYmUgcHJlc2VudAogICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBjaGVjayBmb3IKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGF0dHJpYnV0ZSB3aXRoIHRoZSBvcHRpb25hbCBuYW1lc3BhY2Ugd2FzIGZvdW5kLCBmYWxzZSBvdGhlcndpc2UKICAgICAqIEBleGFtcGxlIAovLyBUbyBjaGVjayBpZiB0aGUgYXR0cmlidXRlIHhzaTp0eXBlIGV4aXN0cyBpbiBhIGdpdmVuIHhtbCBvYmplY3QsIGRvIGUuZy4gbGlrZSB0aGlzOgppZiAoIFhtbFV0aWwuaGFzQXR0cmlidXRlKCB4bWwsIFhtbE5hbWVzcGFjZXMueHNpLCAidHlwZSIgKSApIHsKICAgIHByaW50KCAiRm91bmQgYXR0cmlidXRlIHhzaTp0eXBlIGZvciB4bWxcbiIgKTsKfSBlbHNlIHsgCiAgICBwcmludCggIkRpZCBub3QgZmluZCBhdHRyaWJ1dGUgeHNpOnR5cGUgZm9yIHhtbFxuIiApOwp9OyAKLy8gVG8gY2hlY2sgaWYgdGhlIGF0dHJpYnV0ZSB4c2k6dHlwZSBleGlzdHMgaW4gYSBnaXZlbiB4bWwgb2JqZWN0IGFuZCAKLy8gaXMgbm90IHRoZSBlbXB0eSBzdHJpbmcsIGRvIGUuZy4gbGlrZSB0aGlzOgp2YXIgeHNpID0gWG1sTmFtZXNwYWNlcy54c2k7Ci8vIE5vdGUgdGhlIFN0cmluZyBjcmVhdGlvbiBpbiB0aGUgdGVzdAppZiAoIFhtbFV0aWwuaGFzQXR0cmlidXRlKCB4bWwsIFhtbE5hbWVzcGFjZXMueHNpLCAidHlwZSIgKSAmJiBTdHJpbmcoIHhtbC4mIzY0O3hzaTo6dHlwZSApICE9ICIiICkgewogICAgcHJpbnQoICJGb3VuZCBub24tZW1wdHkgYXR0cmlidXRlIHhzaTp0eXBlIGZvciB4bWxcbiIgKTsKfSBlbHNlIHsgCiAgICBwcmludCggIkRpZCBub3QgZmluZCBub24tZW1wdHkgYXR0cmlidXRlIHhzaTp0eXBlIGZvciB4bWxcbiIgKTsKfTsKICAgICAqIEBuYW1lIFhtbFV0aWwuaGFzQXR0cmlidXRlICAqLwogICAgdGhhdC5oYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbiggeG1sLCBucywgYXR0cmlidXRlTmFtZSApIHsKICAgICAgICBWYWx1ZUNoZWNrLmNoZWNrVGhhdCggInhtbCIsIHhtbCApLmlzLmRlZmluZWQuYW5kLmhhcy50eXBlKCAieG1sIiApOwogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAiYXR0cmlidXRlTmFtZSIsIGF0dHJpYnV0ZU5hbWUgKS5pcy5kZWZpbmVkLmFuZC5oYXMudHlwZSggInN0cmluZyIgKS5hbmQuaXMubm90LmVxdWFsVG8oICIiICk7CiAgICAgICAgaWYgKCBucyA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gKCB4bWwuQFsgYXR0cmlidXRlTmFtZSBdLmxlbmd0aCggKSAhPT0gMCApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmVhbGx5IHVnbHkuIFRoZXJlIGlzIG5vIHdheSB0byBnZXQgYW4KICAgICAgICAgICAgLy8gYXR0cmlidXRlIHdpdGggYSBuYW1lc3BhY2Ugd2hlbiBub3QgdXNpbmcgdGhlIGxpdGVyYWwKICAgICAgICAgICAgLy8gc3ludGF4LCBBRkFJQ1QuICBBdHRyaWJ1dGVzIGRvZXMgbm90IHJldHVybiB0aG9zZSB3aXRoCiAgICAgICAgICAgIC8vIG5hbWVzcGFjZXMsIGFjY29yZGluZyB0byBzcGVjL3NwaWRlcm1vbmtleS4gKFJoaW5vIG9mCiAgICAgICAgICAgIC8vIGNvdXJzZSAtIHdvcmtzKS4gU28sIHdlIGdldCBhbGwgdGhlIGF0dHJpYnV0ZXMgd2l0aAogICAgICAgICAgICAvLyBuYW1lcGFydCBhdHRyaWJ1dGVOYW1lIGZvciB4bWxPYmplY3QsIHdpdGggQCo6OlsKICAgICAgICAgICAgLy8gYXR0cmlidXRlTmFtZSBdLCB0aGVuIHRyYXZlcnNlcyB0byBzZWUgaWYgb25lIG1hdGNoZXMKICAgICAgICAgICAgLy8gdGhlIHVyaS4KICAgICAgICAgICAgdmFyIGF0dHJpYnMgPSB4bWwuQCo6OlsgYXR0cmlidXRlTmFtZSBdOwogICAgICAgICAgICBmb3IgKCB2YXIgYXR0cmliIGluIGF0dHJpYnMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGF0dHJpYnNbIGF0dHJpYiBdLm5hbWUoICkudXJpID09IG5zLnVyaSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfTsKCgogICAgLyoqCiAgICAgKiBGdW5jdGlvbiB0aGF0IGZpbHRlcnMgYW4gWE1MTGlzdCwgcmV0dXJuaW5nIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIHNwZWNpZmljIGF0dHJpYnV0ZS4KICAgICAqCiAgICAgKiBGaWx0ZXJzIHRoZSBYTUxMaXN0IG9iamVjdCwgYW5kIHJldHVybnMgdGhlIGVsZW1lbnRzIHRoYXQgaGF2ZSBhCiAgICAgKiBzcGVjaWZpYyBhdHRyaWJ1dGUsIG9wdGlvbmFsbHkgd2l0aCBhIHNwZWNpZmljIG5hbWVzcGFjZS4gSWYgbm8KICAgICAqIGVsZW1lbnRzIG1hdGNoLCBhbiBlbXB0eSBYTUxMaXN0IG9iamVjdCBpcyByZXR1cm5lZC4gCiAgICAgKiAKICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAqIEBtZXRob2QKICAgICAqIEBzeW50YXggWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCB4bWxsaXN0LCBucywgYXR0cmlidXRlTmFtZSApOwogICAgICogQHBhcmFtIHtYTUxMaXN0fSB4bWxsaXN0IFRoZSBYTUxMaXN0IG9iamVjdCB0byBmaWx0ZXIKICAgICAqIEBwYXJhbSB7TmFtZXNwYWNlfSBucyBUaGUgbmFtZXNwYWNlIGZvciB0aGUgYXR0cmlidXRlTmFtZSwgb3IgdW5kZWZpbmVkIGlmIG5vIG5hbWVzcGFjZSBzaG91bGQgYmUgcHJlc2VudAogICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBmaWx0ZXIgZm9yCiAgICAgKiBAcmV0dXJuIHtYTUxMaXN0fSBBIG5ldyBYTUxMaXN0IG9iamVjdCB3aXRoIHRoZSBlbGVtZW50cyBmcm9tIHRoZSB4bWxsaXN0IHRoYXQgaGFzIHRoZSBnaXZlbiBhdHRyaWJ1dGUKICAgICAqIEBleGFtcGxlIAovLyBUbyBvYnRhaW4gYW4gWE1MTGlzdCBvYmplY3Qgd2l0aCBhbGwgdGhlIGRjOnRpdGxlIGVsZW1lbnRzIAovLyB0aGF0IGhhcyBhIHhzaTp0eXBlIGF0dHJpYnV0ZSwgZG8gZS5nLiBsaWtlIHRoaXM6ClhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggCiAgPGNvbGxlY3Rpb24geG1sbnM6ZGthYm09Imh0dHA6Ly9iaWJsc3RhbmRhcmQuZGsvYWJtL25hbWVzcGFjZS9ka2FibS8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSI+CiAgICA8ZGthYm06cmVjb3JkPjxkYzp0aXRsZT5UaGlzIGlzIGEgdGl0bGU8L2RjOnRpdGxlPgogICAgICA8ZGM6dGl0bGUgeHNpOnR5cGU9ImRrZGNwbHVzOmZ1bGwiPlRoaXMgaXMgYSB0aXRsZSA6IGZ1bGw8L2RjOnRpdGxlPgogICAgICA8ZGM6dGl0bGUgeHNpOnR5cGU9ImRrZGNwbHVzOnNlcmllcyI+TWFnbmFQcmludHNlcmllbiA7IG5yLiAyMjY8L2RjOnRpdGxlPgogICAgICA8ZGM6dGl0bGUgeHNpOnR5cGU9ImRrZGNwbHVzOnNlcmllcyI+U2VyaWVzIHdpdGhvdXQgbnVtYmVyPC9kYzp0aXRsZT4KICAgICAgPGRjOnRpdGxlPk5vIHR5cGUgdGl0bGU8L2RjOnRpdGxlPgogICAgPC9ka2FibTpyZWNvcmQ+CiAgPC9jb2xsZWN0aW9uPi5ka2FibTo6cmVjb3JkLmRjOjp0aXRsZSwgCiAgWG1sTmFtZXNwYWNlcy54c2ksIAogICd0eXBlJyApOwogICAgICogQG5hbWUgWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlICovCiAgICB0aGF0LmZpbHRlclhNTExpc3RIYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbiggeG1sbGlzdCwgbnMsIGF0dHJpYnV0ZU5hbWUgKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyWE1MTGlzdFByZWRpY2F0ZSggeG1sbGlzdCwgZnVuY3Rpb24oIGVsZW1lbnQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIGVsZW1lbnQsIG5zLCBhdHRyaWJ1dGVOYW1lICk7CiAgICAgICAgICAgIH0gKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBGdW5jdGlvbiB0byBleHRyYWN0IGFuZCByZXR1cm4gdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSBhbiB4bWxvYmplY3QsIHRoYXQgaXMgbm90IGVtcHR5LgogICAgICoKICAgICAqIFRoaXMgZnVuY3Rpb24gc2NhbnMgYWxsIGNoaWxkcmVuIG9mIHRoZSB4bWwgb2JqZWN0LiBUaGUgZmlyc3QKICAgICAqIGNoaWxkIHRoYXQgaXMgYW4gbm9uLWVtcHR5IFhNTCBlbGVtZW50IGlzIHJldHVybmVkLiBOb3RlLCB0aGF0CiAgICAgKiB0ZXh0IG5vZGVzIGFyZSBpZ25vcmVkLgogICAgICoKICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgaW1wbGVtZW50ZWQgYXMgYSBjYWxsIHRvIGdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIHhtbCwgMCk7CiAgICAgKiAKICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAqIEBtZXRob2QKICAgICAqIEBzeW50YXggWG1sVXRpbC5nZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50KCB4bWwgKQogICAgICogQHBhcmFtIHtYTUx9IHhtbCBYTUwgb2JqZWN0IHRvIGV4dHJhY3QgZmlyc3QgZWxlbWVudCBmcm9tCiAgICAgKiBAcmV0dXJuIHtYTUx9IFhNTCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgbm90IGVtcHR5LCBpLmUuIGhhdmUgYSBuYW1lKCkgIT0gIiIsIG9yIHVuZGVmaW5lZCwgaWYgbm9uZSBmb3VuZAogICAgICogQG5hbWUgWG1sVXRpbC5nZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50ICovCiAgICB0aGF0LmdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQgPSBmdW5jdGlvbiggeG1sICkgewogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAieG1sIiwgeG1sICkuaXMuZGVmaW5lZC5hbmQuaGFzLnR5cGUoICJ4bWwiICk7CiAgICAgICAgVmFsdWVDaGVjay5jaGVja1RoYXQoICJ4bWwudG9Tb3VyY2UoKSIsIHhtbC50b1NvdXJjZSgpICkuaXMubm90LmVxdWFsVG8oICIiICk7CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggeG1sLCAwICk7CiAgICB9OwoKICAgIC8qKiAKICAgICAqIEZ1bmN0aW9uIHRvIGV4dHJhY3QgYSBub24tdHJpdmlhbCBjaGlsZAogICAgICogCiAgICAgKgogICAgICogVGhpcyBmdW5jdGlvbiBzY2FucyBhbGwgY2hpbGRyZW4gb2YgdGhlIHhtbCBvYmplY3QuIFRoZSBuJ3RoCiAgICAgKiBjaGlsZCB0aGF0IGlzIGFuIG5vbi1lbXB0eSBYTUwgZWxlbWVudCBpcyByZXR1cm5lZC4gTm90ZSwgdGhhdAogICAgICogdGV4dCBub2RlcyBhcmUgaWdub3JlZC4KICAgICAqIAogICAgICogQGV4YW1wbGUKLy8gVGhlIGZvbGxvd2luZyBjYWxsIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCwgYXMgdGhlcmUgYXJlIG9ubHkgdHJpdmlhbCBlbGVtZW50czoKWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9vPjwvZm9vPiwgMCApOwovLyBUaGlzIHdpbGwgcmV0dXJuIHRoZSBiYXIgZWxlbWVudCAKWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9vPnJvbzxiYXI+PC9iYXI+PC9mb28+LCAwICkKLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZmlzazIgZWxlbWVudApYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxoZXA+IDxmaXNrMT48L2Zpc2sxPiA8ZmlzazI+PC9maXNrMj48L2hlcD4sIDEgKTsKLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZmlzazMgZWxlbWVudApYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxoZXA+IDxmaXNrMT48L2Zpc2sxPiA8ZmlzazI+PC9maXNrMj4gPGZpc2szPjwvZmlzazM+PC9oZXA+LCAyICk7CgoKICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAqIEBtZXRob2QKICAgICAqIEBzeW50YXggWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCB4bWwgKQogICAgICogQHBhcmFtIHtYTUx9IHhtbCBYTUwgb2JqZWN0IHRvIGV4dHJhY3QgZmlyc3QgZWxlbWVudCBmcm9tCiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBub24tdHJpdmlhbCBjaGlsZCB0byBleHRyYWN0LCB6ZXJvIGJhc2VkCiAgICAgKiBAcmV0dXJuIHtYTUx9IFhNTCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgbm90IGVtcHR5LCBpLmUuIGhhdmUgYSBuYW1lKCkgIT0gIiIsIG9yIHVuZGVmaW5lZCwgaWYgbm9uZSBmb3VuZAogICAgICogQG5hbWUgWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50ICovCiAgICB0aGF0LmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgPSBmdW5jdGlvbiggeG1sLCBpbmRleCApIHsKICAgICAgICBWYWx1ZUNoZWNrLmNoZWNrVGhhdCggInhtbCIsIHhtbCApLmlzLmRlZmluZWQuYW5kLmhhcy50eXBlKCAieG1sIiApOwogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAiaW5kZXgiLCBpbmRleCApLmlzLmRlZmluZWQuYW5kLmhhcy50eXBlKCAibnVtYmVyIiApLmFuZC5pcy5ncmVhdGVyVGhhbiggLTEgKTsKICAgICAgICB2YXIgY291bnQgPSAwOwogICAgICAgIGZvciAoIHZhciB4IGluIHhtbC4qICkgewogICAgICAgICAgICBpZiAoIHhtbC4qWyB4IF0ubmFtZSggKSAhPSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGNvdW50ID09IGluZGV4ICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB4bWwuKlsgeCBdOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICArK2NvdW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9OwoKCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhIGdpdmVuIHhtbCBvYmplY3QgaGFzIGEgZ2l2ZW4gbmFtZXNwYWNlIHVyaSBhbmQgbG9jYWxOYW1lLgogICAgICogCiAgICAgKiBUZXN0cyBucy51cmkgYWdhaW5zdCB4bWwubmFtZSgpLnVyaSBhbmQgbG9jYWxOYW1lIGFnYWluc3QKICAgICAqIHhtbC5sb2NhbE5hbWUoKSAKICAgICAqIAogICAgICogQHR5cGUge2Z1bmN0aW9ufQogICAgICogQG1ldGhvZAogICAgICogQHN5bnRheCBYbWxVdGlsLmhhclVyaUxvY2FsTmFtZSggeG1sb2JqZWN0LCBpbGw1bmFtZXNwYWNlLCAiQ2FuY2VsLVJlcGx5LTciICk7CiAgICAgKiBAcGFyYW0ge1hNTH0geG1sIFhNTCBvYmplY3QgdG8gdGVzdAogICAgICogQHBhcmFtIHtOYW1lc3BhY2V9IG5zIE5hbWVzcGFjZSBvYmplY3QgdG8gdGVzdCBmb3Igb3IgdW5kZWZpbmVkIGlmIG5vIG5hbWVzcGFjZSBzaG91bGQgYmUgcHJlc2VudC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbE5hbWUgbG9jYWxOYW1lIHRvIHRlc3QgZm9yCiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1hdGNoaW5nLCBmYWxzZSBvdGhlcndpc2UKICAgICAqIEBuYW1lIFhtbFV0aWwuaGFzVXJpTG9jYWxOYW1lCiAgICAgKi8KICAgIHRoYXQuaGFzVXJpTG9jYWxOYW1lID0gZnVuY3Rpb24oIHhtbCwgbnMsIGxvY2FsTmFtZSApIHsKICAgICAgICBWYWx1ZUNoZWNrLmNoZWNrVGhhdCggInhtbCIsIHhtbCApLmlzLmRlZmluZWQuYW5kLmhhcy50eXBlKCAieG1sIiApOwogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAibG9jYWxOYW1lIiwgbG9jYWxOYW1lICkuaXMuZGVmaW5lZC5hbmQuaGFzLnZhbHVlLm5vdC5lcXVhbFRvKCAiIiApOwogICAgICAgIGlmICggbnMgIT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICBWYWx1ZUNoZWNrLmNoZWNrVGhhdCggIm5zIiwgbnMgKS5oYXMudHlwZSggIm9iamVjdCIgKTsKICAgICAgICAgICAgaWYgKCBucy51cmkgIT0geG1sLm5hbWUoICkudXJpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCB4bWwubmFtZSggKS51cmkgIT0gIiIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHhtbC5sb2NhbE5hbWUoICkgPT0gbG9jYWxOYW1lOwogICAgfTsKCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgZ2l2ZW4geG1sIG9iamVjdCBoYXMgcm9vdCBhbmQgZWxlbWVudCB0eXBlIG9mIGEgc3BlY2lmaWMgdHlwZS4KICAgICAqCiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGUgZ2l2ZW4geG1sIG9iamVjdCBoYXMgYSBuYW1lIHRoYXQgbWF0Y2hlcwogICAgICogdGhlIG5hbWVzcGFjZS9yb290IGNvbWJvLCBhbmQgaWYgdGhlIGZpcnN0IHhtbCBzdWJlbGVtZW50IG1hdGNoZXMKICAgICAqIG5hbWVzcGFjZS9lbGVtZW50LiBJdCBpcyBub3QgcG9zc2libHkgdG8gdXNlIGRpZmZlcmVudCBuYW1lc3BhY2VzIGZvcgogICAgICogdGhlIHJvb3ROYW1lIGFuZCBlbGVtZW50TmFtZSAKICAgICAqIAogICAgICogQHR5cGUge2Z1bmN0aW9ufQogICAgICogQG1ldGhvZAogICAgICogQHN5bnRheCBYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggeG1sLCBucywgcm9vdE5hbWUsIGVsZW1lbnROYW1lICkKICAgICAqIEBwYXJhbSB7WE1MfSB4bWwgWE1MIG9iamVjdCB0byB0ZXN0CiAgICAgKiBAcGFyYW0ge05hbWVzcGFjZX0gbnMgTmFtZXNwYWNlIG9iamVjdCB0byB0ZXN0IGZvciBvciB1bmRlZmluZWQgaWYgbm8gbmFtZXNwYWNlIHNob3VsZCBiZSBwcmVzZW50LgogICAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3ROYW1lIGxvY2FsTmFtZSBmb3Igcm9vdCBlbGVtZW50IHRvIHRlc3QgZm9yCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWUgbG9jYWxOYW1lIGZvciBmaXJzdCBjaGlsZCB4bWwgZWxlbWVudCB0byB0ZXN0IGZvcgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtYXRjaGluZywgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgKiBAbmFtZSBYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCAqLwogICAgdGhhdC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQgPSBmdW5jdGlvbiggeG1sLCBucywgcm9vdE5hbWUsIGVsZW1lbnROYW1lICkgewogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAieG1sIiwgeG1sICkuaXMuZGVmaW5lZC5hbmQuaGFzLnR5cGUoICJ4bWwiICk7CiAgICAgICAgVmFsdWVDaGVjay5jaGVja1RoYXQoICJyb290TmFtZSIsIHJvb3ROYW1lICkuaXMuZGVmaW5lZC5hbmQuaGFzLnZhbHVlLm5vdC5lcXVhbFRvKCAiIiApOwogICAgICAgIFZhbHVlQ2hlY2suY2hlY2tUaGF0KCAiZWxlbWVudE5hbWUiLCBlbGVtZW50TmFtZSApLmlzLmRlZmluZWQuYW5kLmhhcy52YWx1ZS5ub3QuZXF1YWxUbyggIiIgKTsKICAgICAgICBpZiAoICF0aGlzLmhhc1VyaUxvY2FsTmFtZSggeG1sLCBucywgcm9vdE5hbWUgKSApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggeG1sICk7CiAgICAgICAgcmV0dXJuIGVsZW1lbnQgIT0gdW5kZWZpbmVkICYmIHRoaXMuaGFzVXJpTG9jYWxOYW1lKCBlbGVtZW50LCBucywgZWxlbWVudE5hbWUgKTsKICAgIH07CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gYnVnIDEzOTk2IC0gaGFybW9uaXplIHdoaXRlc3BhY2UgUmhpbm8gYW5kIFNwaWRlcm1vbmtleQogICAgdmFyIG9yaWdpbmFsWG1sU2V0dGluZ3M7CiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCApIHsKICAgICAgICAvLyBTdG9yZSBYTUwgU2V0dGluZ3MKICAgICAgICBvcmlnaW5hbFhtbFNldHRpbmdzID0gWE1MLnNldHRpbmdzKCApOwogICAgICAgIC8vIFNldCB1cCB3aGl0ZXNwYWNlIGhhbmRsaW5nIHRvIHdvcmsgYXMgd2Ugd2FudCB0bwogICAgICAgIFhNTC5zZXRTZXR0aW5ncyggewogICAgICAgICAgICAgICAgaWdub3JlV2hpdGVzcGFjZTogZmFsc2UsCiAgICAgICAgICAgICAgICBwcmV0dHlQcmludGluZzogZmFsc2UKICAgICAgICAgICAgfSApOwogICAgfTsKCiAgICAvLyBJbml0aWFsaXplCiAgICBpbml0KCApOwoKICAgIC8vIFJldHVybiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LgogICAgcmV0dXJuIHRoYXQ7Cn0oICk7CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBVbml0VGVzdHMKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KClVuaXRUZXN0LmFkZEZpeHR1cmUoICJ1dGlsLlhtbFV0aWwgbW9kdWxlIiwgZnVuY3Rpb24oICkgewoKICAgICAgICAvLyBUZXN0IHNvbWUgd2hpdGVzcGFjZSBoYW5kbGluZyBiZWZvcmUgYW5kIGFmdGVyIGFjdHVhbCBYTUwuCiAgICAgICAgLy8gc2VlIGJ1ZyBodHRwczovL2J1Z3MuZGJjLmRrL3Nob3dfYnVnLmNnaT9pZD0xMjk3NyNjMwogICAgICAgIC8vIFRoZXNlIGFyZSBub3QgaW5mbHVlbmNlZCBieSBpZ25vcmVXaGl0ZXNwYWNlIG9yIG5vdAogICAgICAgIEFzc2VydC5lcXVhbCggIlRyaW0gMSIsICdYbWxVdGlsLmZyb21TdHJpbmcoICI8cm9vdD5mb288L3Jvb3Q+IiApLnRvU291cmNlKCknLCAoIDxyb290PmZvbzwvcm9vdD4gKS50b1NvdXJjZSggKSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIlRyaW0gMiIsICdYbWxVdGlsLmZyb21TdHJpbmcoICIgPHJvb3Q+Zm9vPC9yb290PiIgKS50b1NvdXJjZSgpJywgKCA8cm9vdD5mb288L3Jvb3Q+ICkudG9Tb3VyY2UoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJUcmltIDMiLCAnWG1sVXRpbC5mcm9tU3RyaW5nKCAiPHJvb3Q+Zm9vPC9yb290PiAiICkudG9Tb3VyY2UoKScsICggPHJvb3Q+Zm9vPC9yb290PiApLnRvU291cmNlKCApICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiVHJpbSA0IiwgJ1htbFV0aWwuZnJvbVN0cmluZyggIiA8cm9vdD5mb288L3Jvb3Q+ICIgKS50b1NvdXJjZSgpJywgKCA8cm9vdD5mb288L3Jvb3Q+ICkudG9Tb3VyY2UoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJUcmltIDUiLCAnWG1sVXRpbC5mcm9tU3RyaW5nKCAiICAgPHJvb3Q+Zm9vPC9yb290PiAgICIgKS50b1NvdXJjZSgpJywgKCA8cm9vdD5mb288L3Jvb3Q+ICkudG9Tb3VyY2UoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJUcmltIDYiLCAnWG1sVXRpbC5mcm9tU3RyaW5nKCAiPHJvb3Q+Zm9vPC9yb290PlxcbiIgKS50b1NvdXJjZSgpJywgKCA8cm9vdD5mb288L3Jvb3Q+ICkudG9Tb3VyY2UoICkgKTsKCiAgICAgICAgLy8gVGhlc2UgYXJlIGluZmx1ZW5jZWQgYnkgaWdub3JlV2hpdGVzcGFjZSBhbmQgbXVzdCBiZSBjaGFuZ2VkIGlmIHRoaXMgc2V0dGluZyBpcyBjaGFuZ2VkLgogICAgICAgIC8vIE5PVEU6IFRoZSBuZXdsaW5lcyBtYXR0ZXIhISEKICAgICAgICBBc3NlcnQuZXF1YWwoICJUcmltIDciLCAnWG1sVXRpbC5mcm9tU3RyaW5nKCAiPHJvb3Q+ICA8YmFyPmZvbzwvYmFyPlxcbiA8L3Jvb3Q+IiApLnRvU291cmNlKCknLCAoIDxyb290PiAgPGJhcj5mb288L2Jhcj4KIDwvcm9vdD4gKS50b1NvdXJjZSggKSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIlRyaW0gOCIsICdYbWxVdGlsLmZyb21TdHJpbmcoICIgICA8cm9vdD4gIDxiYXI+Zm9vPC9iYXI+XFxuIDwvcm9vdD5cXG4gICAiICkudG9Tb3VyY2UoKScsICggPHJvb3Q+ICA8YmFyPmZvbzwvYmFyPgogPC9yb290PiApLnRvU291cmNlKCApICk7CiAgICAgICAgX19YbWxVdGlsX3V0ID0ge307CgogICAgICAgIC8vIExvdHMgb2Ygd2hpdGVzcGFjZSB0ZXN0cyBmcm9tIHJhdyBYTUwuIGJ1ZyAxMzk5NgogICAgICAgIF9fWG1sVXRpbF91dC5ucyA9IDxkaXY+OzwvZGl2PjsKICAgICAgICBfX1htbFV0aWxfdXQuc3IgPSA8ZGl2PjsgPC9kaXY+OwogICAgICAgIF9fWG1sVXRpbF91dC5zbCA9IDxkaXY+IDs8L2Rpdj47CiAgICAgICAgX19YbWxVdGlsX3V0LnNiID0gPGRpdj4gOyA8L2Rpdj47CgogICAgICAgIEFzc2VydC5lcXVhbCggInRvU3RyaW5nIHdpdGggbm8gc3BhY2VzIiwgIl9fWG1sVXRpbF91dC5ucy50b1N0cmluZygpIiwgJzsnICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9TdHJpbmcgd2l0aCBzcGFjZSByaWdodCIsICJfX1htbFV0aWxfdXQuc3IudG9TdHJpbmcoKSIsICc7ICcgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1N0cmluZyB3aXRoIHNwYWNlIGxlZnQiLCAiX19YbWxVdGlsX3V0LnNsLnRvU3RyaW5nKCkiLCAnIDsnICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9TdHJpbmcgd2l0aCBzcGFjZSBib3RoIiwgIl9fWG1sVXRpbF91dC5zYi50b1N0cmluZygpIiwgJyA7ICcgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9YTUxTdHJpbmcgd2l0aCBubyBzcGFjZXMiLCAiX19YbWxVdGlsX3V0Lm5zLnRvWE1MU3RyaW5nKCkiLCAiPGRpdj47PC9kaXY+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvWE1MU3RyaW5nIHdpdGggc3BhY2UgcmlnaHQiLCAiX19YbWxVdGlsX3V0LnNyLnRvWE1MU3RyaW5nKCkiLCAiPGRpdj47IDwvZGl2PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1hNTFN0cmluZyB3aXRoIHNwYWNlIGxlZnQiLCAiX19YbWxVdGlsX3V0LnNsLnRvWE1MU3RyaW5nKCkiLCAiPGRpdj4gOzwvZGl2PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1hNTFN0cmluZyB3aXRoIHNwYWNlIGJvdGgiLCAiX19YbWxVdGlsX3V0LnNiLnRvWE1MU3RyaW5nKCkiLCAiPGRpdj4gOyA8L2Rpdj4iICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggInVuZXZhbCB3aXRoIG5vIHNwYWNlcyIsICJ1bmV2YWwoIF9fWG1sVXRpbF91dC5ucyApIiwgIjxkaXY+OzwvZGl2PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ1bmV2YWwgd2l0aCBzcGFjZSByaWdodCIsICJ1bmV2YWwoIF9fWG1sVXRpbF91dC5zciApIiwgIjxkaXY+OyA8L2Rpdj4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidW5ldmFsIHdpdGggc3BhY2UgbGVmdCIsICJ1bmV2YWwoIF9fWG1sVXRpbF91dC5zbCApIiwgIjxkaXY+IDs8L2Rpdj4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidW5ldmFsIHdpdGggc3BhY2UgYm90aCIsICJ1bmV2YWwoIF9fWG1sVXRpbF91dC5zYiApIiwgIjxkaXY+IDsgPC9kaXY+IiApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1NvdXJjZSgpIHdpdGggbm8gc3BhY2VzIiwgIiggX19YbWxVdGlsX3V0Lm5zICkudG9Tb3VyY2UoKSIsICI8ZGl2Pjs8L2Rpdj4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9Tb3VyY2UoKSB3aXRoIHNwYWNlIHJpZ2h0IiwgIiggX19YbWxVdGlsX3V0LnNyICkudG9Tb3VyY2UoKSIsICI8ZGl2PjsgPC9kaXY+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvU291cmNlKCkgd2l0aCBzcGFjZSBsZWZ0IiwgIiggX19YbWxVdGlsX3V0LnNsICkudG9Tb3VyY2UoKSIsICI8ZGl2PiA7PC9kaXY+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvU291cmNlKCkgd2l0aCBzcGFjZSBib3RoIiwgIiggX19YbWxVdGlsX3V0LnNiICkudG9Tb3VyY2UoKSIsICI8ZGl2PiA7IDwvZGl2PiIgKTsKCiAgICAgICAgLy8gZnJvbVN0cmluZygpLCBidWcgMTM5OTYKICAgICAgICBfX1htbFV0aWxfdXQubnMgPSBYbWxVdGlsLmZyb21TdHJpbmcoICI8ZGl2Pjs8L2Rpdj4iICk7CiAgICAgICAgX19YbWxVdGlsX3V0LnNyID0gWG1sVXRpbC5mcm9tU3RyaW5nKCAiPGRpdj47IDwvZGl2PiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuc2wgPSBYbWxVdGlsLmZyb21TdHJpbmcoICI8ZGl2PiA7PC9kaXY+IiApOwogICAgICAgIF9fWG1sVXRpbF91dC5zYiA9IFhtbFV0aWwuZnJvbVN0cmluZyggIjxkaXY+IDsgPC9kaXY+IiApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1N0cmluZyB3aXRoIG5vIHNwYWNlcyIsICJfX1htbFV0aWxfdXQubnMudG9TdHJpbmcoKSIsICc7JyApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvU3RyaW5nIHdpdGggc3BhY2UgcmlnaHQiLCAiX19YbWxVdGlsX3V0LnNyLnRvU3RyaW5nKCkiLCAnOyAnICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9TdHJpbmcgd2l0aCBzcGFjZSBsZWZ0IiwgIl9fWG1sVXRpbF91dC5zbC50b1N0cmluZygpIiwgJyA7JyApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvU3RyaW5nIHdpdGggc3BhY2UgYm90aCIsICJfX1htbFV0aWxfdXQuc2IudG9TdHJpbmcoKSIsICcgOyAnICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggInRvWE1MU3RyaW5nIHdpdGggbm8gc3BhY2VzIiwgIl9fWG1sVXRpbF91dC5ucy50b1hNTFN0cmluZygpIiwgIjxkaXY+OzwvZGl2PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1hNTFN0cmluZyB3aXRoIHNwYWNlIHJpZ2h0IiwgIl9fWG1sVXRpbF91dC5zci50b1hNTFN0cmluZygpIiwgIjxkaXY+OyA8L2Rpdj4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9YTUxTdHJpbmcgd2l0aCBzcGFjZSBsZWZ0IiwgIl9fWG1sVXRpbF91dC5zbC50b1hNTFN0cmluZygpIiwgIjxkaXY+IDs8L2Rpdj4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9YTUxTdHJpbmcgd2l0aCBzcGFjZSBib3RoIiwgIl9fWG1sVXRpbF91dC5zYi50b1hNTFN0cmluZygpIiwgIjxkaXY+IDsgPC9kaXY+IiApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJ1bmV2YWwgd2l0aCBubyBzcGFjZXMiLCAidW5ldmFsKCBfX1htbFV0aWxfdXQubnMgKSIsICI8ZGl2Pjs8L2Rpdj4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidW5ldmFsIHdpdGggc3BhY2UgcmlnaHQiLCAidW5ldmFsKCBfX1htbFV0aWxfdXQuc3IgKSIsICI8ZGl2PjsgPC9kaXY+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInVuZXZhbCB3aXRoIHNwYWNlIGxlZnQiLCAidW5ldmFsKCBfX1htbFV0aWxfdXQuc2wgKSIsICI8ZGl2PiA7PC9kaXY+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInVuZXZhbCB3aXRoIHNwYWNlIGJvdGgiLCAidW5ldmFsKCBfX1htbFV0aWxfdXQuc2IgKSIsICI8ZGl2PiA7IDwvZGl2PiIgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9Tb3VyY2UoKSB3aXRoIG5vIHNwYWNlcyIsICIoIF9fWG1sVXRpbF91dC5ucyApLnRvU291cmNlKCkiLCAiPGRpdj47PC9kaXY+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvU291cmNlKCkgd2l0aCBzcGFjZSByaWdodCIsICIoIF9fWG1sVXRpbF91dC5zciApLnRvU291cmNlKCkiLCAiPGRpdj47IDwvZGl2PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1NvdXJjZSgpIHdpdGggc3BhY2UgbGVmdCIsICIoIF9fWG1sVXRpbF91dC5zbCApLnRvU291cmNlKCkiLCAiPGRpdj4gOzwvZGl2PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1NvdXJjZSgpIHdpdGggc3BhY2UgYm90aCIsICIoIF9fWG1sVXRpbF91dC5zYiApLnRvU291cmNlKCkiLCAiPGRpdj4gOyA8L2Rpdj4iICk7CgogICAgICAgIC8vIGZyb21TdHJpbmcoKSwgYnVnIDEzOTk2CiAgICAgICAgX19YbWxVdGlsX3V0Lm5zID0gWG1sVXRpbC5mcm9tU3RyaW5nKCAiPGZvbz5cbiAgPGRpdj5cbjs8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuc3IgPSBYbWxVdGlsLmZyb21TdHJpbmcoICI8Zm9vPlxuICA8ZGl2PlxuOyA8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuc2wgPSBYbWxVdGlsLmZyb21TdHJpbmcoICI8Zm9vPlxuICA8ZGl2PlxuIDs8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuc2IgPSBYbWxVdGlsLmZyb21TdHJpbmcoICI8Zm9vPlxuICA8ZGl2PlxuIDsgPC9kaXY+XG48L2Zvbz4iICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggInRvU3RyaW5nIHdpdGggbm8gc3BhY2VzIiwgIl9fWG1sVXRpbF91dC5ucy50b1N0cmluZygpIiwgIjxmb28+XG4gIDxkaXY+XG47PC9kaXY+XG48L2Zvbz4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9TdHJpbmcgd2l0aCBzcGFjZSByaWdodCIsICJfX1htbFV0aWxfdXQuc3IudG9TdHJpbmcoKSIsICI8Zm9vPlxuICA8ZGl2PlxuOyA8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1N0cmluZyB3aXRoIHNwYWNlIGxlZnQiLCAiX19YbWxVdGlsX3V0LnNsLnRvU3RyaW5nKCkiLCAiPGZvbz5cbiAgPGRpdj5cbiA7PC9kaXY+XG48L2Zvbz4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9TdHJpbmcgd2l0aCBzcGFjZSBib3RoIiwgIl9fWG1sVXRpbF91dC5zYi50b1N0cmluZygpIiwgJzxmb28+XG4gIDxkaXY+XG4gOyA8L2Rpdj5cbjwvZm9vPicgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9YTUxTdHJpbmcgd2l0aCBubyBzcGFjZXMiLCAiX19YbWxVdGlsX3V0Lm5zLnRvWE1MU3RyaW5nKCkiLCAiPGZvbz5cbiAgPGRpdj5cbjs8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1hNTFN0cmluZyB3aXRoIHNwYWNlIHJpZ2h0IiwgIl9fWG1sVXRpbF91dC5zci50b1hNTFN0cmluZygpIiwgIjxmb28+XG4gIDxkaXY+XG47IDwvZGl2PlxuPC9mb28+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInRvWE1MU3RyaW5nIHdpdGggc3BhY2UgbGVmdCIsICJfX1htbFV0aWxfdXQuc2wudG9YTUxTdHJpbmcoKSIsICI8Zm9vPlxuICA8ZGl2PlxuIDs8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1hNTFN0cmluZyB3aXRoIHNwYWNlIGJvdGgiLCAiX19YbWxVdGlsX3V0LnNiLnRvWE1MU3RyaW5nKCkiLCAnPGZvbz5cbiAgPGRpdj5cbiA7IDwvZGl2PlxuPC9mb28+JyApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJ1bmV2YWwgd2l0aCBubyBzcGFjZXMiLCAidW5ldmFsKCBfX1htbFV0aWxfdXQubnMgKSIsICI8Zm9vPlxuICA8ZGl2PlxuOzwvZGl2PlxuPC9mb28+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInVuZXZhbCB3aXRoIHNwYWNlIHJpZ2h0IiwgInVuZXZhbCggX19YbWxVdGlsX3V0LnNyICkiLCAiPGZvbz5cbiAgPGRpdj5cbjsgPC9kaXY+XG48L2Zvbz4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidW5ldmFsIHdpdGggc3BhY2UgbGVmdCIsICJ1bmV2YWwoIF9fWG1sVXRpbF91dC5zbCApIiwgIjxmb28+XG4gIDxkaXY+XG4gOzwvZGl2PlxuPC9mb28+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggInVuZXZhbCB3aXRoIHNwYWNlIGJvdGgiLCAidW5ldmFsKCBfX1htbFV0aWxfdXQuc2IgKSIsICc8Zm9vPlxuICA8ZGl2PlxuIDsgPC9kaXY+XG48L2Zvbz4nICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggInRvU291cmNlKCkgd2l0aCBubyBzcGFjZXMiLCAiKCBfX1htbFV0aWxfdXQubnMgKS50b1NvdXJjZSgpIiwgIjxmb28+XG4gIDxkaXY+XG47PC9kaXY+XG48L2Zvbz4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9Tb3VyY2UoKSB3aXRoIHNwYWNlIHJpZ2h0IiwgIiggX19YbWxVdGlsX3V0LnNyICkudG9Tb3VyY2UoKSIsICI8Zm9vPlxuICA8ZGl2PlxuOyA8L2Rpdj5cbjwvZm9vPiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJ0b1NvdXJjZSgpIHdpdGggc3BhY2UgbGVmdCIsICIoIF9fWG1sVXRpbF91dC5zbCApLnRvU291cmNlKCkiLCAiPGZvbz5cbiAgPGRpdj5cbiA7PC9kaXY+XG48L2Zvbz4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAidG9Tb3VyY2UoKSB3aXRoIHNwYWNlIGJvdGgiLCAiKCBfX1htbFV0aWxfdXQuc2IgKS50b1NvdXJjZSgpIiwgJzxmb28+XG4gIDxkaXY+XG4gOyA8L2Rpdj5cbjwvZm9vPicgKTsKCiAgICAgICAgLy8gUmVtb3ZlIHByZXByb2Nlc3Npbmcgc3R1ZmYgaW4gdGhlIGJlZ2lubmluZwogICAgICAgIF9fWG1sVXRpbF91dC54bWxTdHJpbmdXUCA9ICIgPD94bWwgdmVyc2lvbj1cIjEuMFwiPz4gXG4gPHJvb3Q+PHNvbWU+bm9kZTwvc29tZT48L3Jvb3Q+XG4gIjsKICAgICAgICBfX1htbFV0aWxfdXQueG1sU3RyaW5nV09QID0gIjxyb290Pjxzb21lPm5vZGU8L3NvbWU+PC9yb290PiI7CiAgICAgICAgX19YbWxVdGlsX3V0LnhtbFN0cmluZ1JlcyA9ICggPHJvb3Q+PHNvbWU+bm9kZTwvc29tZT48L3Jvb3Q+ICkudG9Tb3VyY2UoICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggIkVucyB1ZGVuIHBwIiwgJ1htbFV0aWwuZnJvbVN0cmluZyggX19YbWxVdGlsX3V0LnhtbFN0cmluZ1dQICkudG9Tb3VyY2UoKScsIF9fWG1sVXRpbF91dC54bWxTdHJpbmdSZXMgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJFbnMgbWVkIHBwIiwgJ1htbFV0aWwuZnJvbVN0cmluZyggX19YbWxVdGlsX3V0LnhtbFN0cmluZ1dPUCApLnRvU291cmNlKCknLCBfX1htbFV0aWxfdXQueG1sU3RyaW5nUmVzICk7CiAgICAgICAgQXNzZXJ0LmV4Y2VwdGlvbiggIkludmFsaWQgWE1MIiwgJ1htbFV0aWwuZnJvbVN0cmluZyggIjxyb290PmRldHRlIGVyIGlra2UgWE1MPC90b29yPiIgKScgKTsKCiAgICAgICAgLy8gQnVnIDE0MDczOiBTdGFydGluZyB3aXRoIGNvbW1lbnRzIG5vIGxvbmdlciB3b3JrcywgYWZ0ZXIgbm90LWlnbm9yaW5nIHdoaXRlc3BhY2UuIFNpZ2guCgogICAgICAgIEFzc2VydC5lcXVhbCggIlN0YXJ0IHdpdGggY29tbWVudCAxIiwgJ1htbFV0aWwuZnJvbVN0cmluZyggIjwhLS1BbGxlIG5pdmVhdWVyLS0+PHNyb290Pjxzb21lPm5vZGU8L3NvbWU+PC9zcm9vdD4iICkudG9Tb3VyY2UoKScsICI8c3Jvb3Q+PHNvbWU+bm9kZTwvc29tZT48L3Nyb290PiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuZm9vYmFyID0gWG1sVXRpbC5mcm9tU3RyaW5nKCAiPD94bWwgdmVyc2lvbj1cIjEuMFwiPz48IS0tQWxsZSBuaXZlYXVlci0tPjxzcm9vdD48c29tZT5ub2RlPC9zb21lPjwvc3Jvb3Q+IiApLnRvU291cmNlKCApOwogICAgICAgIEFzc2VydC5lcXVhbCggIlN0YXJ0IHdpdGggY29tbWVudCAyIiwgJ19fWG1sVXRpbF91dC5mb29iYXInLCAiPHNyb290Pjxzb21lPm5vZGU8L3NvbWU+PC9zcm9vdD4iICk7CiAgICAgICAgX19YbWxVdGlsX3V0LmZvb2JhciA9IFhtbFV0aWwuZnJvbVN0cmluZyggIjw/eG1sIHZlcnNpb249XCIxLjBcIj8+XG48IS0tQWxsZSBuaXZlYXVlclxuLS0+XG48c3Jvb3Q+PHNvbWU+bm9kZTwvc29tZT48L3Nyb290PiIgKS50b1NvdXJjZSggKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJTdGFydCB3aXRoIGNvbW1lbnQgMyIsICdfX1htbFV0aWxfdXQuZm9vYmFyJywgIjxzcm9vdD48c29tZT5ub2RlPC9zb21lPjwvc3Jvb3Q+IiApOwogICAgICAgIF9fWG1sVXRpbF91dC5mb29iYXIgPSBYbWxVdGlsLmZyb21TdHJpbmcoICI8IS0tQWxsZSBuaXZlYXVlci0tPjxzcm9vdD48IS0tIEFuZHJlIG5pdmVhdWVyLS0+PHNvbWU+bm9kZTwvc29tZT48L3Nyb290PiIgKS50b1NvdXJjZSggKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJTdGFydCB3aXRoIGNvbW1lbnQgNCIsICdfX1htbFV0aWxfdXQuZm9vYmFyJywgIjxzcm9vdD48IS0tIEFuZHJlIG5pdmVhdWVyLS0+PHNvbWU+bm9kZTwvc29tZT48L3Nyb290PiIgKTsKCiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBUZXN0IGxvZ1hNTFN0cmluZwogICAgICAgIF9fWG1sVXRpbF91dC5sb2dYTUxTdHJpbmcgPSA8Zm9vPjxiYXI+Zm9vYmFyPC9iYXI+PC9mb28+OwogICAgICAgIEFzc2VydC5lcXVhbCggImxvZ1hNTFN0cmluZyB0ZXN0IDEiLCAnX19YbWxVdGlsX3V0LmxvZ1hNTFN0cmluZy50b1hNTFN0cmluZygpJywgCiAgICAgICAgICAgICAgICAgICAgICBYbWxVdGlsLmxvZ1hNTFN0cmluZyhfX1htbFV0aWxfdXQubG9nWE1MU3RyaW5nICkudG9TdHJpbmcoKSApOwogICAgICAgIAogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gVGVzdCBnZXQgYXR0cmlidXRlcwogICAgICAgIF9fWG1sVXRpbF91dC5uczEgPSBuZXcgTmFtZXNwYWNlKCAiZm9wIiwgImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvIiApOwogICAgICAgIF9fWG1sVXRpbF91dC5uczIgPSBuZXcgTmFtZXNwYWNlKCAiZm96IiwgImh0dHA6Ly93d3cuZXhhbXBsZTIub3JnLyIgKTsKCiAgICAgICAgX19YbWxVdGlsX3V0LmF0MSA9IDxyb290Lz47CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0QXR0dHJpYnV0ZXMgMSIsICJYbWxVdGlsLmdldEF0dHJpYnV0ZXMoIF9fWG1sVXRpbF91dC5hdDEgKSIsIFsgXSApOwoKICAgICAgICBfX1htbFV0aWxfdXQuYXQyID0gPHJvb3QgYT0iYWF0Ii8+OwogICAgICAgIF9fWG1sVXRpbF91dC5hdDJfYWF0ID0gX19YbWxVdGlsX3V0LmF0Mi5hdHRyaWJ1dGUoICJhIiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldEF0dHRyaWJ1dGVzIDIiLCAiWG1sVXRpbC5nZXRBdHRyaWJ1dGVzKCBfX1htbFV0aWxfdXQuYXQyICkiLCBbIF9fWG1sVXRpbF91dC5hdDJfYWF0IF0gKTsKCiAgICAgICAgX19YbWxVdGlsX3V0LmF0MyA9IDxyb290IGE9ImFhdCIgYj0iYmF0Ii8+OwogICAgICAgIF9fWG1sVXRpbF91dC5hdDNfYWF0ID0gX19YbWxVdGlsX3V0LmF0My5hdHRyaWJ1dGUoICJhIiApOwogICAgICAgIF9fWG1sVXRpbF91dC5hdDNfYmF0ID0gX19YbWxVdGlsX3V0LmF0My5hdHRyaWJ1dGUoICJiIiApOwogICAgICAgIEFzc2VydC50aGF0KCAiZ2V0QXR0cmlidXRlcyAzIHBvc3Rjb25kIiwgIl9fWG1sVXRpbF91dC5hdDNfYmF0ICE9IHVuZGVmaW5lZCIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRBdHR0cmlidXRlcyAzIiwgIlhtbFV0aWwuZ2V0QXR0cmlidXRlcyggX19YbWxVdGlsX3V0LmF0MyApLnNvcnQoKSIsIFsgX19YbWxVdGlsX3V0LmF0M19hYXQsIF9fWG1sVXRpbF91dC5hdDNfYmF0IF0uc29ydCggKSApOwoKICAgICAgICBfX1htbFV0aWxfdXQuYXQ0ID0gPHJvb3QgYT0iYWF0IiBjPSJjYXQiIGI9ImJhdCIvPjsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ0X2FhdCA9IF9fWG1sVXRpbF91dC5hdDQuYXR0cmlidXRlKCAiYSIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ0X2JhdCA9IF9fWG1sVXRpbF91dC5hdDQuYXR0cmlidXRlKCAiYiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ0X2NhdCA9IF9fWG1sVXRpbF91dC5hdDQuYXR0cmlidXRlKCAiYyIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRBdHR0cmlidXRlcyA0IiwgIlhtbFV0aWwuZ2V0QXR0cmlidXRlcyggX19YbWxVdGlsX3V0LmF0NCApLnNvcnQoKSIsIFsgX19YbWxVdGlsX3V0LmF0NF9hYXQsIF9fWG1sVXRpbF91dC5hdDRfYmF0LCBfX1htbFV0aWxfdXQuYXQ0X2NhdCBdLnNvcnQoICkgKTsKCiAgICAgICAgLy8gTmFtZXNwYWNlcwogICAgICAgIF9fWG1sVXRpbF91dC5hdDUgPSA8Zm9vOm9yZGVyIGE9ImFhdCIgYj0iYmF0IiB4bWxuczpmb289Imh0dHA6Ly93d3cuZXhhbXBsZTIub3JnLyIKICAgICAgICB4bWxuczpmb3A9Imh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvIgogICAgICAgIGZvcDpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5leGFtcGxlLm9yZy9mb3AvIiBjPSJjYXQiPgogICAgICAgIDxmb286YXV0aG9yIGZvbz0iYmFyIj5Gb28sIEJhcjwvZm9vOmF1dGhvcj4KICAgICAgICA8L2ZvbzpvcmRlcj47CiAgICAgICAgX19YbWxVdGlsX3V0LmF0NV9hYXQgPSBfX1htbFV0aWxfdXQuYXQ1LmF0dHJpYnV0ZSggImEiICk7CiAgICAgICAgX19YbWxVdGlsX3V0LmF0NV9iYXQgPSBfX1htbFV0aWxfdXQuYXQ1LmF0dHJpYnV0ZSggImIiICk7CiAgICAgICAgX19YbWxVdGlsX3V0LmF0NV9jYXQgPSBfX1htbFV0aWxfdXQuYXQ1LmF0dHJpYnV0ZSggImMiICk7CiAgICAgICAgX19YbWxVdGlsX3V0X25zMSA9IF9fWG1sVXRpbF91dC5uczE7CiAgICAgICAgX19YbWxVdGlsX3V0LmF0NV9zYXQgPSAoIF9fWG1sVXRpbF91dC5hdDUgKS5AX19YbWxVdGlsX3V0X25zMTo6c2NoZW1hTG9jYXRpb247CiAgICAgICAgZGVsZXRlIHRoaXMuX19YbWxVdGlsX3V0X25zMTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRBdHR0cmlidXRlcyA1IiwgIlhtbFV0aWwuZ2V0QXR0cmlidXRlcyggX19YbWxVdGlsX3V0LmF0NSApLnNvcnQoKSIsIFsgX19YbWxVdGlsX3V0LmF0NV9hYXQsIF9fWG1sVXRpbF91dC5hdDVfYmF0LCBfX1htbFV0aWxfdXQuYXQ1X2NhdCwgX19YbWxVdGlsX3V0LmF0NV9zYXQgXS5zb3J0KCApICk7CgogICAgICAgIC8vIERlZmF1bHQgbmFtZXNwYWNlCiAgICAgICAgX19YbWxVdGlsX3V0LmF0NiA9IDxmb286b3JkZXIgYT0iYWF0IiBiPSJiYXQiIHhtbG5zOmZvbz0iaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvIgogICAgICAgIHhtbG5zOmZvcD0iaHR0cDovL3d3dy5leGFtcGxlLm9yZy8iIHhtbG5zPSJodHRwOi8vd3d3LmV4YW1wbGUzLm9yZy8iCiAgICAgICAgZm9wOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LmV4YW1wbGUub3JnL2ZvcC8iIGM9ImNhdCI+CiAgICAgICAgPGZvbzphdXRob3IgZm9vPSJiYXIiPkZvbywgQmFyPC9mb286YXV0aG9yPgogICAgICAgIDwvZm9vOm9yZGVyPjsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ2X2FhdCA9IF9fWG1sVXRpbF91dC5hdDYuYXR0cmlidXRlKCAiYSIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ2X2JhdCA9IF9fWG1sVXRpbF91dC5hdDYuYXR0cmlidXRlKCAiYiIgKTsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ2X2NhdCA9IF9fWG1sVXRpbF91dC5hdDYuYXR0cmlidXRlKCAiYyIgKTsKICAgICAgICBfX1htbFV0aWxfdXRfbnMxID0gX19YbWxVdGlsX3V0Lm5zMTsKICAgICAgICBfX1htbFV0aWxfdXQuYXQ2X3NhdCA9ICggX19YbWxVdGlsX3V0LmF0NiApLkBfX1htbFV0aWxfdXRfbnMxOjpzY2hlbWFMb2NhdGlvbjsKICAgICAgICBkZWxldGUgdGhpcy5fX1htbFV0aWxfdXRfbnMxOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldEF0dHRyaWJ1dGVzIDYiLCAiWG1sVXRpbC5nZXRBdHRyaWJ1dGVzKCBfX1htbFV0aWxfdXQuYXQ2ICkuc29ydCgpIiwgWyBfX1htbFV0aWxfdXQuYXQ2X2FhdCwgX19YbWxVdGlsX3V0LmF0Nl9iYXQsIF9fWG1sVXRpbF91dC5hdDZfY2F0LCBfX1htbFV0aWxfdXQuYXQ2X3NhdCBdLnNvcnQoICkgKTsKCiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBUZXN0IHByZXR0eVByaW50CiAgICAgICAgLy8gU2ltcGxlIHN0dWZmLCBubyBhdHRyaWJ1dGVzLCBubyBuYW1lc3BhY2VzLgogICAgICAgIEFzc2VydC5lcXVhbCggIlByZXR0eVByaW50IDEwIiwgIlhtbFV0aWwucHJldHR5UHJpbnQoIDxyb290Pjxmb28+YmFyPC9mb28+PC9yb290PiApIiwgIjxyb290PlxuICA8Zm9vPmJhcjwvZm9vPlxuPC9yb290PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCAyMCIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdD4gYmFyIDwvcm9vdD4gKSIsICI8cm9vdD4gYmFyIDwvcm9vdD4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgMjEiLCAiWG1sVXRpbC5wcmV0dHlQcmludCggPHJvb3Q+IDwvcm9vdD4gKSIsICI8cm9vdD4gPC9yb290PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCAyMiIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdD4gXG4gPC9yb290PiApIiwgIjxyb290PiAmI3hBOyA8L3Jvb3Q+IiApOwoKICAgICAgICAvLyBCeSBkZXNpZ24sIHRoZSBwcmV0dHkgcHJpbnRlciBpbnRyb2R1Y2VzIGxpbmUgY2hhbmdlcyBhZnRlciBub24tdGV4dCBlbGVtZW50cy4KICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCAyMyIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdD5mb288YmFyPmZvb2JhcjwvYmFyPjwvcm9vdD4gKSIsICI8cm9vdD5mb288YmFyPmZvb2JhcjwvYmFyPlxuPC9yb290PiIgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCAyNCIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdD5mb288YmFyPjxmb28+YmFyPC9mb28+PC9iYXI+PC9yb290PiApIiwgIjxyb290PmZvbzxiYXI+XG4gICAgPGZvbz5iYXI8L2Zvbz5cbiAgPC9iYXI+XG48L3Jvb3Q+IiApOwogICAgICAgIEFzc2VydC5lcXVhbCggIlByZXR0eVByaW50IDI1IiwgIlhtbFV0aWwucHJldHR5UHJpbnQoIDxyb290PjxiYXI+PGZvbz4gYmFyIDwvZm9vPjwvYmFyPmZvbzwvcm9vdD4gKSIsICI8cm9vdD5cbiAgPGJhcj5cbiAgICA8Zm9vPiBiYXIgPC9mb28+XG4gIDwvYmFyPmZvbzwvcm9vdD4iICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgMjYiLCAiWG1sVXRpbC5wcmV0dHlQcmludCggPHJvb3Q+PGJhcj48Zm9vPiBiYXIgPC9mb28+PC9iYXI+Zm9vPC9yb290PiwgeyBpbmRlbnRMZXZlbCA6IDN9ICkiLCAiPHJvb3Q+XG4gICA8YmFyPlxuICAgICAgPGZvbz4gYmFyIDwvZm9vPlxuICAgPC9iYXI+Zm9vPC9yb290PiIgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgMzAiLCAiWG1sVXRpbC5wcmV0dHlQcmludCggPHJvb3Q+PGZvbz5iYXI8L2Zvbz48YmFyPjwvYmFyPjwvcm9vdD4gKSIsICI8cm9vdD5cbiAgPGZvbz5iYXI8L2Zvbz5cbiAgPGJhci8+XG48L3Jvb3Q+IiApOwoKICAgICAgICAvLyBBdHRyaWJ1dGVzCiAgICAgICAgLy8gZGlmZiBpbXByb3ZlIHB1dHMgYXR0cmlidXRlcyBvbiBzZXBlcmF0ZSBsaW5lcywgaWYgbW9yZSB0aGFuIDIuLi4KICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCA0MCIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdCBhPSdjYWF0JyAgIGM9J2JjYXQnIGI9J2FiYXQnPjxmb28+YmFyPC9mb28+PC9yb290PiwgeyBkaWZmSW1wcm92ZSA6IHRydWV9ICkiLAogICAgICAgICAgICAiPHJvb3RcbiIgKwogICAgICAgICAgICAiICAgIGE9XCJjYWF0XCJcbiIgKwogICAgICAgICAgICAiICAgIGI9XCJhYmF0XCJcbiIgKwogICAgICAgICAgICAiICAgIGM9XCJiY2F0XCI+XG4iICsKICAgICAgICAgICAgIiAgPGZvbz5iYXI8L2Zvbz5cbiIgKwogICAgICAgICAgICAiPC9yb290PiIgKTsKICAgICAgICAvLyBObyBkaWZmIGltcHJvdmUKICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCA0MSIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdCAgYT0nYWF0JyAgICBiPSdiYXQnIGM9J2NhdCc+PGZvbz5iYXI8L2Zvbz48L3Jvb3Q+ICkiLAogICAgICAgICAgICAiPHJvb3QgYT1cImFhdFwiIGI9XCJiYXRcIiBjPVwiY2F0XCI+XG4iICsKICAgICAgICAgICAgIiAgPGZvbz5iYXI8L2Zvbz5cbiIgKwogICAgICAgICAgICAiPC9yb290PiIgKTsKICAgICAgICAvLyBObyBkaWZmIGltcHJvdmUsIGJlY2F1c2Ugb2YgbGltaXRlZCBhdHRyaWJ1dGVzCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgNDIiLCAiWG1sVXRpbC5wcmV0dHlQcmludCggPHJvb3QgIGE9J2FhdCcgID48Zm9vPmJhcjwvZm9vPjwvcm9vdD4sIHsgZGlmZkltcHJvdmUgOiB0cnVlIH0gKSIsCiAgICAgICAgICAgICI8cm9vdCBhPVwiYWF0XCI+XG4iICsKICAgICAgICAgICAgIiAgPGZvbz5iYXI8L2Zvbz5cbiIgKwogICAgICAgICAgICAiPC9yb290PiIgKTsKICAgICAgICAvLyBNb3JlIGF0dHJpYnV0ZXMKICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCA0MyIsICJYbWxVdGlsLnByZXR0eVByaW50KCA8cm9vdCBhPSdhYXQnICAgYz0nY2F0JyBiPSdiYXQnPjxmb28gZm9vYWF0PSdmb29hYXRhdCcgIFxuIGZvb2JhdD0nZm9vYmF0YXQnPmJhcjwvZm9vPjwvcm9vdD4sIHsgZGlmZkltcHJvdmUgOiB0cnVlfSApIiwKICAgICAgICAgICAgJzxyb290XG4nICsKICAgICAgICAgICAgJyAgICBhPSJhYXQiXG4nICsKICAgICAgICAgICAgJyAgICBiPSJiYXQiXG4nICsKICAgICAgICAgICAgJyAgICBjPSJjYXQiPlxuJyArCiAgICAgICAgICAgICcgIDxmb29cbicgKwogICAgICAgICAgICAnICAgICAgZm9vYWF0PSJmb29hYXRhdCJcbicgKwogICAgICAgICAgICAnICAgICAgZm9vYmF0PSJmb29iYXRhdCI+YmFyPC9mb28+XG4nICsKICAgICAgICAgICAgJzwvcm9vdD4nICk7CgogICAgICAgIC8vIEV2ZW4gbW9yZSBhdHRyaWJ1dGVzCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgNDQiLCAiWG1sVXRpbC5wcmV0dHlQcmludCggPHJvb3QgYT0nYWF0JyAgIGM9J2NhdCcgYj0nYmF0Jz48Zm9vIGZvb2FhdD0nZm9vYWF0YXQnICBcbiBmb29iYXQ9J2Zvb2JhdGF0Jz48YmFyIGJhcmFhdD0nYmFyYWF0YXQnICBcbiBiYXJiYXQ9J2JhcmJhdGF0Jz4gaG9yc2UuLi5cbmdlZCA8L2Jhcj48L2Zvbz48L3Jvb3Q+LCB7IGRpZmZJbXByb3ZlIDogdHJ1ZX0gKSIsCiAgICAgICAgICAgICc8cm9vdFxuJyArCiAgICAgICAgICAgICcgICAgYT0iYWF0IlxuJyArCiAgICAgICAgICAgICcgICAgYj0iYmF0IlxuJyArCiAgICAgICAgICAgICcgICAgYz0iY2F0Ij5cbicgKwogICAgICAgICAgICAnICA8Zm9vXG4nICsKICAgICAgICAgICAgJyAgICAgIGZvb2FhdD0iZm9vYWF0YXQiXG4nICsKICAgICAgICAgICAgJyAgICAgIGZvb2JhdD0iZm9vYmF0YXQiPlxuJyArCiAgICAgICAgICAgICcgICAgPGJhclxuJyArCiAgICAgICAgICAgICcgICAgICAgIGJhcmFhdD0iYmFyYWF0YXQiXG4nICsKICAgICAgICAgICAgJyAgICAgICAgYmFyYmF0PSJiYXJiYXRhdCI+IGhvcnNlLi4uJiN4QTtnZWQgPC9iYXI+XG4nICsKICAgICAgICAgICAgJyAgPC9mb28+XG4nICsKICAgICAgICAgICAgJzwvcm9vdD4nICk7CgogICAgICAgIC8vIE5hbWVzcGFjZXMKICAgICAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCA1MCIsICdYbWxVdGlsLnByZXR0eVByaW50KCA8Zm9vOm9yZGVyIGE9ImFhdCIgeG1sbnM6Zm9vPSJodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8iIGI9ImJhdCIgeG1sbnM6Zm9wPSJodHRwOi8vd3d3LmV4YW1wbGUub3JnLyIgICAgICAgIGZvcDpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5leGFtcGxlLm9yZy9mb3AvIiBjPSJjYXQiPicgKwogICAgICAgICAgICAnPGZvbzphdXRob3IgZm9wOmZvbz0iYmFyIj5Gb28sIEJhcjwvZm9vOmF1dGhvcj48L2ZvbzpvcmRlcj4sIHsgZGlmZkltcHJvdmUgOiB0cnVlfSApJywKICAgICAgICAgICAgIjxmb286b3JkZXJcbiIgKwogICAgICAgICAgICAiICAgIHhtbG5zOmZvbz1cImh0dHA6Ly93d3cuZXhhbXBsZTIub3JnL1wiXG4iICsKICAgICAgICAgICAgIiAgICB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiXG4iICsKICAgICAgICAgICAgIiAgICBhPVwiYWF0XCJcbiIgKwogICAgICAgICAgICAiICAgIGI9XCJiYXRcIlxuIiArCiAgICAgICAgICAgICIgICAgYz1cImNhdFwiXG4iICsKICAgICAgICAgICAgIiAgICBmb3A6c2NoZW1hTG9jYXRpb249XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL2ZvcC9cIj5cbiIgKwogICAgICAgICAgICAiICA8Zm9vOmF1dGhvciBmb3A6Zm9vPVwiYmFyXCI+Rm9vLCBCYXI8L2ZvbzphdXRob3I+XG4iICsKICAgICAgICAgICAgIjwvZm9vOm9yZGVyPiIgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgNTEiLCAnWG1sVXRpbC5wcmV0dHlQcmludCggPGZvbzpvcmRlciBhPSJhYXQiIHhtbG5zOmZvbz0iaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvIiBiPSJiYXQiIHhtbG5zOmZvcD0iaHR0cDovL3d3dy5leGFtcGxlLm9yZy8iICAgeG1sbnM9Imh0dHA6Ly93d3cuZXhhbXBsZTMub3JnLyIgYz0iY2F0Ij4nICsKICAgICAgICAgICAgJzxmb286YXV0aG9yIGZvcDpmb289ImJhciI+Rm9vLCBCYXI8L2ZvbzphdXRob3I+PG90aGVyPlNvbWV0aGluZzwvb3RoZXI+PC9mb286b3JkZXI+LCB7IGRpZmZJbXByb3ZlIDogdHJ1ZX0gKScsCiAgICAgICAgICAgICI8Zm9vOm9yZGVyXG4iICsKICAgICAgICAgICAgIiAgICB4bWxucz1cImh0dHA6Ly93d3cuZXhhbXBsZTMub3JnL1wiXG4iICsKICAgICAgICAgICAgIiAgICB4bWxuczpmb289XCJodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy9cIlxuIiArCiAgICAgICAgICAgICIgICAgeG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIlxuIiArCiAgICAgICAgICAgICIgICAgYT1cImFhdFwiXG4iICsKICAgICAgICAgICAgIiAgICBiPVwiYmF0XCJcbiIgKwogICAgICAgICAgICAiICAgIGM9XCJjYXRcIj5cbiIgKwogICAgICAgICAgICAiICA8Zm9vOmF1dGhvciBmb3A6Zm9vPVwiYmFyXCI+Rm9vLCBCYXI8L2ZvbzphdXRob3I+XG4iICsKICAgICAgICAgICAgIiAgPG90aGVyPlNvbWV0aGluZzwvb3RoZXI+XG4iICsKICAgICAgICAgICAgIjwvZm9vOm9yZGVyPiIgKTsKCiAgICAgICAgLy8gU3BlY2lhbCBjaGFyYWN0ZXJzCiAgICAgICAgLy8gVGhlIFNwaWRlck1vbmtleSBlbmdpbmUgaGFuZGxlcyB0cmFuc2Zvcm0gXHIgdG8gXG4gd2hlbiBYTUwgbGl0ZXJhbHMsIHNvIHdlIGhhdmUgdG8gCiAgICAgICAgLy8ganVtcCBzb21lIGhvb3BzIHRvIGdldCBhIFxyIGludG8gdGhlIGNvZGUKICAgICAgICAvLyBJdCBhY3R1YWxseSBkbyB3b3JrIGluIG91dHB1dCwgaXRzIGp1c3QgdGhhdCBnZXR0aW5nIGl0IGludG8gdGhlIFhNTCBpcyBwcmV0dHkgCiAgICAgICAgLy8gaGFyZC4KICAgICAgICBfX1htbFV0aWxfdXQuc3BlY2lhbCA9ICI8PiZcIidcdTAwMEFcdTAwMERcdTAwMDkiOwogICAgICAgIC8vIF9fWG1sVXRpbF91dC5zcGVjaWFsID0gIjw+JlwiJ1x1MDAwQVx1MDAwOSI7CiAgICAgICAgLy8gRG8gbm90IHNwbGl0IHRoaXMgbGluZSE6CiAgICAgICAgX19YbWxVdGlsX3V0LnNwZWNpYWxfeG1sID0gPG9yZGVyIGE9e19fWG1sVXRpbF91dC5zcGVjaWFsfSB4bWxuczpmb289e19fWG1sVXRpbF91dC5zcGVjaWFsfSBiPSJiYXQiIHhtbG5zOmZvcD0iaHR0cDovL3d3dy5leGFtcGxlLm9yZy8iICAgeG1sbnM9Imh0dHA6Ly93d3cuZXhhbXBsZTMub3JnLyIgYz0iY2F0Ij48L29yZGVyPjsKICAgICAgICBfX1htbFV0aWxfdXQuc3BlY2lhbF94bWwub3RoZXIuKiArPSBfX1htbFV0aWxfdXQuc3BlY2lhbCArIF9fWG1sVXRpbF91dC5zcGVjaWFsOwogICAgICAgIEFzc2VydC5lcXVhbCggIlByZXR0eVByaW50IDYwIiwgJ1htbFV0aWwucHJldHR5UHJpbnQoIF9fWG1sVXRpbF91dC5zcGVjaWFsX3htbCwgeyBkaWZmSW1wcm92ZSA6IHRydWV9ICknLAogICAgICAgICAgICAiPG9yZGVyXG4iICsKICAgICAgICAgICAgIiAgICB4bWxucz1cImh0dHA6Ly93d3cuZXhhbXBsZTMub3JnL1wiXG4iICsKICAgICAgICAgICAgIiAgICB4bWxuczpmb289XCImbHQ7Jmd0OyZhbXA7JnF1b3Q7JmFwb3M7JiN4QTsmI3hEOyYjeDk7XCJcbiIgKwogICAgICAgICAgICAiICAgIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCJcbiIgKwogICAgICAgICAgICAiICAgIGE9XCImbHQ7Jmd0OyZhbXA7JnF1b3Q7JmFwb3M7JiN4QTsmI3hEOyYjeDk7XCJcbiIgKwogICAgICAgICAgICAiICAgIGI9XCJiYXRcIlxuIiArCiAgICAgICAgICAgICIgICAgYz1cImNhdFwiPlxuIiArCiAgICAgICAgICAgICIgIDxvdGhlcj4mbHQ7Jmd0OyZhbXA7JnF1b3Q7JmFwb3M7JiN4QTsmI3hEOyYjeDk7Jmx0OyZndDsmYW1wOyZxdW90OyZhcG9zOyYjeEE7JiN4RDsmI3g5Ozwvb3RoZXI+XG4iICsKICAgICAgICAgICAgIjwvb3JkZXI+IiApOwoKICAgICAgICAvKiBJdCBhcHBlYXJzIHRoYXQgUmhpbm8gYW5kIFNwaWRlck1vbmtleSBkb2VzIG5vdCByZWFsbHkgc3VwcG9ydCB0aGUgc3BlY2lhbCBjaGFycyBmcm9tIHhtbCAxLjEuLi4gCiAgICBfX1htbFV0aWxfdXQuc3BlY2lhbCA9ICI8PiZcIidcdTAwMDFcdTAwMDJcdTAwMDNcdTAwMDRcdTAwMDVcdTAwMDZcdTAwMDdcdTAwMDhcdTAwMDlcdTAwMEFcdTAwMEJcdTAwMENcdTAwMERcdTAwMEVcdTAwMEZcdTAwMTBcdTAwMTFcdTAwMTJcdTAwMTNcdTAwMTRcdTAwMTVcdTAwMTZcdTAwMTdcdTAwMThcdTAwMTlcdTAwMUFcdTAwMUJcdTAwMUNcdTAwMURcdTAwMUVcdTAwMUYiOwogICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgNjEiLCAnWG1sVXRpbC5wcmV0dHlQcmludCggPGZvbzpvcmRlciBhPXtfX1htbFV0aWxfdXQuc3BlY2lhbH0geG1sbnM6Zm9vPXtfX1htbFV0aWxfdXQuc3BlY2lhbH0gYz0iY2F0Ij4nICsKICAgICAgICAgICAgICAgICAgJzxmb286YmFyPntfX1htbFV0aWxfdXQuc3BlY2lhbH08L2ZvbzpiYXI+PC9mb286b3JkZXI+LCB7IGRpZmZJbXByb3ZlIDogdHJ1ZX0gKScsIAogICAgICAgICAgICAgICAgICAiPGZvbzpvcmRlclxuIiArIAogICAgICAgICAgICAgICAgICAiICAgIHhtbG5zOmZvbz1cIiZsdDsmZ3Q7JmFtcDsmcXVvdDsmYXBvczsmI3gxOyYjeDI7JiN4MzsmI3g0OyYjeDU7JiN4NjsmI3g3OyYjeDg7JiN4OTsmI3hBOyYjeEI7JiN4QzsmI3hEOyYjeEU7JiN4RjsmI3gxMDsmI3gxMTsmI3gxMjsmI3gxMzsmI3gxNDsmI3gxNTsmI3gxNjsmI3gxNzsmI3gxODsmI3gxOTsmI3gxQTsmI3gxQjsmI3gxQzsmI3gxRDsmI3gxRTsmI3gxRjtcIlxuIiArCiAgICAgICAgICAgICAgICAgICIgICAgYT1cIiZsdDsmZ3Q7JmFtcDsmcXVvdDsmYXBvczsmI3gxOyYjeDI7JiN4MzsmI3g0OyYjeDU7JiN4NjsmI3g3OyYjeDg7JiN4OTsmI3hBOyYjeEI7JiN4QzsmI3hEOyYjeEU7JiN4RjsmI3gxMDsmI3gxMTsmI3gxMjsmI3gxMzsmI3gxNDsmI3gxNTsmI3gxNjsmI3gxNzsmI3gxODsmI3gxOTsmI3gxQTsmI3gxQjsmI3gxQzsmI3gxRDsmI3gxRTsmI3gxRjtcIlxuIiArIAogICAgICAgICAgICAgICAgICAiICAgIGM9XCJjYXRcIj5cbiIgKyAKICAgICAgICAgICAgICAgICAgIiAgPGZvbzpiYXI+Jmx0OyZndDsmYW1wOyZxdW90OyZhcG9zOyYjeDE7JiN4MjsmI3gzOyYjeDQ7JiN4NTsmI3g2OyYjeDc7JiN4ODsmI3g5OyYjeEE7JiN4QjsmI3hDOyYjeEQ7JiN4RTsmI3hGOyYjeDEwOyYjeDExOyYjeDEyOyYjeDEzOyYjeDE0OyYjeDE1OyYjeDE2OyYjeDE3OyYjeDE4OyYjeDE5OyYjeDFBOyYjeDFCOyYjeDFDOyYjeDFEOyYjeDFFOyYjeDFGOzwvZm9vOmJhcj5cbiIgKwogICAgICAgICAgICAgICAgICAiPC9mb286b3JkZXI+IiApOyAKICAgICovCiAgICAgICAgLyogTm90ZSBhYm91dCBjb21tZW50cywgY2RhdGEgYW5kIHByZXByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25zOgogICAgICAgSSBoYXZlIG5vdCBiZWVuIGFibGUgZmluZCBhbnkgd2F5IHRvIGFjdHVhbGx5IGNyZWF0ZSBYTUwgZG9jdW1lbnRzCiAgICAgICB3aGVyZSBzdWNoIGVsZW1lbnRzIGhhdmUgYmVlbiByZXRhaW5lZCBhZnRlciBiZWVpbmcgcGFyc2VkIGJ5IAogICAgICAgdGhlIFJoaW5vL1NwaWRlck1vbmtleSBFNFggcGFyc2Vycy4gCiAgICAgICAtIENEQVRBIHNlZW1zIHRvIGJlIGNvbnZlcnRlZCB0byBjaGFyYWN0ZXIgZGF0YQogICAgICAgLSBDb21tZW50cyBzZWVtcyB0byBiZSB0b3RhbGx5IGlnbm9yZWQgKGRpc2FwcGVhcikKICAgICAgIC0gUHJlcHJvY2Vzc2luZyBpbnN0cnVjdGlvbnMgZ28gdGhlIHdheSBvZiB0aGUgY29tbWVudHMgCiAgICAgICBUaGVyZWZvcmUgdGhlIHRlc3Rpbmcgb2YgdGhlc2UgZWxlbWVudHMgaXMgcXVpdGUgbGltaXRlZCAqLwoKICAgICAgICAvLyBDREFUQTogTWFrZSBzdXJlIGl0IGRvZXMgbm90IGJlY29tZSBhIHRhZyBpbiB0aGUgb3V0cHV0CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgNzAiLCAnWG1sVXRpbC5wcmV0dHlQcmludCggPHJvb3Q+PHRhZz5mb288L3RhZz48dGFnPjwhW0NEQVRBWzxzZW5kZXI+Sm9obiBTbWl0aDwvc2VuZGVyPl1dPjwvdGFnPjwvcm9vdD4gKScsCiAgICAgICAgICAgICI8cm9vdD5cbiIgKwogICAgICAgICAgICAiICA8dGFnPmZvbzwvdGFnPlxuIiArCiAgICAgICAgICAgICIgIDx0YWc+Jmx0O3NlbmRlciZndDtKb2huIFNtaXRoJmx0Oy9zZW5kZXImZ3Q7PC90YWc+XG4iICsKICAgICAgICAgICAgIjwvcm9vdD4iICk7CgogICAgICAgIC8vIENvbW1lbnRzIC0gbm8gdGVzdHMKICAgICAgICAvLyBQcmVwcm9jZXNzaW5nIGluc3RydWN0aW9ucyAtIG5vIHRlc3RzCgogICAgICAgIC8vIFRoZSBpbmRlbnRhdGlvbiBvZiBtaXhlZCBlbGVtZW50cyAodGV4dCBhbmQgY29udGVudCkgaXMgYnJva2VuLiBTb3JyeSBhYm91dCB0aGF0LgogICAgICAgIC8qCiAgICAgICAgLy8gMjAxNC0wOS0wMiBTb21lIHdlaXJkIGJ1ZyBmcm9tIENCTzogMTc2OQogICAgX19YbWxVdGlsX3V0LmJ1ZzE3Njk1X25vaW5kZW50ID0gWG1sVXRpbC5mcm9tU3RyaW5nKCAiPGhlc3Q+ICAgPGZvby8+PC9oZXN0PiIgKTsgCiAgICBBc3NlcnQuZXF1YWwoICJQcmV0dHlQcmludCA4MCIsICdYbWxVdGlsLnByZXR0eVByaW50KCBfX1htbFV0aWxfdXQuYnVnMTc2OTVfbm9pbmRlbnQgKScsIAogICAgICAgICAgICAgICAgICAiPGhlc3Q+XG4iICsKICAgICAgICAgICAgICAgICAgIiAgPGZvby8+XG4iICsKICAgICAgICAgICAgICAgICAgIjwvaGVzdD4iICk7CgogICAgX19YbWxVdGlsX3V0LmJ1ZzE3Njk1X25vaW5kZW50ID0gWG1sVXRpbC5mcm9tU3RyaW5nKCAiPHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj1cImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvXCIgeG1sbnM6b3JkPVwiaHR0cDovL29zcy5kYmMuZGsvbnMvb3JkZXJSZWNlaXB0XCI+ICAgPHNvYXBlbnY6SGVhZGVyLz48L3NvYXBlbnY6RW52ZWxvcGU+IiApOwogICAgX19YbWxVdGlsX3V0LmJ1ZzE3Njk1X25vaW5kZW50ID0gWG1sVXRpbC5mcm9tU3RyaW5nKCAiPHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj1cImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvXCIgeG1sbnM6b3JkPVwiaHR0cDovL29zcy5kYmMuZGsvbnMvb3JkZXJSZWNlaXB0XCI+ICAgPHNvYXBlbnY6SGVhZGVyLz48L3NvYXBlbnY6RW52ZWxvcGU+IiApOwogICAgQXNzZXJ0LmVxdWFsKCAiUHJldHR5UHJpbnQgODEiLCAnWG1sVXRpbC5wcmV0dHlQcmludCggX19YbWxVdGlsX3V0LmJ1ZzE3Njk1X25vaW5kZW50ICknLCAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICI8c29hcGVudjpFbnZlbG9wZSB4bWxuczpvcmQ9XCJodHRwOi8vb3NzLmRiYy5kay9ucy9vcmRlclJlY2VpcHRcIiB4bWxuczpzb2FwZW52PVwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS9cIj5cbiIgKwogICAgICAgICAgICAgICAgICAiICA8c29hcGVudjpIZWFkZXIvPlxuIiArCiAgICAgICAgICAgICAgICAgICovCgoKICAgIEFzc2VydC5lcXVhbCggIlByZXR0eVByaW50IDgyIiwgJ1htbFV0aWwucHJldHR5UHJpbnQoIDxoZWo+PG1lZD5kaWc8L21lZD48IS0tIE9wdGlvbmFsIC0tPjwvaGVqPiApJywgCiAgICAgICAgICAgICAgICAgICI8aGVqPlxuIiArCiAgICAgICAgICAgICAgICAgICIgIDxtZWQ+ZGlnPC9tZWQ+XG4iICsKICAgICAgICAgICAgICAgICAgIiAgPCEtLSBPcHRpb25hbCAtLT5cbiIgKwogICAgICAgICAgICAgICAgICAiPC9oZWo+IiApOwoKICAgIEFzc2VydC5lcXVhbCggIlByZXR0eVByaW50IDgzIiwgJ1htbFV0aWwucHJldHR5UHJpbnQoIDxoZWo+PG1lZD5kaWc8L21lZD48ZHU+PCEtLSBPcHRpb25hbCAtLT48L2R1PjwvaGVqPiApJywgCiAgICAgICAgICAgICAgICAgICI8aGVqPlxuIiArCiAgICAgICAgICAgICAgICAgICIgIDxtZWQ+ZGlnPC9tZWQ+XG4iICsKICAgICAgICAgICAgICAgICAgIiAgPGR1PlxuIiArCiAgICAgICAgICAgICAgICAgICIgICAgPCEtLSBPcHRpb25hbCAtLT5cbiIgKwogICAgICAgICAgICAgICAgICAiICA8L2R1PlxuIiArCiAgICAgICAgICAgICAgICAgICI8L2hlaj4iICk7CgogICAgICAgIC8vIDIwMTQtMDktMDEgU3BlY2lhbCBjYXNlIGJ5IFRob21hcyBMYW5nICAgIAoKCgoKCgoKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgIC8vIFRlc3QgZnVuY3Rpb24gdG8gZmlsdGVyIGFuIFhNTCBMaXN0CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZmlsdGVyWE1MTGlzdFByZWRpY2F0ZSAxIiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdFByZWRpY2F0ZSggbmV3IFhNTExpc3QoICc8Zm9vPmhlajwvZm9vPjxmb28+bWVkPC9mb28+PGZvbz5kaWc8L2Zvbz4nICksIGZ1bmN0aW9uKCBlbGVtICkgeyByZXR1cm4gdHJ1ZTsgfSkiLCBuZXcgWE1MTGlzdCggJzxmb28+aGVqPC9mb28+PGZvbz5tZWQ8L2Zvbz48Zm9vPmRpZzwvZm9vPicgKSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImZpbHRlclhNTExpc3RQcmVkaWNhdGUgMiIsICJYbWxVdGlsLmZpbHRlclhNTExpc3RQcmVkaWNhdGUoIG5ldyBYTUxMaXN0KCAnPGZvbz5oZWo8L2Zvbz48Zm9vPm1lZDwvZm9vPjxmb28+ZGlnPC9mb28+JyApLCBmdW5jdGlvbiggZWxlbSApIHsgcmV0dXJuIGVsZW0udGV4dCgpID09ICdtZWQnOyB9KSIsIG5ldyBYTUxMaXN0KCAnPGZvbz5tZWQ8L2Zvbz4nICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0UHJlZGljYXRlIDMiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0UHJlZGljYXRlKCBuZXcgWE1MTGlzdCggJzxmb28+aGVqPC9mb28+PGZvbz5tZWQ8L2Zvbz48Zm9vPmRpZzwvZm9vPicgKSwgZnVuY3Rpb24oIGVsZW0gKSB7IHJldHVybiBlbGVtLnRleHQoKS5pbmRleE9mKCAnZScgKSAhPSAtMTsgfSkiLCBuZXcgWE1MTGlzdCggJzxmb28+aGVqPC9mb28+PGZvbz5tZWQ8L2Zvbz4nICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0UHJlZGljYXRlIDQiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0UHJlZGljYXRlKCBuZXcgWE1MTGlzdCggJzxmb28+aGVqPC9mb28+PGZvbz5tZWQ8L2Zvbz48Zm9vPmRpZzwvZm9vPicgKSwgZnVuY3Rpb24oIGVsZW0gKSB7IHJldHVybiBlbGVtLnRleHQoKSA9PSAnZm9vJzsgfSkiLCBuZXcgWE1MTGlzdCggKSApOwoKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgIC8vIFRlc3QgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIGFuIFhtbCBvYmplY3QgaGF2ZSBhIGdpdmVuIGF0dHJpYnV0ZQogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAxIiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sLz4sIHVuZGVmaW5lZCwgJ2F0cicgKSIsIGZhbHNlICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAyIiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIGF0cj0naGVqJy8+LCB1bmRlZmluZWQsICdhdHInICkiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDMiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgYXRyPScnLz4sIHVuZGVmaW5lZCwgJ2F0cicgKSIsIHRydWUgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgNCIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCBhdHI9J2hlaicvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDUiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgYXRyPScnLz4sIF9fWG1sVXRpbF91dC5uczEsICdhdHInICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSA2IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIGF0cj0naGVqJy8+LCB1bmRlZmluZWQsICdhdHJpJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgNyIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCBhdHI9JycvPiwgdW5kZWZpbmVkLCAnYXRyaScgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDgiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgYXRyPSdoZWonLz4sIF9fWG1sVXRpbF91dC5uczEsICdhdHJpJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgOSIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCBhdHI9JycvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cmknICkiLCBmYWxzZSApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMTAiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvcDphdHI9J2hlaicvPiwgdW5kZWZpbmVkLCAnYXRyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMTEiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvcDphdHI9JycvPiwgdW5kZWZpbmVkLCAnYXRyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMTIiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvcDphdHI9J2hlaicvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cicgKSIsIHRydWUgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMTMiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvcDphdHI9JycvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cicgKSIsIHRydWUgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMTQiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvcDphdHI9J2hlaicvPiwgdW5kZWZpbmVkLCAnYXRyaScgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDE1IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3A6YXRyPScnLz4sIHVuZGVmaW5lZCwgJ2F0cmknICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAxNiIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm9wOmF0cj0naGVqJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnYXRyaScgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDE3IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3A6YXRyPScnLz4sIF9fWG1sVXRpbF91dC5uczEsICdhdHJpJyApIiwgZmFsc2UgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDE4IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPSdoZWonLz4sIHVuZGVmaW5lZCwgJ2F0cicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDE5IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPScnLz4sIHVuZGVmaW5lZCwgJ2F0cicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDIwIiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPSdoZWonLz4sIF9fWG1sVXRpbF91dC5uczEsICdhdHInICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAyMSIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm96OmF0cj0nJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnYXRyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMjIiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvejphdHI9J2hlaicvPiwgdW5kZWZpbmVkLCAnYXRyaScgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDIzIiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPScnLz4sIHVuZGVmaW5lZCwgJ2F0cmknICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAyNCIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm96OmF0cj0naGVqJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnYXRyaScgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDI1IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPScnLz4sIF9fWG1sVXRpbF91dC5uczEsICdhdHJpJyApIiwgZmFsc2UgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDI2IiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPSdoZWonIGF0cj0naGVqc2EnLz4sIHVuZGVmaW5lZCwgJ2F0cicgKSIsIHRydWUgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMjciLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvejphdHI9JycgYXRyPSdoZWpzYScvPiwgdW5kZWZpbmVkLCAnYXRyJyApIiwgdHJ1ZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAyOCIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm96OmF0cj0naGVqJyBhdHI9J2hlanNhJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnYXRyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMjkiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvejphdHI9JycgYXRyPSdoZWpzYScvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzQXR0cmlidXRlIDMwIiwgIlhtbFV0aWwuaGFzQXR0cmlidXRlKCA8eG1sIHhtbG5zOmZvej0naHR0cDovL3d3dy5leGFtcGxlMi5vcmcvJyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJyBmb3o6YXRyPSdoZWonIGZvcDphdHI9J2hlanNhJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnYXRyJyApIiwgdHJ1ZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAzMSIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm96OmF0cj0nJyBmb3A6YXRyPSdoZWpzYScvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cicgKSIsIHRydWUgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMzIiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvejphdHI9J2hlaicgZm9wOmF0cmk9J2hlanNhJy8+LCB1bmRlZmluZWQsICdhdHJpJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNBdHRyaWJ1dGUgMzMiLCAiWG1sVXRpbC5oYXNBdHRyaWJ1dGUoIDx4bWwgeG1sbnM6Zm96PSdodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy8nIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nIGZvejphdHI9JycgZm9wOmF0cj0naGVqc2EnLz4sIHVuZGVmaW5lZCwgJ2F0cmknICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAzNCIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm96OmF0cj0naGVqJyBmb3A6YXRyaT0naGVqc2EnLz4sIF9fWG1sVXRpbF91dC5uczEsICdhdHJpJyApIiwgdHJ1ZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc0F0dHJpYnV0ZSAzNSIsICJYbWxVdGlsLmhhc0F0dHJpYnV0ZSggPHhtbCB4bWxuczpmb3o9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLycgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycgZm96OmF0cj0nJyBmb3A6YXRyPSdoZWpzYScvPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2F0cmknICkiLCBmYWxzZSApOwoKCgogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gVGVzdCBmdW5jdGlvbiB0byByZXR1cm4gZWxlbWVudHMgZnJvbSB4bWxsaXN0IHRoYXQgaGF2ZSBhdHRyaWJ1dGVzIG9mIGEgZ2l2ZW4gdHlwZS4KICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIDEiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb28+aGVqPC9mb28+PGZvbyB0eXBlPVwiZm9vXCI+bWVkPC9mb28+PGZvbz5kaWc8L2Zvbz4nICksIHVuZGVmaW5lZCwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggJzxmb28gdHlwZT0iZm9vIj5tZWQ8L2Zvbz4nICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIDIiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb28+aGVqPC9mb28+PGZvbz5tZWQ8L2Zvbz48Zm9vIHR5cGU9XCJmb29cIj5kaWc8L2Zvbz4nICksIHVuZGVmaW5lZCwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggJzxmb28gdHlwZT0iZm9vIj5kaWc8L2Zvbz4nICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIDMiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb28gdHlwZT1cImZvb1wiPmhlajwvZm9vPjxmb28+bWVkPC9mb28+PGZvbyB0eXBlPVwiZm9vXCI+ZGlnPC9mb28+JyApLCB1bmRlZmluZWQsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICc8Zm9vIHR5cGU9ImZvbyI+aGVqPC9mb28+PGZvbyB0eXBlPSJmb28iPmRpZzwvZm9vPicgKSApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDEiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCI+aGVqPC9mb3A6Zm9vPicgKSwgdW5kZWZpbmVkLCAndHlwZScgKSIsIG5ldyBYTUxMaXN0KCApICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSBOUyAyIiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiPmhlajwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczEsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDMiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgdHlwZT1cImJhclwiPmhlajwvZm9wOmZvbz4nICksIHVuZGVmaW5lZCwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgdHlwZT1cImJhclwiPmhlajwvZm9wOmZvbz4nICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDQiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+JyApLCB1bmRlZmluZWQsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDUiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+JyApLCBfX1htbFV0aWxfdXQubnMxLCAndHlwZScgKSIsIG5ldyBYTUxMaXN0KCAnPGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiBmb3A6dHlwZT1cImJhclwiPmhlajwvZm9wOmZvbz4nICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDYiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+PGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiBmb3A6dHlwZT1cImJhclwiPm1lZDwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczEsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIGZvcDp0eXBlPVwiYmFyXCI+aGVqPC9mb3A6Zm9vPjxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5tZWQ8L2ZvcDpmb28+JyApICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSBOUyA3IiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIGZvcDp0eXBlPVwiYmFyXCI+aGVqPC9mb3A6Zm9vPjxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGVyPVwiYmFyXCI+bWVkPC9mb3A6Zm9vPicgKSwgX19YbWxVdGlsX3V0Lm5zMSwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+JyApICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSBOUyAxMCIsICJYbWxVdGlsLmZpbHRlclhNTExpc3RIYXNBdHRyaWJ1dGUoIG5ldyBYTUxMaXN0KCAnPGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiBmb3A6dHlwZT1cImJhclwiPmhlajwvZm9wOmZvbz48Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUyLm9yZy9cIiBmb3A6dHlwZT1cImJhclwiPm1lZDwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczEsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIGZvcDp0eXBlPVwiYmFyXCI+aGVqPC9mb3A6Zm9vPicgKSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImZpbHRlclhNTExpc3RIYXNBdHRyaWJ1dGUgTlMgMTEiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+PGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5tZWQ8L2ZvcDpmb28+JyApLCBfX1htbFV0aWxfdXQubnMyLCAndHlwZScgKSIsIG5ldyBYTUxMaXN0KCAnPGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvXCIgZm9wOnR5cGU9XCJiYXJcIj5tZWQ8L2ZvcDpmb28+JyApICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSBOUyAxMiIsICJYbWxVdGlsLmZpbHRlclhNTExpc3RIYXNBdHRyaWJ1dGUoIG5ldyBYTUxMaXN0KCAnPGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiBmb3A6dHlwZT1cImJhclwiPmhlajwvZm9wOmZvbz48Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIGZvcDp0eXBlPVwiYmFyXCI+bWVkPC9mb3A6Zm9vPicgKSwgX19YbWxVdGlsX3V0Lm5zMiwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggKSApOwoKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDEzIiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIHR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+JyApLCBfX1htbFV0aWxfdXQubnMxLCAndHlwZScgKSIsIG5ldyBYTUxMaXN0KCApICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSBOUyAxNCIsICJYbWxVdGlsLmZpbHRlclhNTExpc3RIYXNBdHRyaWJ1dGUoIG5ldyBYTUxMaXN0KCAnPGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiB0eXBlPVwiYmFyXCI+aGVqPC9mb3A6Zm9vPjxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgdHlwZT1cImJhclwiPm1lZDwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczEsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDE1IiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIHR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+PGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiB0eXBlcj1cImJhclwiPm1lZDwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczEsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDE2IiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIHR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+PGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvXCIgdHlwZT1cImJhclwiPm1lZDwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczEsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDE3IiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIHR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+PGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvXCIgdHlwZT1cImJhclwiPm1lZDwvZm9wOmZvbz4nICksIF9fWG1sVXRpbF91dC5uczIsICd0eXBlJyApIiwgbmV3IFhNTExpc3QoICkgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJmaWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlIE5TIDE4IiwgIlhtbFV0aWwuZmlsdGVyWE1MTGlzdEhhc0F0dHJpYnV0ZSggbmV3IFhNTExpc3QoICc8Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIHR5cGU9XCJiYXJcIj5oZWo8L2ZvcDpmb28+PGZvcDpmb28geG1sbnM6Zm9wPVwiaHR0cDovL3d3dy5leGFtcGxlLm9yZy9cIiB0eXBlPVwiYmFyXCI+bWVkPC9mb3A6Zm9vPicgKSwgX19YbWxVdGlsX3V0Lm5zMiwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggKSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImZpbHRlclhNTExpc3RIYXNBdHRyaWJ1dGUgTlMgMTkiLCAiWG1sVXRpbC5maWx0ZXJYTUxMaXN0SGFzQXR0cmlidXRlKCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgdHlwZT1cImJhclwiPmhlajwvZm9wOmZvbz48Zm9wOmZvbyB4bWxuczpmb3A9XCJodHRwOi8vd3d3LmV4YW1wbGUub3JnL1wiIHhtbG5zOmZpcD1cImh0dHA6Ly93d3cuZXhhbXBsZTIub3JnL1wiIGZpcDp0eXBlPVwiaGVzdFwiIGZvcDp0eXBlPVwiYmFyXCI+bWVkPC9mb3A6Zm9vPicgKSwgX19YbWxVdGlsX3V0Lm5zMSwgJ3R5cGUnICkiLCBuZXcgWE1MTGlzdCggJzxmb3A6Zm9vIHhtbG5zOmZvcD1cImh0dHA6Ly93d3cuZXhhbXBsZS5vcmcvXCIgeG1sbnM6ZmlwPVwiaHR0cDovL3d3dy5leGFtcGxlMi5vcmcvXCIgZmlwOnR5cGU9XCJoZXN0XCIgZm9wOnR5cGU9XCJiYXJcIj5tZWQ8L2ZvcDpmb28+JyApICk7CgogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBUZXN0IGZ1bmN0aW9uIHRvIGdldCB0aGUgZmlyc3Qgbm9uLXRyaXZpYWwgc3ViZWxlbWVudAogICAgICAgIEFzc2VydC5lcXVhbCggImdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQgMSIsICJYbWxVdGlsLmdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQoIDxmb28+PC9mb28+ICkiLCB1bmRlZmluZWQgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50IDIiLCAiWG1sVXRpbC5nZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50KCA8Zm9vPmJhcjwvZm9vPiApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCAzIiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvbz5iYXI8YmFyLz48L2Zvbz4gKSIsIDxiYXIvPiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQgNCIsICJYbWxVdGlsLmdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQoIDxmb28+IDxiYXIvPjwvZm9vPiApIiwgPGJhci8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCA1IiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvbz4gPGJhci8+IDwvZm9vPiApIiwgPGJhci8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCA2IiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvbz48YmFyLz4gPC9mb28+ICkiLCA8YmFyLz4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50IDciLCAiWG1sVXRpbC5nZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50KCA8Zm9vPiA8YmFyPjxiYXJyZS8+PC9iYXI+IDwvZm9vPiApIiwgPGJhcj48YmFycmUvPjwvYmFyPiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQgOCIsICJYbWxVdGlsLmdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQoIDxmb28+IDxiYXI+PGJhcnJlLz48L2Jhcj4gPGJhcj48YmFycmVyLz48L2Jhcj4gPC9mb28+ICkiLCA8YmFyPjxiYXJyZS8+PC9iYXI+ICk7CiAgICAgICAgLy8gQW5kLCB3aXRoIG5hbWVzcGFjZXMuCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCBOUyAxIiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PC9mb3A6Zm9vPiApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCBOUyAyIiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+YmFyPC9mb3A6Zm9vPiApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCBOUyAzIiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+YmFyPGZvcDpiYXIvPjwvZm9wOmZvbz4gKSIsIDxmb3A6YmFyIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50IE5TIDQiLCAiWG1sVXRpbC5nZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz4gPGZvcDpiYXIvPjwvZm9wOmZvbz4gKSIsIDxmb3A6YmFyIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50IE5TIDUiLCAiWG1sVXRpbC5nZXRGaXJzdE5vblRyaXZpYWxTdWJFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz4gPGZvcDpiYXIvPiA8L2ZvcDpmb28+ICkiLCA8Zm9wOmJhciB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJy8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCBOUyA2IiwgIlhtbFV0aWwuZ2V0Rmlyc3ROb25Ucml2aWFsU3ViRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+IDxmb3A6YmFyPjxmb3A6YmFycmUvPjwvZm9wOmJhcj4gPC9mb3A6Zm9vPiApIiwgPGZvcDpiYXIgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PGZvcDpiYXJyZS8+PC9mb3A6YmFyPiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQgTlMgNyIsICJYbWxVdGlsLmdldEZpcnN0Tm9uVHJpdmlhbFN1YkVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPiA8Zm9wOmJhcj48Zm9wOmJhcnJlLz48L2ZvcDpiYXI+IDxmb3A6YmFyPjxmb3A6YmFycmVyLz48L2ZvcDpiYXI+IDwvZm9wOmZvbz4gKSIsIDxmb3A6YmFyIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFycmUvPjwvZm9wOmJhcj4gKTsKCiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgIC8vIFRlc3QgZnVuY3Rpb24gdG8gZ2V0IHRoZSBudCdoIG5vbi10cml2aWFsIHN1YmVsZW1lbnQKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IDEiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9vPjwvZm9vPiwgMCApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCAyIiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvbz5iYXI8L2Zvbz4sIDAgKSIsIHVuZGVmaW5lZCApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgMyIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+YmFyPGJhci8+PC9mb28+LCAwICkiLCA8YmFyLz4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IDQiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9vPiA8YmFyLz48L2Zvbz4sIDAgKSIsIDxiYXIvPiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgNSIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+IDxiYXIvPiA8L2Zvbz4sIDAgKSIsIDxiYXIvPiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgNiIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+PGJhci8+IDwvZm9vPiwgMCApIiwgPGJhci8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCA3IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvbz4gPGJhcj48YmFycmUvPjwvYmFyPiA8L2Zvbz4sIDAgKSIsIDxiYXI+PGJhcnJlLz48L2Jhcj4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IDgiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9vPiA8YmFyPjxiYXJyZS8+PC9iYXI+IDxiYXI+PGJhcnJlci8+PC9iYXI+IDwvZm9vPiwgMCApIiwgPGJhcj48YmFycmUvPjwvYmFyPiApOwogICAgICAgIC8vIEFuZCwgd2l0aCBuYW1lc3BhY2VzLgogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTlMgMSIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjwvZm9wOmZvbz4sIDAgKSIsIHVuZGVmaW5lZCApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTlMgMiIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPmJhcjwvZm9wOmZvbz4sIDAgKSIsIHVuZGVmaW5lZCApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTlMgMyIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPmJhcjxmb3A6YmFyLz48L2ZvcDpmb28+LCAwICkiLCA8Zm9wOmJhciB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJy8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOUyA0IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+IDxmb3A6YmFyLz48L2ZvcDpmb28+LCAwICkiLCA8Zm9wOmJhciB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJy8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOUyA1IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+IDxmb3A6YmFyLz4gPC9mb3A6Zm9vPiwgMCApIiwgPGZvcDpiYXIgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycvPiApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTlMgNiIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPiA8Zm9wOmJhcj48Zm9wOmJhcnJlLz48L2ZvcDpiYXI+IDwvZm9wOmZvbz4sIDAgKSIsIDxmb3A6YmFyIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFycmUvPjwvZm9wOmJhcj4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE5TIDciLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz4gPGZvcDpiYXI+PGZvcDpiYXJyZS8+PC9mb3A6YmFyPiA8Zm9wOmJhcj48Zm9wOmJhcnJlci8+PC9mb3A6YmFyPiA8L2ZvcDpmb28+LCAwICkiLCA8Zm9wOmJhciB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48Zm9wOmJhcnJlLz48L2ZvcDpiYXI+ICk7CiAgICAgICAgLy8gR2V0IGFub3RoZXIgZWxlbWVudC4KICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE4xIiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvbz48L2Zvbz4sIDEgKSIsIHVuZGVmaW5lZCApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTjIiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9vPmJhcjwvZm9vPiwgMSApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOMyIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+YmFyPGJhci8+PC9mb28+LCAxICkiLCB1bmRlZmluZWQgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE40IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvbz4gPGJhci8+PC9mb28+LCAxICkiLCB1bmRlZmluZWQgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE41IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvbz4gPGJhci8+IDwvZm9vPiwgMSApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBONiIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+PGJhci8+IDwvZm9vPiwgMSApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBONyIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+IDxiYXI+PGJhcnJlLz48L2Jhcj4gPC9mb28+LCAxICkiLCB1bmRlZmluZWQgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE44IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvbz4gPGJhcj48YmFycmUvPjwvYmFyPiA8YmFyPjxiYXJyZXIvPjwvYmFyPiA8L2Zvbz4sIDEgKSIsIDxiYXI+PGJhcnJlci8+PC9iYXI+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOOSIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb28+IDxiYXIvPiA8YmFyPjxiYXJyZXIvPjwvYmFyPiA8ZmlzazEvPiA8L2Zvbz4sIDIgKSIsIDxmaXNrMS8+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOMTAiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8aGVwPiA8ZmlzazEvPiA8ZmlzazIvPjwvaGVwPiwgMSApIiwgPGZpc2syLz4gKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE4xMSIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxoZXA+IDxmaXNrMS8+IDxmaXNrMi8+IDxmaXNrMy8+PC9oZXA+LCAyICkiLCA8ZmlzazMvPiApOwoKICAgICAgICAvLyBBbmQsIHdpdGggbmFtZXNwYWNlcy4KICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE4gTlMgMSIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjwvZm9wOmZvbz4sIDEgKSIsIHVuZGVmaW5lZCApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTiBOUyAyIiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+YmFyPC9mb3A6Zm9vPiwgMSApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOIE5TIDMiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz5iYXI8Zm9wOmJhci8+PC9mb3A6Zm9vPiwgMSApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOIE5TIDQiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz4gPGZvcDpiYXIvPjwvZm9wOmZvbz4sIDEgKSIsIHVuZGVmaW5lZCApOwogICAgICAgIEFzc2VydC5lcXVhbCggImdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQgTiBOUyA1IiwgIlhtbFV0aWwuZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+IDxmb3A6YmFyLz4gPC9mb3A6Zm9vPiwgMSApIiwgdW5kZWZpbmVkICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOIE5TIDYiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz4gPGZvcDpiYXI+PGZvcDpiYXJyZS8+PC9mb3A6YmFyPiA8L2ZvcDpmb28+LCAxICkiLCB1bmRlZmluZWQgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJnZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50IE4gTlMgNyIsICJYbWxVdGlsLmdldE5vblRyaXZpYWxDaGlsZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPiA8Zm9wOmJhcj48Zm9wOmJhcnJlLz48L2ZvcDpiYXI+IDxmb3A6YmFyPjxmb3A6YmFycmVyLz48L2ZvcDpiYXI+IDwvZm9wOmZvbz4sIDEgKSIsIDxmb3A6YmFyIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFycmVyLz48L2ZvcDpiYXI+ICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiZ2V0Tm9uVHJpdmlhbENoaWxkRWxlbWVudCBOIE5TIDgiLCAiWG1sVXRpbC5nZXROb25Ucml2aWFsQ2hpbGRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz4gPGZvcDpiYXI+PGZvcDpiYXJyZS8+PC9mb3A6YmFyPiA8Zm9wOmJhcj48Zm9wOmJhcnJlci8+PC9mb3A6YmFyPiA8Zm9wOmZpc2sxPjxmb3A6ZmlzazIvPjwvZm9wOmZpc2sxPjwvZm9wOmZvbz4sIDIgKSIsIDxmb3A6ZmlzazEgeG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PGZvcDpmaXNrMi8+PC9mb3A6ZmlzazE+ICk7CgoKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gVGVzdCBmdW5jdGlvbiB0byBkZXRlcm1pbmUgb2YgYSBnaXZlbiBlbGVtZW50IGhhcyB0b3BsZXZlbCB0eXBlIG1hdGNoaW5nIGEgbmFtZXNwYWNlIHVyaSBhbmQgbG9jYWwgbmFtZS4KCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIDEiLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxmb28vPiwgdW5kZWZpbmVkLCAnZm9vJykiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIDIiLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxmb28vPiwgdW5kZWZpbmVkLCAnYmFyJykiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc1VyaUxvY2FsTmFtZSBOUyAxIiwgIlhtbFV0aWwuaGFzVXJpTG9jYWxOYW1lKCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJykiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIE5TIDIiLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4sIHVuZGVmaW5lZCwgJ2ZvbycpIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJoYXNVcmlMb2NhbE5hbWUgTlMgMyIsICJYbWxVdGlsLmhhc1VyaUxvY2FsTmFtZSggPGJhcjpmb28geG1sbnM6YmFyPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLycvPiwgdW5kZWZpbmVkLCAnZm9vJykiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggImhhc1VyaUxvY2FsTmFtZSBOUyA0IiwgIlhtbFV0aWwuaGFzVXJpTG9jYWxOYW1lKCA8YmFyOmZvbyB4bWxuczpiYXI9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJykiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIE5TIDUiLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxiYXI6Zm9vIHhtbG5zOmJhcj0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4sIF9fWG1sVXRpbF91dC5uczEsICdiYXInKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIE5TIDYiLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4sIF9fWG1sVXRpbF91dC5uczIsICdmb28nKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIE5TIDciLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxiYXI6Zm9vIHhtbG5zOmJhcj0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4sIF9fWG1sVXRpbF91dC5uczIsICdmb28nKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAiaGFzVXJpTG9jYWxOYW1lIE5TIDgiLCAiWG1sVXRpbC5oYXNVcmlMb2NhbE5hbWUoIDxiYXI6Zm9vIHhtbG5zOmJhcj0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4sIF9fWG1sVXRpbF91dC5uczIsICdiYXInKSIsIGZhbHNlICk7CgogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBUZXN0IGZ1bmN0aW9uIGZvciBtYXRjaGluZyByb290IGFuZCBlbGVtZW4KICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgMSIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvby8+LCB1bmRlZmluZWQsICdmb28nLCAnYmFyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgMiIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvbz48YmFyLz48L2Zvbz4sIHVuZGVmaW5lZCwgJ2ZvbycsICdiYXInICkiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IDMiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb28+PGJhci8+PC9mb28+LCB1bmRlZmluZWQsICdmb28nLCAnYmF6JyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgNCIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvbz48YmFyPjxiYXovPjwvYmFyPjwvZm9vPiwgdW5kZWZpbmVkLCAnZm9vJywgJ2JheicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IDUiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb28+PGJhcj48YmF6Lz48L2Jhcj48L2Zvbz4sIHVuZGVmaW5lZCwgJ2ZvbycsICdiYXInICkiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IDYiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb28+PGJhcj48YmF6Lz48L2Jhcj48L2Zvbz4sIHVuZGVmaW5lZCwgJ2JhcicsICdiYXonICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCA3IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9vPjxiYXI+PGJhei8+PC9iYXI+PC9mb28+LCB1bmRlZmluZWQsICdiYXInLCAnZm9vJyApIiwgZmFsc2UgKTsKCiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5OU05TIDEiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb28vPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2ZvbycsICdiYXInICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOTlNOUyAyIiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9vPjxiYXIvPjwvZm9vPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2ZvbycsICdiYXInICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOTlNOUyAzIiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9vPjxiYXIvPjwvZm9vPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2ZvbycsICdiYXonICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOTlNOUyA0IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9vPjxiYXI+PGJhei8+PC9iYXI+PC9mb28+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJywgJ2JheicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5OU05TIDUiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb28+PGJhcj48YmF6Lz48L2Jhcj48L2Zvbz4sIF9fWG1sVXRpbF91dC5uczIsICdmb28nLCAnYmFyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgTk5TTlMgNiIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvbz48YmFyPjxiYXovPjwvYmFyPjwvZm9vPiwgX19YbWxVdGlsX3V0Lm5zMiwgJ2JhcicsICdiYXonICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOTlNOUyA3IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9vPjxiYXI+PGJhei8+PC9iYXI+PC9mb28+LCBfX1htbFV0aWxfdXQubnMxLCAnYmFyJywgJ2ZvbycgKSIsIGZhbHNlICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOU05TIDEiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nLz4sIF9fWG1sVXRpbF91dC5uczEsICdmb28nLCAnYmFyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgTlNOUyAyIiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48Zm9wOmJhci8+PC9mb3A6Zm9vPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2ZvbycsICdiYXInICkiLCB0cnVlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5TTlMgMyIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PGJhci8+PC9mb3A6Zm9vPiwgX19YbWxVdGlsX3V0Lm5zMSwgJ2ZvbycsICdiYXInICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOU05TIDQiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFyLz48L2ZvcDpmb28+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJywgJ2JheicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5TTlMgNSIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PGZvcDpiYXI+PGZvcDpiYXovPjwvZm9wOmJhcj48L2ZvcDpmb28+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJywgJ2JheicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5TTlMgNiIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PGZvcDpiYXI+PGZvcDpiYXovPjwvZm9wOmJhcj48L2ZvcDpmb28+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJywgJ2JhcicgKSIsIHRydWUgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgTlNOUyA3IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48Zm9wOmJhcj48Zm9wOmJhei8+PC9mb3A6YmFyPjwvZm9wOmZvbz4sIF9fWG1sVXRpbF91dC5uczEsICdiYXInLCAnYmF6JyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgTlNOUyA4IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48Zm9wOmJhcj48Zm9wOmJhei8+PC9mb3A6YmFyPjwvZm9wOmZvbz4sIF9fWG1sVXRpbF91dC5uczEsICdiYXInLCAnZm9vJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgTlNOUyA5IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJy8+LCBfX1htbFV0aWxfdXQubnMxLCAnZm9vJywgJ2JhcicgKSIsIGZhbHNlICk7CgogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOU05TIDEwIiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48Zm9wOmJhci8+PC9mb3A6Zm9vPiwgX19YbWxVdGlsX3V0Lm5zMiwgJ2ZvbycsICdiYXInICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOU05TIDExIiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZTIub3JnLyc+PGZvcDpiYXIvPjwvZm9wOmZvbz4sIF9fWG1sVXRpbF91dC5uczIsICdmb28nLCAnYmFyJyApIiwgdHJ1ZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOU05TIDEyIiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48YmFyLz48L2ZvcDpmb28+LCBfX1htbFV0aWxfdXQubnMyLCAnZm9vJywgJ2JhcicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5TTlMgMTMiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFyLz48L2ZvcDpmb28+LCBfX1htbFV0aWxfdXQubnMyLCAnZm9vJywgJ2JheicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5TTlMgMTQiLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFyPjxmb3A6YmF6Lz48L2ZvcDpiYXI+PC9mb3A6Zm9vPiwgX19YbWxVdGlsX3V0Lm5zMiwgJ2ZvbycsICdiYXonICkiLCBmYWxzZSApOwogICAgICAgIEFzc2VydC5lcXVhbCggIm1hdGNoZXNSb290QW5kRWxlbWVudCBOU05TIDE1IiwgIlhtbFV0aWwubWF0Y2hlc1Jvb3RBbmRFbGVtZW50KCA8Zm9wOmZvbyB4bWxuczpmb3A9J2h0dHA6Ly93d3cuZXhhbXBsZS5vcmcvJz48Zm9wOmJhcj48Zm9wOmJhei8+PC9mb3A6YmFyPjwvZm9wOmZvbz4sIF9fWG1sVXRpbF91dC5uczIsICdmb28nLCAnYmFyJyApIiwgZmFsc2UgKTsKICAgICAgICBBc3NlcnQuZXF1YWwoICJtYXRjaGVzUm9vdEFuZEVsZW1lbnQgTlNOUyAxNiIsICJYbWxVdGlsLm1hdGNoZXNSb290QW5kRWxlbWVudCggPGZvcDpmb28geG1sbnM6Zm9wPSdodHRwOi8vd3d3LmV4YW1wbGUub3JnLyc+PGZvcDpiYXI+PGZvcDpiYXovPjwvZm9wOmJhcj48L2ZvcDpmb28+LCBfX1htbFV0aWxfdXQubnMyLCAnYmFyJywgJ2JheicgKSIsIGZhbHNlICk7CiAgICAgICAgQXNzZXJ0LmVxdWFsKCAibWF0Y2hlc1Jvb3RBbmRFbGVtZW50IE5TTlMgMTciLCAiWG1sVXRpbC5tYXRjaGVzUm9vdEFuZEVsZW1lbnQoIDxmb3A6Zm9vIHhtbG5zOmZvcD0naHR0cDovL3d3dy5leGFtcGxlLm9yZy8nPjxmb3A6YmFyPjxmb3A6YmF6Lz48L2ZvcDpiYXI+PC9mb3A6Zm9vPiwgX19YbWxVdGlsX3V0Lm5zMiwgJ2JhcicsICdmb28nICkiLCBmYWxzZSApOwoKICAgIAoKICAgICAgICBkZWxldGUgdGhpcy5fX1htbFV0aWxfdXQ7CiAgICB9ICk7CgoKLy8gVGhpcyBpcyBwYXJ0IG9mIGNvbW1pdAo=","moduleName":"XmlUtil"},{"javascript":"","moduleName":"ValueCheck"},{"javascript":"","moduleName":"MarcClasses"},{"javascript":"LyoqIEBmaWxlIFN5c3RlbSBtb2R1bGUuIFByb3ZpZGVzIFN5c3RlbSBjbGFzcywgdGhhdCBjYW4gYmUgcG9wdWxhdGVkIGJ5IG90aGVyIG1vZHVsZXMuICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdTeXN0ZW0nIF07CgovKioKICogUHJvdmlkZXMgYSBuYW1lc3BhY2UgdG8gYWRkIGxvd2xldmVsL3N5c3RlbSBsaWtlIGZ1bmN0aW9uYWxpdHkgdG8uCiAqIAogKiBNZXRob2RzIGFuZCBtb2R1bGVzIHJlbGF0ZWQgdG8gbG93LWxldmVsIHN0dWZmIGlzIGFkZGVkIGludG8gdGhpcwogKiBuYW1lc3BhY2UuIAogKgogKiBUbyBhY3R1YWxseSB1c2UgbW9zdCBvZiB0aGUgZnVuY3Rpb25zIGluIHRoaXMgbmFtZXNwYWNlLCB5b3UgbmVlZAogKiB0byBsb2FkIGFkZGl0aW9uYWwgbW9kdWxlcy4gRS5nLiB0byBiZSBhYmxlIHRvIHVzZSB0aGUgCiAqIHtAbGluayBTeXN0ZW0ucmVhZEZpbGV9IGZ1bmN0aW9uLCB5b3UgbXVzdCB1c2UgdGhlIG1vZHVsZSBgUmVhZEZpbGVgLiB0bwogKiB1c2UgdGhlIHtAbGluayBTeXN0ZW0ucHJpbnR9IGZ1bmN0aW9uIHlvdSBtdXN0IHVzZSB0aGUgbW9kdWxlCiAqIGBQcmludGAuIEZvciBhbGwgZnVuY3Rpb25zLCBpdCBpcyBpbmRpY2F0ZWQgd2hpY2ggbW9kdWxlIHRoZXkgYXJlCiAqIHBhcnQgb2YsIHRoYXQgaXMsIHdoaWNoIG1vZHVsZSB5b3Ugc2hvdWxkIHVzZSB0byBnZXQgYWNjZXNzIHRvIHRoZQogKiBmdW5jdGlvbi4KICogCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIFN5c3RlbSAqLwp2YXIgU3lzdGVtID0gZnVuY3Rpb24oICkgewogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgICAqIEFycmF5IGNvbnRhaW5pbmcgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgc3lzdGVtLCBpZiBpbnZva2VkIGludGVyYWN0aXZlbHkuCiAgICAgKiAKICAgICAqIENvbnRhaW5zIGFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBzeXN0ZW0sIGlmIHVzZWQgaW50ZXJhY3RpdmVseS4gSXMKICAgICAqIGFuIGVtcHR5IGFycmF5IGlmIG5vdC4gCiAgICAgKgogICAgICogQGV4YW1wbGUKLy8gR2V0IHRoZSBmaXJzdCBhcmd1bWVudCB0byBhIHNjcmlwdCB3aGVuIGNhbGxlZCBpbiBhIHNoZWxsCnVzZSggIlN5c3RlbSIgKTsKaWYgKCBTeXN0ZW0uYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7CiAgdmFyIGZpcnN0QXJnID0gU3lzdGVtLmFyZ3VtZW50c1swXTsKfQogICAgICoKICAgICAqIEBuYW1lIFN5c3RlbS5hcmd1bWVudHMKICAgICAqIEB0eXBlIHtTdHJpbmdbXX0KICAgICAqIEBwcm9wZXJ0eSAqLwogICAgdGhhdC5hcmd1bWVudHMgPSBbIF07CgogICAgLyoqIAogICAgICogU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGNhbGxlZCBzY3JpcHQsIGlmIGludm9rZWQgaW50ZXJhY3RpdmVseS4KICAgICAqIAogICAgICogQGV4YW1wbGUKLy8gUHJpbnQgdGhlIG5hbWUgb2YgdGhlIGNhbGxpbmcgc2NyaXB0CnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiUHJpbnQiICk7CnByaW50KCBTeXN0ZW0uc2NyaXB0bmFtZSArICJcbiIgKTsKICAgICAqIAogICAgICogQG5hbWUgU3lzdGVtLnNjcmlwdG5hbWUKICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgKiBAcHJvcGVydHkgKi8KICAgIHRoYXQuc2NyaXB0bmFtZSA9ICIiOwoKICAgIC8qKiBQcm9wZXJ0eSB0byBkZWZpbmUgdGhlIFJoaW5vIHBsYXRmb3JtLgogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtX3JoaW5vCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3JoaW5vID0gIlJoaW5vIjsKCiAgICAvKiogUHJvcGVydHkgdG8gZGVmaW5lIHRoZSBTcGlkZXJNb25rZXkgcGxhdGZvcm0uCiAgICAgKiBAbmFtZSBTeXN0ZW0ucGxhdGZvcm1fc3BpZGVybW9ua2V5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtX3NwaWRlcm1vbmtleSA9ICJTcGlkZXJNb25rZXkiOwoKICAgIC8qKgogICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSBwbGF0Zm9ybSB3ZSBhcmUgY3VycmVudGx5IHJ1bm5pbmcgdW5kZXIuCiAgICAgKgogICAgICogVGhpcyByZXR1cm5zIHRoZSBuYW1lIG9mIG91ciBwbGF0Zm9ybSwgb25lIG9mICJSaGlubyIgb3IgIlNwaWRlck1vbmtleSIuCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBtZWFudCBmb3IgdGhlIHZlcnkgcmFyZSBzaXR1YXRpb25zIHdoZXJlIHdlIGhhdmUgdG8gZG8KICAgICAqIHNvbWV0aGluZyBzbGlnaHRseSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHBsYXRmb3JtLCBpbiBvcmRlciB0byAKICAgICAqIHdvcmsgYXJvdW5kIGRpZmZlcmVuY2VzLgogICAgICoKICAgICAqIFVzZSB0aGUgcHJvcGVydGllcyBwbGF0Zm9ybV9yaGlubyBhbmQgcGxhdGZvcm1fc3BpZGVybW9ua2V5IHRvCiAgICAgKiBjaGVjayBhZ2FpbnN0IHRoaXMgcHJvcGVydHkuCiAgICAgKgogICAgICogKipOb3RlOioqIE1vcmUgcGxhdGZvcm1zIG1heSBiZSBhZGRlZCBpbiB0aGUgZnV0dXJlLiBBbHdheXMKICAgICAqIGNoZWNrIGV4cGxpY2l0bHkgZm9yIGEgc3BlY2lmaWMgcGxhdGZvcm0uCgogICAgICogKipOb3RlOioqIE9OTFkgVVNFIFRISVMgTUVUSE9EIEFTIEEgTEFTVCBSRVNPUlQuIFRoZSBwbGF0Zm9ybXMgYmVoYXZlIGFsbW9zdCAKICAgICAqIGV4YWN0bHkgdGhlIHNhbWUsIGFuZCB0aGUgY29kZSBzaG91bGQgbm90IGJlIHNwcmlua2xlZCB3aXRoICJpZiBwbGF0Zm9ybSB0aGVuIi4KICAgICAqIEl0IGlzIHN1c3BlY3RlZCB0aGlzIGlzIG9ubHkgbmVlZGVkIGZvciBFNFggY29kZSB0aGF0IGlzIGJyb2tlbiBhbnl3YXkuCiAgICAgKiBJZiB5b3UgdXNlIHRoaXMgZnVuY3Rpb24sIGF0IGxlYXN0IHdyYXAgaXQgaW4gYSBsaWJyYXJ5L21vZHVsZSBzdWNoIHRoYXQKICAgICAqIHlvdSBjYW4gY2hhbmdlIHRoZSBpbXBsZW1lbnRhdGlvbiBsYXRlciwgd2l0aG91dCBicmVha2luZyB0aGUgaW50ZXJmYWNlLgogICAgICogIAogICAgICogQG5hbWUgU3lzdGVtLnBsYXRmb3JtCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICogQHByb3BlcnR5ICovCiAgICB0aGF0LnBsYXRmb3JtICA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggKCB0eXBlb2YgUGFja2FnZXMgPT09ICJvYmplY3QiICkgJiYgKCB0eXBlb2YgUGFja2FnZXMuamF2YSA9PT0gIm9iamVjdCIgKSApIHsKICAgICAgICAgICAgcmV0dXJuICJSaGlubyI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJTcGlkZXJNb25rZXkiOwogICAgICAgIH0KICAgIH0oKTsgLy8gTm90ZSwgbm90IGEgZnVuY3Rpb24sIGEgdmFsdWUuCgoKICAgIHJldHVybiB0aGF0Owp9KCApOwo=","moduleName":"System"},{"javascript":"","moduleName":"MarcClassesCore"},{"javascript":"","moduleName":"Marc"},{"javascript":"LyoqIEBmaWxlIEluZnJhc3RydWN0dXJlIHN1cHBvcnQgZm9yIG1hcmMgY2xhc3NlcyAqLwovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovKiEKICAgIFxmaWxlIHRleHRjb2RlYy5qcwogICAgXGJyaWVmIAoqLwovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gICAgICAgICAgICAgICAgICAgICAgRXhwb3J0ZWQgU3ltYm9scwovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKRVhQT1JURURfU1lNQk9MUyA9IFsgJ2dldE1hdGNoRmllbGQnLCAnZ2V0TWF0Y2hTdWJGaWVsZCcsICdNYXRjaEZpZWxkJywgJ01hdGNoU3ViRmllbGQnLAogICAgJ0RCQ01hdGNoRmllbGQnLCAnTWF0Y2hGdW5jJwpdOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgR2xvYmFsIGhlbHAgZnVuY3Rpb25zCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovKioKICogQ29udmVydHMgdGhlIGFyZ3VtZW50IHRvIGEgTWF0Y2hGaWVsZCBpbnN0YW5jZS4KICogCiAqIEBwYXJhbSB7TWF0Y2hGaWVsZHxSZWdFeHB9IGFyZyBBIE1hdGNoRmllbGQgb3IgYSByZWd1bGFyIGV4cHJlc3Npb24gb2YgZmllbGQgbmFtZXMuCiAqIAogKiBAcmV0dXJuIHtNYXRjaEZpZWxkfSBUaGUgTWF0Y2hGaWVsZCBhZnRlciBhcmcgaXMgY29udmVydGVkIHRvIGl0LgogKi8KZnVuY3Rpb24gZ2V0TWF0Y2hGaWVsZCggYXJnICkgewogICAgaWYgKCBhcmcgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHJldHVybiBuZXcgTWF0Y2hGaWVsZCggKTsKICAgIH07CgogICAgaWYgKCBhcmcgaW5zdGFuY2VvZiBSZWdFeHAgKSB7CiAgICAgICAgcmV0dXJuIG5ldyBNYXRjaEZpZWxkKCBhcmcgKTsKICAgIH07CgogICAgcmV0dXJuIGFyZzsKfTsKCmZ1bmN0aW9uIGdldE1hdGNoU3ViRmllbGQoIGFyZyApIHsKICAgIGlmICggYXJnID09IHVuZGVmaW5lZCApIHsKICAgICAgICByZXR1cm4gbmV3IE1hdGNoU3ViRmllbGQoICk7CiAgICB9OwoKICAgIGlmICggYXJnIGluc3RhbmNlb2YgUmVnRXhwICkgewogICAgICAgIHJldHVybiBuZXcgTWF0Y2hTdWJGaWVsZCggYXJnICk7CiAgICB9OwoKICAgIHJldHVybiBhcmc7Cn07CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovKiogRGVmaW5lcyBhIG1hdGNoZXIgb2JqZWN0IHRoYXQgY2FuIG1hdGNoIGEgZmllbGQuCiAqIAogKiBUaGlzIG9iamVjdCBpcyBtYWlubHkgdXNlZCB3aXRoIGZvciBpbnN0YW5jZSBSZWNvcmQuZWFjaEZpZWxkIHRvIHNwZWNpZnkgaG93IHRvIAogKiBtYXRjaCBlYWNoIGZpZWxkIHRoYXQgbmVlZHMgdG8gYmUgcHJvY2Vzc2VkLiAKICoKICogQHBhcmFtIHtSZWdFeHB9IGZpZWxkUGF0dGVybiBQYXR0ZXJuIHRvIG1hdGNoIGEgZmllbGQgbmFtZS4KICogQHBhcmFtIHtSZWdFeHB9IGluZGljYXRvclBhdHRlcm4gUGF0dGVybiB0byBtYXRjaCBhIGZpZWxkIGluZGljYXRvci4KICogQHBhcmFtIHtSZWdFeHB9IHN1YkZpZWxkUGF0dGVybiBQYXR0ZXJuIHRvIG1hdGNoIGEgc3RyaW5nIHdpdGggYWxsIHN1YiBmaWVsZCBuYW1lcyAKICogCQkgIGluIHRoZSBmaWVsZC4KICogQHBhcmFtIHtOdW1iZXJ9IG1pbiBNaW5pbXVtIG9jY3VycmVuY2Ugb2YgdGhlIGZpZWxkIHRvIGJlIG1hdGNoZWQuICAgCiAqIEBwYXJhbSB7TnVtYmVyfSBtYXggTWF4aW11bSBvY2N1cnJlbmNlIG9mIHRoZSBmaWVsZCB0byBiZSBtYXRjaGVkLiAgIAogKiBAY29uc3RydWN0b3IKICogQHNlZSBNYXJjQ2xhc3NlcwogKiBAc2VlIFJlY29yZAogKiBAc2VlIEZpZWxkCiAqIEBuYW1lIE1hdGNoRmllbGQgKi8KZnVuY3Rpb24gTWF0Y2hGaWVsZCggZmllbGRQYXR0ZXJuLCBpbmRpY2F0b3JQYXR0ZXJuLCBzdWJGaWVsZFBhdHRlcm4sIG1pbiwgbWF4ICkgewogICAgdGhpcy5maWVsZFBhdHRlcm4gPSBmaWVsZFBhdHRlcm47CiAgICB0aGlzLmluZGljYXRvclBhdHRlcm4gPSBpbmRpY2F0b3JQYXR0ZXJuOwogICAgdGhpcy5zdWJGaWVsZFBhdHRlcm4gPSBzdWJGaWVsZFBhdHRlcm47CiAgICB0aGlzLm1pbiA9IG1pbjsKICAgIHRoaXMubWF4ID0gbWF4OwogICAgaWYgKCB0aGlzLm1heCA9PT0gdW5kZWZpbmVkICkgewogICAgICAgIHRoaXMubWF4ID0gdGhpcy5taW47CiAgICB9OwoKICAgIHRoaXMubWF0Y2hDb3VudGVyID0gbmV3IE9iamVjdDsKfTsKCk1hdGNoRmllbGQucHJvdG90eXBlLm1hdGNoRmllbGQgPSBmdW5jdGlvbiggcmVjb3JkLCBmaWVsZCApIHsKICAgIGlmICggdGhpcy5maWVsZFBhdHRlcm4gIT0gdW5kZWZpbmVkICYmICF0aGlzLmZpZWxkUGF0dGVybi50ZXN0KCBmaWVsZC5uYW1lICkgKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICBpZiAoIHRoaXMuaW5kaWNhdG9yUGF0dGVybiAhPSB1bmRlZmluZWQgJiYgIXRoaXMuaW5kaWNhdG9yUGF0dGVybi50ZXN0KCBmaWVsZC5pbmRpY2F0b3IgKSApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwoKICAgIGlmICggdGhpcy5zdWJGaWVsZFBhdHRlcm4gIT0gdW5kZWZpbmVkICkgewogICAgICAgIHZhciBzdWJGaWVsZHMgPSAiIjsKICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBmaWVsZC5jb3VudCggKTsgaSsrICkgewogICAgICAgICAgICBzdWJGaWVsZHMgKz0gZmllbGQuc3ViZmllbGQoIGkgKS5uYW1lOwogICAgICAgIH07CgogICAgICAgIGlmICggIXRoaXMuc3ViRmllbGRQYXR0ZXJuLnRlc3QoIHN1YkZpZWxkcyApICkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfTsKICAgIH07CgogICAgdmFyIHYgPSB0aGlzLm1hdGNoQ291bnRlclsgZmllbGQubmFtZSBdOwogICAgaWYgKCB2ID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgdiA9IDA7CiAgICB9OwogICAgdisrOwogICAgdGhpcy5tYXRjaENvdW50ZXJbIGZpZWxkLm5hbWUgXSA9IHY7CgogICAgcmV0dXJuICggdGhpcy5taW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzLm1pbiA8PSB2ICkgJiYgKCB0aGlzLm1heCA9PT0gdW5kZWZpbmVkIHx8IHYgPD0gdGhpcy5tYXggKTsKfTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8qIQogICAgXGJyaWVmIAoqLwoKZnVuY3Rpb24gTWF0Y2hTdWJGaWVsZCggbmFtZVBhdHRlcm4sIHZhbHVlUGF0dGVybiApIHsKICAgIHRoaXMubmFtZVBhdHRlcm4gPSBuYW1lUGF0dGVybjsKICAgIHRoaXMudmFsdWVQYXR0ZXJuID0gdmFsdWVQYXR0ZXJuOwp9OwoKTWF0Y2hTdWJGaWVsZC5wcm90b3R5cGUubWF0Y2hTdWJGaWVsZCA9IGZ1bmN0aW9uKCBmaWVsZCwgc3ViRmllbGQgKSB7CiAgICBpZiAoIHRoaXMubmFtZVBhdHRlcm4gIT0gdW5kZWZpbmVkICkgewogICAgICAgIGlmICggIXRoaXMubmFtZVBhdHRlcm4udGVzdCggc3ViRmllbGQubmFtZSApICkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfTsKICAgIH07CgogICAgaWYgKCB0aGlzLnZhbHVlUGF0dGVybiAhPSB1bmRlZmluZWQgKSB7CiAgICAgICAgaWYgKCAhdGhpcy52YWx1ZVBhdHRlcm4udGVzdCggc3ViRmllbGQudmFsdWUgKSApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH07CiAgICB9OwoKICAgIHJldHVybiB0cnVlOwp9OwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLyohCiAgICBcYnJpZWYKKi8KCmZ1bmN0aW9uIERCQ01hdGNoRmllbGQoIGZpZWxkUGF0dGVybiwgc3ViRmllbGRQYXR0ZXJuICkgewogICAgdGhpcy5pbXBsID0gbmV3IE1hdGNoRmllbGQoIGZpZWxkUGF0dGVybiwgdW5kZWZpbmVkLCBzdWJGaWVsZFBhdHRlcm4gKTsKfTsKCkRCQ01hdGNoRmllbGQucHJvdG90eXBlLm1hdGNoRmllbGQgPSBmdW5jdGlvbiggcmVjb3JkLCBmaWVsZCApIHsKICAgIHJldHVybiB0aGlzLmltcGwubWF0Y2hGaWVsZCggcmVjb3JkLCBmaWVsZCApOwp9OwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLyohCiAgICBcYnJpZWYgT2JqZWN0IHRoYXQgY2FuIG1hdGNoIGZpZWxkcyBpbiBhIHJlY29yZCBhbmQgY2FsbCBhIGZ1bmN0aW9uIG9uIGVhY2ggb2YgdGhlbS4gICAgCiovCgpmdW5jdGlvbiBNYXRjaEZ1bmMoIGZ1bmNNYXRjaGVyICkgewogICAgdGhpcy5mdW5jTWF0Y2hlciA9IGZ1bmNNYXRjaGVyOwp9OwoKTWF0Y2hGdW5jLnByb3RvdHlwZS5tYXRjaEZpZWxkID0gZnVuY3Rpb24oIHJlY29yZCwgZmllbGQgKSB7CiAgICBpZiAoIHRoaXMuZnVuY01hdGNoZXIgIT0gdW5kZWZpbmVkICkgewogICAgICAgIHJldHVybiB0aGlzLmZ1bmNNYXRjaGVyKCBmaWVsZCApOwogICAgfTsKCiAgICByZXR1cm4gZmFsc2U7Cn07CgpNYXRjaEZ1bmMucHJvdG90eXBlLm1hdGNoU3ViRmllbGQgPSBmdW5jdGlvbiggcmVjb3JkLCBmaWVsZCwgc3ViRmllbGQgKSB7CiAgICBpZiAoIHRoaXMuZnVuY01hdGNoZXIgIT0gdW5kZWZpbmVkICkgewogICAgICAgIHJldHVybiB0aGlzLmZ1bmNNYXRjaGVyKCBzdWJGaWVsZCApOwogICAgfTsKCiAgICByZXR1cm4gZmFsc2U7Cn07Cg==","moduleName":"MarcMatchers"},{"javascript":"","moduleName":"StringUtil"},{"javascript":"","moduleName":"DanMarc2ToXml"},{"javascript":"LyoqIEBmaWxlIEZ1bmN0aW9ucyB0byBjcmVhdGUgdmFyaW91cyBYTUwgZWxlbWVudHMgKi8KCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdYbWxFbGVtZW50cycgXTsKCnVzZSggIlN5c3RlbSIgKTsKdXNlKCAiTG9nIiApOwp1c2UoICJYbWxOYW1lc3BhY2VzIiApOwp1c2UoICJYbWxVdGlsIiApOwoKLyoqCiAqIE1vZHVsZSB3aXRoIGZ1bmN0aW9ucyB0byBjcmVhdGUgdmFyaW91cyBYTUwgZWxlbWVudHMuCiAqIAogKiBDb250YWlucyBmdW5jdGlvbnMgdG8gcHJvZHVjZSBhbiBYTUwgZWxlbWVudCB3aXRoIG9yIHdpdGhvdXQgbmFtZXNwYWNlCiAqIGFuZCBhdHRyaWJ1dGVzLCBhbmQgYW4gYXR0cmlidXRlIHdpdGggb3Igd2l0aG91dCBuYW1lc3BhY2UuCiAqIAogKiBAdHlwZSB7bmFtZXNwYWNlfQogKiBAbmFtZXNwYWNlIAogKiBAbmFtZSBYbWxFbGVtZW50cyAqLwp2YXIgWG1sRWxlbWVudHMgPSBmdW5jdGlvbiggKSB7CgogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgKiBNZXRob2QgdGhhdCBwcm9kdWNlcyBhbiBYTUwgZWxlbWVudCB3aXRoIG9wdGlvbmFsIHZhbHVlLCBuYW1lc3BhY2UgYW5kIGF0dHJpYnV0ZXMuCiAgICogCiAgICogCiAgICogQHR5cGUge2Z1bmN0aW9ufQogICAqIEBzeW50YXggWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggZWxlbWVudFZhbHVlLCBlbGVtZW50TmFtZSwgbmFtZXNwYWNlLCBbYXR0cmlidXRlc10gKQogICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50VmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBYTUwgZWxlbWVudAogICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZSB0aGUgbmFtZSBvZiB0aGUgZWxlbWVudAogICAqIEBwYXJhbSB7TmFtZXNwYWNlfSBuYW1lc3BhY2UgYSBuYW1lc3BhY2Ugb2JqZWN0CiAgICogQHBhcmFtIHtvYmplY3RbXX0gW2F0dHJpYnV0ZXM9dW5kZWZpbmVkXSBvYmplY3QvYXJyYXkgY29udGFpbmluZyBvbmUgb3IgbW9yZSBhdHRyaWJ1dGUgb2JqZWN0cy4KICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlcy5hdHRyaWJ1dGVOYW1lIE5hbWUgb2YgdGhlIGF0dHJpYnV0ZQogICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVzLmF0dHJpYnV0ZVZhbHVlIFZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUKICAgKiBAcGFyYW0ge05hbWVzcGFjZX0gYXR0cmlidXRlcy5hdHRyaWJ1dGVOYW1lc3BhY2UgTmFtZXNwYWNlIGZvciB0aGUgYXR0cmlidXRlCiAgICogQHJldHVybiB7WE1MfSBYTUwgb2JqZWN0IGNvbnRhaW5pbmcgb25lIGVsZW1lbnQKICAgKiBAZXhhbXBsZSAKLy8gQ3JlYXRlIGEgbmV3IFhNTCBlbGVtZW50LCB3aXRoIHZhbHVlLCBuYW1lIGFuZCB0aGUgZGMgbmFtZXNwYWNlCnZhciB4ID0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggInZhbHVlIiwgIm5hbWUiLCBYbWxOYW1lc3BhY2VzLmRjICkKICAgKiBAbmFtZSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50CiAgICogQG1ldGhvZCAgKi8KICAgIHRoYXQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKCBlbGVtZW50VmFsdWUsIGVsZW1lbnROYW1lLCBuYW1lc3BhY2UsIGF0dHJpYnV0ZXMgKSB7CgogICAgICAgIHZhciBlbGVtZW50ID0gPHtlbGVtZW50TmFtZX0+e2VsZW1lbnRWYWx1ZX08L3tlbGVtZW50TmFtZX0+OwogICAgICAgIGlmICggbmFtZXNwYWNlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIC8vIFJoaW5vIEU0WCBpbXBsZW1lbnRhdGlvbiBuZWVkcyBhbm90aGVyIG5hbWVzcGFjZSBoZXJlLCBvciB3ZSBnZXQKICAgICAgICAgICAgLy8gYSB3ZWlyZCBpbnRlcm5hbCBzdGF0ZSwgd2hlcmUgbmFtZXNwYWNlKCkgcmV0dXJucyB1bmRlZmluZWQuCiAgICAgICAgICAgIC8vIFRoaXMgYnJlYWtzIFhtbFV0aWwucHJldHR5UHJpbnQuCiAgICAgICAgICAgIC8vIEFkZGluZyB1bmRlciBDKysgbWVhbnMgdGhhdCB3ZSBnZXQgZHVwbGljYXRlIG5hbWVzcGFjZXMgaW4gdGhlIHJvb3QKICAgICAgICAgICAgLy8gVGhpcyBpcyBhbG1vc3Qgb25seSBhIGNvc21ldGljIHByb2JsZW0sIGJ1dCBzdGlsbC4KICAgICAgICAgICAgaWYgKCBTeXN0ZW0ucGxhdGZvcm0gPT09IFN5c3RlbS5wbGF0Zm9ybV9yaGlubyApIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkTmFtZXNwYWNlKCBuYW1lc3BhY2UgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggbmFtZXNwYWNlICk7CiAgICAgICAgfQogICAgICAgIGlmICggYXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiBhdHRyaWJ1dGVzICkgewogICAgICAgICAgICAgICAgaWYgKCBhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVzWyBhIF0uYXR0cmlidXRlTmFtZTsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LkBbIGF0dHJpYnV0ZU5hbWUgXSA9IGF0dHJpYnV0ZXNbIGEgXS5hdHRyaWJ1dGVWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoIGF0dHJpYnV0ZXNbIGEgXS5hdHRyaWJ1dGVOYW1lc3BhY2UgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5AWyBhdHRyaWJ1dGVOYW1lIF0uc2V0TmFtZXNwYWNlKCBhdHRyaWJ1dGVzWyBhIF0uYXR0cmlidXRlTmFtZXNwYWNlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZWxlbWVudDsKCiAgICB9OwoKICAgIC8qKgogICAqIE1ldGhvZCB0aGF0IHByb2R1Y2VzIGFuIE9iamVjdCBjb250YWluaW5nIG9uZSBvciBtb3JlIFhNTCBhdHRyaWJ1dGVzLgogICAqIAogICAqIFRoaXMgbWV0aG9kIHByb2R1Y2VzIGF0dHJpYnV0ZSBvYmplY3RzIHN1aXRhYmxlIGZvciBwYXNzaW5nIHRvCiAgICoge0BsaW5rIFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnR9LgogICAqIAogICAqIEB0eXBlIHttZXRob2R9CiAgICogQHN5bnRheCBYbWxFbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2UgKQogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBYTUwgYXR0cmlidXRlCiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUKICAgKiBAcGFyYW0ge05hbWVzcGFjZX0gbmFtZXNwYWNlIGEgbmFtZXNwYWNlIG9iamVjdAogICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgYXR0cmlidXRlIHByb3BlcnRpZXMuCiAgICogQGV4YW1wbGUgCi8vIENyZWF0ZSBhbiBhdHRyaWJ1dGUgZWxlbWVudCAKdmFyIGEgPSBYbWxFbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJuYW1lIiwgInZhbHVlIiwgWG1sTmFtZXNwYWNlcy5kYyApOwogICAqIEBuYW1lIFhtbEVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZQogICAqIEBtZXRob2QgKi8KICAgIHRoYXQuY3JlYXRlQXR0cmlidXRlID0gZnVuY3Rpb24oIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2UgKSB7CgogICAgICAgIHZhciBhdHRyaWJ1dGUgPSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IG5hbWUsCiAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlOiBuYW1lc3BhY2UKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gYXR0cmlidXRlOwoKICAgIH07CgogICAgcmV0dXJuIHRoYXQ7Cgp9KCApOwo=","moduleName":"XmlElements"},{"javascript":"","moduleName":"MarcRecord"},{"javascript":"LyoqIEBmaWxlIEFkZCBhIGZyb21GaWxlIG1ldGhvZCB0byB0aGUgUmVjb3JkIHByb3RvdHlwZSAqLwovLyBWZXJ5IHNtYWxsIG1vZHVsZSB0byBhZGQgYSBmcm9tRmlsZSBtZXRob2QgdG8gdGhlIFJlY29yZCBwcm90b3R5cGUKdXNlKCAiTWFyY0NsYXNzZXMiICk7CnVzZSggIlN5c3RlbS5JbnRlcm5hbHMiICk7CkVYUE9SVEVEX1NZTUJPTFMgPSBbIF07Ci8qKgogKiBNZXRob2QgdGhhdCByZWFkcyBhIFJlY29yZCBpbnN0YW5jZSBmcm9tIGEgZmlsZS4KICogCiAqIFRoaXMgbWV0aG9kIHJlYWRzIGEgUmVjb3JkIGluc3RhbmNlIGZyb20gYSBmaWxlLiBJZiB0aGUgZmlsZSBpcyBlbXB0eSwKICogdW5kZWZpbmVkIGlzIHJldHVybmVkIAogKiAKICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIG9ubHkgc3VwcG9ydGVkIHVuZGVyIEMrKwogKgogKiBAcmV0dXJuIEEgUmVjb3JkIGluc3RhbmNlLCBhcyByZWFkIGZyb20gdGhlIGZpbGUsIG9yIHVuZGVmaW5lZCwgaWYgdGhlIGZpbGUgd2FzIGVtcHR5CiAqIEBtZXRob2QKICogQG5hbWUgUmVjb3JkLmZyb21GaWxlCiAqIEBkZXByZWNhdGVkIEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBtZXRob2QuCiAqLwpSZWNvcmQucHJvdG90eXBlLmZyb21GaWxlID0gZnVuY3Rpb24oIGZpbGUgKSB7CiAgICAvLyBUaGlzIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgYXMgYSBwaXBlLiAKICAgIC8vIE5vdCBjYWxsaW5nIG1heWJlR2MgYWxsb2NhdGVzIG11Y2ggbW9yZSByYW0sIGFuZCBhbHNvIHRha2VzIG1vcmUgdGltZS4KICAgIC8vIChTZWUgYnVnIDk4MTMpCiAgICAvLyBJbiBvcmRlciB0byBhbGxvdyBjbGllbnRzIHRvIG5vdCB3b3JyeSBhYm91dCB0aGlzLCB3ZSBjYWxsIG1heWJlR2MgaW4gaGVyZQogICAgLy8gVGhpcyBpcyBhIGZhaXJseSBjaGVhcCBvcGVyYXRpb24sIHRoYXQsIGZvciBub24tdHJpdmlhbCBzaXplZCBkYXRhc2V0cwogICAgLy8gYWN0dWFsbHkgc3BlZWRzIHVwIHRoZSBwcm9jZXNzaW5nLCBkdWUgdG8gZmV3ZXIgYWxsb2NhdGlvbnMuCiAgICBTeXN0ZW0uSW50ZXJuYWxzLm1heWJlR2MoICk7CiAgICBpZiAoIGZpbGUuaGFzRGF0YSggKSApIHsKICAgICAgICByZXR1cm4gbmV3IFJlY29yZCggZmlsZSApOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQp9Owo=","moduleName":"MarcFileExtension"},{"javascript":"LyoqIEBmaWxlIEludGVybmFsIGZ1bmN0aW9ucyAqLwpFWFBPUlRFRF9TWU1CT0xTID0gWyBdOwp1c2UoICJTeXN0ZW0iICk7CnVzZSggIlN5c3RlbS5JbnRlcm5hbHNDb3JlIiApOwovKioKICogVmFyaW91cyBtZXRob2RzIHRoYXQgcmVmbGVjdHMgdmVyeSB2ZXJ5IGxvdyBsZXZlbCBkZXRhaWxzIGFib3V0IHRoZSBzeXN0ZW0uLgogKiAKICogVGhpcyBuYW1lc3BhY2UgY29udGFpbnMgbWV0aG9kcyB0byBlLmcuIGZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbi4gCiAqCiAqICoqTm90ZToqKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbmFtZXNwYWNlIGlzIGN1cnJlbnRseSBvbmx5CiAqIHN1cHBvcnRlZCBieSBDKysgaW1wbGVtZW50YXRpb25zLiAKICoKICogKipOb3RlOioqIFRoZSBmdW5jdGlvbnMgaW4gdGhpcyBuYW1lc3BhY2UgaXMgbWVhbnQgZm9yIGRlYnVnIHNpdHVhdGlvbnMuCiAqCiAqIEBkZXByZWNhdGVkIFlvdSBzaG91bGQgbmV2ZXIgdXNlIHRoaXMgbmFtZXNwYWNlIGluIHByb2R1Y3Rpb24gY29kZS4KICogCiAqIEBuYW1lc3BhY2UgCiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMKICovClN5c3RlbS5JbnRlcm5hbHMgPSB7fTsKLyoqCiAqIEZvcmNlIEdhcmJhZ2UgQ29sbGVjdGlvbi4KICogCiAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiBmb3JjZXMgdGhlIChDKyspIEphdmFTY3JpcHQgZW5naW5lIHRvIHBlcmZvcm0KICogZ2FyYmFnZSBjb2xsZWN0aW9uLiBZb3Ugc2hvdWxkIG9ubHkgY2FsbCB0aGlzLCBpZiB5b3UgYXJlIHNvbWV3aGF0CiAqIGNlcnRhaW4gdGhhdCB0aGUgb3ZlcmhlYWQgb2YgcGVyZm9ybWluZyB0aGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGlzCiAqIHdvcnRoIHRoZSBmcmVlZCByYW0uIE90aGVyd2lzZSwgY29uc2lkZXIgbWF5YmVHYy4KICoKICogQHN5bnRheCBTeXN0ZW0uSW50ZXJuYWxzLmdjKCk7CiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMuZ2MKICogQG1ldGhvZAogKi8KU3lzdGVtLkludGVybmFscy5nYyA9IF9fU3lzdGVtX0ludGVybmFsc0NvcmVfZ2M7Ci8qKgogKiBQZXJmb3JtIEdhcmJhZ2UgQ29sbGVjdGlvbiBpZiBuZWVkZWQuCiAqIAogKiBDYWxsaW5nIHRoaXMgcGVyZm9ybXMgZ2FyYmFnZSBjb2xsZWN0aW9uLCBiYXNlZCBvbiB0aGUgYXZhaWxhYmxlIGhlYXAsCiAqIGFuZCBzb21lIG90aGVyIGhldXJpc3RpY3MuIEl0IHNob3VsZCBiZSBPSyB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcXVpdGUKICogb2Z0ZW4sIGFzIGl0IHdpbGwgb25seSBhY3R1YWxseSBwZXJmb3JtIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24sIGlmIGl0CiAqIGlzIHdvcnRoIGl0LiAKICogCiAqIEBzeW50YXggU3lzdGVtLkludGVybmFscy5tYXliZUdjKCk7CiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMubWF5YmVHYwogKiBAbWV0aG9kCiAqLwpTeXN0ZW0uSW50ZXJuYWxzLm1heWJlR2MgPSBfX1N5c3RlbV9JbnRlcm5hbHNDb3JlX21heWJlR2M7Ci8qKgogKiBTZXQgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuCiAqIAogKiBUaGlzIGZ1bmN0aW9uIHNldHMgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QsIGllLiB0aGUKICogcHJvcGVydHkgd2lsbCBub3QgYmUgZm91bmQgYnkgYSBmb3ItbG9vcCwgYnV0IGl0IGNhbiBiZSBhY2Nlc3NlZC4gCiAqIAogKiBAc3ludGF4IFN5c3RlbS5JbnRlcm5hbHMuc2V0Tm9uRW51bVByb3Aob2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlKTsKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNldCB0aGUgcHJvcGVydHkgb24KICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0CiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSBUaGUgdmFsdWUgdGhlIHByb3BlcnR5IHNob3VsZCBoYXZlCiAqIEBuYW1lIFN5c3RlbS5JbnRlcm5hbHMuc2V0Tm9uRW51bVByb3AKICogQG1ldGhvZAogKi8KU3lzdGVtLkludGVybmFscy5zZXROb25FbnVtUHJvcCA9IF9fU3lzdGVtX0ludGVybmFsc0NvcmVfc2V0Tm9uRW51bVByb3AKCmRlbGV0ZSB0aGlzLl9fU3lzdGVtX0ludGVybmFsc0NvcmVfZ2M7CmRlbGV0ZSB0aGlzLl9fU3lzdGVtX0ludGVybmFsc0NvcmVfbWF5YmVHYzsKZGVsZXRlIHRoaXMuX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9zZXROb25FbnVtUHJvcAo=","moduleName":"System.Internals"},{"javascript":"Ly8gU3lzdGVtLkludGVybmFsc0NvcmUgLSBrZXkgZnVuY3Rpb24gbmVlZGVkIGZyb20gU3RkUmVmLnVzZS5qcwoKLyogSmF2YSBkZXBzOiBqYXZhLmxhbmcgYW5kIGZyaWVuZHMsIG5vdGhpbmcgc3BlY2lhbCAqLwoKLy8gV2UgZXhwb3J0IHRoaXMgc3ltYm9sLCB3aGljaCB3ZSBleHBlY3QgdG8gYmUgdXNlZCBmcm9tIGEgUHJpbnQgbW9kdWxlLgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9nYycsCiAgICAnX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9tYXliZUdjJywKICAgICdfX1N5c3RlbV9JbnRlcm5hbHNDb3JlX3NldE5vbkVudW1Qcm9wJwpdOwoKLy8gU3VnZ2VzdCBnYyB0byB0aGUgY29sbGVjdG9yCnZhciBfX1N5c3RlbV9JbnRlcm5hbHNDb3JlX2djID0gZnVuY3Rpb24oICkgewogICAgUGFja2FnZXMuamF2YS5sYW5nLlN5c3RlbS5nYyggKTsKfTsKCi8vIElkZW50aWNhbCB0byBhYm92ZSBpbiBKYXZhIGltcGxlbWVudGF0aW9uLgp2YXIgX19TeXN0ZW1fSW50ZXJuYWxzQ29yZV9tYXliZUdjID0gZnVuY3Rpb24oICkgewogICAgUGFja2FnZXMuamF2YS5sYW5nLlN5c3RlbS5nYyggKTsKfTsKCi8vIFRoaXMgb25lIGlzIGEgYml0IG1vcmUgdHJpY2t5IGFuZCB1c2VzIGphdmEgZHluYW1pYyBpbnZva2luZyB0byBkbyBpdHMgd29yay4KdmFyIF9fU3lzdGVtX0ludGVybmFsc0NvcmVfc2V0Tm9uRW51bVByb3AgPSBmdW5jdGlvbiggb2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlICkgewogICAgLy8gU2V0IHRoZSB2YWx1ZQogICAgb2JqZWN0WyBwcm9wZXJ0eU5hbWUgXSA9IHZhbHVlOwogICAgLy8gQW5kIG1ha2UgaXQgbm9uLWVudW1lcmFibGUKICAgIGphdmEubGFuZy5DbGFzcy5mb3JOYW1lKCAib3JnLm1vemlsbGEuamF2YXNjcmlwdC5TY3JpcHRhYmxlT2JqZWN0IiApCiAgICAgICAgLmdldE1ldGhvZCggInNldEF0dHJpYnV0ZXMiLCBqYXZhLmxhbmcuU3RyaW5nLCBqYXZhLmxhbmcuSW50ZWdlci5UWVBFICkKICAgICAgICAuaW52b2tlKCBvYmplY3QsIHByb3BlcnR5TmFtZSwgbmV3IGphdmEubGFuZy5JbnRlZ2VyKAogICAgICAgICAgICBvcmcubW96aWxsYS5qYXZhc2NyaXB0LlNjcmlwdGFibGVPYmplY3QuRE9OVEVOVU0gKSApOwp9Cg==","moduleName":"System.InternalsCore"},{"javascript":"","moduleName":"DateUtil"},{"javascript":"RVhQT1JURURfU1lNQk9MUyA9IFsgJ19fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMScsICdfX0RhdGVVdGlsQ29yZV9mb3JtYXRJU084NjAxJyBdOwoKdXNlKCAiU3RyaW5nVXRpbCIgKTsKdXNlKCAiTG9nIiApOwoKLyogQGJyaWVmIENyZWF0ZSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QgZnJvbSBhbiBJU084NjAxIHN0cmluZwogKiBAcGFyYW0gcyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRldGltZQogKiBAcmV0dXJucyBBIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QKICoKICogVGhlIHN0cmluZyBmb3JtYXQgbXVzdCBiZSBZWVlZLU1NLUREVGhoOm1tOnNzKFopIG9yIGVtcHR5LgogKiBOb3Qgb24gYWJvdmUgZm9ybWF0LCB3aWxsIHRocm93LgogKgogKiBSZWdhcmRsZXNzIG9mIHRoZSBuYW1lLCBvbmx5IGEgbGltaXRlZCBzdWJzZXQgb2YgSVMwODYwMSBpcwogKiBhY3R1YWxseSBwYXJzZWQhICovCnZhciBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEgPSBmdW5jdGlvbiggaXNvODYwMSApIHsKICAgIExvZy5kZWJ1ZyggIkVudGVyaW5nIF9fRGF0ZVV0aWxDb3JlX3BhcnNlSVNPODYwMSAiICsgaXNvODYwMSApOwogICAgdmFyIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVVRDLmV4ZWMoIGlzbzg2MDEgKTsKCiAgICBpZiAoIG1hdGNoZWQgKSB7CiAgICAgICAgdmFyIHJlcyA9IG5ldyBEYXRlKCAxOTcwLCAxLCAxLCAxMiwgMCwgMCwgMCApOwogICAgICAgIGlmICggbWF0Y2hlZC5sZW5ndGggPiA3ICYmIG1hdGNoZWRbIDcgXSA9PSAiWiIgKSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggWlVMVSB0aW1lem9uZSBpbmZvcm1hdGlvbiIgKTsKICAgICAgICAgICAgcmVzLnNldFVUQ0Z1bGxZZWFyKCBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgMiBdLCAxMCApIC0gMSwgcGFyc2VJbnQoIG1hdGNoZWRbIDMgXSwgMTAgKSApOwogICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA1IF0sIDEwICksIHBhcnNlSW50KCBtYXRjaGVkWyA2IF0sIDEwICksIDAgKTsKICAgICAgICAgICAgLy8gQ2hlY2sgbm8gImlsbGVnYWwiIHZhbHVlcwogICAgICAgICAgICBpZiAoIHJlcy5nZXRVVENGdWxsWWVhciggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTW9udGgoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENEYXRlKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgfHwKICAgICAgICAgICAgICAgIHJlcy5nZXRVVENIb3VycyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDTWludXRlcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0VVRDU2Vjb25kcyggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApICkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoSW52YWxpZCBkYXRlIGFmdGVyIFpVTFUgLSByZWdleHAgbWF0Y2g/KS4iLAogICAgICAgICAgICAgICAgICAgICAgICBpc284NjAxICkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIExvZy5kZWJ1ZyggIk1hdGNoZWQgYXMgc3RyaW5nIHdpdGggbm8gdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHJlcy5zZXRGdWxsWWVhciggcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSwgcGFyc2VJbnQoIG1hdGNoZWRbIDIgXSwgMTAgKSAtIDEsIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgcmVzLnNldEhvdXJzKCBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNSBdLCAxMCApLCBwYXJzZUludCggbWF0Y2hlZFsgNiBdLCAxMCApLCAwICk7CiAgICAgICAgICAgIC8vIENoZWNrIG5vICJpbGxlZ2FsIiB2YWx1ZXMKICAgICAgICAgICAgaWYgKCByZXMuZ2V0RnVsbFllYXIoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDEgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1vbnRoKCApICE9IHBhcnNlSW50KCBtYXRjaGVkWyAyIF0sIDEwICkgLSAxIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0RGF0ZSggKSAhPSBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApIHx8CiAgICAgICAgICAgICAgICByZXMuZ2V0SG91cnMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDQgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldE1pbnV0ZXMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDUgXSwgMTAgKSB8fAogICAgICAgICAgICAgICAgcmVzLmdldFNlY29uZHMoICkgIT0gcGFyc2VJbnQoIG1hdGNoZWRbIDYgXSwgMTAgKSApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggU3RyaW5nVXRpbC5zcHJpbnRmKCAiVW5hYmxlIHRvIHVuZGVyc3RhbmQgZGF0ZSBzcGVjaWZpZWQgYXM6ICclcycgKEludmFsaWQgZGF0ZSBhZnRlciBubyBUWiAtIHJlZ2V4cCBtYXRjaD8pLiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGlzbzg2MDEgKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIExvZy5kZWJ1ZyggIlJldHVybmluZzogIiArIHJlcy50b1VUQ1N0cmluZyggKSApOwogICAgICAgIHJldHVybiByZXM7CiAgICB9IGVsc2UgewogICAgICAgIG1hdGNoZWQgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFouZXhlYyggaXNvODYwMSApOwogICAgICAgIGlmICggbWF0Y2hlZCApIHsKICAgICAgICAgICAgTG9nLmRlYnVnKCAiTWF0Y2hlZCBhcyBzdHJpbmcgd2l0aCBub3JtYWwgdGltZXpvbmUgaW5mb3JtYXRpb24iICk7CiAgICAgICAgICAgIHZhciByZXMgPSBfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEoIG1hdGNoZWRbIDEgXSArICJaIiApOwogICAgICAgICAgICBMb2cuZGVidWcoIFN0cmluZ1V0aWwuc3ByaW50ZiggIlBhcnRzOiAnJXMnLCAnJXMnLCAnJXMnIiwKICAgICAgICAgICAgICAgICAgICBtYXRjaGVkWyAyIF0sIG1hdGNoZWRbIDMgXSwgbWF0Y2hlZFsgNCBdICkgKTsKICAgICAgICAgICAgLy8gQWRqdXN0OiBJZiArLCBzdWJzdHJhY3QgdG8gZ2V0ICJyZWFsIiBVVEMuIElmIC0KICAgICAgICAgICAgaWYgKCBtYXRjaGVkWyAyIF0gPT0gIi0iICkgewogICAgICAgICAgICAgICAgcmVzLnNldFVUQ0hvdXJzKCByZXMuZ2V0VVRDSG91cnMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgMyBdLCAxMCApICk7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDTWludXRlcyggcmVzLmdldFVUQ01pbnV0ZXMoICkgKyBwYXJzZUludCggbWF0Y2hlZFsgNCBdLCAxMCApICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXMuc2V0VVRDSG91cnMoIHJlcy5nZXRVVENIb3VycyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyAzIF0sIDEwICkgKTsKICAgICAgICAgICAgICAgIHJlcy5zZXRVVENNaW51dGVzKCByZXMuZ2V0VVRDTWludXRlcyggKSAtIHBhcnNlSW50KCBtYXRjaGVkWyA0IF0sIDEwICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBMb2cuZGVidWcoICJSZXR1cm5pbmc6ICIgKyByZXMudG9VVENTdHJpbmcoICkgKTsKICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgfQogICAgTG9nLmRlYnVnKCAiTm8gbWF0Y2ggZm9yIElTTzg2MDEgdmFyaWFudHMgLSB0aHJvd2luZyIgKTsKICAgIHRocm93IEVycm9yKCBTdHJpbmdVdGlsLnNwcmludGYoICJVbmFibGUgdG8gdW5kZXJzdGFuZCBkYXRlIHNwZWNpZmllZCBhczogJyVzJyAoTm8gcmVnZXhwIG1hdGNoKS4iLAogICAgICAgICAgICBpc284NjAxICkgKTsKfTsKX19EYXRlVXRpbENvcmVfcGFyc2VJU084NjAxLnJlZ1VUQyA9IC9eKFxkezR9KS0oXGR7Mn0pLShcZHsyfSlUKFxkezJ9KTooXGR7Mn0pOihcZHsyfSkoWnswLDF9KSQvOwpfX0RhdGVVdGlsQ29yZV9wYXJzZUlTTzg2MDEucmVnVFogPSAvXihcZHs0fS1cZHsyfS1cZHsyfVRcZHsyfTpcZHsyfTpcZHsyfSlccyooWystXSlccyooXGR7MSwyfSk6KFxkezEsMn0pJC87CgovKiogXGJyaWVmIFJldHVybiBhbiBJU084NjAxIFogdGltZSBzdHJpbmcgcmVwIG9mIHRoZSBKYXZhU2NyaXB0IGRhdGUgb2JqZWN0IHBhc3NlZCB0byB0aGUgZnVuY3Rpb24uCiAqCiAqIFRoZSBmb3JtYXQgaXMgWVlZWS1NTS1ERFRoaDptbTpzc1oKICogQHBhcmFtIGR0IFRoZSBKYXZhU2NyaXB0IGluc3RhbmNlIHRvIGNvbnZlcnQuCiAqIEByZXR1cm4gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGV0aW1lIGluIElTTzg2MDEgbGlrZSBub3RhdGlvbiBpbiBVVEMKICoKICogTm90ZSwgaWYgdGhlIGRhdGUgaXMgaW52YWxpZCwgeW91IGdldCBhIGxvdCBvZiBOYU4ncy4uLiBzb3JyeSBhYm91dCB0aGF0LCBzbyBzdWUgbWUhIDotKSAqLwp2YXIgX19EYXRlVXRpbENvcmVfZm9ybWF0SVNPODYwMSA9IGZ1bmN0aW9uKCBkYXRlICkgewogICAgLy8gV2UgZG8gbm90IGhhdmUgcGFydGlhbCBzZWNvbmRzLi4uIHNvLCBubyB0b0lTT1N0cmluZygpLi4uCiAgICByZXR1cm4gU3RyaW5nVXRpbC5zcHJpbnRmKCAiJTA0ZC0lMDJkLSUwMmRUJTAyZDolMDJkOiUwMmRaIiwKICAgICAgICBkYXRlLmdldFVUQ0Z1bGxZZWFyKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTW9udGgoICkgKyAxLAogICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSggKSwKICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCApLAogICAgICAgIGRhdGUuZ2V0VVRDTWludXRlcyggKSwKICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoICkgKTsKfTsK","moduleName":"DateUtilCore"},{"javascript":"LyoqIEBmaWxlIFNhZmVBc3NlcnQgbW9kdWxlLiBUaGlzIG1vZHVsZSBpcyBhIHNpbXBsZSB3cmFwcGVyIGZvciB0aGUgVW5pdFRlc3RzIEFzc2VydC4gKi8KCnVzZSggIkxvZyIgKTsKdXNlKCAiVW5pdFRlc3QiICk7CgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnU2FmZUFzc2VydCcgXTsKCgoKLyoqCiAqIEFuIGV4dGVuc2lvbiBvZiBBc3NlcnQgaW4gdGhlIHVuaXR0ZXN0aW5nIHN5c3RlbSB0aGF0IGRvZXMgbm90IHVzZSBldmFsIGRpcmVjdGx5LgogKiAKICogVGhlIGZ1bmN0aW9ucyBpbiBTYWZlQXNzZXJ0IGFyZSByZXBsYWNlbWVudCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcKICogZnVuY3Rpb25zIGluIEFzc2VydC4gVGhlIGRpZmZlcmVuY2UgaXMsIHRoYXQgdGhlIGZ1bmN0aW9ucyBpbgogKiBBc3NlcnQgdXNlcyBgZXZhbGAgdG8gZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24sIHRoZXJlYnkgYWxsb3dpbmcgdGhlCiAqIGV4cHJlc3Npb24gdG8gYmUgcGFzc2VkIGFzIGEgc3RyaW5nLCBhbmQgYmUgZHVtcGVkIHRvIHNjcmVlbiBpbgogKiBjYXNlIG9mIGZhaWx1cmUuIFNhZmVBc3NlcnQgY2FuIG5vdCBkbyB0aGlzLCBidXQgYXZvaWRzIHRoZSB1c2Ugb2YKICogYGV2YWxgLCBhbmQgdGhlcmVieSBhbHNvIGF2b2lkcyB0aGUgdXNlIG9mIHRlbXBvcmFyeSBnbG9iYWwKICogdmFyaWFibGVzLCB0aGF0IG11c3QgYmUgdXNlZCB3aXRoIGBldmFsYC4KICogCiAqIEBleGFtcGxlIAovLyBUaGlzIGlzIGFuIGV4YW1wbGUgb2YgdGhlIHByZWZlcmVkIHdheSB0byB1c2UgdGhlIFVuaXRUZXN0IG1vZHVsZToKdXNlKCAiVW5pdFRlc3QiICk7IApVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNb2R1bGUgbW9kdWxlbmFtZSIsIGZ1bmN0aW9uKCkgeyAKCiAgIFNhZmVBc3NlcnQudGhhdCggImNvbW1lbnQiLCBleHByZXNzaW9uLXRoYXQtaXMtZXhwZWN0ZWQtdG8tYmUtdHJ1ZSApOwogICBTYWZlQXNzZXJ0Lm5vdCggIlRoaXMgc2hvdWxkIGFsd2F5cyBiZSBmYWxzZSIsIGV4cHJlc3Npb24tdGhhdC1pcy1leHBlY3RlZC10by1iZS1mYWxzZSApOwogICBTYWZlQXNzZXJ0LmVxdWFsKCAidGVzdDAsIG91dHB1dCIsIHRlc3QwKCksICJVc2VyUGFyYW0gd2FzIDAiICk7CiAgIFNhZmVBc3NlcnQuZXF1YWwoICJ0ZXN0MSwgYXJyYXkgb3V0cHV0IiwgdGVzdDEoKS5zb3J0KCksIFsxLDIsMyw0XSApOwogICAgCn0pOwogKiBAbmFtZSBTYWZlQXNzZXJ0CiAqIEBzZWUgVW5pdFRlc3QKICogQHNlZSBBc3NlcnQKICogQG5hbWVzcGFjZSAKICovCnZhciBTYWZlQXNzZXJ0ID0gKCBmdW5jdGlvbiggKSB7CiAgICAgICAgdmFyIHNhZmVBc3NlcnRUd28gPSBmdW5jdGlvbiggbWVzc2FnZSwgZXhwcmVzc2lvbiApIHsKICAgICAgICAgICAgeCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgIEFzc2VydC50aGF0KCBtZXNzYWdlLCAneCcgKTsKICAgICAgICAgICAgZGVsZXRlIHg7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHNhZmVBc3NlcnRPbmUgPSBmdW5jdGlvbiggZXhwcmVzc2lvbiApIHsKICAgICAgICAgICAgeCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgIEFzc2VydC50aGF0KCAneCcgKTsKICAgICAgICAgICAgZGVsZXRlIHg7CiAgICAgICAgfTsKCgogICAgICAgIC8qKgogICAgICAgICAqIFRlc3QgdGhhdCBhbiBleHByZXNzaW9uIGV2YWx1dGVzIHRvIHRydWUuCiAgICAgICAgICogCiAgICAgICAgICogCiAgICAgICAgICogQHN5bnRheCBTYWZlQXNzZXJ0LnRoYXQoIFtkZXNjcmlwdGlvbiwgXSwgZXhwcmVzc2lvbiApOwogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbZGVzY3JpcHRpb25dIE9wdGlvbmFsIHBhcmFtZXRlciwgdXNlZCBmb3IgZmVlZGJhY2sgaW4gY2FzZSBvZiBlcnJvcnMKICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXhwcmVzc2lvbiBUaGUgZXhwcmVzc2lvbiB0byBldmFsdWF0ZQogICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHRlc3QgcGFzc2VkLCBmYWxzZSBvdGhlcndpc2UKICAgICAgICAgKiBAbmFtZSBTYWZlQXNzZXJ0LnRoYXQKICAgICAgICAgKiBAbWV0aG9kCiAgICAgICAgICovCgogICAgICAgIGZ1bmN0aW9uIHRoYXQoIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9ub25lICkgewogICAgICAgICAgICBpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT0gMSApIHsKICAgICAgICAgICAgICAgIHNhZmVBc3NlcnRPbmUoIGRlc2Nfb3JfZXhwciApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA9PSAyICkgewogICAgICAgICAgICAgICAgc2FmZUFzc2VydFR3byggZGVzY19vcl9leHByLCBleHByX29yX25vbmUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogVGVzdCB0aGF0IGFuIGV4cHJlc3Npb24gZXZhbHV0ZXMgdG8gZmFsc2UuCiAgICAgICAgICogCiAgICAgICAgICogQXMgdGhhdCwgYnV0IGFzc3VtZXMgdGhhdCB0aGUgcmVzdWx0IG11c3QgZXZhbHVhdGUgdG8gZmFsc2UgCiAgICAgICAgICogCiAgICAgICAgICogQHN5bnRheCBTYWZlQXNzZXJ0Lm5vdCggW2Rlc2NyaXB0aW9uLCBdLCBleHByZXNzaW9uICk7CiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtkZXNjcmlwdGlvbl0gT3B0aW9uYWwgcGFyYW1ldGVyLCB1c2VkIGZvciBmZWVkYmFjayBpbiBjYXNlIG9mIGVycm9ycwogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBleHByZXNzaW9uIFRoZSBleHByZXNzaW9uIHRvIHRlc3QKICAgICAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIHRlc3QgcGFzc2VkLCBmYWxzZSBvdGhlcndpc2UKICAgICAgICAgKiBAbmFtZSBTYWZlQXNzZXJ0Lm5vdAogICAgICAgICAqIEBtZXRob2QKICAgICAgICAgKi8KCiAgICAgICAgZnVuY3Rpb24gbm90KCBkZXNjX29yX2V4cHIsIGV4cHJfb3Jfbm9uZSApIHsKICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDEgKSB7CiAgICAgICAgICAgICAgICBzYWZlQXNzZXJ0T25lKCAhZGVzY19vcl9leHByICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDIgKSB7CiAgICAgICAgICAgICAgICBzYWZlQXNzZXJ0VHdvKCBkZXNjX29yX2V4cHIsICFleHByX29yX25vbmUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCgoKICAgICAgICB2YXIgc2FmZUVxdWFsVHdvID0gZnVuY3Rpb24oIGV4cHJlc3Npb24sIGV4cGVjdGVkICkgewogICAgICAgICAgICB4ID0gZXhwcmVzc2lvbjsKICAgICAgICAgICAgQXNzZXJ0LmVxdWFsKCAneCcsIGV4cGVjdGVkICk7CiAgICAgICAgICAgIGRlbGV0ZSB4OwogICAgICAgIH07CgogICAgICAgIHZhciBzYWZlRXF1YWxUaHJlZSA9IGZ1bmN0aW9uKCBkZXNjLCBleHByZXNzaW9uLCBleHBlY3RlZCApIHsKICAgICAgICAgICAgeCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgIEFzc2VydC5lcXVhbCggZGVzYywgJ3gnLCBleHBlY3RlZCApOwogICAgICAgICAgICBkZWxldGUgeDsKICAgICAgICB9OwoKICAgICAgICAvKioKICAgICAgICAgKiBUZXN0IHRoYXQgdHdvIGV4cHJlc3Npb25zIGFyZSBlcXVhbC4KICAgICAgICAgKiAKICAgICAgICAgKiAKICAgICAgICAgKiBAc3ludGF4IFNhZmVBc3NlcnQuZXF1YWwoIFtkZXNjcmlwdGlvbiwgXSwgZXhwcmVzc2lvbiwgZXhwZWN0ZWQgKTsKICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2Rlc2NyaXB0aW9uXSBPcHRpb25hbCBwYXJhbWV0ZXIsIHVzZWQgZm9yIGZlZWRiYWNrIGluIGNhc2Ugb2YgZXJyb3JzCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gVGhlIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUuCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV4cGVjdGVkIFRoZSBleHBlY3RlZCB2YWx1ZSBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4KICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSB0ZXN0IHBhc3NlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgICAgICogQG5hbWUgU2FmZUFzc2VydC5lcXVhbAogICAgICAgICAqIEBtZXRob2QKICAgICAgICAgKi8KCiAgICAgICAgZnVuY3Rpb24gZXF1YWwoIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9leHBlY3RlZCwgZXhwZWN0ZWRfb3Jfbm9uZSApIHsKICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDIgKSB7CiAgICAgICAgICAgICAgICBzYWZlRXF1YWxUd28oIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9leHBlY3RlZCApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA9PSAzICkgewogICAgICAgICAgICAgICAgc2FmZUVxdWFsVGhyZWUoIGRlc2Nfb3JfZXhwciwgZXhwcl9vcl9leHBlY3RlZCwgZXhwZWN0ZWRfb3Jfbm9uZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAidGhhdCI6IHRoYXQsCiAgICAgICAgICAgICJlcXVhbCI6IGVxdWFsLAogICAgICAgICAgICAibm90Ijogbm90CiAgICAgICAgfTsKICAgIH0gKSggKTsKCgoKVW5pdFRlc3QuYWRkRml4dHVyZSggImRldmVsLlNhZmVBc3NlcnQgbW9kdWxlLCB0aGF0IiwgZnVuY3Rpb24oICkgewoKICAgICAgICBTYWZlQXNzZXJ0LnRoYXQoICd0cnVlJywgdHJ1ZSApOwogICAgICAgIFNhZmVBc3NlcnQudGhhdCggdHJ1ZSApOwoKICAgICAgICBTYWZlQXNzZXJ0Lm5vdCggJ2ZhbHNlJywgZmFsc2UgKTsKICAgICAgICBTYWZlQXNzZXJ0Lm5vdCggZmFsc2UgKTsKCiAgICAgICAgU2FmZUFzc2VydC50aGF0KCAxID09PSAxICk7CiAgICAgICAgU2FmZUFzc2VydC50aGF0KCAnMiBwbHVzIDIgaXMgNCcsIDIgKyAyID09PSA0ICk7CiAgICB9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiZGV2ZWwuU2FmZUFzc2VydCBtb2R1bGUsIGVxdWFsIiwgZnVuY3Rpb24oICkgewoKICAgICAgICBTYWZlQXNzZXJ0LmVxdWFsKCB0cnVlLCB0cnVlICk7CiAgICAgICAgU2FmZUFzc2VydC5lcXVhbCggJ3RydWUgaXMgdHJ1ZScsIHRydWUsIHRydWUgKTsKCiAgICAgICAgU2FmZUFzc2VydC5lcXVhbCggImdlcnQgZXIgZmluIiwgImdlcnQgZXIgZmluIiApOwogICAgICAgIFNhZmVBc3NlcnQuZXF1YWwoICJ0ZXN0IGFmIGdlcnQgZXIgZmluIiwgImdlcnQgZXIgZmluIiwgImdlcnQgZXIgZmluIiApOwoKICAgIH0gKTsK","moduleName":"SafeAssert"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB3aXRoIHNtYWxsIHRvb2wgbWV0aG9kcyovCgp1c2UoICJMb2ciICk7CnVzZSggIlVuaXRUZXN0IiApOwoKRVhQT1JURURfU1lNQk9MUyA9IFsgJ01pc2MnIF07CgovKioKICogTW9kdWxlIHdpdGggc21hbGwgdG9vbCBtZXRob2RzIAogKiAKICogQHR5cGUge25hbWVzcGFjZX0KICogQG5hbWVzcGFjZQogKi8KCnZhciBNaXNjID0gZnVuY3Rpb24oICkgewoKICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1pc2MgbW9kdWxlIiApOwoKICAgIHZhciB0aGF0ID0ge307CgoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgaGFuZGxlcyBudW1lcmljIHNvcnRpbmcgb2YgYW4gYXJyYXkuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWlzYy5zb3J0QXJyYXlPZk51bWJlcnMoIGFycmF5LCBbbW9kZV0gKQogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQW4gYXJyYXkgY29udGFpbmluZyBudW1iZXJzCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW21vZGVdIEEgImQiIGdpdmluZyBkZXNjZW5kaW5nIG9yZGVyIG9yIGFueXRoaW5nIGVsc2UgZ2l2aW5nIGFzY2VuZGluZyBvcmRlcgogICAgICogQHJldHVybiB7QXJyYXl9IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgc29ydGVkIG51bWJlcnMKICAgICAqIEBleGFtcGxlIE1pc2Muc29ydEFycmF5T2ZOdW1iZXJzKCBbIDMsIDcsIDEyLCAxLCAxMDAsIDQ3IF0sICJkIiApCiAgICAgKiBAZXhhbXBsZSBNaXNjLnNvcnRBcnJheU9mTnVtYmVycyggWyAiMDIwIiwgIjMiLCAiNzUiICwiMzAxIiwgIjAwMSIgXSApIAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWlzYy5zb3J0QXJyYXlPZk51bWJlcnMKICAgICAqLwogICAgdGhhdC5zb3J0QXJyYXlPZk51bWJlcnMgPSBmdW5jdGlvbiggYXJyYXksIG1vZGUgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBNaXNjLnNvcnRBcnJheU9mTnVtYmVycyBmdW5jdGlvbiIgKTsKCiAgICAgICAgYXJyYXkuc29ydCggZnVuY3Rpb24oIGEsIGIgKSB7CiAgICAgICAgICAgIGlmICggbW9kZSAhPT0gImQiICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICAgICAgICB9CiAgICAgICAgfSApOwoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBNaXNjLnNvcnRBcnJheU9mTnVtYmVycyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIGFycmF5OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBoYW5kbGVzIGFscGhhYmV0aWNhbCBzb3J0aW5nIG9uIGEgc3BlY2lmaWVkIHByb3BlcnR5IGZvciBhbiBhcnJheSBvZiBvYmplY3RzLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1pc2Muc29ydEFycmF5T2ZPYmplY3RzKCBhcnJheSwgcHJvcGVydHkgKQogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQW4gYXJyYXkgY29udGFpbmluZyBudW1iZXJzCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgQSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB1c2VkIGZvciBzb3J0aW5nCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQSBuZXcgYXJyYXkgY29udGFpbmluZyBzb3J0ZWQgb2JqZWN0cwogICAgICogQGV4YW1wbGUgTWlzYy5zb3J0QXJyYXlPZk9iamVjdHMoIFsgeyB2YWx1ZTogaGVzdCwgdHlwZTogYW5pbWFsIH0seyB2YWx1ZToga28sIHR5cGU6IGFuaW1hbCB9LHsgdmFsdWU6IGdyaXMsIHR5cGU6IGFuaW1hbCB9IF0sICJ2YWx1ZSIgKSAKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1pc2Muc29ydEFycmF5T2ZPYmplY3RzCiAgICAgKi8KICAgIHRoYXQuc29ydEFycmF5T2ZPYmplY3RzID0gZnVuY3Rpb24oIGFycmF5LCBwcm9wZXJ0eSApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IE1pc2Muc29ydEFycmF5T2ZPYmplY3RzIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgc29ydGVkQXJyYXkgPSBhcnJheS5zb3J0KCBmdW5jdGlvbiggYSwgYiApIHsKICAgICAgICAgICAgaWYgKCBhWyBwcm9wZXJ0eSBdIDwgYlsgcHJvcGVydHkgXSApIHsKICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIGFbIHByb3BlcnR5IF0gPiBiWyBwcm9wZXJ0eSBdICkgewogICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSApOwoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBNaXNjLnNvcnRBcnJheU9mT2JqZWN0cyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHNvcnRlZEFycmF5OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCByZW1vdmVzIGR1cGxpY2F0ZSB2YWx1ZXMgaW4gYW4gYXJyYXkuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1pc2MudW5pcXVlVmFsdWVzKCBhcnJheSApCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHdoZXJlIGR1cGxpY2F0ZXMgbmVlZCB0byBiZSByZW1vdmVkCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB1bmlxdWUgdmFsdWVzCiAgICAgKiBAZXhhbXBsZSBNaXNjLnVuaXF1ZVZhbHVlcyggWyAiMjA3IiwgIjIxNyIsICIyMTciLCAiNTgzIiwgIjIxNyJdICkKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1pc2MudW5pcXVlVmFsdWVzCiAgICAgKi8KICAgIHRoYXQudW5pcXVlVmFsdWVzID0gZnVuY3Rpb24oIGFycmF5ICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogTWlzYy51bmlxdWVWYWx1ZXMgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB1bmlxdWVWYWx1ZUFycmF5ID0gWyBdOwogICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICBpZiAoIHVuaXF1ZVZhbHVlQXJyYXkuaW5kZXhPZiggYXJyYXlbIGkgXSApIDwgMCApIHsKICAgICAgICAgICAgICAgIHVuaXF1ZVZhbHVlQXJyYXkucHVzaCggYXJyYXlbIGkgXSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBNaXNjLnVuaXF1ZVZhbHVlcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHVuaXF1ZVZhbHVlQXJyYXk7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNvbnZlcnRzIGRhbmlzaCBjaGFyYWN0ZXJzIHRvIFVSTCBlbmNvZGVkIHZhbHVlcyBmb3IgVVRGLTguCiAgICAgKiAKICAgICAqIAogICAgICogQHR5cGVGcm9tT2xkRG9jIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1pc2MuY29udmVydERhbmlzaENoYXJzVG9VdGY4VXJsRW5jb2RlZFZhbHVlcyhzdHIpCiAgICAgKiBAcGFyYW0gc3RyIFN0cmluZwogICAgICogQHJldHVybiBTdHJpbmcKICAgICAqIEBleGFtcGxlIE1pc2MuY29udmVydERhbmlzaENoYXJzVG9VdGY4VXJsRW5jb2RlZFZhbHVlcyhzdHIpCiAgICAgKiBAbmFtZSBNaXNjLmNvbnZlcnREYW5pc2hDaGFyc1RvVXRmOFVybEVuY29kZWRWYWx1ZXMKICAgICAqIEBtZXRob2QKICAgICAqLwogICAgdGhhdC5jb252ZXJ0RGFuaXNoQ2hhcnNUb1V0ZjhVcmxFbmNvZGVkVmFsdWVzID0gZnVuY3Rpb24oIHN0ciApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IE1pc2MuY29udmVydERhbmlzaENoYXJzVG9VdGY4VXJsRW5jb2RlZFZhbHVlcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoIC9cdTAwRTYvZywgIiVDMyVBNiIgKTsgLy9yZXBsYWNpbmcgZGFuaXNoIGFlIHRvIHRvIFVSTC1lbmNvZGVkIHZhbHVlIAogICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCAvXHUwMEY4L2csICIlQzMlQjgiICk7IC8vcmVwbGFjaW5nIGRhbmlzaCBvZSB0byB0byBVUkwtZW5jb2RlZCB2YWx1ZQogICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCAvXHUwMEU1L2csICIlQzMlQTUiICk7IC8vcmVwbGFjaW5nIGRhbmlzaCBhYSB0byB0byBVUkwtZW5jb2RlZCB2YWx1ZQogICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCAvXHUwMEM2L2csICIlQzMlODYiICk7IC8vcmVwbGFjaW5nIGRhbmlzaCBBZSB0byB0byBVUkwtZW5jb2RlZCB2YWx1ZQogICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCAvXHUwMEQ4L2csICIlQzMlOTgiICk7IC8vcmVwbGFjaW5nIGRhbmlzaCBPZSB0byB0byBVUkwtZW5jb2RlZCB2YWx1ZQogICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCAvXHUwMEM1L2csICIlQzMlODUiICk7IC8vcmVwbGFjaW5nIGRhbmlzaCBBYSB0byB0byBVUkwtZW5jb2RlZCB2YWx1ZQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBNaXNjLmNvbnZlcnREYW5pc2hDaGFyc1RvVXRmOFVybEVuY29kZWRWYWx1ZXMgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiBzdHI7CgogICAgfTsKCgogICAgTG9nLmluZm8oICJMZWF2aW5nOiBNaXNjIG1vZHVsZSIgKTsKCiAgICByZXR1cm4gdGhhdDsKCn0oICk7CgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tVW5pdCB0ZXN0cy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiTWlzYy51bmlxdWVWYWx1ZXMiLCBmdW5jdGlvbiggKSB7CgogICAgYXJyYXkgPSBbICIyMTciLCAiMjE3IiwgIjc4NiIsICI0OSIsICIyMTciLCAiODgiLCAiMjEiLCAiMTciIF07CiAgICBvdXRwdXQgPSBbICIyMTciLCAiNzg2IiwgIjQ5IiwgIjg4IiwgIjIxIiwgIjE3IiBdOwoKICAgIEFzc2VydC5lcXVhbCggInVuaXF1ZSBzdHJpbmcgdmFsdWVzIiwgJ01pc2MudW5pcXVlVmFsdWVzKCBhcnJheSApJywgb3V0cHV0ICk7CgoKICAgIGFycmF5ID0gWyAyMTcsIDIxNywgNzg2LCA0OSwgMjE3LCA4OCwgMjEsIDE3IF07CiAgICBvdXRwdXQgPSBbIDIxNywgNzg2LCA0OSwgODgsIDIxLCAxNyBdOwoKICAgIEFzc2VydC5lcXVhbCggInVuaXF1ZSBudW1iZXIgdmFsdWVzIiwgJ01pc2MudW5pcXVlVmFsdWVzKCBhcnJheSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuYXJyYXk7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiTWlzYy5zb3J0QXJyYXlPZk51bWJlcnMiLCBmdW5jdGlvbiggKSB7CgogICAgYXJyYXkgPSBbIDIxNywgMjE3LCA3ODYsIDQ5LCAyMTcsIDg4LCAyMSwgMTcgXTsKICAgIG91dHB1dCA9IFsgMTcsIDIxLCA0OSwgODgsIDIxNywgMjE3LCAyMTcsIDc4NiBdOwoKICAgIEFzc2VydC5lcXVhbCggIm51bWVyaWMgc29ydGluZyBkZWZhdWx0IiwgJ01pc2Muc29ydEFycmF5T2ZOdW1iZXJzKCBhcnJheSApJywgb3V0cHV0ICk7CgogICAgYXJyYXkgPSBbIDIxNywgMjE3LCA3ODYsIDQ5LCAyMTcsIDg4LCAyMSwgMTcgXTsKICAgIG91dHB1dCA9IFsgMTcsIDIxLCA0OSwgODgsIDIxNywgMjE3LCAyMTcsIDc4NiBdOwoKICAgIEFzc2VydC5lcXVhbCggIm51bWVyaWMgc29ydGluZyBhc2NlbmRpbmciLCAnTWlzYy5zb3J0QXJyYXlPZk51bWJlcnMoIGFycmF5LCAiYSIgKScsIG91dHB1dCApOwoKICAgIGFycmF5ID0gWyAyMTcsIDIxNywgNzg2LCA0OSwgMjE3LCA4OCwgMjEsIDE3IF07CiAgICBvdXRwdXQgPSBbIDc4NiwgMjE3LCAyMTcsIDIxNywgODgsIDQ5LCAyMSwgMTcgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJudW1lcmljIHNvcnRpbmcgZGVzY2VuZGluZyIsICdNaXNjLnNvcnRBcnJheU9mTnVtYmVycyggYXJyYXksICJkIiApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuYXJyYXk7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiTWlzYy5zb3J0QXJyYXlPZk9iamVjdHMiLCBmdW5jdGlvbiggKSB7CgogICAgaW5wdXQgPSBbIF07CiAgICBzdWJqZWN0ID0gewogICAgICAgIHZhbHVlOiAiTmlkaHVnIiwKICAgICAgICB0eXBlOiAiRHJhZ29uIiwKICAgICAgICBhcmVhOiAiU2NhbmRpbmF2aWEiCiAgICB9OwogICAgaW5wdXQucHVzaCggc3ViamVjdCApOwogICAgc3ViamVjdCA9IHsKICAgICAgICB2YWx1ZTogIk5lc3NpZSIsCiAgICAgICAgdHlwZTogIkRyYWdvbiIsCiAgICAgICAgYXJlYTogIkJyaXRhaW4iCiAgICB9OwogICAgaW5wdXQucHVzaCggc3ViamVjdCApOwogICAgc3ViamVjdCA9IHsKICAgICAgICB2YWx1ZTogIllhYXpoaSIsCiAgICAgICAgdHlwZTogIkRyYWdvbiIsCiAgICAgICAgYXJlYTogIkluZGlhIgogICAgfTsKICAgIGlucHV0LnB1c2goIHN1YmplY3QgKTsKCiAgICBvdXRwdXQgPSBbIF07CiAgICBzdWJqZWN0ID0gewogICAgICAgIHZhbHVlOiAiTmVzc2llIiwKICAgICAgICB0eXBlOiAiRHJhZ29uIiwKICAgICAgICBhcmVhOiAiQnJpdGFpbiIKICAgIH07CiAgICBvdXRwdXQucHVzaCggc3ViamVjdCApOwogICAgc3ViamVjdCA9IHsKICAgICAgICB2YWx1ZTogIllhYXpoaSIsCiAgICAgICAgdHlwZTogIkRyYWdvbiIsCiAgICAgICAgYXJlYTogIkluZGlhIgogICAgfTsKICAgIG91dHB1dC5wdXNoKCBzdWJqZWN0ICk7CiAgICBzdWJqZWN0ID0gewogICAgICAgIHZhbHVlOiAiTmlkaHVnIiwKICAgICAgICB0eXBlOiAiRHJhZ29uIiwKICAgICAgICBhcmVhOiAiU2NhbmRpbmF2aWEiCiAgICB9OwogICAgb3V0cHV0LnB1c2goIHN1YmplY3QgKTsKCgogICAgQXNzZXJ0LmVxdWFsKCAiYWxwaGEgc29ydCBhcnJheSBvZiBvYmplY3RzIiwgJ01pc2Muc29ydEFycmF5T2ZPYmplY3RzKCBpbnB1dCwgImFyZWEiICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5pbnB1dDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJNaXNjLmNvbnZlcnREYW5pc2hDaGFyc1RvVXRmOFVybEVuY29kZWRWYWx1ZXMiLCBmdW5jdGlvbiggKSB7CgogICAgaW5wdXQgPSAiXHUwMEY4IjsKICAgIG91dHB1dCA9ICIlQzMlQjgiOwoKICAgIEFzc2VydC5lcXVhbCggImNvbnZlcnQgZGFuaXNoIG9lIHRvIFVSTCBlbmNvZGVkIHZhbHVlIiwgJ01pc2MuY29udmVydERhbmlzaENoYXJzVG9VdGY4VXJsRW5jb2RlZFZhbHVlcyggaW5wdXQgKTsnLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5vcmlnaW5hbFhtbDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKICAgIGRlbGV0ZSB0aGlzLnJvb3Q7Cgp9ICk7Cg==","moduleName":"Misc"},{"javascript":"","moduleName":"MarcXchange"},{"javascript":"","moduleName":"ModifyDanMarc2"},{"javascript":"","moduleName":"Tables"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB0aGF0IHByb2R1Y2VzIGFkbWluaXN0cmF0aXZlIGRhdGEuICovCgpFWFBPUlRFRF9TWU1CT0xTID0gWyAnQWRtaW5EYXRhJyBdOwoKdXNlKCAiTG9nIiApOwp1c2UoICJNYXJjIiApOwp1c2UoICJYbWxOYW1lc3BhY2VzIiApOwp1c2UoICJNYXJjUmVjb3JkIiApOwp1c2UoICJYbWxVdGlsIiApOwp1c2UoICJYbWxFbGVtZW50cyIgKTsKCi8qKgogKiBNb2R1bGUgdGhhdCBwcm9kdWNlcyBhZG1pbmlzdHJhdGl2ZSBkYXRhIChYTUwpIGZvciB0aGUgZGF0YXdlbGwuCiAqCiAqIEB0eXBlIHtuYW1lc3BhY2V9CiAqIEBuYW1lc3BhY2UKICovCnZhciBBZG1pbkRhdGEgPSBmdW5jdGlvbiggKSB7CgogICAgdmFyIGRrYWJtID0gWG1sTmFtZXNwYWNlcy5ka2FibTsKICAgIHZhciBkYyA9IFhtbE5hbWVzcGFjZXMuZGM7CiAgICB2YXIgeHNpID0gWG1sTmFtZXNwYWNlcy54c2k7CgogICAgdmFyIHRoYXQgPSB7fTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibVhtbCwgcmVjb3JkICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhZG1pbkluZm8gYWRtaW5pc3RyYXRpdmUgaW5mb3JtYXRpb246IHN1Ym1pdHRlciwgZm9ybWF0LCBsaWJyYXJ5VHlwZSwgaXNEZWxldGVSZWNvcmQsIG9ubGluZUFjY2VzcyBhbmQgY3JlYXRpb25EYXRlCiAgICAgKiBAcGFyYW0ge1htbH0gZGthYm1YbWwgdGhlIERLQUJNIFhNTAogICAgICogQHBhcmFtIHtSZWNvcmR9IFtyZWNvcmRdIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtYbWx9IHhtbCBlbGVtZW50cyB3aXRoIGFkbWluaXN0cmF0aXZlIGRhdGEgZ2F0aGVyZWQgaW4gdGhlIEFkbWluRGF0YVhtbCBlbGVtZW50CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlQWRtaW5EYXRhWG1sID0gZnVuY3Rpb24oIGFkbWluSW5mbywgZGthYm1YbWwsIHJlY29yZCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sIiApOwoKICAgICAgICB2YXIgYWRtaW5EYXRhWG1sID0gPGFkbWluRGF0YS8+OwoKICAgICAgICB2YXIgZGF0YVdlbGxDdXN0b21lciA9IEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggYWRtaW5JbmZvLnN1Ym1pdHRlciwgImRhdGFXZWxsQ3VzdG9tZXIiICk7CiAgICAgICAgYWRtaW5JbmZvLmRhdGFXZWxsQ3VzdG9tZXIgPSAiIjsKICAgICAgICBpZiAoIGRhdGFXZWxsQ3VzdG9tZXIgPT09IHRydWUgKSB7CiAgICAgICAgICAgIGlmICggcmVjb3JkICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBhZG1pbkluZm8gPSBBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciggYWRtaW5JbmZvLCByZWNvcmQgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFkbWluSW5mby5kYXRhV2VsbEN1c3RvbWVyID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHJlY29yZFN0YXR1cyA9ICJhY3RpdmUiOwogICAgICAgIGlmICggYWRtaW5JbmZvLmlzRGVsZXRlUmVjb3JkID09PSB0cnVlICkgewogICAgICAgICAgICByZWNvcmRTdGF0dXMgPSAiZGVsZXRlIjsKICAgICAgICB9CiAgICAgICAgdmFyIHJlY29yZFN0YXR1c1htbCA9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHJlY29yZFN0YXR1cywgInJlY29yZFN0YXR1cyIgKTsKICAgICAgICBhZG1pbkRhdGFYbWwuYXBwZW5kQ2hpbGQgKCByZWNvcmRTdGF0dXNYbWwgKTsKCiAgICAgICAgaWYgKCBhZG1pbkluZm8uY3JlYXRpb25EYXRlICE9PSAiIiApIHsKICAgICAgICAgICAgdmFyIGNyZWF0aW9uRGF0ZVhtbCA9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGFkbWluSW5mby5jcmVhdGlvbkRhdGUsICJjcmVhdGlvbkRhdGUiICk7CiAgICAgICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggY3JlYXRpb25EYXRlWG1sICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIGFkbWluSW5mby5kYXRhV2VsbEN1c3RvbWVyID09PSB0cnVlICkgewogICAgICAgICAgICB2YXIgZGF0YVdlbGxDdXN0b21lclhtbCA9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoICJ0cnVlIiwgImRhdGFXZWxsQ3VzdG9tZXIiICk7CiAgICAgICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggZGF0YVdlbGxDdXN0b21lclhtbCApOwogICAgICAgIH0KCiAgICAgICAgdmFyIGxpYnJhcnlUeXBlWG1sID0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggYWRtaW5JbmZvLmxpYnJhcnlUeXBlLCAibGlicmFyeVR5cGUiICk7CiAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBsaWJyYXJ5VHlwZVhtbCApOwoJCQogICAgICAgIGlmICggQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBhZG1pbkluZm8uc3VibWl0dGVyLCAibm9uRmljdGlvblN1Ym1pdHRlciIgKSA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgdmFyIGdlbnJlWG1sID0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggIm5vbmZpa3Rpb24iLCAiZ2VucmUiICk7CiAgICAgICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggZ2VucmVYbWwgKTsKICAgICAgICB9CQkKCiAgICAgICAgdmFyIGluZGV4aW5nQWxpYXNYbWwgPSBBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCggYWRtaW5JbmZvICk7CiAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBpbmRleGluZ0FsaWFzWG1sICk7CgogICAgICAgIHZhciBhY2Nlc3NUeXBlcyA9IEFkbWluRGF0YS5nZXRBY2Nlc3NUeXBlKCBhZG1pbkluZm8uc3VibWl0dGVyLCBhZG1pbkluZm8ub25saW5lQWNjZXNzLCByZWNvcmQgKTsKICAgICAgICBpZiAoIGFjY2Vzc1R5cGVzWyAwIF0gPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgLy9UT0RPOiBhZGQgdW5pdCB0ZXN0IGZvciB0aGlzIGNhc2UKICAgICAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCAibm9uZSIsICJhY2Nlc3NUeXBlIiApICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9yICggdmFyIGk9MDsgaTxhY2Nlc3NUeXBlcy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggYWNjZXNzVHlwZXNbIGkgXSwgImFjY2Vzc1R5cGUiICkgKTsKICAgICAgICAgICAgfSAgIAogICAgICAgIH0KCiAgICAgICAgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgdmFyIGdlbnJlID0gQWRtaW5EYXRhLmNyZWF0ZUdlbnJlKCByZWNvcmQgKTsKICAgICAgICAgICAgaWYgKCBnZW5yZSAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICBhZG1pbkRhdGFYbWwuYXBwZW5kQ2hpbGQoIFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGdlbnJlLCAiZ2VucmUiICkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHdvcmtUeXBlcyA9IEFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB3b3JrVHlwZXMgKSB7CiAgICAgICAgICAgIGFkbWluRGF0YVhtbC5hcHBlbmRDaGlsZCggWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggd29ya1R5cGVzWyBhIF0sICJ3b3JrVHlwZSIgKSApOwogICAgICAgIH0KCiAgICAgICAgLy9UT0RPOiBtYXliZSBzZW5kIHdob2xlIGFkbWluSW5mbyBvYmplY3QgaW5zdGVhZCBvZiBzaW5nbGUgcHJvcGVydGllcwogICAgICAgIHZhciBjb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBhZG1pbkluZm8uc3VibWl0dGVyLCBhZG1pbkluZm8uZm9ybWF0LCBhZG1pbkluZm8ub25saW5lQWNjZXNzLCBhZG1pbkluZm8ubGlicmFyeVR5cGUsIHJlY29yZCApOwogICAgICAgIGZvciAoIHZhciBiIGluIGNvbGxlY3Rpb25JZGVudGlmaWVycyApIHsKICAgICAgICAgICAgYWRtaW5EYXRhWG1sLmFwcGVuZENoaWxkKCBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBjb2xsZWN0aW9uSWRlbnRpZmllcnNbIGIgXSwgImNvbGxlY3Rpb25JZGVudGlmaWVyIiApICk7CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nIEFkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwiICk7CgogICAgICAgIHJldHVybiBhZG1pbkRhdGFYbWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIFJldHVybnMgb2JqZWN0IHdpdGggYWRtaW4gZGF0YSBmb3IgYSBtYXJjIHJlY29yZCB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYW4gYWRkaSByZWNvcmQKICAgICAqIGZvciBpbnNlcnRpbmcgaW50byBhIGRhdGF3ZWxsLgogICAgICogIAogICAgICogQ29udGFpbnMgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgICAgKiAgCiAgICAgKiAqIHN1Ym1pdHRlcgogICAgICogKiBmb3JtYXQKICAgICAqICogaWRlbnRpZmllcgogICAgICogKiBpc0RlbGV0ZVJlY29yZAogICAgICogKiBvbmxpbmVBY2Nlc3MKICAgICAqICogbGlicmFyeVR5cGUKICAgICAqICogY3JlYXRpb25EYXRlCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5jcmVhdGVBZG1pbkluZm8oIHN1Ym1pdHRlckZvcm1hdCwgaWRlbnRpZmllciwgcmVjb3JkICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdWJtaXR0ZXJGb3JtYXQgQW4gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgc3VibWl0dGVyIGFuZCBmb3JtYXQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIGlkZW50aWZpZXIgZm9yIHRoZSBtYXJjIHJlY29yZCAKICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NyZWF0aW9uRGF0ZV0gVGhlIGNyZWF0aW9uIGRhdGUgb2YgdGhlIHJlY29yZCBhcyB5eXl5bW1kZCAodXNlZCBpbiBGQlMgUlIyQnJvZW5kIGZsb3cpCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBhZG1pbkluZm8gb2JqZWN0IGFjY29yZGluZyB0byBkZXNjcmlwdGlvbgogICAgICogQG5hbWUgQWRtaW5EYXRhLmNyZWF0ZUFkbWluSW5mbwogICAgICovCiAgICB0aGF0LmNyZWF0ZUFkbWluSW5mbyA9IGZ1bmN0aW9uKCBzdWJtaXR0ZXJGb3JtYXQsIGlkZW50aWZpZXIsIHJlY29yZCwgY3JlYXRpb25EYXRlICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBBZG1pbkRhdGEuY3JlYXRlQWRtaW5JbmZvIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgYWRtaW5JbmZvID0ge307CiAgICAgICAgYWRtaW5JbmZvLnN1Ym1pdHRlciA9IHN1Ym1pdHRlckZvcm1hdC5zdWJtaXR0ZXI7CiAgICAgICAgYWRtaW5JbmZvLmZvcm1hdCA9IHN1Ym1pdHRlckZvcm1hdC5mb3JtYXQKCiAgICAgICAgdmFyIGlzRGVsZXRlUmVjb3JkID0gZmFsc2U7CiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDQvLCAvci8gKSA9PT0gImQiICkgewogICAgICAgICAgICBpc0RlbGV0ZVJlY29yZCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICggYWRtaW5JbmZvLmZvcm1hdCA9PSAiYmFzaXMiICYmIHJlY29yZC5nZXRWYWx1ZSggL3MxMS8sIC9hLyApLm1hdGNoKCAvWzAxXS8gKSApIHsKICAgICAgICAgICAgaXNEZWxldGVSZWNvcmQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBhZG1pbkluZm8uaXNEZWxldGVSZWNvcmQgPSBpc0RlbGV0ZVJlY29yZDsKCiAgICAgICAgdmFyIG9ubGluZUFjY2VzcyA9ICIiOwogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMzIvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGZpZWxkLmVhY2hTdWJGaWVsZCggL3gvLCBmdW5jdGlvbiggZmllbGQsIHN1YkZpZWxkICkgewogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gU3RyaW5nKCBzdWJGaWVsZC52YWx1ZSApOwogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL0lEVS4rLyApICkgewogICAgICAgICAgICAgICAgICAgIG9ubGluZUFjY2VzcyA9ICJub3QgYXZhaWxhYmxlIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSApCiAgICAgICAgfSApOwogICAgICAgIGFkbWluSW5mby5vbmxpbmVBY2Nlc3MgPSBvbmxpbmVBY2Nlc3M7CgogICAgICAgIGFkbWluSW5mby5saWJyYXJ5VHlwZSA9IEFkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZSggYWRtaW5JbmZvLnN1Ym1pdHRlciApOwoKICAgICAgICBpZiAoIHN1Ym1pdHRlckZvcm1hdC5yYXcgIT0gdHJ1ZSApIHsKICAgICAgICAgICAgYWRtaW5JbmZvLmNyZWF0aW9uRGF0ZSA9IEFkbWluRGF0YS5nZXRDcmVhdGlvbkRhdGUoIGFkbWluSW5mby5zdWJtaXR0ZXIsIHJlY29yZCApOyAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vVE9ETzogY29kZSBjb3VsZCBiZSBzYWZlciwgbW9yZSB0ZXN0aW5nIGlmIHdlIGhhdmUgYSBjcmVhdGlvbkRhdGUgKGFuZCBpbiByaWdodCBmb3JtYXQpCiAgICAgICAgICAgIGFkbWluSW5mby5jcmVhdGlvbkRhdGUgPSBjcmVhdGlvbkRhdGUucmVwbGFjZSggLyhcZHs0fSkoXGR7Mn0pKFxkezJ9KS8sICIkMS0kMi0kMyIgKTsKICAgICAgICB9CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogQWRtaW5EYXRhLmNyZWF0ZUFkbWluSW5mbyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIGFkbWluSW5mbzsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgbW9kaWZpZXMgYWRtaW4gaW5mbyBmb3IgYSBkYXRhV2VsbEN1c3RvbWVyLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5tb2RpZnlBZG1pbkluZm9Gb3JEYXRhV2VsbEN1c3RvbWVyKCBhZG1pbkluZm8sIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWRtaW5JbmZvIFRoZSBzdWJtaXR0ZXIgb2YgZGF0YQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBUaGUgbWFyYyByZWNvcmQgb2JqZWN0IAogICAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgdXBkYXRlZCBhZG1pbkluZm8gb2JqZWN0CiAgICAgKiBAZXhhbXBsZSBBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciggYWRtaW5JbmZvLCByZWNvcmQgKQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLm1vZGlmeUFkbWluSW5mb0ZvckRhdGFXZWxsQ3VzdG9tZXIKICAgICAqLwogICAgdGhhdC5tb2RpZnlBZG1pbkluZm9Gb3JEYXRhV2VsbEN1c3RvbWVyID0gZnVuY3Rpb24oIGFkbWluSW5mbywgcmVjb3JkICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZyBBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciIgKTsKCiAgICAgICAgdmFyIGhvbGRpbmdzRnJvbURhdGFXZWxsQ3VzdG9tZXIgPSB0cnVlOwogICAgICAgIGlmICggYWRtaW5JbmZvLnN1Ym1pdHRlciA9PT0gIjgzMDA2MCIgKSB7CiAgICAgICAgICAgIGhvbGRpbmdzRnJvbURhdGFXZWxsQ3VzdG9tZXIgPSBBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncyggcmVjb3JkLCAiODMwMDYwIiApOwogICAgICAgIH0KICAgICAgICBpZiAoIGhvbGRpbmdzRnJvbURhdGFXZWxsQ3VzdG9tZXIgPT09IHRydWUgKSB7CiAgICAgICAgICAgIGFkbWluSW5mby5kYXRhV2VsbEN1c3RvbWVyID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgdmFyIGhhc0hvbGRpbmcgPSBNYXJjUmVjb3JkLmV4aXN0U3ViZmllbGRJbkZpZWxkKCByZWNvcmQsIFsgIjA5NiIgXSwgWyAieiIgXSApOwogICAgICAgIGlmICggYWRtaW5JbmZvLnN1Ym1pdHRlciA9PT0gIjgzMDA2MCIgJiYgaG9sZGluZ3NGcm9tRGF0YVdlbGxDdXN0b21lciA9PT0gZmFsc2UgJiYgaGFzSG9sZGluZyA9PT0gdHJ1ZSAmJiByZWNvcmQuZXhpc3RGaWVsZCggL3MxMS8gKSApIHsKICAgICAgICAgICAgYWRtaW5JbmZvLmlzRGVsZXRlUmVjb3JkID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLm1vZGlmeUFkbWluSW5mb0ZvckRhdGFXZWxsQ3VzdG9tZXIiICk7CgogICAgICAgIHJldHVybiBhZG1pbkluZm87CgogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIHRoZSB3b3JrIHR5cGUgb2YgdGhlIGRhdGEgKGxpdGVyYXR1cmUsIG11c2ljLCBtb3ZpZSBldGMuKSBiYXNlZCBvbiB0aGUgbWF0ZXJpYWwgdHlwZSAoREtBQk0pLgogICAgICoKICAgICAqCiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKQogICAgICogQHBhcmFtIHtYbWx9IGRrYWJtWG1sIFRoZSBES0FCTSByZWNvcmQKICAgICAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB3b3JrIHR5cGVzCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUKICAgICAqIEBtZXRob2QKICAgICAqLwogICAgdGhhdC5jcmVhdGVXb3JrVHlwZSA9IGZ1bmN0aW9uKCBka2FibVhtbCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUiICk7CgogICAgICAgIHZhciB3b3JrVHlwZXMgPSB7CiAgICAgICAgICAgICJCaWxsZWRib2ciOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJCb2ciOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJCb2cgc3RvciBza3JpZnQiOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJEaXNrZXR0ZSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkRUQm9vayI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkVib2ciOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJMeWRib2cgKGJcdTAwZTVuZCkiOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJMeWRib2cgKGNkKSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkx5ZGJvZyAobmV0KSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIkx5ZGJvZyAoY2QtbXAzKSI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIk5ldGRva3VtZW50IjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiUHVua3Rza3JpZnQiOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJUZWduZXNlcmllIjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiR3JhcGhpYyBub3ZlbCI6ICJsaXRlcmF0dXJlIiwKICAgICAgICAgICAgIlx1MDBDNXJib2ciOiAibGl0ZXJhdHVyZSIsCiAgICAgICAgICAgICJBdmlzIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJBdmlzIChuZXQpIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJUaWRzc2tyaWZ0IjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJUaWRzc2tyaWZ0IChuZXQpIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJQZXJpb2Rpa3VtIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJQZXJpb2Rpa3VtIChuZXQpIjogInBlcmlvZGljYSIsCiAgICAgICAgICAgICJCbHUtcmF5IjogIm1vdmllIiwKICAgICAgICAgICAgIkR2ZCI6ICJtb3ZpZSIsCiAgICAgICAgICAgICJEdmQtcm9tIjogImxpdGVyYXR1cmUiLAogICAgICAgICAgICAiRmlsbSI6ICJtb3ZpZSIsCiAgICAgICAgICAgICJGaWxtIChuZXQpIjogIm1vdmllIiwKICAgICAgICAgICAgIlZpZGVvIjogIm1vdmllIiwKICAgICAgICAgICAgIkJcdTAwZTVuZCI6ICJtdXNpYyIsCiAgICAgICAgICAgICJDZCAobXVzaWspIjogIm11c2ljIiwKICAgICAgICAgICAgIkdyYW1tb2ZvbnBsYWRlIjogIm11c2ljIiwKICAgICAgICAgICAgIk1pbmkgZGlzYyI6ICJtdXNpYyIsCiAgICAgICAgICAgICJNdXNpayAobmV0KSI6ICJtdXNpYyIsCiAgICAgICAgICAgICJNdXNpa3RyYWNrIChuZXQpIjogInRyYWNrIiwKICAgICAgICAgICAgIkdhbWVCb3kiOiAiZ2FtZSIsCiAgICAgICAgICAgICJHYW1lQm95IEFkdmFuY2UiOiAiZ2FtZSIsCiAgICAgICAgICAgICJOaW50ZW5kbyBEUyI6ICJnYW1lIiwKICAgICAgICAgICAgIlBjLXNwaWwiOiAiZ2FtZSIsCiAgICAgICAgICAgICJQYy1zcGlsIChuZXQpIjogImdhbWUiLAogICAgICAgICAgICAiUGxheXN0YXRpb24iOiAiZ2FtZSIsCiAgICAgICAgICAgICJQU1AiOiAiZ2FtZSIsCiAgICAgICAgICAgICJXaWkiOiAiZ2FtZSIsCiAgICAgICAgICAgICJYYm94IjogImdhbWUiLAogICAgICAgICAgICAiQXJ0aWtlbCI6ICJhcnRpY2xlIiwKICAgICAgICAgICAgIkF2aXNhcnRpa2VsIjogImFydGljbGUiLAogICAgICAgICAgICAiVGlkc3NrcmlmdHNhcnRpa2VsIjogImFydGljbGUiLAogICAgICAgICAgICAiTm9kZSI6ICJzaGVldG11c2ljIiwKICAgICAgICAgICAgIkUtbm9kZSI6ICJzaGVldG11c2ljIiwKICAgICAgICAgICAgIktvcnQiOiAibWFwIiwKICAgICAgICAgICAgIkUta29ydCI6ICJtYXAiLAogICAgICAgICAgICAiQW5tZWxkZWxzZSI6ICJyZXZpZXciLAogICAgICAgICAgICAiT210YWxlIjogImJvb2tkZXNjcmlwdGlvbiIKICAgICAgICB9OwoKICAgICAgICB2YXIgY2hpbGQ7CiAgICAgICAgdmFyIGNyZWF0ZWRXb3JrVHlwZXMgPSBbIF07CgogICAgICAgIGZvciBlYWNoKCBjaGlsZCBpbiAoIGRrYWJtWG1sLmRjOjp0eXBlICkgKSB7CiAgICAgICAgICAgIGlmICggU3RyaW5nKCBjaGlsZC5AeHNpOjp0eXBlICkubWF0Y2goICJka2RjcGx1czpCaWJESy1UeXBlIiApICYmICFTdHJpbmcoIGRrYWJtWG1sLmRjOjpzdWJqZWN0ICkubWF0Y2goIC9vcmZhdHRlcnBvcnRyLyApICkgewogICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBBZG1pbkRhdGEuY2xlYW5NYXRlcmlhbFR5cGUoIFN0cmluZyggY2hpbGQgKSApOwogICAgICAgICAgICAgICAgaWYgKCB0eXBlICE9PSAiU2FtbWVuc2F0IG1hdGVyaWFsZSIgJiYgd29ya1R5cGVzWyB0eXBlIF0gIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICBjcmVhdGVkV29ya1R5cGVzLnB1c2goIHdvcmtUeXBlc1sgdHlwZSBdICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vYWRkaW5nIHdvcmtUeXBlcyBiYXNlZCBvbiBkYzpzdWJqZWN0IGVsZW1lbnRzCiAgICAgICAgaWYgKCBTdHJpbmcoIGRrYWJtWG1sLmRjOjpzdWJqZWN0ICkubWF0Y2goIC9saXR0ZXJhdHVyYW5hbHlzZS8gKSApIHsKICAgICAgICAgICAgY3JlYXRlZFdvcmtUeXBlcy5wdXNoKCAiYW5hbHlzaXMiICk7CiAgICAgICAgfQogICAgICAgIGlmICggU3RyaW5nKCBka2FibVhtbC5kYzo6c3ViamVjdCApLm1hdGNoKCAvb3JmYXR0ZXJwb3J0ci8gKSApIHsKICAgICAgICAgICAgY3JlYXRlZFdvcmtUeXBlcy5wdXNoKCAicG9ydHJhaXQiICk7CiAgICAgICAgfQogICAgICAgIC8vaW4gY2FzZSBubyB3b3JrdHlwZSBoYXMgYmVlbiBmb3VuZCB5ZXQsIHNldCBpdCB0byAibm9uZSIKICAgICAgICBpZiAoIGNyZWF0ZWRXb3JrVHlwZXMubGVuZ3RoID09PSAwICkgewogICAgICAgICAgICBjcmVhdGVkV29ya1R5cGVzLnB1c2goICJub25lIiApOwogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nIEFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSIgKTsKCiAgICAgICAgcmV0dXJuIGNyZWF0ZWRXb3JrVHlwZXM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IHRyYW5zZm9ybXMgc3BlY2lmaWMgbWF0ZXJpYWx0eXBlcyBpbnRvIG1vcmUgZ2VuZXJhbCBtYXRlcmlhbHR5cGVzCiAgICAgKiBzbyB0aGF0IHRoZSBtYXRlcmlhbHR5cGUgY2FuIGJlIGxvb2tlZCB1cCBpbiBhIHRhYmxlIHRoYXQgZG9lcyBub3QKICAgICAqIG5lY2Vzc2FyaWx5IGhhdmUgYWxsIHNwZWNpZmljIHR5cGVzIGxpc3RlZAogICAgICogZS5nLiBQbGF5c3RhdGlvbiAzIGFuZCBQbGF5c3RhdGlvbiA0IGFyZSBib3RoIHRyYW5zZm9ybWVkIGludG8KICAgICAqICJQbGF5c3RhdGlvbiIgYXMgbWF0ZXJpYWx0eXBlIHRvIGxvb2sgdXAKICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY2xlYW5NYXRlcmlhbFR5cGUoIG1hdGVyaWFsVHlwZSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWF0ZXJpYWxUeXBlIFRoZSBtYXRlcmlhbHR5cGUgdG8gbW9kaWZ5CiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBtb2RpZmllZCBtYXRlcmlhbHR5cGUKICAgICAqIEBleGFtcGxlIEFkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSggIlBsYXlzdGF0aW9uIDQiICkKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZQogICAgICovCiAgICB0aGF0LmNsZWFuTWF0ZXJpYWxUeXBlID0gZnVuY3Rpb24oIG1hdGVyaWFsVHlwZSApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlIiApOwoKICAgICAgICBpZiAoIG1hdGVyaWFsVHlwZS5tYXRjaCggL3BsYXlzdGF0aW9uL2kgKSApIHsKICAgICAgICAgICAgbWF0ZXJpYWxUeXBlID0gIlBsYXlzdGF0aW9uIjsKICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbFR5cGUubWF0Y2goIC94Ym94L2kgKSApIHsKICAgICAgICAgICAgbWF0ZXJpYWxUeXBlID0gIlhib3giOwogICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsVHlwZS5tYXRjaCggL3dpaS9pICkgKSB7CiAgICAgICAgICAgIG1hdGVyaWFsVHlwZSA9ICJXaWkiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1hdGVyaWFsVHlwZSA9IG1hdGVyaWFsVHlwZTsKICAgICAgICB9CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlIiApOwoKICAgICAgICByZXR1cm4gbWF0ZXJpYWxUeXBlOwoKICAgIH07CgoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgZmluZHMgdGhlIGxpYnJhcnkgdHlwZSBvZiBhIHJlY29yZCBiYXNlZCBvbiBzdWJtaXR0ZXIuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlKCBzdWJtaXR0ZXIgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIHRoZSByZWNvcmQKICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGxpYnJhcnkgdHlwZQogICAgICogQGV4YW1wbGUgQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlKCAiNzEwMTAwIiApCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUKICAgICAqLwogICAgdGhhdC5nZXRMaWJyYXJ5VHlwZSA9IGZ1bmN0aW9uKCBzdWJtaXR0ZXIgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZSBtZXRob2QiICk7CgogICAgICAgIHZhciBsaWJyYXJ5VHlwZSA9ICJub25lIjsKICAgICAgICBpZiAoIEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCAic2Nob29sTGlicmFyeSIgKSApIHsKICAgICAgICAgICAgbGlicmFyeVR5cGUgPSAic2Nob29sIjsKICAgICAgICB9IGVsc2UgaWYgKCBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgInB1YmxpY0xpYnJhcnkiICkgKSB7CiAgICAgICAgICAgIGxpYnJhcnlUeXBlID0gInB1YmxpYyI7CiAgICAgICAgfSBlbHNlIGlmICggc3VibWl0dGVyLm1hdGNoKCAvXjhcZHxeMTJcZC8gKSAmJiAhc3VibWl0dGVyLm1hdGNoKCAvXjg3MDk3LyApICkgewogICAgICAgICAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nIEFkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZSBtZXRob2QiICk7CgogICAgICAgIHJldHVybiBsaWJyYXJ5VHlwZTsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgZmluZHMgdGhlIGNyZWF0aW9uIGRhdGUgb2YgYSBtYXJjIHJlY29yZCBlaXRoZXIgZnJvbSB0aGUgcmVjb3JkIGl0c2VsZiBvciAKICAgICAqIGZyb20gdGhlIGRhdGFiYXNlIHRoYXQgdGhlIHJlY29yZCBjb21lcyBmcm9tCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmdldENyZWF0aW9uRGF0ZSggc3VibWl0dGVyLCByZWNvcmQgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIHRoZSByZWNvcmQKICAgICAqIEBwYXJhbSB7UmVjb3JkfSBbcmVjb3JkXSBUaGUgbWFyYyByZWNvcmQgb2JqZWN0IGlmIGl0IGV4aXN0cwogICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgY3JlYXRpb24gZGF0ZSBvZiB0aGUgcmVjb3JkCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlCiAgICAgKi8KICAgIHRoYXQuZ2V0Q3JlYXRpb25EYXRlID0gZnVuY3Rpb24oIHN1Ym1pdHRlciwgcmVjb3JkICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZyBBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlIG1ldGhvZCIgKTsKCiAgICAgICAgdmFyIGNyZWF0aW9uRGF0ZSA9ICIiOwoKICAgICAgICBpZiAoIHJlY29yZC5leGlzdEZpZWxkKCAvbjU1LyApICkgewogICAgICAgICAgICBjcmVhdGlvbkRhdGUgPSByZWNvcmQuZ2V0VmFsdWUoIC9uNTUvLCAvYS8gKS5yZXBsYWNlKCAvKFxkezR9KShcZHsyfSkoXGR7Mn0pLywgIiQxLSQyLSQzIiApOwogICAgICAgIH0gZWxzZSBpZiAoIHN1Ym1pdHRlciA9PT0gIjE1MDAwOCIgKSB7CiAgICAgICAgICAgIGNyZWF0aW9uRGF0ZSA9IHJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9kLyApLnJlcGxhY2UoIC8oXGR7NH0pKFxkezJ9KShcZHsyfSkvLCAiJDEtJDItJDMiICk7CiAgICAgICAgfSBlbHNlIGlmICggc3VibWl0dGVyLm1hdGNoKCAvXjgvICkgKSB7CiAgICAgICAgICAgIGlmICggZGF0YWJhc2UgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGNyZWF0aW9uRGF0ZSA9IGRhdGFiYXNlLmdldENyZWF0aW9uRGF0ZSggcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2EvICksIHN1Ym1pdHRlciApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY3JlYXRpb25EYXRlID0gcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2QvICkucmVwbGFjZSggLyhcZHs0fSkoXGR7Mn0pKFxkezJ9KS8sICIkMS0kMi0kMyIgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjcmVhdGlvbkRhdGUgPSBjcmVhdGlvbkRhdGUucmVwbGFjZSggLyhcZHs0fSkoXGR7Mn0pKFxkezJ9KS8sICIkMS0kMi0kMyIgKTsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmdldENyZWF0aW9uRGF0ZSBtZXRob2QiICk7CgogICAgICAgIHJldHVybiBjcmVhdGlvbkRhdGU7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgdGhlIHhtbCBlbGVtZW50IHdpdGggaW5kZXhpbmdBbGlhcyBmb3IgdGhlIHJlY29yZCBiYXNlZCBvbiBzdWJtaXR0ZXIgYW5kIGZvcm1hdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCggYWRtaW5JbmZvICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhZG1pbkluZm8gVGhlIGFkbWluSW5mbyBvYmplY3QgZm9yIHRoZSByZWNvcmQKICAgICAqIEByZXR1cm4ge1hNTH0gaW5kZXhpbmdBbGlhc1htbAogICAgICogQGV4YW1wbGUgQWRtaW5EYXRhLmNyZWF0ZUluZGV4aW5nQWxpYXNYbWwoIHsgImZvcm1hdCI6ICJiYXNpcyIsICJzdWJtaXR0ZXIiOiAiODcwOTcwIiB9ICkKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5jcmVhdGVJbmRleGluZ0FsaWFzWG1sCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCA9IGZ1bmN0aW9uKCBhZG1pbkluZm8gKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5jcmVhdGVJbmRleGluZ0FsaWFzWG1sIiApOwoKICAgICAgICB2YXIgaW5kZXhpbmdBbGlhc1htbCA9IDxpbmRleGluZ0FsaWFzLz47CiAgICAgICAgc3dpdGNoICggYWRtaW5JbmZvLmZvcm1hdCApIHsKICAgICAgICAgICAgY2FzZSAia2F0YWxvZyI6CiAgICAgICAgICAgIGNhc2UgImJhc2lzIjoKICAgICAgICAgICAgY2FzZSAibG9rYWxiaWJsIjoKICAgICAgICAgICAgICAgIGluZGV4aW5nQWxpYXNYbWwuKiArPSAiZGFubWFyY3hjaGFuZ2UiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgImFubWVsZCI6CiAgICAgICAgICAgICAgICBpbmRleGluZ0FsaWFzWG1sLiogKz0gInJldmlldyI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiZm9ybGFnIjoKICAgICAgICAgICAgICAgIGluZGV4aW5nQWxpYXNYbWwuKiArPSAiZGthYm0iOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBzd2l0Y2ggKCBhZG1pbkluZm8uc3VibWl0dGVyICkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgIjg3MDk3MCI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiODcwOTcxIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICI4NzA5NzgiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAwOCI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDE1IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMzYiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAzOCI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDQ0IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwNTciOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGluZ0FsaWFzWG1sLiogKz0gImRhbm1hcmN4Y2hhbmdlIjsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiODcwOTc2IjoKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhpbmdBbGlhc1htbC4qICs9ICJyZXZpZXciOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMDUiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAxMiI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDE0IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMTgiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAyMyI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDI5IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMzEiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAzMyI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDQyIjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwNDMiOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDA0NiI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDU4IjoKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhpbmdBbGlhc1htbC4qICs9ICJka2FibSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICJBbGlhcyBmb3Igc3VibWl0dGVyOiAnIiArIGFkbWluSW5mby5zdWJtaXR0ZXIgKyAiJyBhbmQgZm9ybWF0OiAnIiArIGFkbWluSW5mby5mb3JtYXQgKyAiJyBub3QgZm91bmQiOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCIgKTsKCiAgICAgICAgcmV0dXJuIGluZGV4aW5nQWxpYXNYbWw7CgogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjaGVja3MgaG9sZGluZ3MgYmFzZWQgb24gZmllbGQgMDk2IHN1YmZpZWxkIHouCiAgICAgKiAKICAgICAqIEZvciBpbnN0YW5jZSBpdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaWYgb25seSBzdWItZGVwYXJ0bWVudHMgb2YgYSBQSCBsaWJyYXJ5CiAgICAgKiBhcmUgdXNpbmcgdGhpcyByZWNvcmQgYW5kIG5vdCB0aGUgc3VibWl0dGluZyBQSCBsaWJyYXJ5IGl0c2VsZi4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncyggcmVjb3JkICkKICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgVGhlIG1hcmMgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIG9yIGZhbHNlCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncwogICAgICovCiAgICB0aGF0LmNoZWNrSG9sZGluZ3MgPSBmdW5jdGlvbiggcmVjb3JkLCBob2xkaW5nICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZyBBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncyIgKTsKCiAgICAgICAgdmFyIGhhc0hvbGRpbmdzID0gZmFsc2U7CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzA5Ni8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgaWYgKCBmaWVsZC5nZXRWYWx1ZSggL3ovICkgPT0gaG9sZGluZyApIHsKICAgICAgICAgICAgICAgIGhhc0hvbGRpbmdzID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0gKTsKCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncyIgKTsKCiAgICAgICAgcmV0dXJuIGhhc0hvbGRpbmdzOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjaGVja3Mgd2hldGhlciBhIHN1Ym1pdHRlciBoYXMgYSBzcGVjaWFsIHR5cGUsIGZvciBpbnN0YW5jZSBkYXRhV2VsbEN1c3RvbWVyIG9yIG5vbkZpY3Rpb25TdWJtaXR0ZXIuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsIHR5cGUgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIGRhdGEKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBzdWJtaXR0ZXIgdG8gY2hlY2sgZm9yIAogICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZQogICAgICogQGV4YW1wbGUgQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCAiODMwMDYwIiwgImRhdGFXZWxsQ3VzdG9tZXIiICkKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlcgogICAgICovCiAgICB0aGF0LmNoZWNrVHlwZU9mU3VibWl0dGVyID0gZnVuY3Rpb24oIHN1Ym1pdHRlciwgdHlwZSApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIgbWV0aG9kIiApOwoKICAgICAgICB2YXIgdHlwZU9mU3VibWl0dGVyOwogICAgICAgIHZhciBkYXRhV2VsbEN1c3RvbWVycyA9IFsgIjgzMDA2MCIsICI4MzAxOTAiLCAiODMwMzcwIiwgIjgzMDM4MCIsICI4MzA2OTAiLCAiODMxMDIwIiBdOwogICAgICAgIHZhciBub25GaWN0aW9uU3VibWl0dGVycyA9IFsgIjE1MDAwNSIsICIxNTAwMTIiLCAiMTUwMDE4IiwgIjE1MDAyMyIsICIxNTAwMjkiLCAiMTUwMDMxIiwgIjE1MDAzMyIsICIxNTAwNDIiLCAiMTUwMDQzIiwgIjE1MDA0NiIsICIxNTAwNTgiIF07CgogICAgICAgIHZhciBwdWJsaWNMaWJyYXJ5ID0gL143WzAtOV17NX0kLzsKICAgICAgICB2YXIgc2Nob29sTGlicmFyeSA9IC9eNlswLTldezV9JHxeMjhbMC05XXs0fSQvOwoKICAgICAgICB2YXIgY2hlY2tBcnJheSA9IFsgXTsKICAgICAgICB2YXIgY2hlY2tSZWdFeDsKCiAgICAgICAgc3dpdGNoICggdHlwZSApIHsKICAgICAgICAgICAgY2FzZSAiZGF0YVdlbGxDdXN0b21lciI6CiAgICAgICAgICAgICAgICBjaGVja0FycmF5ID0gZGF0YVdlbGxDdXN0b21lcnM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAibm9uRmljdGlvblN1Ym1pdHRlciI6CiAgICAgICAgICAgICAgICBjaGVja0FycmF5ID0gbm9uRmljdGlvblN1Ym1pdHRlcnM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAicHVibGljTGlicmFyeSI6CiAgICAgICAgICAgICAgICBjaGVja1JlZ0V4ID0gcHVibGljTGlicmFyeTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJzY2hvb2xMaWJyYXJ5IjoKICAgICAgICAgICAgICAgIGNoZWNrUmVnRXggPSBzY2hvb2xMaWJyYXJ5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CgkgICAgICAgICAgICBMb2cud2FybiggIlRoZSBzdWJtaXR0ZXIgdHlwZSAiICsgdHlwZSArICIgaXMgdW5rbm93bi4iICk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmICggY2hlY2tSZWdFeCAhPT0gdW5kZWZpbmVkICYmIHN1Ym1pdHRlci5tYXRjaCggY2hlY2tSZWdFeCApICkgewogICAgICAgICAgICB0eXBlT2ZTdWJtaXR0ZXIgPSB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoIGNoZWNrQXJyYXkuaW5kZXhPZiggc3VibWl0dGVyICkgPiAtMSApIHsKICAgICAgICAgICAgdHlwZU9mU3VibWl0dGVyID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0eXBlT2ZTdWJtaXR0ZXIgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZyBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIgbWV0aG9kIiApOwoKICAgICAgICByZXR1cm4gdHlwZU9mU3VibWl0dGVyOwogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBkZXRlcm1pbmVzIGFjY2Vzc1R5cGUgZm9yIHRoZSByZWNvcmQuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUoIHN1Ym1pdHRlciwgb25saW5lQWNjZXNzLCByZWNvcmQgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIGRhdGEKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbmxpbmVBY2Nlc3MgU3RhdHVzIG9mIG9ubGluZSBhY2Nlc3Mgc2hvdWxkIGJlICJub3QgYXZhaWxhYmxlIiBpZiB1cmwgZG9lcyBub3Qgd29yaywgb3RoZXJ3aXNlIGVtcHR5IHN0cmluZwogICAgICogQHBhcmFtIHtSZWNvcmR9IFtyZWNvcmRdIFRoZSBtYXJjIHJlY29yZCBpZiBpdCBleGlzdHMKICAgICAqIEByZXR1cm4ge0FycmF5fSBhY2Nlc3NUeXBlcyBmb3IgdGhlIHJlY29yZAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUKICAgICAqLwogICAgdGhhdC5nZXRBY2Nlc3NUeXBlID0gZnVuY3Rpb24oIHN1Ym1pdHRlciwgb25saW5lQWNjZXNzLCByZWNvcmQgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5nZXRBY2Nlc3NUeXBlIiApOwoKICAgICAgICB2YXIgcGh5c2ljYWwgPSBmYWxzZTsKICAgICAgICBpZiAoIHJlY29yZCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMDA5LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvZy8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViRmllbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gU3RyaW5nKCBzdWJGaWVsZC52YWx1ZSApOwogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUgIT09ICJ4ZSIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBoeXNpY2FsID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ICkKICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICAgICAgdmFyIG9ubGluZSA9IGZhbHNlOwogICAgICAgIGlmICggcmVjb3JkICE9PSB1bmRlZmluZWQgJiYgb25saW5lQWNjZXNzICE9PSAibm90IGF2YWlsYWJsZSIgJiYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvZy8gKS5tYXRjaCggInhlIiApIHx8IHJlY29yZC5nZXRWYWx1ZSggL24wMS8sIC9iLyApLm1hdGNoKCAiMDAwMDExIiApICkgKSB7CiAgICAgICAgICAgIG9ubGluZSA9IHRydWU7CiAgICAgICAgfSBlbHNlIGlmICggc3VibWl0dGVyLm1hdGNoKCAvXjE1MC8gKSAmJiBvbmxpbmVBY2Nlc3MgIT09ICJub3QgYXZhaWxhYmxlIiApIHsKICAgICAgICAgICAgb25saW5lID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHZhciBhY2Nlc3NUeXBlcyA9IFsgXTsKICAgICAgICBpZiAoIHBoeXNpY2FsID09PSB0cnVlICkgewogICAgICAgICAgICBhY2Nlc3NUeXBlcy5wdXNoKCAicGh5c2ljYWwiICk7CiAgICAgICAgfQogICAgICAgIGlmICggb25saW5lID09PSB0cnVlICkgewogICAgICAgICAgICBhY2Nlc3NUeXBlcy5wdXNoKCAib25saW5lIiApOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSIgKTsKCiAgICAgICAgcmV0dXJuIGFjY2Vzc1R5cGVzOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBnZXRzIHRoZSBWSVAgY29kZSBmb3IgYSBzcGVjaWZpYyBzY2hvb2wgbGlicmFyeS4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuc2Nob29sQnJhbmNoVklQQ29kZSggYnJhbmNoTmFtZSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYnJhbmNoTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2Nob29sIGJyYW5jaCBjb25zaXN0aW5nIG9mIHN1Ym1pdHRlciBmb2xsb3dlZCBieSBhIGh5cGhlbiBhbmQgdGhlIGFiYnJldmlhdGlvbiBmb3IgdGhlIGJyYW5jaAogICAgICogQHJldHVybiB7U3RyaW5nfSBTaXggZGlnaXQgVklQIGNvZGUKICAgICAqIEBtZXRob2QKICAgICAqIEBleGFtcGxlIEFkbWluRGF0YS5zY2hvb2xCcmFuY2hWSVBDb2RlKCAiNjYxNTAwLWJhbiIgKQogICAgICogQG5hbWUgQWRtaW5EYXRhLnNjaG9vbEJyYW5jaFZJUENvZGUKICAgICAqLwogICAgdGhhdC5zY2hvb2xCcmFuY2hWSVBDb2RlID0gZnVuY3Rpb24oIGJyYW5jaE5hbWUgKSB7CgogICAgICAgIHZhciBicmFuY2hOYW1lVG9WSVBDb2RlID0gewogICAgICAgICAgICAiNjYxNTAwLWJhbiI6ICIzMTAwMTUiLAogICAgICAgICAgICAiNjYxNTAwLWJycyI6ICIzMTAwMDEiLAogICAgICAgICAgICAiNjYxNTAwLWRhZyI6ICIzMTAwMDciLAogICAgICAgICAgICAiNjYxNTAwLWVnZSI6ICIzMTAwMDgiLAogICAgICAgICAgICAiNjYxNTAwLWdlZCI6ICIzMTAwMDYiLAogICAgICAgICAgICAiNjYxNTAwLWhhdCI6ICIzMTAwMTAiLAogICAgICAgICAgICAiNjYxNTAwLWhcdTAwZjhqIjogIjMxMDAxNyIsCiAgICAgICAgICAgICI2NjE1MDAtaG92IjogIjMxMDAwMyIsCiAgICAgICAgICAgICI2NjE1MDAtbGFuIjogIjMxMDAxMSIsCiAgICAgICAgICAgICI2NjE1MDAtbHVuIjogIjMxMDAxMyIsCiAgICAgICAgICAgICI2NjE1MDAtbmlzIjogIjMxMDAwMiIsCiAgICAgICAgICAgICI2NjE1MDAtXHUwMGY4c3QiOiAiMzEwMDA1IiwKICAgICAgICAgICAgIjY2MTUwMC1zdGUiOiAiMzEwMDEyIiwKICAgICAgICAgICAgIjY2MTUwMC1zXHUwMGY4diI6ICIzMTAwMDQiLAogICAgICAgICAgICAiNjYxNTAwLXRvciI6ICIzMTAwMTQiLAogICAgICAgIH07CgogICAgICAgIHZhciBWSVBDb2RlID0gYnJhbmNoTmFtZVRvVklQQ29kZVsgYnJhbmNoTmFtZSBdOwogICAgICAgIAogICAgICAgIHJldHVybiBWSVBDb2RlOwogICAgfQoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgYWRkcyBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZvciBzY2hvb2wgbGlicmFyaWVzLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMoIHN1Ym1pdHRlciwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIGRhdGEKICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmQgVGhlIG1hcmMgcmVjb3JkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb2xsZWN0aW9uSWRlbnRpZmllcnMgQW4gYXJyYXkgb2YgY29sbGVjdGlvbklkZW50aWZpZXJzIGNvbGxlY3RlZCBzbyBmYXIKICAgICAqIEByZXR1cm4ge0FycmF5fSBVcGRhdGVkIGFycmF5IG9mIGNvbGxlY3Rpb24gaWRlbnRpZmllcnMKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMKICAgICAqLwogICAgdGhhdC5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMgPSBmdW5jdGlvbiggc3VibWl0dGVyLCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclNjaG9vbExpYnJhcmllcyIgKTsKCiAgICAgICAgLy9zZXQgdGhlIGdlbmVyYWwgY29sbGVjdGlvbklkZW50aWZpZXIgZm9yIGFsbCBzY2hvb2xzIGluIG9uZSAia29tbXVuZSIKICAgICAgICBzd2l0Y2goIHN1Ym1pdHRlciApIHsKICAgICAgICAgICAgY2FzZSAiNjYxNTAwIjoKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiMzAwNjE1LWthdGFsb2ciICk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgTG9nLndhcm4oICJjb2xsZWN0aW9uSWRlbnRpZmllciBmb3Igc2Nob29sIGxpYnJhcnkgbm90IGtub3duLiBTdWJtaXR0ZXIgPSAiLCBzdWJtaXR0ZXIgKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICAvL3NldCB0aGUgY29sbGVjdGlvbklkZW50aWZpZXJzIGZvciBlYWNoIHNjaG9vbCBsaWJyYXJ5CiAgICAgICAgdmFyIHNjaG9vbExpYkJyYW5jaGVzID0gWyBdOyAvL3Nob3VsZCBnZXQgdmFsdWVzIGZyb20gMDk2KmYuIFRoZXJlIG1heSBiZSBtb3JlIG9jY3VyZW5jZXMgb2YgMDk2CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzA5Ni8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvZi8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICBzY2hvb2xMaWJCcmFuY2hlcy5wdXNoKCBzdWJtaXR0ZXIgKyAiLSIgKyBzdWJmaWVsZC52YWx1ZSApOwogICAgICAgICAgICB9ICk7CiAgICAgICAgfSApOwogICAgICAgIHZhciB2aXBDb2RlOwogICAgICAgIGZvciAoIHZhciBpPTA7IGk8c2Nob29sTGliQnJhbmNoZXMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgIHZpcENvZGUgPSBBZG1pbkRhdGEuc2Nob29sQnJhbmNoVklQQ29kZSggc2Nob29sTGliQnJhbmNoZXNbIGkgXSApOwogICAgICAgICAgICBpZiAoIHZpcENvZGUgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCB2aXBDb2RlICsgIi1rYXRhbG9nIiApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgTG9nLndhcm4oICJWSVAgY29kZSBmb3Igc2Nob29sIGxpYnJhcnkgYnJhbmNoICIgKyBzY2hvb2xMaWJCcmFuY2hlc1sgaSBdICsiIGlzIG5vdCBrbm93biIgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU2Nob29sTGlicmFyaWVzIG1ldGhvZCIgKTsKCiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25JZGVudGlmaWVyczsKICAgICAgICAKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBmaW5kcyBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZvciByZWNvcmRzIGZyb20gZGF0YWJhc2UgODcwOTcwLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IEFkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAoIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKQogICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZCBUaGUgbWFyYyByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbmxpbmVBY2Nlc3MgU3RhdHVzIG9mIG9ubGluZSBhY2Nlc3Mgc2hvdWxkIGJlICJub3QgYXZhaWxhYmxlIiBpZiB1cmwgZG9lcyBub3Qgd29yawogICAgICogQHBhcmFtIHtBcnJheX0gY29sbGVjdGlvbklkZW50aWZpZXJzIEFuIGFycmF5IG9mIGNvbGxlY3Rpb25JZGVudGlmaWVycyBjb2xsZWN0ZWQgc28gZmFyCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gVXBkYXRlZCBhcnJheSBvZiBjb2xsZWN0aW9uIGlkZW50aWZpZXJzCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwCiAgICAgKi8KICAgIHRoYXQuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwID0gZnVuY3Rpb24oIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAiICk7CgogICAgICAgIGlmICggb25saW5lQWNjZXNzICE9PSAibm90IGF2YWlsYWJsZSIgKSB7CiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMzIvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC94LywgZnVuY3Rpb24oIGZpZWxkLCBzdWJGaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBTdHJpbmcoIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL0ZTRi4rLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDAyMSIgKyAiLSIgKyAiZmplcm4iICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9GU0IuKy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwMjEiICsgIi0iICsgImJpYmxpb3RlayIgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL0VSRS4rLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDAxNSIgKyAiLSIgKyAiZXJlb2wiICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9FQkkuKy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwMTUiICsgIi0iICsgImViaWIiICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9OTFkuKy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwMTUiICsgIi0iICsgIm5ldGx5ZGJvZyIgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ICkKICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzUwMXw4NTYvLCAvdS8gKS5tYXRjaCggL2VrdXJzZXJcLm51LyApICkgewogICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjE1MDA1MiIgKyAiLSIgKyAiZWt1cnNlciIgKTsKICAgICAgICB9CiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC81MDEvLCAvdS8gKS5tYXRjaCggL3R1cnRlb3JpXC5kay8gKSApIHsKICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICIxNTAwNTMiICsgIi0iICsgInR1cnRlb3JpIiApOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZyBBZG1pbkRhdGEuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwIiApOwoKICAgICAgICByZXR1cm4gY29sbGVjdGlvbklkZW50aWZpZXJzOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBmaW5kcyBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZvciByZWNvcmRzIGZyb20gc3VibWl0dGVyIDgzMDA2MC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwKCBzdWJtaXR0ZXIsIGZvcm1hdCwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIHRoZSByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgVGhlIGZvcm1hdCBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkIFRoZSBtYXJjIHJlY29yZAogICAgICogQHBhcmFtIHtBcnJheX0gY29sbGVjdGlvbklkZW50aWZpZXJzIEFuIGFycmF5IG9mIGNvbGxlY3Rpb25JZGVudGlmaWVycyBjb2xsZWN0ZWQgc28gZmFyCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gVXBkYXRlZCBhcnJheSBvZiBjb2xsZWN0aW9uIGlkZW50aWZpZXJzCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwCiAgICAgKi8KICAgIHRoYXQuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwID0gZnVuY3Rpb24oIHN1Ym1pdHRlciwgZm9ybWF0LCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmcgQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MCIgKTsKCiAgICAgICAgaWYgKCByZWNvcmQgPT09IHVuZGVmaW5lZCApIHsgLy9oYW5kbGVzIGRlbGV0ZSByZWNvcmRzIGluIGNzdiBmb3JtYXQKICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goIHN1Ym1pdHRlciArICItIiArIGZvcm1hdCApOwogICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjg3MDk3MC1mb3JzayIgKTsKICAgICAgICB9IGVsc2UgaWYgKCBBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncyggcmVjb3JkLCAiODMwMDYwIiApID09PSB0cnVlICkgeyAvLyBNZXRyb3BvbCBob2xkaW5ncwogICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggc3VibWl0dGVyICsgIi0iICsgZm9ybWF0ICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCBNYXJjUmVjb3JkLmV4aXN0U3ViZmllbGRJbkZpZWxkKCByZWNvcmQsIFsgIjA5NiIgXSwgWyAieiIgXSApID09PSB0cnVlICkgeyAvL3N1YiBsaWJyYXJ5IGhvbGRpbmdzCiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjg3MDk3MC1mb3JzayIgKTsKLy8gICAgICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZXhpc3RGaWVsZCggL3MxMS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvZy8gKS5tYXRjaCggL3hlLyApICkgeyAvL2VsZWN0cm9uaWMgbWF0ZXJpYWwgd2l0aCBubyBob2xkaW5ncwogICAgICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvZy8gKS5tYXRjaCggL3hlLyApICkgeyAvL2VsZWN0cm9uaWMgbWF0ZXJpYWwgd2l0aCBubyBob2xkaW5ncwogICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goIHN1Ym1pdHRlciArICItIiArIGZvcm1hdCApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAiICk7CgogICAgICAgIHJldHVybiBjb2xsZWN0aW9uSWRlbnRpZmllcnM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgY29sbGVjdGlvbiBpZGVudGlmaWVycyBmb3IgdGhlIHJlY29yZC94bWwtZG9jdW1lbnQuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgW2xpYnJhcnlUeXBlXSwgW3JlY29yZF0gKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIGRhdGEKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgVGhlIGZvcm1hdCBvZiBkYXRhCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb25saW5lQWNjZXNzIFN0YXR1cyBvZiBvbmxpbmUgYWNjZXNzIHNob3VsZCBiZSAibm90IGF2YWlsYWJsZSIgaWYgdXJsIGRvZXMgbm90IHdvcmssIG90aGVyd2lzZSBhbiBlbXB0eSBzdHJpbmcKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaWJyYXJ5VHlwZSB0ZWxscyB3aGV0aGVyIHRoZSByZWNvcmQgYmVpbmcgcHJvY2Vzc2VkIGlzIGZyb20gYSByZXNlYXJjaCBsaWJyYXJ5IG9yIHNvbWV0aGluZyBlbHNlCiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkIFRoZSBtYXJjIHJlY29yZCBpZiBpdCBleGlzdHMKICAgICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSB3aXRoIHRoZSBjb2xsZWN0aW9uIGlkZW50aWZpZXJzCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzID0gZnVuY3Rpb24oIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nIEFkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMgbWV0aG9kIiApOwoKICAgICAgICB2YXIgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwoKICAgICAgICBzd2l0Y2ggKCBzdWJtaXR0ZXIgKSB7CiAgICAgICAgICAgIGNhc2UgIjg3MDk3MCI6CiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggc3VibWl0dGVyICsgIi0iICsgZm9ybWF0ICk7CiAgICAgICAgICAgICAgICBBZG1pbkRhdGEuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwKCByZWNvcmQsIG9ubGluZUFjY2VzcywgY29sbGVjdGlvbklkZW50aWZpZXJzICk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiODcwOTcxIjoKICAgICAgICAgICAgICAgIC8vaWYgdXJsIGluIHJlY29yZCBkb2VzIG5vdCB3b3JrIGFuZCB0aGUgbWF0ZXJpYWwgZG9lcyBub3QgZXhpc3QgaW4gcGh5c2ljYWwgZm9ybSBpdCBzaG91bGQgYmUgcGFydCBvZiB0aGUgJzg3MDk3MC1iYXNpcycgY29sbGVjdGlvbgogICAgICAgICAgICAgICAgaWYgKCBvbmxpbmVBY2Nlc3MgPT09ICJub3QgYXZhaWxhYmxlIiAmJiBBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSggc3VibWl0dGVyLCBvbmxpbmVBY2Nlc3MsIHJlY29yZCApLmluZGV4T2YoICJwaHlzaWNhbCIgKSA9PT0gLTEgKSB7CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAiICsgIi0iICsgImJhc2lzIiApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggc3VibWl0dGVyICsgIi0iICsgZm9ybWF0ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiODMwMDYwIjoKICAgICAgICAgICAgICAgIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAoIHN1Ym1pdHRlciwgZm9ybWF0LCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIjg3MDk3NiI6CiAgICAgICAgICAgICAgICAvL1NlYXJjaCBVUyMxNDIwOiBUd28gY29sbGVjdGlvbklkZW50aWZpZXJzIGZvciBlYXJjaCByZWNvcmQgZnJvbSBzdWJtaXR0ZXIgODcwOTc2CiAgICAgICAgICAgICAgICAvL1RoZSBPcGVuU2VhcmNoIHdlYnNlcnZpY2Ugd2lsbCBub3Qgc2hvdyByZWNvcmRzIG5ld2VyIHRoYW4gNiBtb250aHMgZm9yIGNvbGxlY3Rpb24gJzg3MDk3Ni1hbm1lbGQnCiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjg3MDk3Ni1hbGxhbm1lbGQiICk7CiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjg3MDk3Ni1hbm1lbGQiICk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIGlmICggQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsICJzY2hvb2xMaWJyYXJ5IiApICkgewogICAgICAgICAgICAgICAgICAgIEFkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTY2hvb2xMaWJyYXJpZXMgKCBzdWJtaXR0ZXIsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICkgOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggc3VibWl0dGVyICsgIi0iICsgZm9ybWF0ICk7ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBmb3JtYXQgPT09ICJsb2thbGJpYmwiICkgewogICAgICAgICAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMucHVzaCggIjg3MDk3MC1sb2thbGJpYmwiICk7CiAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkICE9PSB1bmRlZmluZWQgJiYgc3VibWl0dGVyID09ICI3MDA0MDAiICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwNC8sIC9hLyApLm1hdGNoKCAvaS8gKSApIHsKICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAtdWRsYW5kIiApOwogICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZCAhPT0gdW5kZWZpbmVkICYmIHN1Ym1pdHRlci5tYXRjaCggLzEyNTZbMDEyXTAvICkgKSB7CiAgICAgICAgICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycy5wdXNoKCAiODcwOTcwLXVkbGFuZCIgKTsKICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQgIT09IHVuZGVmaW5lZCAmJiBsaWJyYXJ5VHlwZSA9PT0gInJlc2VhcmNoIiApIHsKICAgICAgICAgICAgaWYgKCAhcmVjb3JkLmV4aXN0RmllbGQoIC9zMTEvICkgJiYgY29sbGVjdGlvbklkZW50aWZpZXJzLmluZGV4T2YoICI4NzA5NzAtZm9yc2siICkgPCAwICkgewogICAgICAgICAgICAgICAgY29sbGVjdGlvbklkZW50aWZpZXJzLnB1c2goICI4NzA5NzAtZm9yc2siICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmcgQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyBtZXRob2QiICk7CgogICAgICAgIHJldHVybiBjb2xsZWN0aW9uSWRlbnRpZmllcnM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IHByb2R1Y2VzIGVpdGhlciBmaWt0aW9uIG9yIG5vbmZpa3Rpb24gYXMgZ2VucmUuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggQWRtaW5EYXRhLmNyZWF0ZUdlbnJlKCByZWNvcmQgKQogICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZCBBIG1hcmMgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBnZW5yZSB2YWx1ZSwgZWl0aGVyIGZpa3Rpb24gb3Igbm9uZmlrdGlvbgogICAgICogQGV4YW1wbGUgQWRtaW5EYXRhLmNyZWF0ZUdlbnJlKCByZWNvcmQgKQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgQWRtaW5EYXRhLmNyZWF0ZUdlbnJlCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlR2VucmUgPSBmdW5jdGlvbiggcmVjb3JkICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZyBBZG1pbkRhdGEuY3JlYXRlR2VucmUgbWV0aG9kIiApOwoKICAgICAgICB2YXIgZ2VucmVDYXRlZ29yeSA9IDA7CgogICAgICAgIHZhciBnZW5yZSA9ICIiOwoKICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9kLyApLm1hdGNoKCAveC8gKSApIHsKICAgICAgICAgICAgZ2VucmUgPSAiZmlrdGlvbiI7CiAgICAgICAgICAgIGdlbnJlQ2F0ZWdvcnkgPSAxOwogICAgICAgIH0KCiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvZC8gKS5tYXRjaCggL3kvICkgKSB7CiAgICAgICAgICAgIGdlbnJlID0gIm5vbmZpa3Rpb24iOwogICAgICAgICAgICBnZW5yZUNhdGVnb3J5ID0gMTsKICAgICAgICB9CgogICAgICAgIHZhciB2YWx1ZTsKICAgICAgICB2YXIgcmVnRXhwRmljdGlvbiA9IG5ldyBSZWdFeHAoIC9za3xeOFsyLThdfDI0LjQzfDM5LjFbMi00XXwzOS4yNXw3Ny42Mi8gKTsKICAgICAgICB2YXIgcmVnRXhwTW92aWVGaWN0aW9uID0gbmV3IFJlZ0V4cCggLzc3LjU2fDc3LjcvICk7CgogICAgICAgIGlmICggZ2VucmVDYXRlZ29yeSA9PT0gMCApIHsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSA9PT0gImEiIHx8IHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApID09PSAiciIgfHwgcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkgPT09ICJwIiApIHsKICAgICAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC82NVsyNF0vLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL218bnxvLyApOwogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIHJlZ0V4cEZpY3Rpb24gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSAiZmlrdGlvbiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGdlbnJlQ2F0ZWdvcnkgPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkgPT09ICJtIiApIHsKICAgICAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC82NTIvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL218bnxvLyApOwogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIHJlZ0V4cE1vdmllRmljdGlvbiApICkgewogICAgICAgICAgICAgICAgICAgICAgICBnZW5yZSA9ICJmaWt0aW9uIjsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmVDYXRlZ29yeSA9IDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIGdlbnJlQ2F0ZWdvcnkgPT09IDAgKSB7CiAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkgPT09ICJhIiB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSA9PT0gInIiIHx8IHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApID09PSAicCIgKSB7CiAgICAgICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvNjVbMjRdLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC9tfG58by8gKTsKICAgICAgICAgICAgICAgICAgICBpZiAoICF2YWx1ZS5tYXRjaCggcmVnRXhwRmljdGlvbiApICYmICF2YWx1ZS5tYXRjaCggL05ZIFRJVEVMfFVkZW4ga2xhc3NlbVx1MDBFNnJrZS8gKSAmJiB2YWx1ZSAhPT0gIiIgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSAibm9uZmlrdGlvbiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSA9PT0gIm0iICkgewogICAgICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzY1Mi8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlKCAvbXxufG8vICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhdmFsdWUubWF0Y2goIHJlZ0V4cE1vdmllRmljdGlvbiApICYmICF2YWx1ZS5tYXRjaCggL05ZIFRJVEVMfFVkZW4ga2xhc3NlbVx1MDBFNnJrZS8gKSAmJiB2YWx1ZSAhPT0gIiIgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSAibm9uZmlrdGlvbiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nIEFkbWluRGF0YS5jcmVhdGVHZW5yZSBtZXRob2QiICk7CgogICAgICAgIHJldHVybiBnZW5yZTsKCiAgICB9OwoKICAgIHJldHVybiB0aGF0OwoKfSggKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVVuaXQgdGVzdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmNyZWF0ZUFkbWluSW5mbyIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXJGb3JtYXQgPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4NzA5NzAiLAogICAgICAgICJmb3JtYXQiOiAiYmFzaXMiCiAgICB9CiAgICBpZGVudGlmaWVyID0gIjEgMjM0IDU2NyA4IjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJyIiwgIm4iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJuNTUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjIwMTMwNTIzIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4NzA5NzAiLAogICAgICAgICJmb3JtYXQiOiAiYmFzaXMiLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAibm9uZSIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIyMDEzLTA1LTIzIgogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIG9iamVjdCBmb3IgYmFzaXMgcmVjb3JkIiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkluZm8oIHN1Ym1pdHRlckZvcm1hdCwgaWRlbnRpZmllciwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyRm9ybWF0ID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiNzYxNTAwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciCiAgICB9CiAgICBpZGVudGlmaWVyID0gIjEgMjM0IDU2NyA4IjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI3NjE1MDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJyIiwgImQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjc2MTUwMCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiB0cnVlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicHVibGljIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSBvYmplY3QgZm9yIHB1YmxpYyBkZWxldGUgcmVjb3JkIiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkluZm8oIHN1Ym1pdHRlckZvcm1hdCwgaWRlbnRpZmllciwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyRm9ybWF0OwogICAgZGVsZXRlIHRoaXMuaWRlbnRpZmllcjsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwiLCBmdW5jdGlvbiggKSB7CgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODcwOTcwIiwKICAgICAgICAiZm9ybWF0IjogImJhc2lzIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAibm9uZSIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoJCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+YWN0aXZlPC9yZWNvcmRTdGF0dXM+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5ub25lPC9saWJyYXJ5VHlwZT4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPnBoeXNpY2FsPC9hY2Nlc3NUeXBlPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtYmFzaXM8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCQogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGRhdGFXZWxsQ3VzdG9tZXI+dHJ1ZTwvZGF0YVdlbGxDdXN0b21lcj4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPnBoeXNpY2FsPC9hY2Nlc3NUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjgzMDA2MC1rYXRhbG9nPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsJCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIC0gbWV0cm9wb2wgc3VibGlicmFyeSwgUEggY2FzZSAxIiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwoKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogInJlc2VhcmNoIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiBmYWxzZSwKICAgICAgICAib25saW5lQWNjZXNzIjogIiIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMDYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5yZXNlYXJjaDwvbGlicmFyeVR5cGU+ICk7CQkJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMDYwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjg3MDk3MC1mb3JzazwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgMiIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8ZGF0YVdlbGxDdXN0b21lcj50cnVlPC9kYXRhV2VsbEN1c3RvbWVyPik7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAwNjAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgMyIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgkKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGRhdGFXZWxsQ3VzdG9tZXI+dHJ1ZTwvZGF0YVdlbGxDdXN0b21lcj4pOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMDYwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWZvcnNrPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsJCQoJCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgLSBtZXRyb3BvbCBzdWJsaWJyYXJ5LCBQSCBjYXNlIDQiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInh4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApCgkKCW91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5kZWxldGU8L3JlY29yZFN0YXR1cz4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWZvcnNrPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsKCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIC0gbWV0cm9wb2wgc3VibGlicmFyeSwgUEggY2FzZSA1IiwgJ0FkbWluRGF0YS5jcmVhdGVBZG1pbkRhdGFYbWwoIGFkbWluSW5mbywgZGthYm0sIHJlY29yZCApOycsIG91dHB1dCApOwogICAgICAgIAoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInh4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRhbm1hcmN4Y2hhbmdlPC9pbmRleGluZ0FsaWFzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+cGh5c2ljYWw8L2FjY2Vzc1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODcwOTcwLWZvcnNrPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsJCQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgNiIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKICAgIAoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPnJlc2VhcmNoPC9saWJyYXJ5VHlwZT4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPm9ubGluZTwvYWNjZXNzVHlwZT4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMDYwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgNyIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMDYwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+b25saW5lPC9hY2Nlc3NUeXBlPiApOwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAwNjAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7ICAgCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtZm9yc2s8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOyAgIAoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIG1ldHJvcG9sIHN1YmxpYnJhcnksIFBIIGNhc2UgOCIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMTkwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDE5MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgkKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAxOTAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIFBIIGxpYnJhcnksIFBIIGNhc2UgMTMiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDE5MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAicmVzZWFyY2giLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInh4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzAxOTAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44MzAxOTAta2F0YWxvZzwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtZm9yc2s8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwkKCQkKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIFBIIGxpYnJhcnksIFBIIGNhc2UgMTQiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMTkwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5vbmxpbmU8L2FjY2Vzc1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMTkwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIFBIIGxpYnJhcnksIFBIIGNhc2UgMTUiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODMwMTkwIiwKICAgICAgICAiZm9ybWF0IjogImthdGFsb2ciLAogICAgICAgICJsaWJyYXJ5VHlwZSI6ICJyZXNlYXJjaCIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgIm9ubGluZUFjY2VzcyI6ICIiLAogICAgICAgICJjcmVhdGlvbkRhdGUiOiAiIgogICAgfQoKICAgIGRrYWJtID0gPHJlY29yZC8+OwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxkYXRhV2VsbEN1c3RvbWVyPnRydWU8L2RhdGFXZWxsQ3VzdG9tZXI+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+cmVzZWFyY2g8L2xpYnJhcnlUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5vbmxpbmU8L2FjY2Vzc1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8d29ya1R5cGU+bm9uZTwvd29ya1R5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8Y29sbGVjdGlvbklkZW50aWZpZXI+ODMwMTkwLWthdGFsb2c8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjg3MDk3MC1mb3JzazwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAtIFBIIGxpYnJhcnksIFBIIGNhc2UgMTYiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgoKICAgIGFkbWluSW5mbyA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjg3MDk3MCIsCiAgICAgICAgImZvcm1hdCI6ICJiYXNpcyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogIm5vbmUiLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAiIiwKICAgICAgICAiY3JlYXRpb25EYXRlIjogIiIKICAgIH0KCiAgICBka2FibSA9IDxyZWNvcmQvPjsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8YWRtaW5EYXRhLz47CglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxyZWNvcmRTdGF0dXM+YWN0aXZlPC9yZWNvcmRTdGF0dXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8bGlicmFyeVR5cGU+bm9uZTwvbGlicmFyeVR5cGU+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8aW5kZXhpbmdBbGlhcz5kYW5tYXJjeGNoYW5nZTwvaW5kZXhpbmdBbGlhcz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxhY2Nlc3NUeXBlPm9ubGluZTwvYWNjZXNzVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj44NzA5NzAtYmFzaXM8L2NvbGxlY3Rpb25JZGVudGlmaWVyPiApOwkKCiAgICBBc3NlcnQuZXF1YWwoICJDcmVhdGUgYWRtaW5pc3RyYXRpdmUgZGF0YSB4bWwgKG9ubGluZSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSwgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiODcwOTcwIiwKICAgICAgICAiZm9ybWF0IjogImJhc2lzIiwKICAgICAgICAibGlicmFyeVR5cGUiOiAibm9uZSIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIm4wMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiMDAwMDExIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCQogICAgb3V0cHV0ID0gPGFkbWluRGF0YS8+OwoJb3V0cHV0LmFwcGVuZENoaWxkKCA8cmVjb3JkU3RhdHVzPmFjdGl2ZTwvcmVjb3JkU3RhdHVzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGxpYnJhcnlUeXBlPm5vbmU8L2xpYnJhcnlUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGluZGV4aW5nQWxpYXM+ZGFubWFyY3hjaGFuZ2U8L2luZGV4aW5nQWxpYXM+ICk7CQoJb3V0cHV0LmFwcGVuZENoaWxkKCA8YWNjZXNzVHlwZT5waHlzaWNhbDwvYWNjZXNzVHlwZT4gKTsKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+b25saW5lPC9hY2Nlc3NUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPHdvcmtUeXBlPm5vbmU8L3dvcmtUeXBlPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGNvbGxlY3Rpb25JZGVudGlmaWVyPjg3MDk3MC1iYXNpczwvY29sbGVjdGlvbklkZW50aWZpZXI+ICk7CQoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBhZG1pbmlzdHJhdGl2ZSBkYXRhIHhtbCAoaW5mb21lZGlhKSIsICdBZG1pbkRhdGEuY3JlYXRlQWRtaW5EYXRhWG1sKCBhZG1pbkluZm8sIGRrYWJtLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCgogICAgYWRtaW5JbmZvID0gewogICAgICAgICJzdWJtaXR0ZXIiOiAiMTUwMDE1IiwKICAgICAgICAiZm9ybWF0IjogImZvcmxhZyIsCiAgICAgICAgImxpYnJhcnlUeXBlIjogIm5vbmUiLAogICAgICAgICJpc0RlbGV0ZVJlY29yZCI6IGZhbHNlLAogICAgICAgICJvbmxpbmVBY2Nlc3MiOiAibm90IGF2YWlsYWJsZSIsCiAgICAgICAgImNyZWF0aW9uRGF0ZSI6ICIiCiAgICB9CgogICAgZGthYm0gPSA8cmVjb3JkLz47CgkKICAgIG91dHB1dCA9IDxhZG1pbkRhdGEvPjsKCW91dHB1dC5hcHBlbmRDaGlsZCggPHJlY29yZFN0YXR1cz5hY3RpdmU8L3JlY29yZFN0YXR1cz4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxsaWJyYXJ5VHlwZT5ub25lPC9saWJyYXJ5VHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxpbmRleGluZ0FsaWFzPmRrYWJtPC9pbmRleGluZ0FsaWFzPiApOwkKCW91dHB1dC5hcHBlbmRDaGlsZCggPGFjY2Vzc1R5cGU+bm9uZTwvYWNjZXNzVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDx3b3JrVHlwZT5ub25lPC93b3JrVHlwZT4gKTsJCglvdXRwdXQuYXBwZW5kQ2hpbGQoIDxjb2xsZWN0aW9uSWRlbnRpZmllcj4xNTAwMTUtZm9ybGFnPC9jb2xsZWN0aW9uSWRlbnRpZmllcj4gKTsJCgogICAgQXNzZXJ0LmVxdWFsKCAiQ3JlYXRlIGFkbWluaXN0cmF0aXZlIGRhdGEgeG1sIChhY2Nlc3NUeXBlIGlzICdub25lJykiLCAnQWRtaW5EYXRhLmNyZWF0ZUFkbWluRGF0YVhtbCggYWRtaW5JbmZvLCBka2FibSApOycsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLmFkbWluSW5mbwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZGthYm07CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciIsIGZ1bmN0aW9uKCApIHsKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UKICAgIH0KCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEgMjM0IDU2NyA4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAic3VibWl0dGVyIjogIjgzMDA2MCIsCiAgICAgICAgImZvcm1hdCI6ICJrYXRhbG9nIiwKICAgICAgICAiaXNEZWxldGVSZWNvcmQiOiB0cnVlCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiTW9kaWZ5IGFkbWluaXN0cmF0aXZlIGRhdGEgb2JqZWN0IGZvciBQSCByZWNvcmQgLSBjcmVhdGUgZGVsZXRlIHJlY29yZCIsICdBZG1pbkRhdGEubW9kaWZ5QWRtaW5JbmZvRm9yRGF0YVdlbGxDdXN0b21lciggYWRtaW5JbmZvLCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBhZG1pbkluZm8gPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCgkJImRhdGFXZWxsQ3VzdG9tZXIiOiB0cnVlCgkJCiAgICB9CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMDYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInN1Ym1pdHRlciI6ICI4MzAwNjAiLAogICAgICAgICJmb3JtYXQiOiAia2F0YWxvZyIsCiAgICAgICAgImlzRGVsZXRlUmVjb3JkIjogZmFsc2UsCgkJImRhdGFXZWxsQ3VzdG9tZXIiOiB0cnVlCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiTW9kaWZ5IGFkbWluaXN0cmF0aXZlIGRhdGEgb2JqZWN0IGZvciBQSCByZWNvcmQgLSBkbyBub3QgY3JlYXRlIGRlbGV0ZSByZWNvcmQiLCAnQWRtaW5EYXRhLm1vZGlmeUFkbWluSW5mb0ZvckRhdGFXZWxsQ3VzdG9tZXIoIGFkbWluSW5mbywgcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuYWRtaW5JbmZvOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CQkKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY2xlYW5NYXRlcmlhbFR5cGUiLCBmdW5jdGlvbiggKSB7CgogICAgbWF0ZXJpYWxUeXBlID0gIlBsYXlzdGF0aW9uIDQiOwogICAgb3V0cHV0ID0gIlBsYXlzdGF0aW9uIjsKICAgIAogICAgQXNzZXJ0LmVxdWFsKCAiQ2xlYW4gbWF0ZXJpYWx0eXBlIChwbGF5c3RhdGlvbikiLCAnQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlKCBtYXRlcmlhbFR5cGUgKScsIG91dHB1dCApOwoKICAgIG1hdGVyaWFsVHlwZSA9ICJYYm94IE9uZSI7CiAgICBvdXRwdXQgPSAiWGJveCI7CiAgICAKICAgIEFzc2VydC5lcXVhbCggIkNsZWFuIG1hdGVyaWFsdHlwZSAoeGJveCkiLCAnQWRtaW5EYXRhLmNsZWFuTWF0ZXJpYWxUeXBlKCBtYXRlcmlhbFR5cGUgKScsIG91dHB1dCApOwoKICAgIG1hdGVyaWFsVHlwZSA9ICJXaWkgVSI7CiAgICBvdXRwdXQgPSAiV2lpIjsKICAgIAogICAgQXNzZXJ0LmVxdWFsKCAiQ2xlYW4gbWF0ZXJpYWx0eXBlICh3aWkpIiwgJ0FkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSggbWF0ZXJpYWxUeXBlICknLCBvdXRwdXQgKTsKCiAgICBtYXRlcmlhbFR5cGUgPSAiR3JhcGhpYyBub3ZlbCI7CiAgICBvdXRwdXQgPSAiR3JhcGhpYyBub3ZlbCI7CiAgICAKICAgIEFzc2VydC5lcXVhbCggIkNsZWFuIG1hdGVyaWFsdHlwZSAobm8gY2xlYW5pbmcpIiwgJ0FkbWluRGF0YS5jbGVhbk1hdGVyaWFsVHlwZSggbWF0ZXJpYWxUeXBlICknLCBvdXRwdXQgKTsKICAgIAogICAgZGVsZXRlIHRoaXMubWF0ZXJpYWxUeXBlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuZ2V0TGlicmFyeVR5cGUiLCBmdW5jdGlvbiggKSB7CgogICAgc3VibWl0dGVyID0gIjcxMDEwMCI7CiAgICBvdXRwdXQgPSAicHVibGljIjsKICAgIAogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGxpYnJhcnkgdHlwZSAtIHB1YmxpYyBsaWJyYXJ5IiwgJ0FkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZSggc3VibWl0dGVyICknLCBvdXRwdXQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiNjIxNTAwIjsKICAgIG91dHB1dCA9ICJzY2hvb2wiOwogICAgCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbGlicmFyeSB0eXBlIC0gc2Nob29sIGxpYnJhcnkiLCAnQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlKCBzdWJtaXR0ZXIgKScsIG91dHB1dCApOwoKICAgIHN1Ym1pdHRlciA9ICI4MTAwMTAiOwogICAgb3V0cHV0ID0gInJlc2VhcmNoIjsKICAgIAogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGxpYnJhcnkgdHlwZSAtIHJlc2VhcmNoIGxpYnJhcnkiLCAnQWRtaW5EYXRhLmdldExpYnJhcnlUeXBlKCBzdWJtaXR0ZXIgKScsIG91dHB1dCApOwoKICAgIHN1Ym1pdHRlciA9ICIxNTkwMDQiOwogICAgb3V0cHV0ID0gIm5vbmUiOwogICAgCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbGlicmFyeSB0eXBlIC0gbm8gbGlicmFyeSB0eXBlIiwgJ0FkbWluRGF0YS5nZXRMaWJyYXJ5VHlwZSggc3VibWl0dGVyICknLCBvdXRwdXQgKTsKICAgIAogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlIiwgZnVuY3Rpb24oICkgewoKICAgIHN1Ym1pdHRlciA9ICI4NzA5NzAiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAibjU1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIyMDE0MDIyOCIgKTsgICAgCiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgCiAgICBvdXRwdXQgPSAiMjAxNC0wMi0yOCI7CiAgIAogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IGNyZWF0aW9uRGF0ZSBmcm9tIG41NSIsICdBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlKCBzdWJtaXR0ZXIsIHJlY29yZCApJywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyID0gIjE1MDAwOCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgIjIwMTQwMjI4IiApOyAgICAKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICAKICAgIG91dHB1dCA9ICIyMDE0LTAyLTI4IjsKICAgCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgY3JlYXRpb25EYXRlIGZyb20gc3VibWl0dGVyIDE1MDAwOCIsICdBZG1pbkRhdGEuZ2V0Q3JlYXRpb25EYXRlKCBzdWJtaXR0ZXIsIHJlY29yZCApJywgb3V0cHV0ICk7CgogICAgc3VibWl0dGVyID0gIjgzMDE5MCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJkIiwgIjIwMTQwMjI4IiApOyAgICAKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBkYXRhYmFzZSA9IHVuZGVmaW5lZDsKICAgIAogICAgb3V0cHV0ID0gIjIwMTQtMDItMjgiOwogICAKICAgIEFzc2VydC5lcXVhbCggIkdldCBjcmVhdGlvbkRhdGUgZnJvbSBzdWJtaXR0ZXIgMTUwMDA4IiwgJ0FkbWluRGF0YS5nZXRDcmVhdGlvbkRhdGUoIHN1Ym1pdHRlciwgcmVjb3JkICknLCBvdXRwdXQgKTsKICAgIAogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCIsIGZ1bmN0aW9uKCApIHsKCglhZG1pbkluZm8gID0gewoJCSJzdWJtaXR0ZXIiOiAiMTUwMDE4IiwKCQkiZm9ybWF0IjogImFydGlrbGVyIgoJfTsKCiAgICBvdXRwdXQgPSA8aW5kZXhpbmdBbGlhcz5ka2FibTwvaW5kZXhpbmdBbGlhcz47CgogICAgQXNzZXJ0LmVxdWFsKCAiSW5kZXhpbmcgYWxpYXMgLSBhcnRpa2VsIiwgJ0FkbWluRGF0YS5jcmVhdGVJbmRleGluZ0FsaWFzWG1sKCBhZG1pbkluZm8gKScsIG91dHB1dCApOwoKCWFkbWluSW5mbyAgPSB7CgkJInN1Ym1pdHRlciI6ICI4NzA5NzYiLAoJCSJmb3JtYXQiOiAiYW5tZWxkIgoJfTsKCiAgICBvdXRwdXQgPSA8aW5kZXhpbmdBbGlhcz5yZXZpZXc8L2luZGV4aW5nQWxpYXM+OwoKICAgIEFzc2VydC5lcXVhbCggIkluZGV4aW5nIGFsaWFzIC0gYW5tZWxkZWxzZSIsICdBZG1pbkRhdGEuY3JlYXRlSW5kZXhpbmdBbGlhc1htbCggYWRtaW5JbmZvICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5hZG1pbkluZm87CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzAwNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgcmVzdWx0ID0gdHJ1ZTsKCiAgICBBc3NlcnQuZXF1YWwoICJIYXMgTWV0cm9wb2wgaG9sZGluZ3MiLCAnQWRtaW5EYXRhLmNoZWNrSG9sZGluZ3MoIHJlY29yZCwgODMwMDYwICknLCByZXN1bHQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjg2MDkwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODYwOTAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIHJlc3VsdCA9IGZhbHNlOwoKICAgIEFzc2VydC5lcXVhbCggIkhhcyBubyBNZXRyb3BvbCBob2xkaW5ncyIsICdBZG1pbkRhdGEuY2hlY2tIb2xkaW5ncyggcmVjb3JkLCA4MzAwNjAgKScsIHJlc3VsdCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMucmVzdWx0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIHR5cGUgPSAiZGF0YVdlbGxDdXN0b21lciI7CiAgICByZXN1bHQgPSB0cnVlOwoKICAgIEFzc2VydC5lcXVhbCggIklzIGRhdGEgd2VsbCBjdXN0b21lciIsICdBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgdHlwZSApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjgxMDAxMCI7CiAgICB0eXBlID0gImRhdGFXZWxsQ3VzdG9tZXIiOwogICAgcmVzdWx0ID0gZmFsc2U7CgogICAgQXNzZXJ0LmVxdWFsKCAiSXMgbm90IGRhdGEgd2VsbCBjdXN0b21lciIsICdBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgdHlwZSApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjE1MDAzMSI7CiAgICB0eXBlID0gIm5vbkZpY3Rpb25TdWJtaXR0ZXIiOwogICAgcmVzdWx0ID0gdHJ1ZTsKCiAgICBBc3NlcnQuZXF1YWwoICJJcyBub24gZmljdGlvbiBzdWJtaXR0ZXIiLCAnQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsIHR5cGUgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI3MTAxMDAiOwogICAgdHlwZSA9ICJwdWJsaWNMaWJyYXJ5IjsKICAgIHJlc3VsdCA9IHRydWU7CgogICAgQXNzZXJ0LmVxdWFsKCAiSXMgcHVibGljIGxpYnJhcnkgKHRydWUpIiwgJ0FkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCB0eXBlICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODEwMDEwIjsKICAgIHR5cGUgPSAicHVibGljTGlicmFyeSI7CiAgICByZXN1bHQgPSBmYWxzZTsKCiAgICBBc3NlcnQuZXF1YWwoICJJcyBwdWJsaWMgbGlicmFyeSAoZmFsc2UpIiwgJ0FkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCB0eXBlICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiMjgwMDAxIjsKICAgIHR5cGUgPSAic2Nob29sTGlicmFyeSI7CiAgICByZXN1bHQgPSB0cnVlOwoKICAgIEFzc2VydC5lcXVhbCggIklzIHNjaG9vbCBsaWJyYXJ5ICh0cnVlKSIsICdBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgdHlwZSApJywgcmVzdWx0ICk7CgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMudHlwZTsKICAgIGRlbGV0ZSB0aGlzLnJlc3VsdDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcxIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAicGh5c2ljYWwiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IEFjY2VzcyBUeXBlIHBoeXNpY2FsIiwgJ0FkbWluRGF0YS5nZXRBY2Nlc3NUeXBlKCBzdWJtaXR0ZXIsIG9ubGluZUFjY2VzcywgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiODcwOTcxIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4ZSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAib25saW5lIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBBY2Nlc3MgVHlwZSBvbmxpbmUiLCAnQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUoIHN1Ym1pdHRlciwgb25saW5lQWNjZXNzLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4NzA5NzEiOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInhlIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4eCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAicGh5c2ljYWwiLCAib25saW5lIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBBY2Nlc3MgVHlwZSBwaHlzaWNhbCBhbmQgb25saW5lIiwgJ0FkbWluRGF0YS5nZXRBY2Nlc3NUeXBlKCBzdWJtaXR0ZXIsIG9ubGluZUFjY2VzcywgcmVjb3JkICknLCByZXN1bHQgKTsKCiAgICBzdWJtaXR0ZXIgPSAiMTUwMDEyIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKCiAgICByZXN1bHQgPSBbICJvbmxpbmUiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IEFjY2VzcyBUeXBlIG9ubGluZSBiYXNlZCBvbiBzdWJtaXR0ZXIiLCAnQWRtaW5EYXRhLmdldEFjY2Vzc1R5cGUoIHN1Ym1pdHRlciwgb25saW5lQWNjZXNzLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4NzA5NzEiOwogICAgb25saW5lQWNjZXNzID0gIm5vdCBhdmFpbGFibGUiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4ZSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBBY2Nlc3MgVHlwZSAobmVpdGhlciBwaHlzaWNhbCBub3Igb25saW5lKSIsICdBZG1pbkRhdGEuZ2V0QWNjZXNzVHlwZSggc3VibWl0dGVyLCBvbmxpbmVBY2Nlc3MsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgZGVsZXRlIHRoaXMuc3VibWl0dGVyOwogICAgZGVsZXRlIHRoaXMub25saW5lQWNjZXNzOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLnNjaG9vbEJyYW5jaFZJUENvZGUiLCBmdW5jdGlvbiggKSB7CgogICAgYnJhbmNoTmFtZSA9ICI2NjE1MDAtYmFuIjsKICAgIHJlc3VsdCA9ICIzMTAwMTUiOwoKICAgIEFzc2VydC5lcXVhbCggIkZpbmQgc2Nob29sIEJyYW5jaCBWSVAgQ29kZSIsICdBZG1pbkRhdGEuc2Nob29sQnJhbmNoVklQQ29kZSggYnJhbmNoTmFtZSApJywgcmVzdWx0ICk7CgogICAgZGVsZXRlIHRoaXMuYnJhbmNoTmFtZTsKICAgIGRlbGV0ZSB0aGlzLnJlc3VsdDsKICAgIAp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclNjaG9vbExpYnJhcmllcyIsIGZ1bmN0aW9uKCApIHsKCiAgICBzdWJtaXR0ZXIgPSAiNjYxNTAwIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYmFuIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJkYWciICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwogICAgcmVzdWx0ID0gWyAiMzAwNjE1LWthdGFsb2ciLCAiMzEwMDE1LWthdGFsb2ciLCAiMzEwMDA3LWthdGFsb2ciIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IENvbGxlY3Rpb25JZGVudGlmaWVycyBmb3Igc2Nob29sIGxpYnJhcmllcyIsICdBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU2Nob29sTGlicmFyaWVzKCBzdWJtaXR0ZXIsIHJlY29yZCwgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCiAgICBkZWxldGUgdGhpcy5zdWJtaXR0ZXI7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5jb2xsZWN0aW9uSWRlbnRpZmllcnM7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7CiAgICAKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkFkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDMyIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieCIsICJGU0YyMDEyMDciICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTQjIwMTIwNyIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGNvbGxlY3Rpb25JZGVudGlmaWVycyA9IFsgXTsKICAgIHJlc3VsdCA9IFsgIjE1MDAyMS1mamVybiIsICIxNTAwMjEtYmlibGlvdGVrIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkdldCBtb3JlIGNvbGxlY3Rpb24gaWRlbnRpZmllcnMgZnJvbSA4NzA5NzAgcmVjb3JkcyAoRmlsbXN0cmliZW4pIiwgJ0FkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAoIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKScsIHJlc3VsdCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjUwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInUiLCAiaHR0cDovL2VrdXJzZXIubnUva3Vyc3VzLzQ0IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyBdOwogICAgcmVzdWx0ID0gWyAiMTUwMDUyLWVrdXJzZXIiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IG1vcmUgY29sbGVjdGlvbiBpZGVudGlmaWVycyBmcm9tIDg3MDk3MCByZWNvcmRzIChFLWt1cnNlciAxKSIsICdBZG1pbkRhdGEuZ2V0RXh0cmFDb2xsZWN0aW9uSWRlbnRpZmllcnNGcm9tODcwOTcwKCByZWNvcmQsIG9ubGluZUFjY2VzcywgY29sbGVjdGlvbklkZW50aWZpZXJzICknLCByZXN1bHQgKTsKCgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiODU2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAidSIsICJodHRwOi8vZWt1cnNlci5udS9rdXJzdXMvNDQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBbIF07CiAgICByZXN1bHQgPSBbICIxNTAwNTItZWt1cnNlciIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJHZXQgbW9yZSBjb2xsZWN0aW9uIGlkZW50aWZpZXJzIGZyb20gODcwOTcwIHJlY29yZHMgKEUta3Vyc2VyIDIpIiwgJ0FkbWluRGF0YS5nZXRFeHRyYUNvbGxlY3Rpb25JZGVudGlmaWVyc0Zyb204NzA5NzAoIHJlY29yZCwgb25saW5lQWNjZXNzLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKScsIHJlc3VsdCApOwoKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI1MDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ1IiwgImh0dHA6Ly93d3cudHVydGVvcmkuZGsvbW9kL2JpYmxvZ2luL2luZGV4LnBocD9jb3Vyc2U9MTAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBbIF07CiAgICByZXN1bHQgPSBbICIxNTAwNTMtdHVydGVvcmkiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiR2V0IG1vcmUgY29sbGVjdGlvbiBpZGVudGlmaWVycyBmcm9tIDg3MDk3MCByZWNvcmRzIChUdXJ0ZW9yaSkiLCAnQWRtaW5EYXRhLmdldEV4dHJhQ29sbGVjdGlvbklkZW50aWZpZXJzRnJvbTg3MDk3MCggcmVjb3JkLCBvbmxpbmVBY2Nlc3MsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMub25saW5lQWNjZXNzOwogICAgZGVsZXRlIHRoaXMuY29sbGVjdGlvbklkZW50aWZpZXJzOwogICAgZGVsZXRlIHRoaXMucmVzdWx0OwogICAgCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwIiwgZnVuY3Rpb24oICkgewoKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzAwNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyAgXTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgZnJvbSBzdWJtaXR0ZXIgODMwMDYwIChQSCBjYXNlIDQpIiwgJ0FkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAoIHN1Ym1pdHRlciwgZm9ybWF0LCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgoKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyAgXTsKCiAgICByZXN1bHQgPSBbICI4NzA5NzAtZm9yc2siIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIGZyb20gc3VibWl0dGVyIDgzMDA2MCAoUEggc3ViIGxpYnJhcnkgLSBub3QgaW4gYmlibGlvdGVrLmRrLCBQSCBjYXNlIDUpIiwgJ0FkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAoIHN1Ym1pdHRlciwgZm9ybWF0LCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgoKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzAwNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMTM2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBjb2xsZWN0aW9uSWRlbnRpZmllcnMgPSBbICBdOwoKICAgIHJlc3VsdCA9IFsgIjgzMDA2MC1rYXRhbG9nIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciBmcm9tIHN1Ym1pdHRlciA4MzAwNjAgKFBIIGxpYnJhcnkgYW5kIHN1YiBsaWJyYXJ5IC0gbm90IGluIGJpYmxpb3Rlay5kaywgUEggY2FzZSAxKSIsICdBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwKCBzdWJtaXR0ZXIsIGZvcm1hdCwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyAgXTsKCiAgICByZXN1bHQgPSBbICI4NzA5NzAtZm9yc2siIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIGZyb20gc3VibWl0dGVyIDgzMDA2MCAoUEggc3ViIGxpYnJhcnksICwgUEggY2FzZSA2KSIsICdBZG1pbkRhdGEuZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwKCBzdWJtaXR0ZXIsIGZvcm1hdCwgcmVjb3JkLCBjb2xsZWN0aW9uSWRlbnRpZmllcnMgKScsIHJlc3VsdCApOwoKCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICJzMTEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgY29sbGVjdGlvbklkZW50aWZpZXJzID0gWyAgXTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgZnJvbSBzdWJtaXR0ZXIgODMwMDYwIChQSCBvbmxpbmUgcmVjb3JkIHdpdGggbm8gaG9sZGluZ3MpIiwgJ0FkbWluRGF0YS5nZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAoIHN1Ym1pdHRlciwgZm9ybWF0LCByZWNvcmQsIGNvbGxlY3Rpb25JZGVudGlmaWVycyApJywgcmVzdWx0ICk7CgoKICAgIGRlbGV0ZSB0aGlzLnN1Ym1pdHRlcjsKICAgIGRlbGV0ZSB0aGlzLmZvcm1hdDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuY29sbGVjdGlvbklkZW50aWZpZXJzOwogICAgZGVsZXRlIHRoaXMucmVzdWx0OwogICAgCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzIiwgZnVuY3Rpb24oICkgewoKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAiODMwMDYwLWthdGFsb2ciLCAiODcwOTcwLWZvcnNrIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAocmVzZWFyY2ggbGlicmFyeSwgUEggY2FzZSA0KSIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCi8vdGhlIG5leHQgdGVzdCBpcyBhbHNvIGNvdmVyZWQgaW4gdW5pdHRlc3QgZm9yIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25JZGVudGlmaWVyc0ZvclN1Ym1pdHRlcjgzMDA2MAogICAgc3VibWl0dGVyID0gIjgzMDA2MCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGxpYnJhcnlUeXBlID0gInJlc2VhcmNoIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICByZXN1bHQgPSBbICI4NzA5NzAtZm9yc2siIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIChQSCBzdWIgbGlicmFyeSAtIG5vdCBpbiBiaWJsaW90ZWsuZGssIFBIIGNhc2UgNSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgovL3RoZSBuZXh0IHRlc3QgaXMgYWxzbyBjb3ZlcmVkIGluIHVuaXR0ZXN0IGZvciBmdW5jdGlvbiBnZXRDb2xsZWN0aW9uSWRlbnRpZmllcnNGb3JTdWJtaXR0ZXI4MzAwNjAKICAgIHN1Ym1pdHRlciA9ICI4MzAwNjAiOwogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwOTYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ6IiwgIjgzMDA2MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMxMzYwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICByZXN1bHQgPSBbICI4MzAwNjAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKFBIIGxpYnJhcnkgYW5kIHN1YiBsaWJyYXJ5IC0gbm90IGluIGJpYmxpb3Rlay5kaywgLCBQSCBjYXNlIDEpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKLy90aGUgbmV4dCB0ZXN0IGlzIGFsc28gY292ZXJlZCBpbiB1bml0dGVzdCBmb3IgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAicmVzZWFyY2giOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDk2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieiIsICI4MzEzNjAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgIjg3MDk3MC1mb3JzayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKFBIIHN1YiBsaWJyYXJ5LCAsIFBIIGNhc2UgNikiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjgzMDM4MCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGxpYnJhcnlUeXBlID0gInJlc2VhcmNoIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA5NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiODMwMzgwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiczExIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICByZXN1bHQgPSBbICI4MzAzODAta2F0YWxvZyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKFBIIC0gbm90IGluIGJpYmxpb3Rlay5kaywgLCBQSCBjYXNlIDMpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKLy90aGUgbmV4dCB0ZXN0IGlzIGFsc28gY292ZXJlZCBpbiB1bml0dGVzdCBmb3IgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbklkZW50aWZpZXJzRm9yU3VibWl0dGVyODMwMDYwCiAgICBzdWJtaXR0ZXIgPSAiODMwMDYwIjsKICAgIGZvcm1hdCA9ICJrYXRhbG9nIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAicmVzZWFyY2giOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICJ4ZSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggInMxMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgcmVzdWx0ID0gWyAiODMwMDYwLWthdGFsb2ciIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyICggUEggb25saW5lIHJlY29yZCB3aXRoIG5vIGhvbGRpbmdzKSAsIFBIIGNhc2UgNyIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCgogICAgc3VibWl0dGVyID0gIjgzMDA2MCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBvbmxpbmVBY2Nlc3MgPSAiIjsKICAgIGxpYnJhcnlUeXBlID0gInJlc2VhcmNoIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieGUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIHJlc3VsdCA9IFsgIjgzMDA2MC1rYXRhbG9nIiwgIjg3MDk3MC1mb3JzayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKFBIIG9ubGluZSByZWNvcmQgd2l0aCBubyBob2xkaW5ncyBhbmQgbm8gUzExKSAsIFBIIGNhc2UgOCIsICdBZG1pbkRhdGEuY3JlYXRlQ29sbGVjdGlvbklkZW50aWZpZXJzKCBzdWJtaXR0ZXIsIGZvcm1hdCwgb25saW5lQWNjZXNzLCBsaWJyYXJ5VHlwZSwgcmVjb3JkICknLCByZXN1bHQgKTsKCgogICAgc3VibWl0dGVyID0gIjg3MDk3MCI7CiAgICBmb3JtYXQgPSAiYmFzaXMiOwogICAgb25saW5lQWNjZXNzID0gIiI7CiAgICBsaWJyYXJ5VHlwZSA9ICJub25lIjsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgcmVzdWx0ID0gWyAiODcwOTcwLWJhc2lzIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoREJDIDEpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4NzA5NzAiOwogICAgZm9ybWF0ID0gImJhc2lzIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAibm9uZSI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDMyIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieCIsICJGU0YyMDEyMDciICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTRiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICByZXN1bHQgPSBbICI4NzA5NzAtYmFzaXMiLCAiMTUwMDIxLWZqZXJuIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkNvbGxlY3Rpb24gSWRlbnRpZmllciAoREJDIDIpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIHN1Ym1pdHRlciA9ICI4NzA5NzAiOwogICAgZm9ybWF0ID0gImJhc2lzIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgbGlicmFyeVR5cGUgPSAibm9uZSI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDMyIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieCIsICJGU0YyMDEyMDciICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTQjIwMTIwNyIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICByZXN1bHQgPSBbICI4NzA5NzAtYmFzaXMiLCAiMTUwMDIxLWZqZXJuIiwgIjE1MDAyMS1iaWJsaW90ZWsiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyIChEQkMgMykiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MSI7CiAgICBmb3JtYXQgPSAiZmFrdGFsaW5rIjsKICAgIG9ubGluZUFjY2VzcyA9ICJub3QgYXZhaWxhYmxlIjsKICAgIHJlc3VsdCA9IFsgIjg3MDk3MC1iYXNpcyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKEZha3RhbGluayBhcyBuYXRpb25hbCBiaWJsaW9ncmFwaHkpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MpJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjg3MDk3MSI7CiAgICBmb3JtYXQgPSAiZmFrdGFsaW5rIjsKICAgIG9ubGluZUFjY2VzcyA9ICIiOwogICAgcmVzdWx0ID0gWyAiODcwOTcxLWZha3RhbGluayIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKEZha3RhbGluayBhcyBGYWt0YWxpbmspIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MpJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjEyNTYwMCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBsaWJyYXJ5VHlwZSA9ICJyZXNlYXJjaCI7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICIxMjU2MDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgcmVzdWx0ID0gWyAiMTI1NjAwLWthdGFsb2ciLCAiODcwOTcwLXVkbGFuZCIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDb2xsZWN0aW9uIElkZW50aWZpZXIgKDg3MDk3MC11ZGxhbmQgMSkiLCAnQWRtaW5EYXRhLmNyZWF0ZUNvbGxlY3Rpb25JZGVudGlmaWVycyggc3VibWl0dGVyLCBmb3JtYXQsIG9ubGluZUFjY2VzcywgbGlicmFyeVR5cGUsIHJlY29yZCApJywgcmVzdWx0ICk7CgogICAgc3VibWl0dGVyID0gIjcwMDQwMCI7CiAgICBmb3JtYXQgPSAia2F0YWxvZyI7CiAgICBsaWJyYXJ5VHlwZSA9ICJwdWJsaWMiOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA0IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJpIiApOwogICAgZmllbGQuYXBwZW5kKCAiciIsICJuIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIHJlc3VsdCA9IFsgIjcwMDQwMC1rYXRhbG9nIiwgIjg3MDk3MC11ZGxhbmQiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQ29sbGVjdGlvbiBJZGVudGlmaWVyICg4NzA5NzAtdWRsYW5kIDIpIiwgJ0FkbWluRGF0YS5jcmVhdGVDb2xsZWN0aW9uSWRlbnRpZmllcnMoIHN1Ym1pdHRlciwgZm9ybWF0LCBvbmxpbmVBY2Nlc3MsIGxpYnJhcnlUeXBlLCByZWNvcmQgKScsIHJlc3VsdCApOwoKICAgIGRlbGV0ZSB0aGlzLnN1Ym1pdHRlcjsKICAgIGRlbGV0ZSB0aGlzLmZvcm1hdDsKICAgIGRlbGV0ZSB0aGlzLmxpYnJhcnlUeXBlOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5yZXN1bHQ7Cgp9ICkKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlR2VucmUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA4IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZCIsICJ4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG91dHB1dCA9ICJmaWt0aW9uIgoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBnZW5yZSAoZmlrdGlvbikiLCAnQWRtaW5EYXRhLmNyZWF0ZUdlbnJlKCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlR2VucmUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA4IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZCIsICJ5IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIG91dHB1dCA9ICJub25maWt0aW9uIgoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBnZW5yZSAobm9uZmlrdGlvbikiLCAnQWRtaW5EYXRhLmNyZWF0ZUdlbnJlKCByZWNvcmQgKTsnLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJBZG1pbkRhdGEuY3JlYXRlR2VucmUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJhIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNjUyIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAicCIsICI4NiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBvdXRwdXQgPSAiIgoKICAgIEFzc2VydC5lcXVhbCggIkNyZWF0ZSBnZW5yZSAobm8gZ2VucmUpIiwgJ0FkbWluRGF0YS5jcmVhdGVHZW5yZSggcmVjb3JkICk7Jywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIiwgZnVuY3Rpb24oICkgewoKICAgIGRrYWJtWG1sID0gPHJlY29yZCAvPjsKICAgIGRrYWJtWG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0eXBlIHR5cGU9ImRrZGNwbHVzOkJpYkRLLVR5cGUiPkNkIChtdXNpayk8L3R5cGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIHdvcmtUeXBlID0gWyAibXVzaWMiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIHRlc3Qgd29ya3R5cGUgbXVzaWMiLCAnQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlKCBka2FibVhtbCApOycsIHdvcmtUeXBlICk7CgogICAgZGthYm1YbWwgPSA8cmVjb3JkIC8+OwogICAgZGthYm1YbWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+R3JhcGhpYyBub3ZlbDwvdHlwZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgd29ya1R5cGUgPSBbICJsaXRlcmF0dXJlIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSB0ZXN0IHdvcmt0eXBlIGxpdHRlcmF0dXJlIiwgJ0FkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSggZGthYm1YbWwgKTsnLCB3b3JrVHlwZSApOwoKICAgIGRrYWJtWG1sID0gPHJlY29yZCAvPjsKICAgIGRrYWJtWG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudDEgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj5HcmFwaGljIG5vdmVsPC90eXBlPjsKICAgIGVsZW1lbnQxLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudDEuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQxICk7CiAgICBlbGVtZW50MiA9IDx0eXBlIHR5cGU9ImRrZGNwbHVzOkJpYkRLLVR5cGUiPkNkIChtdXNpayk8L3R5cGU+OwogICAgZWxlbWVudDIuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50Mi5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudDIgKTsKICAgIHdvcmtUeXBlID0gWyAibGl0ZXJhdHVyZSIsICJtdXNpYyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBsaXR0ZXJhdHVyZSBBTkQgbXVzaWMiLCAnQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlKCBka2FibVhtbCApOycsIHdvcmtUeXBlICk7CgogICAgZGthYm1YbWwgPSA8cmVjb3JkIC8+OwogICAgZGthYm1YbWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICB3b3JrVHlwZSA9IFsgIm5vbmUiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIHRlc3Qgd29ya3R5cGUgbm9uZSIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQxID0gPHN1YmplY3QgdHlwZT0iZGtkY3BsdXM6Z2VucmUiPmxpdHRlcmF0dXJhbmFseXNlPC9zdWJqZWN0PjsKICAgIGVsZW1lbnQxLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudDEuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQxICk7CiAgICBlbGVtZW50MiA9IDx0eXBlIHR5cGU9ImRrZGNwbHVzOkJpYkRLLVR5cGUiPkFydGlrZWw8L3R5cGU+OwogICAgZWxlbWVudDIuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50Mi5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudDIgKTsKICAgIHdvcmtUeXBlID0gWyAiYXJ0aWNsZSIsICJhbmFseXNpcyIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBhcnRpY2xlIEFORCBhbmFseXNpcyIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQxID0gPHN1YmplY3Q+Zm9yZmF0dGVycG9ydHJhZXR0ZXI8L3N1YmplY3Q+OwogICAgZWxlbWVudDEuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBka2FibVhtbC5hcHBlbmRDaGlsZCggZWxlbWVudDEgKTsKICAgIGVsZW1lbnQyID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+QXJ0aWtlbDwvdHlwZT47CiAgICBlbGVtZW50Mi5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQyLkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIGRrYWJtWG1sLmFwcGVuZENoaWxkKCBlbGVtZW50MiApOwogICAgd29ya1R5cGUgPSBbICJwb3J0cmFpdCIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBwb3J0cmFpdCIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj5PbXRhbGU8L3R5cGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIHdvcmtUeXBlID0gWyAiYm9va2Rlc2NyaXB0aW9uIiBdOwoKICAgIEFzc2VydC5lcXVhbCggIkFkbWluRGF0YS5jcmVhdGVXb3JrVHlwZSB0ZXN0IHdvcmt0eXBlIGJvb2tkZXNjcmlwdGlvbiIsICdBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUoIGRrYWJtWG1sICk7Jywgd29ya1R5cGUgKTsKCiAgICBka2FibVhtbCA9IDxyZWNvcmQgLz47CiAgICBka2FibVhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj4mI3hDNTtyYm9nPC90eXBlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIGRrYWJtWG1sLmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICB3b3JrVHlwZSA9IFsgImxpdGVyYXR1cmUiIF07CgogICAgQXNzZXJ0LmVxdWFsKCAiQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlIHRlc3Qgd29ya3R5cGUgbGl0ZXJhdHVyZSAoXHUwMEM1cmJvZykiLCAnQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlKCBka2FibVhtbCApOycsIHdvcmtUeXBlICk7CgogICAgZGthYm1YbWwgPSA8cmVjb3JkIC8+OwogICAgZGthYm1YbWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+VWtlbmR0IG1hdGVyaWFsZXR5cGU8L3R5cGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgZGthYm1YbWwuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIHdvcmtUeXBlID0gWyAibm9uZSIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJBZG1pbkRhdGEuY3JlYXRlV29ya1R5cGUgdGVzdCB3b3JrdHlwZSBub25lICh1bmtub3duIG1hdGVyaWFsdHlwZSkiLCAnQWRtaW5EYXRhLmNyZWF0ZVdvcmtUeXBlKCBka2FibVhtbCApOycsIHdvcmtUeXBlICk7CgoKICAgIGRlbGV0ZSB0aGlzLmRrYWJtWG1sOwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQxOwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDI7CiAgICBkZWxldGUgdGhpcy53b3JrVHlwZTsKCn0gKTsK","moduleName":"AdminData"},{"javascript":"","moduleName":"XmlToOpenUrl"},{"javascript":"","moduleName":"LinkXmlCreator"},{"javascript":"LyoqIEBmaWxlIFNvcnQgc3R1ZmYgZnJvbSBkYmNrYXQgKi8KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLyohCiAgICBcZmlsZSBGaWVsZFNvcnRlci51c2UuanMKKi8KCkVYUE9SVEVEX1NZTUJPTFMgPSBbICJTb3J0QnlTdWJGaWVsZHMiLCAiU29ydGVyIiwgIlNvcnRCeU5hbWUiIF07CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQp1c2UoICJNYXJjIiApOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8qKiBEZWZpbmVzIGEgc29ydGVyIG9iamVjdCB0byBzb3J0IDIgZmllbGRzIGJhc2VkIG9uIGEgc3ViIGZpZWxkIHZhbHVlLgogKgogKiBAcGFyYW0ge1JlZ0V4cH0gW3BhdHRlcm5dIEFuIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIHRoZSBzdWIgZmllbGQgbmFtZXMsIHRoYXQgeW91IHdhbnQgdG8gc29ydCBieS4KICogQHBhcmFtIHtOdW1iZXJ9IFtvcmRlcl0gVGhlIHNvcnQgb3JkZXIuIE9uZSBvZjogU29ydGVyLkFTQyBvciBTb3J0ZXIuREVTQyAKICogQGNvbnN0cnVjdG9yCiAqIEBzZWUgTWFyY0NsYXNzZXMKICogQHNlZSBSZWNvcmQKICogQHNlZSBGaWVsZAogKiBAc2VlIFNvcnRlciAKICogQG5hbWUgU29ydEJ5U3ViRmllbGRzICovCmZ1bmN0aW9uIFNvcnRCeVN1YkZpZWxkcyggcGF0dGVybiwgb3JkZXIgKSB7CiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuOwoKICAgIHRoaXMub3JkZXIgPSBvcmRlcjsKICAgIGlmICggb3JkZXIgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHRoaXMub3JkZXIgPSBTb3J0ZXIuQVNDOwogICAgfTsKfTsKCi8qKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIGZpZWxkLCB0aGF0IHNob3VsZCBieSB1c2VkIGZvciBzb3J0aW5nLgogKiAKICogQHBhcmFtIHtPYmplY3R9IGZpZWxkIFRoZSBmaWVsZC4KICogCiAqIEBtZW1iZXJPZiBTb3J0QnlTdWJGaWVsZHMKICogQG1ldGhvZAogKiBAbmFtZSBTb3J0QnlTdWJGaWVsZHMuZ2V0VmFsdWUKICogQG5hbWUgU29ydEJ5U3ViRmllbGRzI2dldFZhbHVlICovClNvcnRCeVN1YkZpZWxkcy5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiggZmllbGQgKSB7CiAgICByZXR1cm4gZmllbGQuZ2V0VmFsdWUoIG5ldyBNYXRjaFN1YkZpZWxkKCB0aGlzLnBhdHRlcm4gKSApOwp9OwoKLyoqIFNvcnRzIHR3byBmaWVsZHMgYWNjb3JkaW5nIHRvIHRoZSBzdWIgZmllbGQgdmFsdWUuCiAqIAogKiBAcGFyYW0ge0ZpZWxkfSBsaHMgVGhlIGZpcnN0IGZpZWxkLgogKiBAcGFyYW0ge0ZpZWxkfSByaHMgVGhlIHNlY29uZCBmaWVsZC4KICogCiAqIEByZXR1cm4ge051bWJlcn0gLTEgaWYgbGhzIDwgcmhzLCAwIGlmIGxocyA9PSByaHMsIDEgaWYgbGhzID4gcmhzLgogKiAKICogQG1lbWJlck9mIFNvcnRCeVN1YkZpZWxkcwogKiBAbWV0aG9kCiAqIEBuYW1lIFNvcnRCeVN1YkZpZWxkcy5zb3J0CiAqIEBuYW1lIFNvcnRCeVN1YkZpZWxkc0Bzb3J0ICovClNvcnRCeVN1YkZpZWxkcy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKCBsaHMsIHJocyApIHsKICAgIHZhciBsdnMgPSB0aGlzLmdldFZhbHVlKCBsaHMgKTsKICAgIHZhciBydnMgPSB0aGlzLmdldFZhbHVlKCByaHMgKTsKICAgIHZhciBhID0gcGFyc2VJbnQoIGx2cyApOwogICAgdmFyIGIgPSBwYXJzZUludCggcnZzICk7CgogICAgaWYgKCBpc05hTiggYSApIHx8IGlzTmFOKCBiICkgKSB7CiAgICAgICAgYSA9IGx2czsKICAgICAgICBiID0gcnZzOwogICAgfTsKCiAgICBpZiAoIGEgPCBiICkgewogICAgICAgIHJldHVybiAtMTsKICAgIH0gZWxzZSBpZiAoIGEgPiBiICkgewogICAgICAgIHJldHVybiAxOwogICAgfTsKCiAgICByZXR1cm4gMDsKfTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8qKiBEZWZpbmVzIGEgc29ydGVyIG9iamVjdCB0byBzb3J0IDIgZmllbGRzIGJhc2VkIG9uIHRoZSBmaWVsZCBuYW1lLgogKgogKiBAcGFyYW0ge051bWJlcn0gW29yZGVyXSBUaGUgc29ydCBvcmRlci4gT25lIG9mOiBTb3J0ZXIuQVNDIG9yIFNvcnRlci5ERVNDIAogKiBAY29uc3RydWN0b3IKICogQHNlZSBNYXJjQ2xhc3NlcwogKiBAc2VlIFJlY29yZAogKiBAc2VlIEZpZWxkCiAqIEBzZWUgU29ydGVyIAogKiBAbmFtZSBTb3J0QnlOYW1lICovCmZ1bmN0aW9uIFNvcnRCeU5hbWUoIG9yZGVyICkgewogICAgdGhpcy5vcmRlciA9IG9yZGVyOwoKICAgIGlmICggb3JkZXIgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHRoaXMub3JkZXIgPSBTb3J0ZXIuQVNDOwogICAgfTsKfTsKCi8qKiBTb3J0cyB0d28gZmllbGRzIGFjY29yZGluZyB0byB0aGllciBuYW1lcy4KICogCiAqIEBwYXJhbSB7RmllbGR9IGxocyBUaGUgZmlyc3QgZmllbGQuCiAqIEBwYXJhbSB7RmllbGR9IHJocyBUaGUgc2Vjb25kIGZpZWxkLgogKiAKICogQHJldHVybiB7TnVtYmVyfSAtMSBpZiBsaHMgPCByaHMsIDAgaWYgbGhzID09IHJocywgMSBpZiBsaHMgPiByaHMuCiAqIAogKiBAbWVtYmVyT2YgU29ydEJ5TmFtZQogKiBAbWV0aG9kCiAqIEBuYW1lIFNvcnRCeU5hbWUuc29ydAogKiBAbmFtZSBTb3J0QnlOYW1lQHNvcnQgKi8KU29ydEJ5TmFtZS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKCBsaHMsIHJocyApIHsKICAgIHZhciBsdnMgPSBsaHMubmFtZTsKICAgIHZhciBydnMgPSByaHMubmFtZTsKCiAgICBpZiAoIGx2cyA8IHJ2cyApIHsKICAgICAgICByZXR1cm4gLTE7CiAgICB9IGVsc2UgaWYgKCBsdnMgPiBydnMgKSB7CiAgICAgICAgcmV0dXJuIDE7CiAgICB9OwoKICAgIHJldHVybiAwOwp9OwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLyoqIERlZmluZXMgYSBzb3J0ZXIgb2JqZWN0IHRvIHNvcnQgMiBmaWVsZHMgYmFzZWQgb24gYW4gYXJyYXkgb2Ygb3RoZXIgc29ydCBvYmplY3RzLgogKgogKiBAcGFyYW0ge0FycmF5fSBbc29ydGVyXSBBcnJheSBvZiBzb3J0ZXIgb2JqZWN0cy4gIAogKiBAY29uc3RydWN0b3IKICogQHNlZSBNYXJjQ2xhc3NlcwogKiBAc2VlIFJlY29yZAogKiBAc2VlIEZpZWxkCiAqIEBuYW1lIFNvcnRlciAqLwpmdW5jdGlvbiBTb3J0ZXIoIHNvcnRlcnMgKSB7CiAgICB0aGlzLnNvcnRlcnMgPSBzb3J0ZXJzOwp9OwoKLyoqIENvbnN0YW50IGZvciBhc2Mgc29ydGluZy4gCiAqCiAqIEB0eXBlIHtOdW1iZXJ9CiAqIEBuYW1lIFNvcnRlci5BU0MKICogQG5hbWUgU29ydGVyI0FTQyAqLwpTb3J0ZXIuQVNDID0gMTsKCi8qKiBDb25zdGFudCBmb3IgZGVzYyBzb3J0aW5nLiAKICoKICogQHR5cGUge051bWJlcn0KICogQG5hbWUgU29ydGVyLkRFU0MKICogQG5hbWUgU29ydGVyI0RFU0MgKi8KU29ydGVyLkRFU0MgPSAtMTsKCi8qKiBTb3J0cyB0d28gZmllbGRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkgb2Ygc29ydGVyIG9iamVjdHMuCiAqIAogKiBFYWNoIHNvcnRlciBvYmplY3QgaXMgY2FsbGVkIGluIHR1cm4gdG8gc29ydCB0aGUgdHdvIGZpZWxkcy4gSWYgYSBzb3J0ZXIgCiAqIG9iamVjdCByZXR1cm5zIGEgdmFsdWUgb3RoZXIgdGhhbiAwLCB0aGVuIHRoZSB2YWx1ZSBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlCiAqIHRoZSBuZXh0IHNvcnRlciBvYmplY3QgZnJvbSB0aGUgYXJyYXkgaXMgY2FsbGVkLgogKiAKICogSW4gY2FzZSB0aGUgbGFzdCBzb3J0ZXIgb2JqZWN0IGlzIGNhbGxlZCwgdGhlbiBpdHMgcmV0dXJuIHZhbHVlIGlzIGFsd2F5cyAKICogcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbi4KICogCiAqIEBwYXJhbSB7RmllbGR9IGxocyBUaGUgZmlyc3QgZmllbGQuCiAqIEBwYXJhbSB7RmllbGR9IHJocyBUaGUgc2Vjb25kIGZpZWxkLgogKiAKICogQHJldHVybiB7TnVtYmVyfSAtMSBpZiBsaHMgPCByaHMsIDAgaWYgbGhzID09IHJocywgMSBpZiBsaHMgPiByaHMuCiAqIAogKiBAbWVtYmVyT2YgU29ydGVyCiAqIEBtZXRob2QKICogQG5hbWUgU29ydGVyLnNvcnQKICogQG5hbWUgU29ydGVyQHNvcnQgKi8KU29ydGVyLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oIGxocywgcmhzICkgewogICAgaWYgKCB0aGlzLnNvcnRlcnMgPT0gdW5kZWZpbmVkICkgewogICAgICAgIHJldHVybiAwOwogICAgfTsKCiAgICB2YXIgcmVzdWx0OwogICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5zb3J0ZXJzLmxlbmd0aDsgaSsrICkgewogICAgICAgIHJlc3VsdCA9IHRoaXMuc29ydGVyc1sgaSBdLnNvcnQoIGxocywgcmhzICkgKiB0aGlzLnNvcnRlcnNbIGkgXS5vcmRlcjsKCiAgICAgICAgaWYgKCByZXN1bHQgIT0gMCApIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9OwogICAgfTsKCiAgICByZXR1cm4gcmVzdWx0Owp9Owo=","moduleName":"FieldSorter"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB0aGF0IHByb2R1Y2VzIGRjIHhtbCBlbGVtZW50cyBmcm9tIGRhbk1BUkMyIHJlY29yZHMgKi8KCnVzZSggIkxvZyIgKTsKdXNlKCAiVW5pdFRlc3QiICk7CnVzZSggIlhtbE5hbWVzcGFjZXMiICk7IC8vIFByb3ZpZGVzIFhNTCBuYW1lc3BhY2VzCnVzZSggIlhtbEVsZW1lbnRzIiApOyAvLyBQcm92aWRlcyBYTUwgZWxlbWVudCBmdW5jdGlvbnMKdXNlKCAiWG1sVXRpbCIgKTsgLy8gUHJvdmlkZXMgWE1MIGNyZWF0aW9uIGZ1bmN0aW9ucwp1c2UoICJNYXJjUmVjb3JkIiApOwp1c2UoICJNYXJjWGNoYW5nZSIgKTsKdXNlKCAiVGFibGVzIiApOwp1c2UoICJBZG1pbkRhdGEiICk7CnVzZSggIlhtbFRvT3BlblVybCIgKTsKdXNlKCAiTGlua1htbENyZWF0b3IiICk7CnVzZSggIkZpZWxkU29ydGVyIiApOwoKRVhQT1JURURfU1lNQk9MUyA9IFsgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzJyBdOwoKLyoqCiAqIE1vZHVsZSB0aGF0IHByb2R1Y2VzIHZhcmlvdXMgWE1MIGVsZW1lbnRzIGJhc2VkIG9uIGRhbk1BUkMyIHJlY29yZCBvYmplY3RzLgogKgogKiBAdHlwZSB7bmFtZXNwYWNlfQogKiBAbmFtZXNwYWNlCiAqLwoKdmFyIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzID0gZnVuY3Rpb24oICkgewogICAgTG9nLmluZm8oICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMgbW9kdWxlIiApOwoKICAgIHZhciBka2FibSA9IFhtbE5hbWVzcGFjZXMuZGthYm07CiAgICB2YXIgYWMgPSBYbWxOYW1lc3BhY2VzLmFjOwogICAgdmFyIGRjID0gWG1sTmFtZXNwYWNlcy5kYzsKICAgIHZhciBkY3Rlcm1zID0gWG1sTmFtZXNwYWNlcy5kY3Rlcm1zOwogICAgdmFyIGRrZGNwbHVzID0gWG1sTmFtZXNwYWNlcy5ka2RjcGx1czsKICAgIHZhciB4c2kgPSBYbWxOYW1lc3BhY2VzLnhzaTsKICAgIHZhciBtYXJjeCA9IFhtbE5hbWVzcGFjZXMubWFyY3g7CiAgICB2YXIgZG9jYm9vayA9IFhtbE5hbWVzcGFjZXMuZG9jYm9vazsKICAgIHZhciBlcyA9IFhtbE5hbWVzcGFjZXMuZXM7CiAgICB2YXIgdGluZyA9IFhtbE5hbWVzcGFjZXMudGluZzsKICAgIHZhciBsbiA9IG5ldyBOYW1lc3BhY2UoICJsbiIsICJodHRwOi8vb3NzLmRiYy5kay9ucy9saW5rcyIgKTsKCiAgICB2YXIgdGhhdCA9IHt9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBhYzppZGVudGlmaWVyIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQWNJZGVudGlmaWVyKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQWNJZGVudGlmaWVyCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlQWNJZGVudGlmaWVyID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogY3JlYXRlQWNJZGVudGlmaWVyIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgaWRlbnRpZmllciA9IHJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9hLyApLnJlcGxhY2UoIC9ccy9nLCAiIiApOwogICAgICAgIHZhciBsaWJyYXJ5ID0gcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkucmVwbGFjZSggL1xzL2csICIiICk7CiAgICAgICAgdmFyIHZhbHVlID0gaWRlbnRpZmllciArICJ8IiArIGxpYnJhcnk7CiAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJpZGVudGlmaWVyIiwgYWMgKTsKCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogY3JlYXRlQWNJZGVudGlmaWVyIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGFjOnNvdXJjZSBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUFjU291cmNlKCB4bWwsIGZvcm1hdCwgc3VibWl0dGVyICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCBUaGUgZm9ybWF0IG9mIHRoZSBzb3VyY2UKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJtaXR0ZXIgVGhlIHN1Ym1pdHRlciBvZiB0aGUgc291cmNlCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUFjU291cmNlCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlQWNTb3VyY2UgPSBmdW5jdGlvbiggeG1sLCBmb3JtYXQsIHN1Ym1pdHRlciwgcmVjb3JkICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogY3JlYXRlQWNTb3VyY2UgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZTsKCiAgICAgICAgc3dpdGNoICggZm9ybWF0ICkgewogICAgICAgICAgICBjYXNlICJrYXRhbG9nIjoKICAgICAgICAgICAgICAgIHZhbHVlID0gIkJpYmxpb3Rla3NrYXRhbG9nIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJiYXNpcyI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmdldFNvdXJjZU5hbWVGb3JCYXNpc1JlY29yZHMoIHJlY29yZCApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgImxva2FsYmlibCI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJMb2thbGJpYmxpb2dyYWZpIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJtYXR2dXJkIjogIC8vTFNLOiBkZW5uZSBicnVnZXMgdmlzdCBpa2tlIGkgYnJvZW5kMzsgdmkgYnJ1Z2VyICdhbm1lbGQnIHNvbSBmb3JtYXQgZm9yIG1hdGVyaWFsZXZ1cmRlcmluZ2VyLiBUZXN0IG9tIGRlbiBrYW4gZmplcm5lcwogICAgICAgICAgICAgICAgdmFsdWUgPSAiTWF0ZXJpYWxldnVyZGVyaW5nZXIiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgImFubWVsZCI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJBbm1lbGRlbHNlciI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiYXZpcyI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJBdmlzYXJ0aWtsZXIiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgInRzYXJ0IjoKICAgICAgICAgICAgICAgIHZhbHVlID0gIlRpZHNza3JpZnRzYXJ0aWtsZXIiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIm1vbm9ncmFmaSI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJNb25vZ3JhZmllciI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiZmFrdGFsaW5rIjoKICAgICAgICAgICAgICAgIHZhbHVlID0gIkZha3RhbGluayI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiZm9yZndlYiI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJGb3JmYXR0ZXJ3ZWIiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgImVic2NvYm9nIjoKICAgICAgICAgICAgICAgIHZhbHVlID0gIkVic2NvIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJhY2FkZW1pYyI6CiAgICAgICAgICAgIGNhc2UgImVicmFyeSI6CiAgICAgICAgICAgIGNhc2UgInB1YmxpYyI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJFYnJhcnkiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgImxpdHRvbGsiOgogICAgICAgICAgICAgICAgdmFsdWUgPSAiTGl0dGVyYXR1cnRvbGtuaW5nZXIiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIm94cHJlbSI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJPeGZvcmQgUmVmZXJlbmNlIE9ubGluZTogUHJlbWl1bSBDb2xsZWN0aW9uIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJveGxpdCI6CiAgICAgICAgICAgICAgICB2YWx1ZSA9ICJPeGZvcmQgUmVmZXJlbmNlIE9ubGluZTogTGl0ZXJhdHVyZSBDb2xsZWN0aW9uIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJveHdlc3QiOgogICAgICAgICAgICAgICAgdmFsdWUgPSAiT3hmb3JkIFJlZmVyZW5jZSBPbmxpbmU6IFdlc3Rlcm4gQ29sbGVjdGlvbiI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAic2FmYXJpIjoKICAgICAgICAgICAgICAgIHZhbHVlID0gIlNhZmFyaSBCb29rcyBPbmxpbmUiOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZvcm1hdDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAoIHN1Ym1pdHRlciA9PT0gIjE1MDAxMiIgKSB7CiAgICAgICAgICAgIHZhbHVlID0gIkRlbiBTdG9yZSBEYW5za2UiOwogICAgICAgIH0KICAgICAgICBpZiAoIHN1Ym1pdHRlciA9PT0gIjE1MDAxMyIgKSB7CiAgICAgICAgICAgIHZhbHVlID0gIlBhbGxlcyBHYXZlYm9kIjsKICAgICAgICB9CiAgICAgICAgaWYgKCBzdWJtaXR0ZXIgPT09ICI4NzA5NzYiICkgewogICAgICAgICAgICB2YWx1ZSA9ICJNYXRlcmlhbGV2dXJkZXJpbmdlciI7CiAgICAgICAgfQoKICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZSwgInNvdXJjZSIsIGFjICk7CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IGNyZWF0ZUFjU291cmNlIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBnZXRzIHRoZSBzb3VyY2UgbmFtZSBmb3IgYSBCYXNpcyByZWNvcmQgKDg3MDk3MCkKICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5nZXRTb3VyY2VOYW1lRm9yQmFzaXNSZWNvcmRzKCByZWNvcmQgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgc291cmNlIG5hbWUgb2YgdGhlIHJlY29yZCAKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmdldFNvdXJjZU5hbWVGb3JCYXNpc1JlY29yZHMKICAgICAqLwogICAgdGhhdC5nZXRTb3VyY2VOYW1lRm9yQmFzaXNSZWNvcmRzID0gZnVuY3Rpb24oIHJlY29yZCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmdldFNvdXJjZU5hbWVGb3JCYXNpc1JlY29yZHMgbWV0aG9kIiApOwoKICAgICAgICB2YXIgdmFsdWUgPSAiQmlibGlvdGVrc2thdGFsb2ciOwoKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMDMyLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC94LywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsKICAgICAgICAgICAgICAgIHZhciBjYXRDb2RlID0gU3RyaW5nKCBzdWJmaWVsZC52YWx1ZSApOwogICAgICAgICAgICAgICAgaWYgKCBjYXRDb2RlLm1hdGNoKCAvRVJFLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gImVSZW9sZW4iOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY2F0Q29kZS5tYXRjaCggL05MWS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICJOZXRseWRib2ciOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY2F0Q29kZS5tYXRjaCggL0ZTW0JGXS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICJGaWxtc3RyaWJlbiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gKTsKICAgICAgICB9ICk7CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmdldFNvdXJjZU5hbWVGb3JCYXNpc1JlY29yZHMgbWV0aG9kIiApOwoKICAgICAgICByZXR1cm4gdmFsdWU7CgogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOnRpdGxlIGFuZCBkYzp0aXRsZSBmdWxsIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZSggcmVjb3JkLCB4bWwgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IHhtbCBBbiBYTUwgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjVGl0bGUKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1RpdGxlID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogY3JlYXRlRGNUaXRsZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbHVlOwogICAgICAgIHZhciB2YWx1ZXMgPSBbIF07CiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOmZ1bGwiICk7CgogICAgICAgIHZhciB1bmlmb3JtVGl0bGVFeGlzdHMgPSBmYWxzZTsKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMjM5LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICBpZiAoIFN0cmluZyggZmllbGQuZ2V0VmFsdWUoIC90LyApICkgIT09ICIiICkgewogICAgICAgICAgICAgICAgdW5pZm9ybVRpdGxlRXhpc3RzID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0gKTsKCiAgICAgICAgaWYgKCB1bmlmb3JtVGl0bGVFeGlzdHMgPT09IHRydWUgKSB7CiAgICAgICAgICAgIHZhbHVlID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjIzOSIsICJ0IiApOwogICAgICAgICAgICBpZiAoIHZhbHVlICE9PSAiIiAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJ0aXRsZSIsIGRjICk7CiAgICAgICAgICAgICAgICB2YXIgYWRkaXRpb25hbCA9IHJlY29yZC5nZXRWYWx1ZSggLzIzOS8sIC9cdTAwZjgvICk7CiAgICAgICAgICAgICAgICBpZiAoIGFkZGl0aW9uYWwgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlICsgIiAoIiArIGFkZGl0aW9uYWwgKyAiKSIsICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAxNC8sIC94LyApICE9PSAiREVCIiAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMTQvLCAveC8gKSAhPT0gIkZPUiIgKSB7CgogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMjQ1LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL2F8by8sICIuICIgKTsKICAgICAgICAgICAgICAgIGlmICggdmFsdWUgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTWFyY1JlY29yZC5jbGVhbkRhdGEoIHZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJ0aXRsZSIsIGRjICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgdmFyIGFkZGl0aW9uID0gIiI7CiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8yNDUvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGZpZWxkLmV4aXN0cyggL2cvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb24gPSAiLiAiICsgZmllbGQuZ2V0VmFsdWUoIC9nLyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBmaWVsZC5leGlzdHMoIC9cdTAwZjgvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb24gPSBhZGRpdGlvbiArICIgKCIgKyBmaWVsZC5nZXRWYWx1ZSggL1x1MDBmOC8gKSArICIpIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggZmllbGQuZXhpc3RzKCAveS8gKSApIHsKICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbiA9IGFkZGl0aW9uICsgIi4gIiArIGZpZWxkLmdldFZhbHVlKCAveS8gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFkZGl0aW9uID0gTWFyY1JlY29yZC5jbGVhbkRhdGEoIGFkZGl0aW9uICk7CiAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzI0NS8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgIGlmICggIWZpZWxkLmV4aXN0cyggL2MvICkgJiYgIWZpZWxkLmV4aXN0cyggL28vICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjI0NSIsICJhIiwgIiA6ICIgKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSArIGFkZGl0aW9uLCAidGl0bGUiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhZmllbGQuZXhpc3RzKCAvYy8gKSApIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZSArIGFkZGl0aW9uLCAidGl0bGUiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBmaWVsZC5leGlzdHMoIC9vLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICIyNDUiLCAiYyIsICIgOiAiICk7CiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUgKyAiIDogIiArIHZhbHVlc1sgYSBdICsgYWRkaXRpb24sICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlICsgYWRkaXRpb24sICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjI0NSIsICJhfGMiLCAiIDogIiApOwogICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdICsgYWRkaXRpb24sICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSApOwogICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAxNC8sIC94LyApID09PSAiREVCIiB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMTQvLCAveC8gKSA9PT0gIkZPUiIgKSB7CiAgICAgICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICIyNDUiLCAiYXxjIiwgIiA6ICIgKTsKICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKCiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJ0aXRsZSIsIGRjICk7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogY3JlYXRlRGNUaXRsZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkYzp0aXRsZSBYTUwgZWxlbWVudHMgd2l0aCBka2RjcGx1czpzZXJpZXMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjVGl0bGVTZXJpZXMoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlU2VyaWVzCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGNUaXRsZVNlcmllcyA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IGNyZWF0ZURjVGl0bGVTZXJpZXMgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB0aXRsZTsKICAgICAgICB2YXIgc3VidGl0bGU7CiAgICAgICAgdmFyIGNyZWF0b3I7CiAgICAgICAgdmFyIGFkZGl0aW9uOwogICAgICAgIHZhciBzZWN0aW9ubnVtYmVyOwogICAgICAgIHZhciBzZWN0aW9udGl0bGU7CiAgICAgICAgdmFyIG51bWJlcjsKICAgICAgICB2YXIgb3duZXIgPSByZWNvcmQuZmllbGQoICIwMDEiICkuc3ViZmllbGQoICJiIiApLnZhbHVlOwogICAgICAgIHZhciBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czpzZXJpZXMiICk7CgogICAgICAgIHZhciBmaWVsZEV4aXN0ODQwID0gZmFsc2U7CiAgICAgICAgaWYgKCByZWNvcmQuZXhpc3RGaWVsZCggLzg0MC8gKSApIHsKICAgICAgICAgICAgZmllbGRFeGlzdDg0MCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICggZmllbGRFeGlzdDg0MCA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzg0MC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgIHRpdGxlID0gZmllbGQuZ2V0VmFsdWUoIC9hLyApOwogICAgICAgICAgICAgICAgY3JlYXRvciA9IGZpZWxkLmdldFZhbHVlKCAvXHUwMGU2LyApOwogICAgICAgICAgICAgICAgYWRkaXRpb24gPSBmaWVsZC5nZXRWYWx1ZSggL1x1MDBmOC8gKTsKICAgICAgICAgICAgICAgIHNlY3Rpb25udW1iZXIgPSBmaWVsZC5nZXRWYWx1ZSggL24vICk7CiAgICAgICAgICAgICAgICBzZWN0aW9udGl0bGUgPSBmaWVsZC5nZXRWYWx1ZSggL28vICk7CiAgICAgICAgICAgICAgICBudW1iZXIgPSBmaWVsZC5nZXRWYWx1ZSggL3YvICk7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpdGxlOwogICAgICAgICAgICAgICAgaWYgKCBjcmVhdG9yICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgIiAvICIgKyBjcmVhdG9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBhZGRpdGlvbiAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICIgKCIgKyBhZGRpdGlvbiArICIpIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggc2VjdGlvbm51bWJlciAhPT0gIiIgJiYgc2VjdGlvbnRpdGxlICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgIi4gIiArIHNlY3Rpb25udW1iZXIgKyAiLCAiICsgc2VjdGlvbnRpdGxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBzZWN0aW9ubnVtYmVyID09PSAiIiAmJiBzZWN0aW9udGl0bGUgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAiLiAiICsgc2VjdGlvbnRpdGxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBzZWN0aW9ubnVtYmVyICE9PSAiIiAmJiBzZWN0aW9udGl0bGUgPT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAiLiAiICsgc2VjdGlvbm51bWJlcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggbnVtYmVyICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgIiA7ICIgKyBudW1iZXI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hcmNSZWNvcmQuY2xlYW5EYXRhKCB2YWx1ZSApOwogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBpZiAoICggb3duZXIubWF0Y2goIC84NzA5N1swLTldLyApICYmIE1hcmNSZWNvcmQuZXhpc3RTdWJmaWVsZEluRmllbGQoIHJlY29yZCwgWyAiNDQwIiBdLCBbICIwIiBdICkgKSB8fCBmaWVsZEV4aXN0ODQwID09PSBmYWxzZSApIHsKICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzQ0MC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgIHRpdGxlID0gZmllbGQuZ2V0VmFsdWUoIC9hLyApOwogICAgICAgICAgICAgICAgc3VidGl0bGUgPSBmaWVsZC5nZXRWYWx1ZSggL2MvICk7CiAgICAgICAgICAgICAgICBjcmVhdG9yID0gZmllbGQuZ2V0VmFsdWUoIC9cdTAwZTYvICk7CiAgICAgICAgICAgICAgICBhZGRpdGlvbiA9IGZpZWxkLmdldFZhbHVlKCAvXHUwMGY4LyApOwogICAgICAgICAgICAgICAgc2VjdGlvbm51bWJlciA9IGZpZWxkLmdldFZhbHVlKCAvbi8gKTsKICAgICAgICAgICAgICAgIHNlY3Rpb250aXRsZSA9IGZpZWxkLmdldFZhbHVlKCAvby8gKTsKICAgICAgICAgICAgICAgIG51bWJlciA9IGZpZWxkLmdldFZhbHVlKCAvdi8sICIsICIgKTsKICAgICAgICAgICAgICAgIHZhbHVlID0gdGl0bGU7CiAgICAgICAgICAgICAgICBpZiAoIHN1YnRpdGxlICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgIiA6ICIgKyBzdWJ0aXRsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggY3JlYXRvciAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICIgLyAiICsgY3JlYXRvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggYWRkaXRpb24gIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAiICgiICsgYWRkaXRpb24gKyAiKSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHNlY3Rpb25udW1iZXIgIT09ICIiICYmIHNlY3Rpb250aXRsZSAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICIuICIgKyBzZWN0aW9ubnVtYmVyICsgIiwgIiArIHNlY3Rpb250aXRsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggc2VjdGlvbm51bWJlciA9PT0gIiIgJiYgc2VjdGlvbnRpdGxlICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgIi4gIiArIHNlY3Rpb250aXRsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggc2VjdGlvbm51bWJlciAhPT0gIiIgJiYgc2VjdGlvbnRpdGxlID09PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgIi4gIiArIHNlY3Rpb25udW1iZXI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIG51bWJlciAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICIgOyAiICsgbnVtYmVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFsdWUgPSBNYXJjUmVjb3JkLmNsZWFuRGF0YSggdmFsdWUgKTsKICAgICAgICAgICAgICAgIGlmICggdmFsdWUgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlLCAidGl0bGUiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gKTsKICAgICAgICB9CgogICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICI1MjYiLCAiaXx0IiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0ubWF0Y2goIC9LcmltaXNlcmllbiBtZWQvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogY3JlYXRlRGNUaXRsZVNlcmllcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOnRpdGxlIFhNTCBlbGVtZW50cyBmb3IgcmV2aWV3cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZVJldmlldyggcmVjb3JkLCB4bWwgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IHhtbCBBbiBYTUwgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjVGl0bGVSZXZpZXcKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1RpdGxlUmV2aWV3ID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogY3JlYXRlRGNUaXRsZVJldmlldyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzI0NS8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gIkFubWVsZGVsc2UgYWY6ICIKICAgICAgICAgICAgdmFsdWUgKz0gZmllbGQuZ2V0VmFsdWUoIC9hLywgIi4gIiApOwogICAgICAgICAgICB2YXIgY3JlYXRvciA9ICIgYWYgIjsKICAgICAgICAgICAgdmFyIGkgPSAxOwogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMTAwLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgaWYgKCBmaWVsZC5nZXRWYWx1ZSggLyYvICkgIT09ICJBTk0iICkgewogICAgICAgICAgICAgICAgICAgIGNyZWF0b3IgKz0gZmllbGQuZ2V0VmFsdWUoIC9oLyApICsgIiAiICsgZmllbGQuZ2V0VmFsdWUoIC9hLyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC83MDAvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGZpZWxkLmdldFZhbHVlKCAvJi8gKSAhPT0gIkFOTSIgKSB7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRvciArPSBmaWVsZC5nZXRWYWx1ZSggL2gvICkgKyAiICIgKyBmaWVsZC5nZXRWYWx1ZSggL2EvICk7CiAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmNvdW50KCAiNzAwIiApID4gMSAmJiBpIDwgcmVjb3JkLmNvdW50KCAiNzAwIiApICkgewogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdG9yICs9ICIgb2cgIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgdmFsdWUgPSBNYXJjUmVjb3JkLmNsZWFuRGF0YSggdmFsdWUgKTsKICAgICAgICAgICAgaWYgKCBjcmVhdG9yID09PSAiIGFmICIgKSB7CiAgICAgICAgICAgICAgICBjcmVhdG9yID0gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUgKyBjcmVhdG9yLCAidGl0bGUiLCBkYyApOwogICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czpmdWxsIiApOwogICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZSArIGNyZWF0b3IsICJ0aXRsZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICB9ICk7CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IGNyZWF0ZURjVGl0bGVSZXZpZXcgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGN0ZXJtczphbHRlcm5hdGl2ZSBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBbHRlcm5hdGl2ZSggcmVjb3JkLCB4bWwgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IHhtbCBBbiBYTUwgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBbHRlcm5hdGl2ZQogICAgICovCiAgICB0aGF0LmNyZWF0ZURjdGVybXNBbHRlcm5hdGl2ZSA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IGNyZWF0ZURjdGVybXNBbHRlcm5hdGl2ZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbHVlcyA9IFsgXTsKICAgICAgICB2YXIgdmFsdWU7CgogICAgICAgIGlmICggcmVjb3JkLmV4aXN0RmllbGQoIC8yMzkvICkgKSB7CiAgICAgICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICIyNDUiLCAiYXxjIiwgIiA6ICIgKTsKICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImFsdGVybmF0aXZlIiwgZGN0ZXJtcyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC81MTIvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC90LywgIiMjIiApOwogICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZS5zcGxpdCggLyMjLyApOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlc1sgYSBdICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hcmNSZWNvcmQuY2xlYW5EYXRhKCB2YWx1ZXNbIGEgXSApOwogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlLCAiYWx0ZXJuYXRpdmUiLCBkY3Rlcm1zICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjIzOSIsICJ1IiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiYWx0ZXJuYXRpdmUiLCBkY3Rlcm1zICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIHN1YmZpZWxkcyA9IFsgXTsKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMjQ1LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICBpZiAoIGZpZWxkLmV4aXN0cyggL3AvICkgKSB7CiAgICAgICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC9wfHF8cnxzLywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICBzdWJmaWVsZHMucHVzaCggIlNGIyIgKyBzdWJmaWVsZC5uYW1lICsgIj0iICsgc3ViZmllbGQudmFsdWUgKTsKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgICAgIHN1YmZpZWxkcyA9IHN1YmZpZWxkcy5qb2luKCAiICIgKS5zcGxpdCggIiBTRiNwPSIgKTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHN1YmZpZWxkcyApIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBzdWJmaWVsZHNbIGEgXS5yZXBsYWNlKCAvU0YjW3BxcnNdPS9nLCAiIiApLCAiYWx0ZXJuYXRpdmUiLCBkY3Rlcm1zICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CiAgICAgICAgLy93aHkgZG8gd2UgdXNlIHN1YmZpZWxkICdpJyBoZXJlPyBJdCBzZWVtcyB3cm9uZywgYXMgaXQgaXMgYW4gaW50cm9kdWN0b3J5IHRleHQgLSBhbmQgYWNjb3JkaW5nIHRvIHByYXhpcyBub3QgdXNlZCBieSBEQkMgL0xTSyAyMDE0LTA2LTI0CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjc0NSIsICJpfGF8XHUwMGU2fFx1MDBmOCIgKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImFsdGVybmF0aXZlIiwgZGN0ZXJtcyApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBjcmVhdGVEY3Rlcm1zQWx0ZXJuYXRpdmUgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGM6Y3JlYXRvciBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjQ3JlYXRvciggY3JlYXRvcnMsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gY3JlYXRvcnMgT2JqZWN0cyBjb250YWluaW5nIGNyZWF0b3IgYXJyYXlzCiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNDcmVhdG9yCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGNDcmVhdG9yID0gZnVuY3Rpb24oIGNyZWF0b3JzLCB4bWwgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBjcmVhdGVEY0NyZWF0b3IgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciBhdHRyaWJ1dGU7CiAgICAgICAgdmFyIHZhbHVlOwoKICAgICAgICB2YXIgZGlyZWN0b3JzID0gY3JlYXRvcnM7CgogICAgICAgIHZhciBjb3VudENyZWF0b3JzID0gMDsKCiAgICAgICAgdmFyIGludGVydmlldyA9IDA7CiAgICAgICAgdmFyIHN0b3AgPSAwOwoKICAgICAgICBmb3IgKCB2YXIgYSBpbiBjcmVhdG9ycyApIHsKICAgICAgICAgICAgaWYgKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ID09PSAiZGtkY3BsdXM6aXZlIiApIHsKICAgICAgICAgICAgICAgIGludGVydmlldyA9IDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZvciAoIHZhciBhIGluIGNyZWF0b3JzICkgewogICAgICAgICAgICBzd2l0Y2ggKCBjcmVhdG9yc1sgYSBdLm9yaWdpbiApIHsKICAgICAgICAgICAgICAgIGNhc2UgIjEwMCI6CiAgICAgICAgICAgICAgICBjYXNlICIxMTAiOgogICAgICAgICAgICAgICAgICAgIGlmICggY291bnRDcmVhdG9ycyA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ID09PSAiZGtkY3BsdXM6IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjcmVhdG9yIiwgZGMgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggY3JlYXRvcnNbIGEgXS5mdW5jdCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggY3JlYXRvcnNbIGEgXS52YWx1ZSArIGNyZWF0b3JzWyBhIF0ucmVzdCwgImNyZWF0b3IiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggY3JlYXRvcnNbIGEgXS5zb3J0LCAiY3JlYXRvciIsIGRjLCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJvc3M6c29ydCIgKSApOwogICAgICAgICAgICAgICAgICAgICAgICBjb3VudENyZWF0b3JzID0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICIyNDUiOgogICAgICAgICAgICAgICAgICAgIGlmICggY3JlYXRvcnNbIGEgXS5mdW5jdCA9PT0gImRrZGNwbHVzOmRydCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggY3JlYXRvcnNbIGEgXS5mdW5jdCApOwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNyZWF0b3JzWyBhIF0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBiIGluIGRpcmVjdG9ycyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3JlYXRvcnNbIGEgXS52YWx1ZSA9PT0gZGlyZWN0b3JzWyBiIF0udmFsdWUgJiYgZGlyZWN0b3JzWyBiIF0ub3JpZ2luICE9PSAiMjQ1IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGRpcmVjdG9yc1sgYiBdLnZhbHVlICsgZGlyZWN0b3JzWyBiIF0ucmVzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZSwgImNyZWF0b3IiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0uc29ydCwgImNyZWF0b3IiLCBkYywgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAib3NzOnNvcnQiICkgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICI3MDAiOgogICAgICAgICAgICAgICAgICAgIGlmICggY3JlYXRvcnNbIGEgXS50eXBlID09PSAiYXJ0aWNsZSIgJiYgc3RvcCA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ID09PSAiZGtkY3BsdXM6IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjcmVhdG9yIiwgZGMgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggY3JlYXRvcnNbIGEgXS5mdW5jdCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggY3JlYXRvcnNbIGEgXS52YWx1ZSArIGNyZWF0b3JzWyBhIF0ucmVzdCwgImNyZWF0b3IiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggY3JlYXRvcnNbIGEgXS5zb3J0LCAiY3JlYXRvciIsIGRjLCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJvc3M6c29ydCIgKSApOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGludGVydmlldyA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3AgPSAxOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY3JlYXRvcnNbIGEgXS5mdW5jdCA9PT0gImRrZGNwbHVzOmRydCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggY3JlYXRvcnNbIGEgXS5mdW5jdCApOwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNyZWF0b3JzWyBhIF0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlLCAiY3JlYXRvciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggY3JlYXRvcnNbIGEgXS5zb3J0LCAiY3JlYXRvciIsIGRjLCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJvc3M6c29ydCIgKSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IGNyZWF0ZURjQ3JlYXRvciBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkYzpzdWJqZWN0IFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNTdWJqZWN0KCBzdWJqZWN0cywgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdWJqZWN0cyBPYmplY3RzIGNvbnRhaW5pbmcgc3ViamVjdCBhcnJheXMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1N1YmplY3QKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1N1YmplY3QgPSBmdW5jdGlvbiggc3ViamVjdHMsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IGNyZWF0ZURjU3ViamVjdCBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIGF0dHJpYnV0ZTsKICAgICAgICB2YXIgdmFsdWU7CgogICAgICAgIGZvciAoIHZhciBhIGluIHN1YmplY3RzICkgewogICAgICAgICAgICBpZiAoIHN1YmplY3RzWyBhIF0udHlwZSA9PT0gIiIgKSB7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBzdWJqZWN0c1sgYSBdLnZhbHVlLCAic3ViamVjdCIsIGRjICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoIHN1YmplY3RzWyBhIF0udHlwZSApOwogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggc3ViamVjdHNbIGEgXS52YWx1ZSwgInN1YmplY3QiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBzdWJqZWN0c1sgYSBdLnNvcnQgIT09IHVuZGVmaW5lZCAmJiBzdWJqZWN0c1sgYSBdLnNvcnQgIT09ICIiICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggc3ViamVjdHNbIGEgXS5zb3J0LCAic3ViamVjdCIsIGRjLCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJvc3M6c29ydCIgKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBjcmVhdGVEY1N1YmplY3QgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCgogICAgLyoqCiAgICAgKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBka2RjcGx1czpzaGVsZiBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURrZGNwbHVzU2hlbGYoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEa2RjcGx1c1NoZWxmCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGtkY3BsdXNTaGVsZiA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IGNyZWF0ZURrZGNwbHVzU2hlbGYgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZUEgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiMDM5IiwgImEiICk7CgogICAgICAgIGlmICggdmFsdWVBICE9ICIiICkgewogICAgICAgICAgICB2YXIgdmFsdWUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5tdXNpY1NoZWxmTGFiZWwoIHZhbHVlQSApOwogICAgICAgICAgICBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAib3NzOm11c2ljc2hlbGYiICk7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVCID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAzOSIsICJiIiApOwogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZUIgIT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gIi4gIiArIFRhYmxlcy5jb3VudHJpZXMoIHZhbHVlQiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJzaGVsZiIsIGRrZGNwbHVzLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogY3JlYXRlRGtkY3BsdXNTaGVsZiBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNvbnZlcnRzIGEgY29kZSBpbiBmaWVsZCAwMzkqYSBpbiBEYW5NYXJjMiB0byBhIG11c2ljIHNoZWxmIGxhYmVsLgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLm11c2ljU2hlbGZMYWJlbCggY29kZSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ31Db2RlIHRvIGJlIGNvbnZlcnRlZAogICAgICogQHJldHVybiB7U3RyaW5nfVRoZSB3YW50ZWQgbGFiZWwKICAgICAqIEBleGFtcGxlIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLm11c2ljU2hlbGZMYWJlbCggImZvbCIgKQogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMubXVzaWNTaGVsZkxhYmVsCiAgICAgKiBAbWV0aG9kCiAgICAgKi8KICAgIHRoYXQubXVzaWNTaGVsZkxhYmVsID0gZnVuY3Rpb24oIGNvZGUgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBtdXNpY1NoZWxmTGFiZWwgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciBtdXNpY1NoZWxmTG9va3VwID0gewogICAgICAgICAgICAiYXZhIjogIkF2YW50Z2FyZGUuIEFudG9sb2dpZXIiLAogICAgICAgICAgICAiYXZnIjogIkF2YW50Z2FyZGUiLAogICAgICAgICAgICAiYmVhIjogIlJvY2suIEFudG9sb2dpZXIiLAogICAgICAgICAgICAiYmVmIjogIlJvY2siLAogICAgICAgICAgICAiYmxhIjogIkJsdWVzLiBBbnRvbG9naWVyIiwKICAgICAgICAgICAgImJsdSI6ICJCbHVlcyIsCiAgICAgICAgICAgICJkYXUiOiAiRGFuc2sgdW5kZXJob2xkbmluZyIsCiAgICAgICAgICAgICJldGEiOiAiRXQgaW5zdHJ1bWVudC4gQW50b2xvZ2llciIsCiAgICAgICAgICAgICJldGkiOiAiRXQgaW5zdHJ1bWVudCIsCiAgICAgICAgICAgICJmYXUiOiAiRlx1MDBlNnJcdTAwZjhzayB1bmRlcmhvbGRuaW5nIiwKICAgICAgICAgICAgImZpbCI6ICJGaWxtbXVzaWsiLAogICAgICAgICAgICAiZm9sIjogIkZvbGtlbXVzaWsiLAogICAgICAgICAgICAiaGliIjogIkhpc3Rvcmllci4gQlx1MDBmOHJuIiwKICAgICAgICAgICAgImphYSI6ICJKYXp6LiBBbnRvbG9naWVyIiwKICAgICAgICAgICAgImpheiI6ICJKYXp6IiwKICAgICAgICAgICAgImp1bCI6ICJKdWxlbXVzaWsiLAogICAgICAgICAgICAia2FhIjogIkthbW1lcm11c2lrLiBBbnRvbG9naWVyIiwKICAgICAgICAgICAgImthbSI6ICJLYW1tZXJtdXNpayIsCiAgICAgICAgICAgICJtaWEiOiAiTWlkZGVsYWxkZXIvcmVuXHUwMGU2c3NhbmNlLiBBbnRvbG9naWVyIiwKICAgICAgICAgICAgIm1pciI6ICJNaWRkZWxhbGRlci9yZW5cdTAwZTZzc2FuY2UiLAogICAgICAgICAgICAibW1vIjogIk11c2ljIG1pbnVzIG9uZSIsCiAgICAgICAgICAgICJtdWIiOiAiTXVzaWsuIEJcdTAwZjhybiIsCiAgICAgICAgICAgICJuZXciOiAiTmV3IGFnZSIsCiAgICAgICAgICAgICJvcGEiOiAiT3BlcmFlci4gQW50b2xvZ2llciIsCiAgICAgICAgICAgICJvcHIiOiAiT3BlcmFlciIsCiAgICAgICAgICAgICJvdGEiOiAiT3BlcmV0dGVyL211c2ljYWxzLiBBbnRvbG9naWVyIiwKICAgICAgICAgICAgIm90bSI6ICJPcGVyZXR0ZXIvbXVzaWNhbHMiLAogICAgICAgICAgICAib3JhIjogIk9ya2VzdGVybXVzaWsuIEFudG9sb2dpZXIiLAogICAgICAgICAgICAib3JrIjogIk9ya2VzdGVybXVzaWsiLAogICAgICAgICAgICAic2FtIjogIlNhbWxpbmdlciIsCiAgICAgICAgICAgICJ0ZXMiOiAiVGVzdHBsYWRlciIsCiAgICAgICAgICAgICJ1bmQiOiAiVW5kZXJob2xkbmluZyIsCiAgICAgICAgICAgICJ2b2EiOiAiVm9rYWxtdXNpay4gQW50b2xvZ2llciIsCiAgICAgICAgICAgICJ2b2siOiAiVm9rYWxtdXNpayIKICAgICAgICB9OwoKICAgICAgICB2YXIgbGFiZWwgPSBtdXNpY1NoZWxmTG9va3VwWyBjb2RlIF07CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IG11c2ljU2hlbGZMYWJlbCBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIGxhYmVsOwogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGM6ZGVzY3JpcHRpb24gWE1MIGVsZW1lbnRzIGFuZCBhZGRzIHRoZW0gdG8gYW4gWE1MIG9iamVjdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Rlc2NyaXB0aW9uKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEZXNjcmlwdGlvbgogICAgICovCiAgICB0aGF0LmNyZWF0ZURjRGVzY3JpcHRpb24gPSBmdW5jdGlvbiggcmVjb3JkLCB4bWwgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBjcmVhdGVEY0Rlc2NyaXB0aW9uIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gWyBdOwogICAgICAgIHZhciBhdHRyaWJ1dGU7CiAgICAgICAgdmFyIHZhbHVlOwoKICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNTA3IiwgImEiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJkZXNjcmlwdGlvbiIsIGRjICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjUwOSIsICJhIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiZGVzY3JpcHRpb24iLCBkYyApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC81MTIvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGlmICggZmllbGQuZ2V0VmFsdWUoIC90LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGlmICggIWZpZWxkLmdldFZhbHVlKCAvaS8gKS5tYXRjaCggL2luZGxcdTAwZTZzZXJ8aW5kdGFsdCBhZnxsXHUwMGU2c3QgYWZ8TWVkdmlya2VuZGUvaSApICYmICFmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9NZWR2aXJrZW5kZTogL2kgKSApIHsKICAgICAgICAgICAgICAgICAgICAvL3N1YmZpZWxkcyBlLCBkLCB4LCBiLCB1LCB5IGFyZSByZXBlYXRhYmxlLCBzdWJmaWVsZHMgYSBhbmQgaSBhcmUgbm90LCBzZWUgYnVnIzE3ODM1CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL2F8aS8sICIgIiApICsgIiAiICsgZmllbGQuZ2V0VmFsdWUoIC9lfGR8eHxifHV8eS8sICIsICIgKTsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIC8gJC8sICIiICkucmVwbGFjZSggLywgXC4vLCAiLiIgKTsKICAgICAgICAgICAgICAgICAgICBpZiAoICF2YWx1ZS5tYXRjaCggL1NwaWxsZXRpZC9pICkgJiYgdmFsdWUgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hcmNSZWNvcmQuY2xlYW5EYXRhKCB2YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZSwgImRlc2NyaXB0aW9uIiwgZGMgKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gKTsKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvNTI2LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICBpZiAoIGZpZWxkLmdldFZhbHVlKCAvaXxhLyApLm1hdGNoKCAvU2FtaFx1MDBmOHJlbmRlfERlbCBhZnxTYW5nZSBmcmF8U2FuZ2VuZSBmcmF8S255dHRlciBzaWcgdGlsfEZvcnRzXHUwMGU2dHRlbHNlIGFmfEZvcnRzXHUwMGU2dHRlcyBpL2kgKSApIHsKICAgICAgICAgICAgICAgIHZhciBoZWFkZXIgPSBmaWVsZC5nZXRWYWx1ZSggL2l8YS8gKTsKICAgICAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC9kfHR8eC8sICIgOyAiICk7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hcmNSZWNvcmQuY2xlYW5EYXRhKCB2YWx1ZSApOwogICAgICAgICAgICAgICAgaGVhZGVyID0gaGVhZGVyLnJlcGxhY2UoIC9cLiBTZXJpZW5zIGluZGhvbGQgc2UgZGVubmUvLCAiIiApOwogICAgICAgICAgICAgICAgdmFyIG1vcmVUaGFuSGVhZGVyID0gZmllbGQuZ2V0VmFsdWUoIC9hfGR8dHx4LyApOwogICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGtkY3BsdXM6c2VyaWVzIiApOwogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggaGVhZGVyICsgIjogIiArIHZhbHVlLCAiZGVzY3JpcHRpb24iLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtb3JlVGhhbkhlYWRlciAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggaGVhZGVyLCAiZGVzY3JpcHRpb24iLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzUzMC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvYS8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICB2YXIgc3ViZmllbGRWYWx1ZSA9IHN1YmZpZWxkLnZhbHVlOwogICAgICAgICAgICAgICAgaWYgKCBzdWJmaWVsZFZhbHVlICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBzdWJmaWVsZFZhbHVlLCAiZGVzY3JpcHRpb24iLCBkYyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIHZhciBoZWFkZXIgPSBmaWVsZC5nZXRWYWx1ZSggL2kvICk7CiAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC90fGV8ZHx4fG18Ynx5fHV8ei8sICIgOyAiICk7CiAgICAgICAgICAgIGlmICggdmFsdWUgIT09ICIiICkgewogICAgICAgICAgICAgICAgaWYgKCBoZWFkZXIgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGhlYWRlciArICI6ICIgKyB2YWx1ZSwgImRlc2NyaXB0aW9uIiwgZGMgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJkZXNjcmlwdGlvbiIsIGRjICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzUzNC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvYS8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICB2YXIgc3ViZmllbGRWYWx1ZSA9IHN1YmZpZWxkLnZhbHVlOwogICAgICAgICAgICAgICAgaWYgKCBzdWJmaWVsZFZhbHVlICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBzdWJmaWVsZFZhbHVlLCAiZGVzY3JpcHRpb24iLCBkYyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIHZhciBoZWFkZXIgPSBmaWVsZC5nZXRWYWx1ZSggL2kvICk7CiAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC90fGV8ZHx4fGJ8eXx1LywgIiA7ICIgKTsKICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGhlYWRlciAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggaGVhZGVyICsgIjogIiArIHZhbHVlLCAiZGVzY3JpcHRpb24iLCBkYyApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZSwgImRlc2NyaXB0aW9uIiwgZGMgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gKTsKCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzU1OS8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgaWYgKCAhZmllbGQuZ2V0VmFsdWUoIC9hLyApLm1hdGNoKCAvTWVkdmlya2VuZGU6IC9pICkgJiYgZmllbGQuZ2V0VmFsdWUoIC9hLyApICE9PSAiIiApIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC9hLyApOwogICAgICAgICAgICAgICAgdmFsdWUgPSBNYXJjUmVjb3JkLmNsZWFuRGF0YSggdmFsdWUgKTsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlLCAiZGVzY3JpcHRpb24iLCBkYyApCiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CgogICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkgPT09ICI4NzA5NzYiICkgewogICAgICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNTU5IiwgImoiICk7CiAgICAgICAgICAgIGlmICggdmFsdWVzID09ICIiICkgewogICAgICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjU1OSIsICJkIiApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJkZXNjcmlwdGlvbiIsIGRjICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IGNyZWF0ZURjRGVzY3JpcHRpb24gZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGN0ZXJtczphYnN0cmFjdCBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBYnN0cmFjdCggcmVjb3JkLCB4bWwgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IHhtbCBBbiBYTUwgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBYnN0cmFjdAogICAgICovCiAgICB0aGF0LmNyZWF0ZURjdGVybXNBYnN0cmFjdCA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IGNyZWF0ZURjdGVybXNBYnN0cmFjdCBmdW5jdGlvbiIgKTsKCgogICAgICAgIHZhciB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNTA0IiwgImEiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJhYnN0cmFjdCIsIGRjdGVybXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogY3JlYXRlRGN0ZXJtc0Fic3RyYWN0IGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjdGVybXM6YXVkaWVuY2UgWE1MIGVsZW1lbnRzIGFuZCBhZGRzIHRoZW0gdG8gYW4gWE1MIG9iamVjdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zQXVkaWVuY2UoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zQXVkaWVuY2UKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY3Rlcm1zQXVkaWVuY2UgPSBmdW5jdGlvbiggcmVjb3JkLCB4bWwgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBjcmVhdGVEY3Rlcm1zQXVkaWVuY2UgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNTE3IiwgImEiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXNbIGEgXS5tYXRjaCggL0ZyYS4qXHUwMGU1ci8gKSApIHsKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czphZ2UiICkKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImF1ZGllbmNlIiwgZGN0ZXJtcywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB2YWx1ZXNbIGEgXS5tYXRjaCggL01cdTAwZTZya25pbmc6IC8gKSApIHsKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czptZWRpZXJhYWQiICkKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImF1ZGllbmNlIiwgZGN0ZXJtcywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB2YWx1ZXNbIGEgXS5tYXRjaCggL1BFR0kvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGtkY3BsdXM6cGVnaSIgKQogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiYXVkaWVuY2UiLCBkY3Rlcm1zLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIGF1ZGllbmNlOwoKICAgICAgICB2YXIgYWdlRCA9IDE1OwogICAgICAgIHZhciBhZ2VFID0gMTU7CgogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMDYvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGlmICggZmllbGQuZXhpc3RzKCAvZC8gKSApIHsKICAgICAgICAgICAgICAgIGFnZUQgPSBOdW1iZXIoIHJlY29yZC5nZXRWYWx1ZSggLzAwNi8sIC9kLyApICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBmaWVsZC5leGlzdHMoIC9lLyApICkgewogICAgICAgICAgICAgICAgYWdlRSA9IE51bWJlciggcmVjb3JkLmdldFZhbHVlKCAvMDA2LywgL2UvICkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gKTsKCiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvby8gKS5tYXRjaCggL2IvICkgfHwgcmVjb3JkLmdldFZhbHVlKCAvOTkwLywgL2IvICkubWF0Y2goIC9ifEIvICkgfHwgcmVjb3JkLmdldFZhbHVlKCAvMDMyLywgL3gvICkubWF0Y2goIC9iXHUwMGY4ay9pICkgfHwgYWdlRCA8IDE1IHx8IGFnZUUgPCAxNSB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMzkvLCAvYS8gKS5tYXRjaCggL2JlZnxiZWF8bXVifGhpYi8gKSApIHsKICAgICAgICAgICAgYXVkaWVuY2UgPSAiYlx1MDBmOHJuZW1hdGVyaWFsZXIiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGF1ZGllbmNlID0gInZva3Nlbm1hdGVyaWFsZXIiOwogICAgICAgIH0KCiAgICAgICAgaWYgKCBhdWRpZW5jZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBhdWRpZW5jZSwgImF1ZGllbmNlIiwgZGN0ZXJtcyApOwogICAgICAgIH0KCiAgICAgICAgdmFyIGF1ZGllbmNlX2V4dHJhOwoKICAgICAgICB2YXIgY29ycmVjdGVkID0gIm5vIjsKCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzk5MC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgaWYgKCBmaWVsZC5nZXRWYWx1ZSggL3IvICkgIT09ICIiICkgewogICAgICAgICAgICAgICAgY29ycmVjdGVkID0gInllcyI7CiAgICAgICAgICAgIH0KICAgICAgICB9ICk7CgogICAgICAgIGlmICggY29ycmVjdGVkID09PSAibm8iICkgewogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzk5MC8sIC9iLyApLm1hdGNoKCAvdnxWLyApIHx8IHJlY29yZC5nZXRWYWx1ZSggLzk5MC8sIC9jLyApLm1hdGNoKCAvSHxofFl8eS8gKSApIHsKICAgICAgICAgICAgICAgIGF1ZGllbmNlX2V4dHJhID0gInZva3Nlbm1hdGVyaWFsZXIiOwogICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL15zLyApICYmICFyZWNvcmQuZ2V0VmFsdWUoIC8wMzkvLCAvYS8gKS5tYXRjaCggL211YnxoaWIvICkgJiYgIXJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9vLyApLm1hdGNoKCAvYi8gKSApIHsKICAgICAgICAgICAgICAgIGF1ZGllbmNlX2V4dHJhID0gInZva3Nlbm1hdGVyaWFsZXIiOwogICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL15tLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzY1Mi8sIC9tLyApICE9PSAiNzcuNzQiICkgewogICAgICAgICAgICAgICAgYXVkaWVuY2VfZXh0cmEgPSAidm9rc2VubWF0ZXJpYWxlciI7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvOTkwLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgaWYgKCBmaWVsZC5nZXRWYWx1ZSggL3IvICkgIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIGlmICggZmllbGQuZ2V0VmFsdWUoIC85OTAvLCAvYi8gKS5tYXRjaCggL3Z8Vi8gKSB8fCBmaWVsZC5nZXRWYWx1ZSggLzk5MC8sIC9jLyApLm1hdGNoKCAvSHxofFl8eS8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXVkaWVuY2VfZXh0cmEgPSAidm9rc2VubWF0ZXJpYWxlciI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIGF1ZGllbmNlICE9PSAidm9rc2VubWF0ZXJpYWxlciIgJiYgYXVkaWVuY2VfZXh0cmEgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggYXVkaWVuY2VfZXh0cmEsICJhdWRpZW5jZSIsIGRjdGVybXMgKTsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IGNyZWF0ZURjdGVybXNBdWRpZW5jZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBka2RjcGx1czp2ZXJzaW9uIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGtkY3BsdXNWZXJzaW9uKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGtkY3BsdXNWZXJzaW9uCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGtkY3BsdXNWZXJzaW9uID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGtkY3BsdXNWZXJzaW9uIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjI1MCIsICJhfHgiLCAiLCAiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJ2ZXJzaW9uIiwgZGtkY3BsdXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGtkY3BsdXNWZXJzaW9uIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOnB1Ymxpc2hlciBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjUHVibGlzaGVyKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNQdWJsaXNoZXIKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1B1Ymxpc2hlciA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjUHVibGlzaGVyIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gWyBdOwogICAgICAgIHZhciB2YWx1ZTsKCiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzI2MC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL2IvLCAiIyMiICk7CiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlLnNwbGl0KCAvIyMvICk7CiAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0gIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTWFyY1JlY29yZC5jbGVhbkRhdGEoIHZhbHVlc1sgYSBdICk7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCAvaSBzYW1hcmJlamRlIG1lZFs6XT8gfGkga29tbWlzc2lvbiBob3NbOl0/IC8sICIiICk7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJwdWJsaXNoZXIiLCBkYyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSApOwoKICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNDQwIiwgImUiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJwdWJsaXNoZXIiLCBkYyApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1B1Ymxpc2hlciBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkYzpjb250cmlidXRvciBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjQ29udHJpYnV0b3IoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0NvbnRyaWJ1dG9yCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGNDb250cmlidXRvciA9IGZ1bmN0aW9uKCBjcmVhdG9ycywgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNDb250cmlidXRvciBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIGF0dHJpYnV0ZTsKICAgICAgICB2YXIgdmFsdWU7CgogICAgICAgIHZhciBkaXJlY3RvcnMgPSBjcmVhdG9yczsKCiAgICAgICAgZm9yICggdmFyIGEgaW4gY3JlYXRvcnMgKSB7CiAgICAgICAgICAgIHN3aXRjaCAoIGNyZWF0b3JzWyBhIF0ub3JpZ2luICkgewogICAgICAgICAgICAgICAgY2FzZSAiNzAwIjoKICAgICAgICAgICAgICAgIGNhc2UgIjcxMCI6CiAgICAgICAgICAgICAgICBjYXNlICI3MjAiOgogICAgICAgICAgICAgICAgY2FzZSAiNzcwIjoKICAgICAgICAgICAgICAgIGNhc2UgIjc4MCI6CiAgICAgICAgICAgICAgICAgICAgaWYgKCBjcmVhdG9yc1sgYSBdLnR5cGUgIT09ICJhcnRpY2xlIiAmJiBjcmVhdG9yc1sgYSBdLmZ1bmN0ICE9PSAiZGtkY3BsdXM6ZHJ0IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ID09PSAiZGtkY3BsdXM6IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjb250cmlidXRvciIsIGRjICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoIGNyZWF0b3JzWyBhIF0uZnVuY3QgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjb250cmlidXRvciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgIjEwMCI6CiAgICAgICAgICAgICAgICAgICAgaWYgKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ICE9PSAiZGtkY3BsdXM6IiAmJiBjcmVhdG9yc1sgYSBdLmZ1bmN0ICE9PSAiZGtkY3BsdXM6YXV0IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjb250cmlidXRvciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICIyNDUiOgogICAgICAgICAgICAgICAgICAgIGlmICggY3JlYXRvcnNbIGEgXS5mdW5jdCA9PT0gImRrZGNwbHVzOmRraW5kIiB8fCBjcmVhdG9yc1sgYSBdLmZ1bmN0ID09PSAiZGtkY3BsdXM6aXZlIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjb250cmlidXRvciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICI1MTIiOgogICAgICAgICAgICAgICAgICAgIGlmICggY3JlYXRvcnNbIGEgXS5mdW5jdCA9PT0gImRrZGNwbHVzOmFjdCIgfHwgY3JlYXRvcnNbIGEgXS5mdW5jdCA9PT0gImRrZGNwbHVzOmRraW5kIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCBjcmVhdG9yc1sgYSBdLmZ1bmN0ICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIGNyZWF0b3JzWyBhIF0udmFsdWUgKyBjcmVhdG9yc1sgYSBdLnJlc3QsICJjb250cmlidXRvciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICI1NTkiOgogICAgICAgICAgICAgICAgICAgIGlmICggY3JlYXRvcnNbIGEgXS5mdW5jdCA9PT0gImRrZGNwbHVzOmFjdCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggY3JlYXRvcnNbIGEgXS5mdW5jdCApOwogICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBjcmVhdG9yc1sgYSBdLnZhbHVlICsgY3JlYXRvcnNbIGEgXS5yZXN0LCAiY29udHJpYnV0b3IiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNDb250cmlidXRvciBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkYzpkYXRlIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEYXRlKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEYXRlCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGNEYXRlID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEYXRlIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gWyBdOwoKICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzU1Ny8sIC9qLyApICE9PSAiIiApIHsKICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjU1NyIsICJqIiApOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgIGlmICggU3RyaW5nKCB2YWx1ZXMgKS5tYXRjaCggL1t1VV0uP1tcdTAwRTVcdTAwQzVdLyApIHx8IFN0cmluZyggdmFsdWVzICkubWF0Y2goIC9bc1NdLj9bQWFdLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCAiVWtlbmR0IFx1MDBFNXJzdGFsIiwgImRhdGUiLCBkYyApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLnJlcGxhY2UoIC9bXjAtOT9dL2csICIiICksICJkYXRlIiwgZGMgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvei8gKSAhPT0gIiIgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3UvICkgIT09ICJyIiApIHsKICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAwOCIsICJ6IiApOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiZGF0ZSIsIGRjICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvYS8gKSAhPT0gIiIgKSB7CiAgICAgICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICIwMDgiLCAiYSIgKTsKICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImRhdGUiLCBkYyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzI2MC8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgIGZpZWxkLmVhY2hTdWJGaWVsZCggL2MvLCBmdW5jdGlvbiggZmllbGQsIHN1YmZpZWxkICkgewogICAgICAgICAgICAgICAgICAgIHZhciBzdWJmaWVsZFZhbHVlID0gc3ViZmllbGQudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBTdHJpbmcoIHN1YmZpZWxkVmFsdWUgKS5tYXRjaCggL1swLTldezR9Lj9bMC05XXs0fS8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggc3ViZmllbGRWYWx1ZS5yZXBsYWNlKCAvLiooWzAtOV17NH0pLT8kLywgIiQxIiApLCAiZGF0ZSIsIGRjICk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggU3RyaW5nKCBzdWJmaWVsZFZhbHVlICkubWF0Y2goIC9bdVVdLj9bXHUwMEU1XHUwMEM1XS8gKSB8fCBTdHJpbmcoIHN1YmZpZWxkVmFsdWUgKS5tYXRjaCggL1tzU10uP1tBYV0vICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoICJVa2VuZHQgXHUwMEU1cnN0YWwiLCAiZGF0ZSIsIGRjICk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggc3ViZmllbGRWYWx1ZS5yZXBsYWNlKCAvW14wLTk/XSovZywgIiIgKSwgImRhdGUiLCBkYyApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEYXRlIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOnR5cGUgWE1MIGVsZW1lbnRzIGFuZCBhZGRzIHRoZW0gdG8gYW4gWE1MIG9iamVjdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1R5cGUoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1R5cGUKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1R5cGUgPSBmdW5jdGlvbiggcmVjb3JkLCB4bWwsIHN1Ym1pdHRlciwgZm9ybWF0ICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUeXBlIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgYXR0cmlidXRlOwogICAgICAgIHZhciB2YWx1ZXM7CiAgICAgICAgdmFyIHZhbHVlOwogICAgICAgIHZhciB2YWx1ZVRleHQgPSAiIjsKICAgICAgICB2YXIgdmFsdWVUZXh0cyA9IFsgXTsKCiAgICAgICAgLy9Gb3IgdGVzdCBwdXJwb3NlcyBvbmx5CiAgICAgICAgTG9nLmRlYnVnKCBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiMDAxIiwgImEiICkgKyAiIFRFU1QgVFlQRSAwMDlnOiAiICsgTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAwOSIsICJnIiApICk7CgogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wMDkvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGlmICggZmllbGQuY291bnQoICJhIiApID4gMSApIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gZmllbGQuZ2V0VmFsdWUoIC9hfGcvLCAiIiApOwogICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCAvKC57M30pL2csICIkMSMjIiApOwogICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWUuc3BsaXQoIC8jIy8gKTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSBUYWJsZXMudHlwZXMoIHZhbHVlc1sgYSBdLnJlcGxhY2UoIC8uLywgIiIgKSApOwogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0gIT09ICJ2IiAmJiB2YWx1ZXNbIGEgXSAhPT0gIiIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0ubWF0Y2goIC90W2hvXS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvW2VuXS8gKS5tYXRjaCggL2JsdS1yYXkvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQmx1LXJheSI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXNbIGEgXS5tYXRjaCggL3hoLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApLm1hdGNoKCAvcy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJCXHUwMGU1bmQiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0ubWF0Y2goIC9jeFt4ZV0vICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiTm9kZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXNbIGEgXS5tYXRjaCggL3N4Yy8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJDZCAobXVzaWspIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHRzLnB1c2goIHZhbHVlVGV4dCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGhhc01hdGVyaWFsVHlwZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGtkY3BsdXM6QmliREstVHlwZSIgKTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBiIGluIHZhbHVlVGV4dHMgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZVRleHRzWyBiIF0gIT09ICIiICYmIHZhbHVlVGV4dHNbIGIgXSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZVRleHRzWyBiIF0sICJ0eXBlIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgICAgICAgICBoYXNNYXRlcmlhbFR5cGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvL1RoaXMgYml0IG9mIGNvZGUgaXMgdG8gZml4IGNhdGFsb2dpbmcgZXJyb3JzIG9yIHZhcmlhdGlvbnMgZm9yIG11bHRpcGxlIHR5cGUgbWF0ZXJpYWwsIGVzcGVjaWFsbHkgZm91bmQgaW4gcmVjb3JkcyBmcm9tIHJlc2VhcmNoIGxpYnJhcmllcwogICAgICAgICAgICAgICAgaWYgKCBoYXNNYXRlcmlhbFR5cGUgPT09IGZhbHNlICYmIFN0cmluZyggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2cvICkgKS5tYXRjaCggL3hjLyApICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoICJDZCIsICJ0eXBlIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBoYXNNYXRlcmlhbFR5cGUgPT09IGZhbHNlICYmIFN0cmluZyggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2cvICkgKS5tYXRjaCggL3h4LyApICYmIFN0cmluZyggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkubWF0Y2goIC9hLyApICkgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggIkJvZyIsICJ0eXBlIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBoYXNNYXRlcmlhbFR5cGUgPT09IGZhbHNlICYmIFN0cmluZyggcmVjb3JkLmdldFZhbHVlKCAvMjQ1LywgL20vICkgKS5tYXRjaCggL2x5ZGJvZy9pICkgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggIkx5ZGJvZyIsICJ0eXBlIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggIlNhbW1lbnNhdCBtYXRlcmlhbGUiLCAidHlwZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gKTsKCiAgICAgICAgaWYgKCB2YWx1ZVRleHQgPT09ICIiICkgewogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMDA5LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC5nZXRWYWx1ZSggL2cvICk7CiAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSBUYWJsZXMudHlwZXMoIHZhbHVlICk7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAvXnhbeHldLyApICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKSA9PT0gInYiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJTYW1tZW5zYXQgbWF0ZXJpYWxlIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9eeFt4eV0vICkgJiYgZmllbGQuZ2V0VmFsdWUoIC9hLyApLm1hdGNoKCAvYS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQm9nIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggKCB2YWx1ZS5tYXRjaCggL3hlLyApICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL2EvICkgJiYgIXJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC91LyApLm1hdGNoKCAvby8gKSApICYmICFyZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvaC8gKS5tYXRjaCggL20vICkgfHwgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3cvICkubWF0Y2goIC8xLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJFYm9nIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9eeHgvICkgJiYgZmllbGQuZ2V0VmFsdWUoIC9hLyApLm1hdGNoKCAvYy8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiTm9kZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAvXnhlLyApICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL2MvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkUtbm9kZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAieHgiICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL2UvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIktvcnQiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInhlIiAmJiBmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9lLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJFLWtvcnQiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInh4IiAmJiBmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9wLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJQdW5rdHNrcmlmdCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAvXnhjLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJDZCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAvXnhjLyApICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL3MvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkNkIChtdXNpaykiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5tYXRjaCggL3hoLyApICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL3MvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkJcdTAwZTVuZCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAieHgiICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC90LyApLm1hdGNoKCAvcC8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiUGVyaW9kaWt1bSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAveFt4ZV0vICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3QvICkubWF0Y2goIC9hLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJBcnRpa2VsIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUubWF0Y2goIC94W3hlXS8gKSAmJiBmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9hLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC90LyApLm1hdGNoKCAvYS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvci8gKS5tYXRjaCggL2FuLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJBdmlzYXJ0aWtlbCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAveFt4ZV0vICkgJiYgZmllbGQuZ2V0VmFsdWUoIC9hLyApLm1hdGNoKCAvYS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvdC8gKS5tYXRjaCggL2EvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3IvICkubWF0Y2goIC9hcC8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiVGlkc3NrcmlmdHNhcnRpa2VsIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09ICJ4eCIgJiYgZmllbGQuZ2V0VmFsdWUoIC9hLyApLm1hdGNoKCAvYS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvdC8gKS5tYXRjaCggL3AvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL2gvICkubWF0Y2goIC9tLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJTZXJpZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAieHgiICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL2EvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3QvICkubWF0Y2goIC9wLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9oLyApLm1hdGNoKCAvbi8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQXZpcyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAieHgiICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL2EvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3QvICkubWF0Y2goIC9wLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9oLyApLm1hdGNoKCAvcC8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiVGlkc3NrcmlmdCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAieHgiICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL2EvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL2gvICkubWF0Y2goIC96LyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJcdTAwYzVyYm9nIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09ICJ4eCIgJiYgZmllbGQuZ2V0VmFsdWUoIC9hLyApLm1hdGNoKCAvYS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvbS8gKS5tYXRjaCggLzEvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkJvZyBzdG9yIHNrcmlmdCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLm1hdGNoKCAvXnRoLyApICYmIGZpZWxkLmdldFZhbHVlKCAvYS8gKS5tYXRjaCggL3N8bS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiRHZkIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggKCB2YWx1ZSA9PT0gInRoIiB8fCB2YWx1ZSA9PT0gInRvIiApICYmIHJlY29yZC5nZXRWYWx1ZSggLzMwMC8sIC9bZW5dLyApLm1hdGNoKCAvYmx1LXJheS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQmx1LXJheSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAid2YiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJCaW9ncmFmZmlsbSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAidGIiICYmIHJlY29yZC5nZXRWYWx1ZSggLzMwMC8sIC9lLyApLm1hdGNoKCAvbXAzLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJDZC1yb20gKG1wMykiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInh5IiAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDUvLCAvei8gKS5tYXRjaCggL3B8cS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiTHlkYm9nIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09ICJ4YyIgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA1LywgL3ovICkubWF0Y2goIC9wfHEvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkx5ZGJvZyAoY2QpIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09ICJ4ZSIgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA1LywgL3ovICkubWF0Y2goIC9wfHEvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkx5ZGJvZyAobmV0KSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAieGMiICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwNS8sIC96LyApLm1hdGNoKCAvcHxxLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzMwMC8sIC9lLyApLm1hdGNoKCAvbXAzLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJMeWRib2cgKGNkLW1wMykiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInhlIiAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL20vICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkZpbG0gKG5ldCkiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInhlIiAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL3MvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIk11c2lrIChuZXQpIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09ICJ4ZSIgJiYgcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3QvICkubWF0Y2goIC9wLyApICYmICFyZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvaC8gKS5tYXRjaCggL20vICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIlBlcmlvZGlrdW0gKG5ldCkiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInhlIiAmJiBmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9hLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC90LyApLm1hdGNoKCAvcC8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvaC8gKS5tYXRjaCggL24vICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkF2aXMgKG5ldCkiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInhlIiAmJiBmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9hLyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC90LyApLm1hdGNoKCAvcC8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvaC8gKS5tYXRjaCggL3AvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIlRpZHNza3JpZnQgKG5ldCkiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMTQvLCAveC8gKS5tYXRjaCggL0FOTS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQW5tZWxkZWxzZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC90LyApLm1hdGNoKCAvYS8gKSAmJiByZWNvcmQuZ2V0VmFsdWUoIC8wMzIvLCAveC8gKS5tYXRjaCggL1NBW1JJXS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiU2FuZyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9kLyApLm1hdGNoKCAvMi8gKSB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMzgvLCAvYS8gKS5tYXRjaCggL2JpLyApIHx8IHJlY29yZC5nZXRWYWx1ZSggLzU/Py8sIC9hLyApLm1hdGNoKCAvQmlsbGVkYm9nLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJCaWxsZWRib2ciOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvZC8gKS5tYXRjaCggLzEvICkgfHwgcmVjb3JkLmdldFZhbHVlKCAvMDM4LywgL2EvICkubWF0Y2goIC9edGUkLyApIHx8IHJlY29yZC5nZXRWYWx1ZSggLzI2MC8sIC9hLyApLm1hdGNoKCAvQ29taWNzL2kgKSB8fCByZWNvcmQuZ2V0VmFsdWUoIC81Pz98NjMxLywgL2EvICkubWF0Y2goIC9eVGVnbmVzZXJpZS8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiVGVnbmVzZXJpZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzUwNHw0NDAvLCAvYS8gKS5tYXRjaCggL0dyYXBoaWMgbm92ZWx8XGJHcmFmaXNrIHJvbWFuL2kgKSB8fCByZWNvcmQuZ2V0VmFsdWUoIC82NjYvLCAvc3xvLyApLm1hdGNoKCAvZ3JhcGhpYyBub3ZlbHMvICkgJiYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvZC8gKS5tYXRjaCggL3h8MS8gKSB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMzgvLCAvYS8gKS5tYXRjaCggL3RlLyApICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkdyYXBoaWMgbm92ZWwiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvcS8gKS5tYXRjaCggL2JnLyApIHx8IHJlY29yZC5nZXRWYWx1ZSggLzY1Mi8sIC9tLyApLm1hdGNoKCAvNzkuNDEvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvNTAxLywgL2EvICkubWF0Y2goIC9eUGMvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIlBjLXNwaWwiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gInhlIiAmJiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC9xLyApLm1hdGNoKCAvYmcvICkgJiYgcmVjb3JkLmdldFZhbHVlKCAvNjUyLywgL20vICkubWF0Y2goIC83OS40MS8gKSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJQYy1zcGlsIChuZXQpIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMzAwLywgL2UvICkubWF0Y2goIC9nYW1lIGJveS9pICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkdhbWVCb3kiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL2dhbWUgYm95IGFkdmFuY2UvaSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJHYW1lQm95IEFkdmFuY2UiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL3BsYXlzdGF0aW9uL2kgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiUGxheXN0YXRpb24iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL3BsYXlzdGF0aW9uIDIvaSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJQbGF5c3RhdGlvbiAyIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMzAwLywgL2UvICkubWF0Y2goIC9wbGF5c3RhdGlvbiAzL2kgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiUGxheXN0YXRpb24gMyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzMwMC8sIC9lLyApLm1hdGNoKCAvcGxheXN0YXRpb24gNC9pICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIlBsYXlzdGF0aW9uIDQiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL3BsYXlzdGF0aW9uIHZpdGEvaSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJQbGF5c3RhdGlvbiBWaXRhIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMzAwLywgL2UvICkubWF0Y2goIC93aWkvaSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJXaWkiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL3dpaSB1L2kgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiV2lpIFUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL25pbnRlbmRvIGRzL2kgKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiTmludGVuZG8gRFMiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL3hib3gvaSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJYYm94IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMzAwLywgL2UvICkubWF0Y2goIC94Ym94IDM2MC9pICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIlhib3ggMzYwIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMzAwLywgL2UvICkubWF0Y2goIC94Ym94IG9uZS9pICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIlhib3ggT25lIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMzAwLywgL2UvICkubWF0Y2goIC9QU1AvaSApICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJQU1AiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy90aGUgZm9sbG93aW5nIGZpeGVzIHByb2JsZW1zIHdpdGggdmVyeSBzcGVjaWFsIG1hdGVyaWFsIHR5cGVzCiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlVGV4dCA9PT0gIiIgfHwgdmFsdWVUZXh0ID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL3YvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJTYW1tZW5zYXQgbWF0ZXJpYWxlIjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL3UvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJHZW5zdGFuZCI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggdmFsdWUubWF0Y2goIC9edGIvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJDZC1yb20iOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHZhbHVlLm1hdGNoKCAvXnh5LyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApLm1hdGNoKCAvdC8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYi8gKS5tYXRjaCggL2UvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiS29ydCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiRWxla3Ryb25pc2sgbWF0ZXJpYWxlIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzUxMi8sIC9hLyApLm1hdGNoKCAvbHlkYm9nL2kgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkx5ZGJvZyI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9CZWNhdXNlIHdlIHdhbnQgYWxsIHJlY29yZHMgdG8gaGF2ZSBhIGRjOnR5cGUgd2Ugc2V0IGRlZmF1bHQgdG8gIkRpdmVyc2UiLgogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiRGl2ZXJzZSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3dpdGNoICggc3VibWl0dGVyICkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAxMiI6CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJBcnRpa2VsIjsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiODcwOTc2IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICI4NzA5NzMiOgogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQW5tZWxkZWxzZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgIjE1MDAwOCI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMTUwMDI4IjoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxNTAwMzgiOgogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiRWJvZyI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBmb3JtYXQgPT09ICJhbm1lbGQiICkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJBbm1lbGRlbHNlIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvNTU3LywgL2EvICkubWF0Y2goIC9GYWt0YUxpbmsvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0ID0gIkFydGlrZWwiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC81NTcvLCAvYS8gKS5tYXRjaCggL0ZvcmZhdHRlcndlYi8gKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSAiQXJ0aWtlbCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlVGV4dCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czpCaWJESy1UeXBlIiApOwogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlVGV4dCwgInR5cGUiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIHJlY29yZC5leGlzdEZpZWxkKCAvNTU3LyApICkgewogICAgICAgICAgICAgICAgICAgIHZhciBpc1BlcmlvZGljYWwgPSB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNQZXJpb2RpY2FsID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIGlzUGVyaW9kaWNhbCA9PT0gZmFsc2UgJiYgKCB2YWx1ZSA9PT0gInh4eGUiIHx8IHZhbHVlID09PSAieGV4eCIgKSAmJiBmaWVsZC5nZXRWYWx1ZSggL2EvICkubWF0Y2goIC9hLyApICkgewogICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVWYWx1ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOkJpYkRLLVR5cGUiICk7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggIkJvZyIsICJ0eXBlIiwgZGMsIGF0dHJpYnV0ZVZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggIk5ldGRva3VtZW50IiwgInR5cGUiLCBkYywgYXR0cmlidXRlVmFsdWUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1R5cGUgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGM6dHlwZSBYTUwgZWxlbWVudHMgKHdpdGggZGtkY3BsdXM6cGd2YWVyayBhdHRyaWJ1dGUpIGFuZCBhZGRzIHRoZW0gdG8gYW4gWE1MIG9iamVjdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVQZ1R5cGUoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVQZ1R5cGUKICAgICAqLwogICAgdGhhdC5jcmVhdGVQZ1R5cGUgPSBmdW5jdGlvbiggcmVjb3JkLCB4bWwgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVQZ1R5cGUgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZVRleHQgPSAiIjsKCiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8zMDAvLCAvZS8gKS5tYXRjaCggL2dhbWUgYm95fHBsYXlzdGF0aW9ufFBTUHx3aWl8eGJveC8gKSB8fCByZWNvcmQuZ2V0VmFsdWUoIC8wMDgvLCAvcS8gKS5tYXRjaCggL2JnLyApICkgewogICAgICAgICAgICB2YWx1ZVRleHQgPSAic3BpbCI7CiAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkubWF0Y2goIC9hLyApIHx8IHJlY29yZC5nZXRWYWx1ZSggLzAwNS8sIC96LyApLm1hdGNoKCAvcHxxLyApIHx8ICggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkubWF0Y2goIC90LyApICYmIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9nLyApLm1hdGNoKCAvdGsvICkgKSApIHsKICAgICAgICAgICAgdmFsdWVUZXh0ID0gImJvZyI7CiAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2EvICkubWF0Y2goIC9ebS8gKSApIHsKICAgICAgICAgICAgdmFsdWVUZXh0ID0gImZpbG0iOwogICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApLm1hdGNoKCAvXnMvICkgKSB7CiAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJtdXNpayI7CiAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA5LywgL2cvICkubWF0Y2goIC90aC8gKSApIHsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZVRleHRFeHRyYSA9ICJmaWxtIjsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhbHVlVGV4dCA9ICJib2ciOwogICAgICAgIH0KCiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggIm9zczpwZ3ZhZXJrIiApOwoKICAgICAgICBpZiAoIHZhbHVlVGV4dCAhPT0gIiIgKSB7CiAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlVGV4dCwgInR5cGUiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHZhbHVlVGV4dEV4dHJhICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlVGV4dEV4dHJhLCAidHlwZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICB9CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZVBnVHlwZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkYzpmb3JtYXQgWE1MIGVsZW1lbnRzIGFuZCBhZGRzIHRoZW0gdG8gYW4gWE1MIG9iamVjdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Zvcm1hdCggcmVjb3JkLCB4bWwgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IHhtbCBBbiBYTUwgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjRm9ybWF0CiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGNGb3JtYXQgPSBmdW5jdGlvbiggcmVjb3JkLCB4bWwgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Zvcm1hdCBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbHVlcyA9IFsgXTsKCiAgICAgICAgdmFyIGlsbHVzdHJhdGVkU2V0ID0gMDsKCiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjMwMCIsICJufGJ8ZHxlIiwgIiwgIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSAmJiBpbGx1c3RyYXRlZFNldCA9PT0gMCApIHsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1sgYSBdLnJlcGxhY2UoIC9pbGxcLi8sICJpbGx1c3RyZXJldCIgKTsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlLCAiZm9ybWF0IiwgZGMgKTsKICAgICAgICAgICAgICAgIGlsbHVzdHJhdGVkU2V0ID0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjUwMSIsICJpfGF8Ynx1fHkiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJmb3JtYXQiLCBkYyApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Zvcm1hdCBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkY3Rlcm1zOmV4dGVudCBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNFeHRlbnQoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zRXh0ZW50CiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGN0ZXJtc0V4dGVudCA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNFeHRlbnQgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiMzAwIiwgImF8bCIsICIsICIgKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImV4dGVudCIsIGRjdGVybXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjUxMiIsICJhIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0ubWF0Y2goIC9TcGlsbGV0aWQvaSApICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLnJlcGxhY2UoIC9TcGlsbGV0aWQ6IC9pLCAiIiApLCAiZXh0ZW50IiwgZGN0ZXJtcyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zRXh0ZW50IGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOmlkZW50aWZpZXIgWE1MIGVsZW1lbnRzIGFuZCBhZGRzIHRoZW0gdG8gYW4gWE1MIG9iamVjdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0lkZW50aWZpZXIoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0lkZW50aWZpZXIKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY0lkZW50aWZpZXIgPSBmdW5jdGlvbiggcmVjb3JkLCB4bWwgKSB7CgogICAgICAgIExvZy50cmFjZSggIkVudGVyaW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0lkZW50aWZpZXIgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czpJU0JOIiApOwogICAgICAgIHZhciB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiMDIxIiwgImEiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJpZGVudGlmaWVyIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICIwMjEiLCAiZSIgKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImlkZW50aWZpZXIiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOklTU04iICk7CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAyMiIsICJhIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaWRlbnRpZmllciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGtkY3BsdXM6SVNNTiIgKTsKICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiMDI4IiwgImEiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJpZGVudGlmaWVyIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICI1MzgiLCAiYnxmfGciICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJpZGVudGlmaWVyIiwgZGMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGN0ZXJtczpVUkkiICk7CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjg1NiIsICJ1IiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaWRlbnRpZmllciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDIvLCAvYi8gKSA9PT0gIjE1MDAxNSIgKSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggIm9zczpQUk9WSURFUi1JRCIgKTsKICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAwMiIsICJkIiApOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaWRlbnRpZmllciIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNJZGVudGlmaWVyIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOnNvdXJjZSBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjU291cmNlKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNTb3VyY2UKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1NvdXJjZSA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjU291cmNlIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjI0MSIsICJhIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IE1hcmNSZWNvcmQuY2xlYW5EYXRhKCB2YWx1ZXNbIGEgXSApOwogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWUsICJzb3VyY2UiLCBkYyApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1NvdXJjZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkYzpsYW5ndWFnZSBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjTGFuZ3VhZ2UoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0xhbmd1YWdlCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGNMYW5ndWFnZSA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjTGFuZ3VhZ2UgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZXMgPSBbIF07CiAgICAgICAgdmFyIGF0dHJpYnV0ZTsKCiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAwOCIsICJsIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0gPT09ICJtdWwiICkgewogICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRjdGVybXM6SVNPNjM5LTIiICk7CiAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJsYW5ndWFnZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCBUYWJsZXMubGFuZ3VhZ2VzKCB2YWx1ZXNbIGEgXSApLCAibGFuZ3VhZ2UiLCBkYyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIHJlY29yZC5leGlzdEZpZWxkKCAvMDQxLyApICkgewogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMDQxLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZXNGcm9tU3ViRmllbGQoIHJlY29yZCwgZmllbGQubmFtZSwgImEiICk7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJkY3Rlcm1zOklTTzYzOS0yIiApOwogICAgICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICAgICAgICAgIGlmICggVGFibGVzLmxhbmd1YWdlcyggdmFsdWVzWyBhIF0gKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJsYW5ndWFnZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIFRhYmxlcy5sYW5ndWFnZXMoIHZhbHVlc1sgYSBdICksICJsYW5ndWFnZSIsIGRjICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBMb2cud2FybiggIlxuSUxMRUdBTCBMQU5HVUFHRSBDT0RFIGluIDA0MSphOiAiLCB2YWx1ZXNbIGEgXSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggU3RyaW5nKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSApICE9PSAibSIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZXNGcm9tU3ViRmllbGQoIHJlY29yZCwgZmllbGQubmFtZSwgInAiICk7CiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGN0ZXJtczpJU082MzktMiIgKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggVGFibGVzLmxhbmd1YWdlcyggdmFsdWVzWyBhIF0gKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImxhbmd1YWdlIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIFRhYmxlcy5sYW5ndWFnZXMoIHZhbHVlc1sgYSBdICksICJsYW5ndWFnZSIsIGRjICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cud2FybiggIlxuSUxMRUdBTCBMQU5HVUFHRSBDT0RFIGluIDA0MSpwOiAiLCB2YWx1ZXNbIGEgXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjAwOCIsICJsIiApOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWVzWyBhIF0gIT09ICJtdWwiICYmIFRhYmxlcy5sYW5ndWFnZXMoIHZhbHVlc1sgYSBdICkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGN0ZXJtczpJU082MzktMiIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJsYW5ndWFnZSIsIGRjLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggVGFibGVzLmxhbmd1YWdlcyggdmFsdWVzWyBhIF0gKSwgImxhbmd1YWdlIiwgZGMgKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBMb2cud2FybiggIlxuSUxMRUdBTCBMQU5HVUFHRSBDT0RFIGluIDAwOCpsIiwgdmFsdWVzWyBhIF0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggU3RyaW5nKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKSApID09PSAibSIgKSB7CiAgICAgICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC8wNDEvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlc0Zyb21TdWJGaWVsZCggcmVjb3JkLCBmaWVsZC5uYW1lLCAicCIgKTsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOnNwb2tlbiIgKTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlc1sgYSBdICE9PSAibXVsIiAmJiBUYWJsZXMubGFuZ3VhZ2VzKCB2YWx1ZXNbIGEgXSApICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcExhbmd1YWdlID0gVGFibGVzLmxhbmd1YWdlcyggdmFsdWVzWyBhIF0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHBMYW5ndWFnZSwgImxhbmd1YWdlIiwgZGMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgfQoKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvMDQxLywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlc0Zyb21TdWJGaWVsZCggcmVjb3JkLCBmaWVsZC5uYW1lLCAidSIgKTsKICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGtkY3BsdXM6c3VidGl0bGVzIiApOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgICAgIGlmICggVGFibGVzLmxhbmd1YWdlcyggdmFsdWVzWyBhIF0gKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdUxhbmd1YWdlID0gVGFibGVzLmxhbmd1YWdlcyggdmFsdWVzWyBhIF0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdUxhbmd1YWdlLCAibGFuZ3VhZ2UiLCBkYywgYXR0cmlidXRlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSApOwoKCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNMYW5ndWFnZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkY3Rlcm1zOmlzUGFydE9mIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0lzUGFydE9mKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0lzUGFydE9mCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGN0ZXJtc0lzUGFydE9mID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0lzUGFydE9mIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjU1NyIsICJhfHZ8ayIsICIsICIgKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImlzUGFydE9mIiwgZGN0ZXJtcyApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICI1NTgiLCAiYXxlfGciLCAiLCAiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJpc1BhcnRPZiIsIGRjdGVybXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOklTU04iICk7CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjU1NyIsICJ6IiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaXNQYXJ0T2YiLCBkY3Rlcm1zLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNDQwIiwgInoiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJpc1BhcnRPZiIsIGRjdGVybXMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICI4NDAiLCAieiIgKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgImlzUGFydE9mIiwgZGN0ZXJtcywgYXR0cmlidXRlICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOklTQk4iICk7CiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjU1OCIsICJyIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaXNQYXJ0T2YiLCBkY3Rlcm1zLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YWx1ZXMgPSBNYXJjUmVjb3JkLmdldFZhbHVlRnJvbUZpZWxkcyggcmVjb3JkLCAiNTU4IiwgInoiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJpc1BhcnRPZiIsIGRjdGVybXMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zSXNQYXJ0T2YgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGN0ZXJtczpoYXNQYXJ0IFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0hhc1BhcnQoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zSGFzUGFydAogICAgICovCiAgICB0aGF0LmNyZWF0ZURjdGVybXNIYXNQYXJ0ID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0hhc1BhcnQgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWx1ZTsKICAgICAgICB2YXIgc3ViZmllbGR2YWx1ZTsKICAgICAgICB2YXIgdmFsdWVzOwoKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvNzk1LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlKCAvYS8sICIjIyIgKTsKICAgICAgICAgICAgdmFsdWUgPSBNYXJjUmVjb3JkLmNsZWFuRGF0YSggdmFsdWUgKTsKICAgICAgICAgICAgdmFsdWVzID0gdmFsdWUuc3BsaXQoICIjIyIgKTsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvXHUwMGU1LywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsKICAgICAgICAgICAgICAgIHN1YmZpZWxkdmFsdWUgPSBzdWJmaWVsZC52YWx1ZTsKICAgICAgICAgICAgfSApOwogICAgICAgICAgICBpZiAoIHN1YmZpZWxkdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGZpZWxkLmVhY2hTdWJGaWVsZCggL3kvLCBmdW5jdGlvbiggZmllbGQsIHN1YmZpZWxkICkgewogICAgICAgICAgICAgICAgICAgIHN1YmZpZWxkdmFsdWUgPSAiNDAiOwogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggc3ViZmllbGR2YWx1ZSAhPT0gIjQwIiAmJiBzdWJmaWVsZHZhbHVlICE9PSAiOTkiICkgewogICAgICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czp0cmFjayIgKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlc1sgYSBdICE9PSB1bmRlZmluZWQgJiYgdmFsdWVzWyBhIF0gIT09ICIiICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwOS8sIC9hLyApLm1hdGNoKCAvW3NyXS8gKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaGFzUGFydCIsIGRjdGVybXMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJoYXNQYXJ0IiwgZGN0ZXJtcyApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSApOwoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zSGFzUGFydCBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkY3Rlcm1zOnJlcGxhY2VzIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjg2MCIsICJpfHQiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJyZXBsYWNlcyIsIGRjdGVybXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjdGVybXM6aXNSZXBsYWNlZEJ5IFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0lzUmVwbGFjZWRCeSggcmVjb3JkLCB4bWwgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBBIG1hcmMgcmVjb3JkIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IHhtbCBBbiBYTUwgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIFhNTCBvYmplY3QKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNJc1JlcGxhY2VkQnkKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY3Rlcm1zSXNSZXBsYWNlZEJ5ID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0lzUmVwbGFjZWRCeSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVGcm9tRmllbGRzKCByZWNvcmQsICI4NjEiLCAiaXx0IiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAiaXNSZXBsYWNlZEJ5IiwgZGN0ZXJtcyApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zSXNSZXBsYWNlZEJ5IGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGRjOnJpZ2h0cyBYTUwgZWxlbWVudHMgYW5kIGFkZHMgdGhlbSB0byBhbiBYTUwgb2JqZWN0LgogICAgICoKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjUmlnaHRzKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNSaWdodHMKICAgICAqLwogICAgdGhhdC5jcmVhdGVEY1JpZ2h0cyA9IGZ1bmN0aW9uKCByZWNvcmQsIHhtbCApIHsKCiAgICAgICAgTG9nLnRyYWNlKCAiRW50ZXJpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjUmlnaHRzIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjUxOCIsICJhIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAicmlnaHRzIiwgZGMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNSaWdodHMgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB4bWw7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNyZWF0ZXMgZGN0ZXJtczpzcGF0aWFsIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1NwYXRpYWwoIHJlY29yZCwgeG1sICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgQSBtYXJjIHJlY29yZCBvYmplY3QKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWwgQW4gWE1MIG9iamVjdAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCBYTUwgb2JqZWN0CiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zU3BhdGlhbAogICAgICovCiAgICB0aGF0LmNyZWF0ZURjdGVybXNTcGF0aWFsID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1NwYXRpYWwgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciBhdHRyaWJ1dGU7CiAgICAgICAgdmFyIHZhbHVlczsKCiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjYzMyIsICJhfHUiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJzcGF0aWFsIiwgZGN0ZXJtcyApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YWx1ZXMgPSBbIF07CiAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggLzY2Ni8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvZS8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViZmllbGQgKSB7CiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCggc3ViZmllbGQudmFsdWUgKTsKICAgICAgICAgICAgfSApCiAgICAgICAgfSApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOkRCQ0YiICk7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgInNwYXRpYWwiLCBkY3Rlcm1zLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFsdWVzID0gWyBdOwogICAgICAgIHJlY29yZC5lYWNoRmllbGQoIC82NjYvLCBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgICAgIGZpZWxkLmVhY2hTdWJGaWVsZCggL3EvLCBmdW5jdGlvbiggZmllbGQsIHN1YmZpZWxkICkgewogICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goIHN1YmZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgIH0gKQogICAgICAgIH0gKTsKICAgICAgICBmb3IgKCB2YXIgYSBpbiB2YWx1ZXMgKSB7CiAgICAgICAgICAgIGlmICggdmFsdWVzLmhhc093blByb3BlcnR5KCBhICkgKSB7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czpEQkNTIiApOwogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJzcGF0aWFsIiwgZGN0ZXJtcywgYXR0cmlidXRlICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhbHVlcyA9IFsgXTsKICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCAvNjY2LywgZnVuY3Rpb24oIGZpZWxkICkgewogICAgICAgICAgICBmaWVsZC5lYWNoU3ViRmllbGQoIC9sLywgZnVuY3Rpb24oIGZpZWxkLCBzdWJmaWVsZCApIHsKICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCBzdWJmaWVsZC52YWx1ZSApOwogICAgICAgICAgICB9ICkKICAgICAgICB9ICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgYXR0cmlidXRlID0gRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCAiZGtkY3BsdXM6REJDTSIgKTsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAic3BhdGlhbCIsIGRjdGVybXMsIGF0dHJpYnV0ZSApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBMb2cudHJhY2UoICJMZWF2aW5nOiBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zU3BhdGlhbCBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHhtbDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY3JlYXRlcyBkY3Rlcm1zOnRlbXBvcmFsIFhNTCBlbGVtZW50cyBhbmQgYWRkcyB0aGVtIHRvIGFuIFhNTCBvYmplY3QuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1RlbXBvcmFsKCByZWNvcmQsIHhtbCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQgb2JqZWN0CiAgICAgKiBAcGFyYW0ge09iamVjdH0geG1sIEFuIFhNTCBvYmplY3QKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHVwZGF0ZWQgWE1MIG9iamVjdAogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1RlbXBvcmFsCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlRGN0ZXJtc1RlbXBvcmFsID0gZnVuY3Rpb24oIHJlY29yZCwgeG1sICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1RlbXBvcmFsIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgYXR0cmlidXRlOwoKICAgICAgICB2YXIgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjYzNCIsICJhfGJ8Y3xkfHUiICk7CiAgICAgICAgZm9yICggdmFyIGEgaW4gdmFsdWVzICkgewogICAgICAgICAgICBpZiAoIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSggYSApICkgewogICAgICAgICAgICAgICAgeG1sLiogKz0gWG1sRWxlbWVudHMuY3JlYXRlRWxlbWVudCggdmFsdWVzWyBhIF0sICJ0ZW1wb3JhbCIsIGRjdGVybXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFsdWVzID0gTWFyY1JlY29yZC5nZXRWYWx1ZUZyb21GaWVsZHMoIHJlY29yZCwgIjY2NiIsICJpIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggImRrZGNwbHVzOkRCQ1AiICk7CiAgICAgICAgICAgICAgICB4bWwuKiArPSBYbWxFbGVtZW50cy5jcmVhdGVFbGVtZW50KCB2YWx1ZXNbIGEgXSwgInRlbXBvcmFsIiwgZGN0ZXJtcywgYXR0cmlidXRlICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhbHVlcyA9IE1hcmNSZWNvcmQuZ2V0VmFsdWVzRnJvbVN1YkZpZWxkKCByZWNvcmQsICI2NjYiLCAicCIgKTsKICAgICAgICBhdHRyaWJ1dGUgPSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJka2RjcGx1czpEQkNNIiApOwogICAgICAgIGZvciAoIHZhciBhIGluIHZhbHVlcyApIHsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMuaGFzT3duUHJvcGVydHkoIGEgKSApIHsKICAgICAgICAgICAgICAgIHhtbC4qICs9IFhtbEVsZW1lbnRzLmNyZWF0ZUVsZW1lbnQoIHZhbHVlc1sgYSBdLCAidGVtcG9yYWwiLCBkY3Rlcm1zLCBhdHRyaWJ1dGUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLnRyYWNlKCAiTGVhdmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1RlbXBvcmFsIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4geG1sOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBES0FCTSBhdHRyaWJ1dGUuCiAgICAgKgogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGVWYWx1ZSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlVmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUKICAgICAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIGEgREtBQk0gYXR0cmlidXRlCiAgICAgKiBAZXhhbXBsZSBEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJvc3M6c29ydCIgKQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlCiAgICAgKi8KICAgIHRoYXQuY3JlYXRlQXR0cmlidXRlID0gZnVuY3Rpb24oIGF0dHJpYnV0ZVZhbHVlICkgewoKICAgICAgICBMb2cudHJhY2UoICJFbnRlcmluZzogRGFuTWFyYzJUb0RrYWJtRWxlbWVudHNjcmVhdGVBdHRyaWJ1dGUgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciBhdHRyaWJ1dGVzID0gWyBdOwogICAgICAgIHZhciBhdHRyaWJ1dGUgPSBYbWxFbGVtZW50cy5jcmVhdGVBdHRyaWJ1dGUoICJ0eXBlIiwgYXR0cmlidXRlVmFsdWUsIHhzaSApOwogICAgICAgIGF0dHJpYnV0ZXMucHVzaCggYXR0cmlidXRlICk7CgogICAgICAgIExvZy50cmFjZSggIkxlYXZpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7CgogICAgfTsKCiAgICBMb2cuaW5mbyggIkxlYXZpbmc6IERhbk1hcmMyVG9Ea2FibUVsZW1lbnRzIG1vZHVsZSIgKTsKCiAgICByZXR1cm4gdGhhdDsKCn0oICk7CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1Vbml0dGVzdHMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBY0lkZW50aWZpZXIiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMjc5MDc0MzEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxpZGVudGlmaWVyPjI3OTA3NDMxfDg3MDk3MDwvaWRlbnRpZmllcj47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5hYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiYWM6aWRlbnRpZmllciIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBY0lkZW50aWZpZXIoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVBY1NvdXJjZSIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgZm9ybWF0ID0gImthdGFsb2ciOwogICAgc3VibWl0dGVyID0gIiI7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxzb3VyY2U+QmlibGlvdGVrc2thdGFsb2c8L3NvdXJjZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5hYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiYWM6c291cmNlIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUFjU291cmNlKCB4bWwsIGZvcm1hdCwgc3VibWl0dGVyICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5mb3JtYXQ7CiAgICBkZWxldGUgdGhpcy5zdWJtaXR0ZXI7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmdldFNvdXJjZU5hbWVGb3JCYXNpc1JlY29yZHMiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDMyIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAieCIsICJFUkUyMDE0MzUiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkRBVDIwMTQzNiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gImVSZW9sZW4iOwoKICAgIEFzc2VydC5lcXVhbCggImFjOnNvdXJjZSBmb3IgYmFzaXMgcmVjb3JkcyAtIGVSZW9sZW4iLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuZ2V0U291cmNlTmFtZUZvckJhc2lzUmVjb3JkcyggcmVjb3JkICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIk5MWTIwMTQzNSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIngiLCAiREFUMjAxNDM2IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSAiTmV0bHlkYm9nIjsKCiAgICBBc3NlcnQuZXF1YWwoICJhYzpzb3VyY2UgZm9yIGJhc2lzIHJlY29yZHMgLSBOZXRseWRib2ciLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuZ2V0U291cmNlTmFtZUZvckJhc2lzUmVjb3JkcyggcmVjb3JkICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzIiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkZTRjIwMTQzNSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIngiLCAiREFUMjAxNDM2IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIAogICAgb3V0cHV0ID0gIkZpbG1zdHJpYmVuIjsKCiAgICBBc3NlcnQuZXF1YWwoICJhYzpzb3VyY2UgZm9yIGJhc2lzIHJlY29yZHMgLSBGaWxtc3RyaWJlbiIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5nZXRTb3VyY2VOYW1lRm9yQmFzaXNSZWNvcmRzKCByZWNvcmQgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAzMiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggIngiLCAiQktNMjAxNDM1IiApOwogICAgZmllbGQuYXBwZW5kKCAieCIsICJEQVQyMDE0MzYiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgCiAgICBvdXRwdXQgPSAiQmlibGlvdGVrc2thdGFsb2ciOwoKICAgIEFzc2VydC5lcXVhbCggImFjOnNvdXJjZSBmb3IgYmFzaXMgcmVjb3JkcyAtIEJpYmxpb3Rla3NrYXRhbG9nIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmdldFNvdXJjZU5hbWVGb3JCYXNpc1JlY29yZHMoIHJlY29yZCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZSIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjQ1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJHaG9zdCB3b3JsZCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0aXRsZT5HaG9zdCB3b3JsZDwvdGl0bGU+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICBlbGVtZW50ID0gPHRpdGxlIHR5cGU9ImRrZGNwbHVzOmZ1bGwiPkdob3N0IHdvcmxkPC90aXRsZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzp0aXRsZSAxIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjVGl0bGUoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjQ1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJGaXJlIGRhZ2UgaSBtYXJ0cyIgKTsKICAgIGZpZWxkLmFwcGVuZCggImMiLCAicm9tYW4iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dGl0bGU+RmlyZSBkYWdlIGkgbWFydHM8L3RpdGxlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6ZnVsbCI+RmlyZSBkYWdlIGkgbWFydHMgOiByb21hbjwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6dGl0bGUgMiIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI0NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiVGFlbmsiICk7CiAgICBmaWVsZC5hcHBlbmQoICJvIiwgIlBlbmdlIiApOwogICAgZmllbGQuYXBwZW5kKCAiYyIsICJtYWdhc2luIGZyYSBGb3JicnVnZXJyYWFkZXQiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dGl0bGU+VGFlbmsuIFBlbmdlPC90aXRsZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICBlbGVtZW50ID0gPHRpdGxlIHR5cGU9ImRrZGNwbHVzOmZ1bGwiPlRhZW5rLiBQZW5nZSA6IG1hZ2FzaW4gZnJhIEZvcmJydWdlcnJhYWRldDwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6dGl0bGUgMyIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI0NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiVGFlbmsiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIm1hZ2FzaW4gMSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiT3ZlciBkZXQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIm1hZ2FzaW4gMiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0aXRsZT5UYWVuay4gT3ZlciBkZXQ8L3RpdGxlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6ZnVsbCI+VGFlbmsgOiBtYWdhc2luIDEgOiBPdmVyIGRldCA6IG1hZ2FzaW4gMjwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6dGl0bGUgNCIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI0NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiVGFlbmsiICk7CiAgICBmaWVsZC5hcHBlbmQoICJvIiwgIlBlbmdlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHRpdGxlPlRhZW5rLiBQZW5nZTwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgZWxlbWVudCA9IDx0aXRsZSB0eXBlPSJka2RjcGx1czpmdWxsIj5UYWVuay4gUGVuZ2U8L3RpdGxlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOnRpdGxlIDUiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZSggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMTQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ4IiwgIkRFQiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI0NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiW0RlYmF0XSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiTWVyZSBVVlZVIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHRpdGxlPkRlYmF0IDogTWVyZSBVVlZVPC90aXRsZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICBlbGVtZW50ID0gPHRpdGxlIHR5cGU9ImRrZGNwbHVzOmZ1bGwiPkRlYmF0IDogTWVyZSBVVlZVPC90aXRsZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzp0aXRsZSBmb3IgZGViYXRlcyBvZiBhcnRpY2xlcyIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI0NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiUmVuZSBsaW5qZXIiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkFuZHJlIG1hYWRlciIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0aXRsZT5SZW5lIGxpbmplci4gQW5kcmUgbWFhZGVyPC90aXRsZT4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6ZnVsbCI+UmVuZSBsaW5qZXIgOiBBbmRyZSBtYWFkZXI8L3RpdGxlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOnRpdGxlICggZG91YmxlICkiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZSggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjVGl0bGVTZXJpZXMiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiNzc2NjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNDQwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJMYWVzZWx5c3QiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ2IiwgIls0MF0iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6c2VyaWVzIj5MYWVzZWx5c3QgOyA0MDwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6dGl0bGUgc2VyaWVzLCBsb2NhbCByZWNvcmQgd2l0aCBubyA4NDAiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZVNlcmllcyggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjc3NjYwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjQ0MCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiTGFlc2VseXN0IiApOwogICAgZmllbGQuYXBwZW5kKCAidiIsICJbNDBdIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiODQwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJMYWVzZWhlc3QiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ2IiwgIls0MF0iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6c2VyaWVzIj5MYWVzZWhlc3QgOyA0MDwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6dGl0bGUgc2VyaWVzLCBsb2NhbCByZWNvcmQgd2l0aCA4NDAiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZVNlcmllcyggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMSAyMzQgNTY3IDgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjQ0MCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggIjAiLCAiIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJMYWVzZWx5c3QiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ2IiwgIls0MF0iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI4NDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkxhZXNlaGVzdCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInYiLCAiWzQwXSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0aXRsZSB0eXBlPSJka2RjcGx1czpzZXJpZXMiPkxhZXNlaGVzdCA7IDQwPC90aXRsZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6c2VyaWVzIj5MYWVzZWx5c3QgOyA0MDwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6dGl0bGUgc2VyaWVzLCBEQkMgcmVjb3JkIHdpdGggODQwIGFuZCA0NDAqMCIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlU2VyaWVzKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODcwOTcwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNDQwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJMYWVzZWx5c3QiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ2IiwgIls0MF0iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI4NDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkxhZXNlaGVzdCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInYiLCAiWzQwXSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0aXRsZSB0eXBlPSJka2RjcGx1czpzZXJpZXMiPkxhZXNlaGVzdCA7IDQwPC90aXRsZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzp0aXRsZSBzZXJpZXMsIERCQyByZWNvcmQgd2l0aCA4NDAsIGJ1dCBubyA0NDAqMCIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1RpdGxlU2VyaWVzKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxIDIzNCA1NjcgOCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODcwOTcwIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNDQwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiMCIsICIiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkxhZXNlbHlzdCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInYiLCAiWzQwXSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dGl0bGUgdHlwZT0iZGtkY3BsdXM6c2VyaWVzIj5MYWVzZWx5c3QgOyA0MDwvdGl0bGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgoKICAgIEFzc2VydC5lcXVhbCggImRjOnRpdGxlIHNlcmllcywgREJDIHJlY29yZCB3aXRoIG5vIDg0MCwgYnV0IHdpdGggNDQwKjAiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUaXRsZVNlcmllcyggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBbHRlcm5hdGl2ZSIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjQ1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAicCIsICJURVNUIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGFsdGVybmF0aXZlPlRFU1Q8L2FsdGVybmF0aXZlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjdGVybXM6YWx0ZXJuYXRpdmUiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0FsdGVybmF0aXZlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0FsdGVybmF0aXZlIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI3NDUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICLDpiIsICJURVNUIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGFsdGVybmF0aXZlPlRFU1Q8L2FsdGVybmF0aXZlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjdGVybXM6YWx0ZXJuYXRpdmUiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0FsdGVybmF0aXZlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNDcmVhdG9yIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICBjcmVhdG9ycyA9IFsgXTsKICAgIGNyZWF0b3IgPSB7CiAgICAgICAgInZhbHVlIjogIlBhdWwgQXVzdGVyIiwKICAgICAgICAicmVzdCI6ICIiLAogICAgICAgICJzb3J0IjogIkF1c3RlciwgUGF1bCIsCiAgICAgICAgImZ1bmN0IjogImRrZGNwbHVzOmF1dCIsCiAgICAgICAgIm9yaWdpbiI6ICIxMDAiCiAgICB9OwogICAgY3JlYXRvcnMucHVzaCggY3JlYXRvciApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8Y3JlYXRvciB0eXBlPSJka2RjcGx1czphdXQiPlBhdWwgQXVzdGVyPC9jcmVhdG9yPgogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICBlbGVtZW50ID0gPGNyZWF0b3IgdHlwZT0ib3NzOnNvcnQiPkF1c3RlciwgUGF1bDwvY3JlYXRvcj47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzpjcmVhdG9yIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjQ3JlYXRvciggY3JlYXRvcnMsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMuY3JlYXRvcnM7CiAgICBkZWxldGUgdGhpcy5jcmVhdG9yOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1N1YmplY3QiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgc3ViamVjdHMgPSBbIF07CiAgICBzdWJqZWN0ID0gewogICAgICAgICJ2YWx1ZSI6ICJJc2hvY2tleSIsCiAgICAgICAgInR5cGUiOiAiZGtkY3BsdXM6REJDRiIsCiAgICB9OwogICAgc3ViamVjdHMucHVzaCggc3ViamVjdCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8c3ViamVjdCB0eXBlPSJka2RjcGx1czpEQkNGIj5Jc2hvY2tleTwvc3ViamVjdD4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKCiAgICBBc3NlcnQuZXF1YWwoICJkYzpzdWJqZWN0IiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjU3ViamVjdCggc3ViamVjdHMsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMuc3ViamVjdHM7CiAgICBkZWxldGUgdGhpcy5zdWJqZWN0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEa2RjcGx1c1NoZWxmIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgInVuZCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxzaGVsZiB0eXBlPSJvc3M6bXVzaWNzaGVsZiI+VW5kZXJob2xkbmluZzwvc2hlbGY+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGtkY3BsdXMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGtkY3BsdXM6c2hlbGYiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGtkY3BsdXNTaGVsZiggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMzkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgImZvbCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiXHUwMGU1cyIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxzaGVsZiB0eXBlPSJvc3M6bXVzaWNzaGVsZiI+Rm9sa2VtdXNpay4gU2tvdGxhbmQ8L3NoZWxmPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrZGNwbHVzICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRrZGNwbHVzOnNoZWxmIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURrZGNwbHVzU2hlbGYoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5tdXNpY1NoZWxmTGFiZWwiLCBmdW5jdGlvbiggKSB7CgogICAgY29kZSA9ICJmb2wiOwogICAgb3V0cHV0ID0gIkZvbGtlbXVzaWsiOwoKICAgIEFzc2VydC5lcXVhbCggIm11c2ljIHNoZWxmIGxhYmVsIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLm11c2ljU2hlbGZMYWJlbCggY29kZSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMuY29kZTsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Rlc2NyaXB0aW9uIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjUzNCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiQWYgaW5kaG9sZGV0OiBUaGUgY2FzdCA7IFRoZSBtYWtpbmcgb2YgR2hvc3Qgd29ybGQgOyBNdXNpYyB2aWRlbyAtIEd1bW5hYW06IFwiSmFhbiBwZWhlY2hhYW4gaG9cIiA7IERlbGV0ZWQgYW5kIGFsdGVybmF0ZSBzY2VuZXMgOyBUcmFpbGVyIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGRlc2NyaXB0aW9uPkFmIGluZGhvbGRldDogVGhlIGNhc3QgOyBUaGUgbWFraW5nIG9mIEdob3N0IHdvcmxkIDsgTXVzaWMgdmlkZW8gLSBHdW1uYWFtOiAiSmFhbiBwZWhlY2hhYW4gaG8iIDsgRGVsZXRlZCBhbmQgYWx0ZXJuYXRlIHNjZW5lcyA7IFRyYWlsZXI8L2Rlc2NyaXB0aW9uPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6ZGVzY3JpcHRpb24iLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEZXNjcmlwdGlvbiggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBYnN0cmFjdCIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI1MDQiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkV0IG9wa2FsZCB0aWwgZGVuIHN1Y2Nlc2Z1bGRlIGFya2l0ZWt0IEluZ3JpZCBvbSwgYXQgaGVuZGVzIDE1LXJpZ2Ugc24gZXIgYW5ob2xkdCBmb3Igdm9sZCwgZnIgaGVuZGUgdGlsIGF0IHRhZ2Ugc2l0IGxpdiBvcCB0aWwgcmV2aXNpb24uIE9nIGh1biBlcmtlbmRlciBtb2R2aWxsaWd0LCBhdCBodW4gYmxvdCBnZW50YWdlciBzdmlndCBmcmEgc2l0IGVnZXQgb2cgbW9kZXJlbnMgbGl2IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGFic3RyYWN0PkV0IG9wa2FsZCB0aWwgZGVuIHN1Y2Nlc2Z1bGRlIGFya2l0ZWt0IEluZ3JpZCBvbSwgYXQgaGVuZGVzIDE1LXJpZ2Ugc24gZXIgYW5ob2xkdCBmb3Igdm9sZCwgZnIgaGVuZGUgdGlsIGF0IHRhZ2Ugc2l0IGxpdiBvcCB0aWwgcmV2aXNpb24uIE9nIGh1biBlcmtlbmRlciBtb2R2aWxsaWd0LCBhdCBodW4gYmxvdCBnZW50YWdlciBzdmlndCBmcmEgc2l0IGVnZXQgb2cgbW9kZXJlbnMgbGl2PC9hYnN0cmFjdD47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkY3Rlcm1zOmFic3RyYWN0IiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBYnN0cmFjdCggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBdWRpZW5jZSIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA2IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZCIsICIxNiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxhdWRpZW5jZT52b2tzZW5tYXRlcmlhbGVyPC9hdWRpZW5jZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkY3Rlcm1zOmF1ZGllbmNlIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNBdWRpZW5jZSggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURrZGNwbHVzVmVyc2lvbiIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjUwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxLiB1ZGdhdmUiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dmVyc2lvbj4xLiB1ZGdhdmU8L3ZlcnNpb24+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGtkY3BsdXMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRrY3BsdXM6dmVyc2lvbiIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEa2RjcGx1c1ZlcnNpb24oIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1B1Ymxpc2hlciIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjYwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJbS2JoLl0iICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIkd5bGRlbmRhbCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxwdWJsaXNoZXI+R3lsZGVuZGFsPC9wdWJsaXNoZXI+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOnB1Ymxpc2hlciIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1B1Ymxpc2hlciggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjQ29udHJpYnV0b3IiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIGNyZWF0b3JzID0gWyBdOwogICAgY3JlYXRvciA9IHsKICAgICAgICAidmFsdWUiOiAiR3JldGUgVHVsaW5pdXMiLAogICAgICAgICJyZXN0IjogIiIsCiAgICAgICAgInNvcnQiOiAiIiwKICAgICAgICAiZnVuY3QiOiAiZGtkY3BsdXM6ZGtpbmQiLAogICAgICAgICJvcmlnaW4iOiAiNzAwIgogICAgfTsKICAgIGNyZWF0b3JzLnB1c2goIGNyZWF0b3IgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGNvbnRyaWJ1dG9yIHR5cGU9ImRrZGNwbHVzOmRraW5kIj5HcmV0ZSBUdWxpbml1czwvY29udHJpYnV0b3I+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6Y29udHJpYnV0b3IiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNDb250cmlidXRvciggY3JlYXRvcnMsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMuY3JlYXRvcnM7CiAgICBkZWxldGUgdGhpcy5jcmVhdG9yOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0RhdGUiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInoiLCAiMjAxMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxkYXRlPjIwMTE8L2RhdGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOmRhdGUiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNEYXRlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI2MCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImMiLCAiMTg0PyIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxkYXRlPjE4ND88L2RhdGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOmRhdGUgd2l0aCBxdWVzdGlvbiBtYXJrIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjRGF0ZSggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIyNjAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIjIwMDYiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIyNjAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIlsxODQ/XSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxkYXRlPjIwMDY8L2RhdGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgZWxlbWVudCA9IDxkYXRlPjE4ND88L2RhdGU+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOmRhdGUgd2l0aCBxdWVzdGlvbiBtYXJrIGluIHNxdWFyZSBicmFja2V0cyIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0RhdGUoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjYwIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYyIsICIxOTkyIiApOwogICAgZmllbGQuYXBwZW5kKCAiYyIsICIxOTkzIE1lbm5lc2tlcmV0dGlnaGVkZXIiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8ZGF0ZT4xOTkyPC9kYXRlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIGVsZW1lbnQgPSA8ZGF0ZT4xOTkzPC9kYXRlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzpkYXRlIHdpdGggdGV4dCBpbiBzZWNvbmQgc3ViZmllbGQgYyIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0RhdGUoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUeXBlIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJnIiwgInh4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJjIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHR5cGUgdHlwZT0iZGtkY3BsdXM6QmliREstVHlwZSI+Tm9kZTwvdHlwZT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzp0eXBlIE5vZGUiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNUeXBlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgInYiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dHlwZSB0eXBlPSJka2RjcGx1czpCaWJESy1UeXBlIj5TYW1tZW5zYXQgbWF0ZXJpYWxlPC90eXBlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOnR5cGUgU2FtbWVuc2F0IG1hdGVyaWFsZSIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY1R5cGUoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlUGdUeXBlIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIzMDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIlBTUCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDx0eXBlIHR5cGU9Im9zczpwZ3ZhZXJrIj5zcGlsPC90eXBlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOnR5cGUgcGciLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlUGdUeXBlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNGb3JtYXQiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjMwMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggIm4iLCAiMSBjZCAxIGJpbGFnIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGZvcm1hdD4xIGNkIDEgYmlsYWc8L2Zvcm1hdD47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6Zm9ybWF0IiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjRm9ybWF0KCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjMwMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAieHZpLCAyODAgcGFnZXMiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgImNvbG9yIGlsbHVzdHJhdGlvbnMiICk7CiAgICBmaWVsZC5hcHBlbmQoICJjIiwgIjIyIHggMzAgY20iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8Zm9ybWF0PmNvbG9yIGlsbHVzdHJhdGlvbnM8L2Zvcm1hdD47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6Zm9ybWF0LCBpbGx1c3RyYXRlZCIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Zvcm1hdCggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIzMDAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjI3IHNpZGVyIiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICJhbGxlIGlsbC4gaSBmYXJ2ZXIiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8Zm9ybWF0PmFsbGUgaWxsdXN0cmVyZXQgaSBmYXJ2ZXI8L2Zvcm1hdD47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6Zm9ybWF0LCBpbGx1c3RyZXJldCIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0Zvcm1hdCggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNFeHRlbnQiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjMwMCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMjQgc2lkZXIiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8ZXh0ZW50PjI0IHNpZGVyPC9leHRlbnQ+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGN0ZXJtcyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGN0ZXJtczpleHRlbnQiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0V4dGVudCggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjSWRlbnRpZmllciIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDIxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICI5Nzg4NzAyMDY5NzIzIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGlkZW50aWZpZXIgdHlwZT0iZGtkY3BsdXM6SVNCTiI+OTc4ODcwMjA2OTcyMzwvaWRlbnRpZmllcj47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzppZGVudGlmaWVyIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjSWRlbnRpZmllciggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjU291cmNlIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIyNDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkRyYXcgNTAgbW9uc3RlcnMsIGNyZWVwcywgc3VwZXJoZXJvZXMsIGRlbW9ucywgZHJhZ29ucywgbmVyZHMsIGRpcnRzLCBnaG91bHMsIGdpYW50cywgdmFtcGlyZXMsIHpvbWJpZXMsIGFuZCBvdGhlciBjdXJpb3NhIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHNvdXJjZT5EcmF3IDUwIG1vbnN0ZXJzLCBjcmVlcHMsIHN1cGVyaGVyb2VzLCBkZW1vbnMsIGRyYWdvbnMsIG5lcmRzLCBkaXJ0cywgZ2hvdWxzLCBnaWFudHMsIHZhbXBpcmVzLCB6b21iaWVzLCBhbmQgb3RoZXIgY3VyaW9zYTwvc291cmNlPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkYzpzb3VyY2UiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNTb3VyY2UoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0xhbmd1YWdlIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImwiLCAiZW5nIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGxhbmd1YWdlIHR5cGU9ImRjdGVybXM6SVNPNjM5LTIiPmVuZzwvbGFuZ3VhZ2U+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgZWxlbWVudC5AdHlwZS5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMueHNpICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKICAgIGVsZW1lbnQgPSA8bGFuZ3VhZ2U+RW5nZWxzazwvbGFuZ3VhZ2U+OwogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOmxhbmd1YWdlIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjTGFuZ3VhZ2UoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDgiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJsIiwgIm11bCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiYSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA0MSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInAiLCAiZXNrIiApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwNDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJwIiwgImRhbiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxsYW5ndWFnZSB0eXBlPSJkY3Rlcm1zOklTTzYzOS0yIj5tdWw8L2xhbmd1YWdlPgogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgZWxlbWVudCA9IDxsYW5ndWFnZT5GbGVyZSBzcHJvZzwvbGFuZ3VhZ2U+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgZWxlbWVudCA9IDxsYW5ndWFnZSB0eXBlPSJkY3Rlcm1zOklTTzYzOS0yIj5kYW48L2xhbmd1YWdlPgogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgZWxlbWVudCA9IDxsYW5ndWFnZT5EYW5zazwvbGFuZ3VhZ2U+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6bGFuZ3VhZ2UgKCBtdWx0aXBsZSBsYW5ndWFnZXMsIDAwOSAqYWEpIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjTGFuZ3VhZ2UoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDgiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJsIiwgIm11bCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAibSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA0MSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInAiLCAiZXNrIiApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwNDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJwIiwgImRhbiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxsYW5ndWFnZSB0eXBlPSJkY3Rlcm1zOklTTzYzOS0yIj5tdWw8L2xhbmd1YWdlPgogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgZWxlbWVudCA9IDxsYW5ndWFnZT5GbGVyZSBzcHJvZzwvbGFuZ3VhZ2U+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgZWxlbWVudCA9IDxsYW5ndWFnZSB0eXBlPSJka2RjcGx1czpzcG9rZW4iPkRhbnNrPC9sYW5ndWFnZT4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjOmxhbmd1YWdlICggbXVsdGlwbGUgbGFuZ3VhZ2VzLCAwMDkgKmFtKSIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY0xhbmd1YWdlKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDQxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAidSIsICJlc2siICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjA0MSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInUiLCAiZGFuIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGxhbmd1YWdlIHR5cGU9ImRrZGNwbHVzOnN1YnRpdGxlcyI+RGFuc2s8L2xhbmd1YWdlPgogICAgZWxlbWVudC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6bGFuZ3VhZ2UgKCBzdWJ0aXRsZXMsIDA0MSAqdSkiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNMYW5ndWFnZSggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNJc1BhcnRPZiIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNTU3IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJQb2xpdGlrZW4iICk7CiAgICBmaWVsZC5hcHBlbmQoICJ2IiwgIjIwMTAtMTItMTEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPjsKICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8aXNQYXJ0T2Y+UG9saXRpa2VuLCAyMDEwLTEyLTExPC9pc1BhcnRPZj47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkY3Rlcm1zOmlzUGFydE9mIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNJc1BhcnRPZiggcmVjb3JkLCB4bWwgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnhtbDsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7CiAgICBkZWxldGUgdGhpcy5lbGVtZW50OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIkRhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNIYXNQYXJ0IiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI3OTUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkRyaXZlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA5IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJzIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGhhc1BhcnQgdHlwZT0iZGtkY3BsdXM6dHJhY2siPkRyaXZlPC9oYXNQYXJ0PjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGN0ZXJtczpoYXNQYXJ0IiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNIYXNQYXJ0KCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPjsKICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI4NjAiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ0IiwgIkxvdnRpZGVuZGUgZm9yIGtvbmdlcmlnZXQgRGFubWFyayIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxyZXBsYWNlcz5Mb3Z0aWRlbmRlIGZvciBrb25nZXJpZ2V0IERhbm1hcms8L3JlcGxhY2VzPjsKICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjdGVybXM6cmVwbGFjZXMiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1JlcGxhY2VzKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc0lzUmVwbGFjZWRCeSIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz47CiAgICB4bWwuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiODYxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiaSIsICJGb3J0c2FldHRlcyBwYWEgSW50ZXJuZXQgc29tOiAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ0IiwgIlNlcmllam91cm5hbGVuIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz47CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPGlzUmVwbGFjZWRCeT5Gb3J0c2FldHRlcyBwYWEgSW50ZXJuZXQgc29tOiAgU2VyaWVqb3VybmFsZW48L2lzUmVwbGFjZWRCeT47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBvdXRwdXQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkY3Rlcm1zOmlzUmVwbGFjZWRCeSIsICdEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zSXNSZXBsYWNlZEJ5KCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGNSaWdodHMiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiNTE4IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJUaWxnYWVuZ2VsaWcgZWZ0ZXIgMjAwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+OwogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxyaWdodHM+VGlsZ2FlbmdlbGlnIGVmdGVyIDIwMDA8L3JpZ2h0cz47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kYyApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGM6cmlnaHRzIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjUmlnaHRzKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1NwYXRpYWwgREJDRiIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz4KICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI2NjYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIkhvbGxhbmQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIkJlbGdpZW4iICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwoKICAgIG91dHB1dCA9IDxyZWNvcmQvPgogICAgb3V0cHV0LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwogICAgZWxlbWVudCA9IDxzcGF0aWFsIHR5cGU9ImRrZGNwbHVzOkRCQ0YiPkhvbGxhbmQ8L3NwYXRpYWw+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwogICAgZWxlbWVudCA9IDxzcGF0aWFsIHR5cGU9ImRrZGNwbHVzOkRCQ0YiPkJlbGdpZW48L3NwYXRpYWw+CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjdGVybXM6c3BhdGlhbCBEQkNGIHN1YmplY3RzIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZURjdGVybXNTcGF0aWFsKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1NwYXRpYWwgREJDUyIsIGZ1bmN0aW9uKCApIHsKCiAgICB4bWwgPSA8cmVjb3JkLz4KICAgIHhtbC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI2NjYiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJxIiwgIk5vcmdlIiApOwogICAgZmllbGQuYXBwZW5kKCAicSIsICJTdmVyaWdlIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz4KICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8c3BhdGlhbCB0eXBlPSJka2RjcGx1czpEQkNTIj5Ob3JnZTwvc3BhdGlhbD4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICBlbGVtZW50ID0gPHNwYXRpYWwgdHlwZT0iZGtkY3BsdXM6REJDUyI+U3ZlcmlnZTwvc3BhdGlhbD4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGN0ZXJtczpzcGF0aWFsIERCQ1Mgc3ViamVjdHMiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1NwYXRpYWwoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zU3BhdGlhbCBEQkNNIiwgZnVuY3Rpb24oICkgewoKICAgIHhtbCA9IDxyZWNvcmQvPgogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjY2NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImwiLCAiSG9sbGFuZCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImwiLCAiQmVsZ2llbiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CgogICAgb3V0cHV0ID0gPHJlY29yZC8+CiAgICBvdXRwdXQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRrYWJtICk7CiAgICBlbGVtZW50ID0gPHNwYXRpYWwgdHlwZT0iZGtkY3BsdXM6REJDTSI+SG9sbGFuZDwvc3BhdGlhbD4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CiAgICBlbGVtZW50ID0gPHNwYXRpYWwgdHlwZT0iZGtkY3BsdXM6REJDTSI+QmVsZ2llbjwvc3BhdGlhbD4KICAgIGVsZW1lbnQuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLmRjdGVybXMgKTsKICAgIGVsZW1lbnQuQHR5cGUuc2V0TmFtZXNwYWNlKCBYbWxOYW1lc3BhY2VzLnhzaSApOwogICAgb3V0cHV0LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CgogICAgQXNzZXJ0LmVxdWFsKCAiZGN0ZXJtczpzcGF0aWFsIERCQ00gc3ViamVjdHMiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1NwYXRpYWwoIHJlY29yZCwgeG1sICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy54bWw7CiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwogICAgZGVsZXRlIHRoaXMuZWxlbWVudDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJEYW5NYXJjMlRvRGthYm1FbGVtZW50cy5jcmVhdGVEY3Rlcm1zVGVtcG9yYWwiLCBmdW5jdGlvbiggKSB7CgogICAgeG1sID0gPHJlY29yZC8+OwogICAgeG1sLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5ka2FibSApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjY2NiIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInAiLCAiMTIwMC0xMjk5IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKCiAgICBvdXRwdXQgPSA8cmVjb3JkLz4KICAgIG91dHB1dC5zZXROYW1lc3BhY2UoIFhtbE5hbWVzcGFjZXMuZGthYm0gKTsKICAgIGVsZW1lbnQgPSA8dGVtcG9yYWwgdHlwZT0iZGtkY3BsdXM6REJDTSI+MTIwMC0xMjk5PC90ZW1wb3JhbD47CiAgICBlbGVtZW50LnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy5kY3Rlcm1zICk7CiAgICBlbGVtZW50LkB0eXBlLnNldE5hbWVzcGFjZSggWG1sTmFtZXNwYWNlcy54c2kgKTsKICAgIG91dHB1dC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIEFzc2VydC5lcXVhbCggImRjdGVybXM6dGVtcG9yYWwiLCAnRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlRGN0ZXJtc1RlbXBvcmFsKCByZWNvcmQsIHhtbCApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMueG1sOwogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiRGFuTWFyYzJUb0RrYWJtRWxlbWVudHMuY3JlYXRlQXR0cmlidXRlIiwgZnVuY3Rpb24oICkgewoKICAgIGF0dHJpYnV0ZVZhbHVlID0gIm9zczpzb3J0IjsKICAgIG91dHB1dCA9IFsgXTsKCiAgICB4c2kgPSBYbWxOYW1lc3BhY2VzLnhzaTsKCiAgICBhdHRyaWJ1dGUgPSB7CiAgICAgICAgYXR0cmlidXRlTmFtZTogInR5cGUiLAogICAgICAgIGF0dHJpYnV0ZVZhbHVlOiAib3NzOnNvcnQiLAogICAgICAgIGF0dHJpYnV0ZU5hbWVzcGFjZTogeHNpCiAgICB9OwoKICAgIG91dHB1dC5wdXNoKCBhdHRyaWJ1dGUgKTsKCiAgICBBc3NlcnQuZXF1YWwoICJkY3Rlcm1zOnRlbXBvcmFsIiwgJ0Rhbk1hcmMyVG9Ea2FibUVsZW1lbnRzLmNyZWF0ZUF0dHJpYnV0ZSggYXR0cmlidXRlVmFsdWUgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZVZhbHVlOwogICAgZGVsZXRlIHRoaXMueHNpOwogICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwo=","moduleName":"DanMarc2ToDkabmElements"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB3aXRoIHZhcmlvdXMgdmFsaWRhdGlvbnMgZm9yIGRhbk1BUkMyIHJlY29yZHMuICovCgp1c2UoICJMb2ciICk7CnVzZSggIlVuaXRUZXN0IiApCnVzZSggIk1hcmNDbGFzc2VzIiApOyAvLyBUaGlzIGlzIGFjdHVhbGx5IGF1dG9tYXRpY2FsbHkgaW5jbHVkZWQgYnkgdGhlIG5leHQgbW9kdWxlLgp1c2UoICJNYXJjRmlsZUV4dGVuc2lvbiIgKTsgLy8gQWxsb3dzIHRvIGNyZWF0ZSBhIFJlY29yZCBpbnN0YW5jZSBmcm9tIFN0ZEluCnVzZSggIk1hcmMiICk7CnVzZSggIk1hcmNNYXRjaGVycyIgKTsKdXNlKCAiRGF0ZVV0aWwiICk7CnVzZSggIkFkbWluRGF0YSIgKTsKCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdNYXJjUmVjb3JkVmFsaWRhdGlvbicgXTsKCi8qKgogKiBNb2R1bGUgd2l0aCBtZXRob2RzIHRvIHZhbGlkYXRlIG1hcmMgcmVjb3Jkcy4KICogU28gZmFyIGFsbCB0aGUgbWV0aG9kcyB2YWxpZGF0ZSBkYW5NQVJDMiByZWNvcmRzLCBidXQgb3RoZXIgZm9ybWF0cwogKiBtaWdodCBiZSBhZGRlZCB0byB0aGlzIG1vZHVsZS4KICogCiAqIEB0eXBlIHtuYW1lc3BhY2V9CiAqIEBuYW1lc3BhY2UKICovCnZhciBNYXJjUmVjb3JkVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCApIHsKICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1hcmNSZWNvcmRWYWxpZGF0aW9uIG1vZHVsZSIgKTsKCiAgICB2YXIgdGhhdCA9IHt9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgdmFsaWRhdGVzIG1hcmMgcmVjb3Jkcy4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVSZWNvcmRzKCByZWNvcmRzLCBpZGVudGlmaWVyLCBvcmlnaW4sIHN1Ym1pdHRlciApCiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWNvcmRzIEFuIGFycmF5IG9mIG1hcmMgcmVjb3JkcwogICAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXIgVGhlIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VibWl0dGVyIFRoZSBzdWJtaXR0ZXIgb2YgdGhlIHJlY29yZAogICAgICogQHJldHVybiB7T2JqZWN0fSAidmFsaWRhdGVzIiBhcyBib29sZWFuIHRydWUgYW5kIGZhbHNlIGFuZCBhbmQgYXJyYXkgb2YgImVycm9yTWVzc2FnZXMiCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNYXJjUmVjb3JkVmFsaWRhdGlvbi52YWxpZGF0ZVJlY29yZHMKICAgICAqLwogICAgdGhhdC52YWxpZGF0ZVJlY29yZHMgPSBmdW5jdGlvbiggcmVjb3JkcywgaWRlbnRpZmllciwgb3JpZ2luLCBzdWJtaXR0ZXIgKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnZhbGlkYXRlUmVjb3JkcyBtZXRob2QiICk7CgogICAgICAgIHZhciB2YWxpZGF0ZXMgPSB0cnVlOwogICAgICAgIHZhciBlcnJvck1lc3NhZ2VzID0gWyBdOwoKICAgICAgICBmb3IgKCB2YXIgYSBpbiByZWNvcmRzICkgewogICAgICAgICAgICBpZiAoIHJlY29yZHNbIGEgXS50eXBlID09PSAiaGVhZCIgKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVsYXRpb25zID0gTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVSZWxhdGlvbnMoIHJlY29yZHMsIGlkZW50aWZpZXIsIG9yaWdpbiApOwogICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gcmVsYXRpb25zLnZhbGlkYXRlczsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBhIGluIHJlbGF0aW9ucy5lcnJvck1lc3NhZ2VzICkgewogICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggcmVsYXRpb25zLmVycm9yTWVzc2FnZXNbIGEgXSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggcmVjb3Jkc1sgYSBdLnR5cGUgPT09ICJyZWNvcmQiICkgewogICAgICAgICAgICAgICAgdmFyIG1hcmNSZWNvcmQgPSBuZXcgUmVjb3JkOwogICAgICAgICAgICAgICAgbWFyY1JlY29yZC5mcm9tU3RyaW5nKCByZWNvcmRzWyBhIF0ucmVjb3JkICk7CiAgICAgICAgICAgICAgICB2YXIgZGFuTWFyYzJEYXRhID0gTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVEYW5NYXJjMkRhdGEoIG1hcmNSZWNvcmQsIG9yaWdpbiwgc3VibWl0dGVyICk7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBkYW5NYXJjMkRhdGEudmFsaWRhdGVzOwogICAgICAgICAgICAgICAgZm9yICggdmFyIGIgaW4gZGFuTWFyYzJEYXRhLmVycm9yTWVzc2FnZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBkYW5NYXJjMkRhdGEuZXJyb3JNZXNzYWdlc1sgYiBdICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciB2YWxpZGF0aW9uT2JqZWN0ID0gewogICAgICAgICAgICAidmFsaWRhdGVzIjogdmFsaWRhdGVzLAogICAgICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IGVycm9yTWVzc2FnZXMKICAgICAgICB9OwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnZhbGlkYXRlUmVjb3JkcyBtZXRob2QiICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0aW9uT2JqZWN0OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCB2YWxpZGF0ZXMgdGhlIHJlbGF0aW9ucyBiZXR3ZWVuIGhlYWQsIHNlY3Rpb24gYW5kIHZvbHVtZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVSZWxhdGlvbnMoIHJlY29yZHMsIGlkZW50aWZpZXIsIG9yaWdpbiApCiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWNvcmRzIEFuIGFycmF5IG9mIG1hcmMgcmVjb3JkcwogICAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXIgVGhlIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuZCBhcnJheSBvZiAiZXJyb3JNZXNzYWdlcyIKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1hcmNSZWNvcmRWYWxpZGF0aW9uLnZhbGlkYXRlUmVsYXRpb25zCiAgICAgKi8KICAgIHRoYXQudmFsaWRhdGVSZWxhdGlvbnMgPSBmdW5jdGlvbiggcmVjb3JkcywgaWRlbnRpZmllciwgb3JpZ2luICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiB2YWxpZGF0ZVJlbGF0aW9ucyBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbGlkYXRlcyA9IHRydWU7CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IFsgXTsKCiAgICAgICAgZm9yICggdmFyIGEgaW4gcmVjb3JkcyApIHsKICAgICAgICAgICAgc3dpdGNoICggcmVjb3Jkc1sgYSBdLnR5cGUgKSB7CiAgICAgICAgICAgICAgICBjYXNlICJ2b2x1bWUiOgogICAgICAgICAgICAgICAgICAgIHZhciB2b2x1bWVSZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgICAgICAgICAgICAgICAgIHZvbHVtZVJlY29yZC5mcm9tU3RyaW5nKCByZWNvcmRzWyBhIF0ucmVjb3JkICk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJoZWFkIjoKICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZFJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICAgICAgICAgICAgICAgICAgaGVhZFJlY29yZC5mcm9tU3RyaW5nKCByZWNvcmRzWyBhIF0ucmVjb3JkICk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJzZWN0aW9uIjoKICAgICAgICAgICAgICAgICAgICB2YXIgc2VjdGlvblJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICAgICAgICAgICAgICAgICAgc2VjdGlvblJlY29yZC5mcm9tU3RyaW5nKCByZWNvcmRzWyBhIF0ucmVjb3JkICk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggc2VjdGlvblJlY29yZCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICBpZiAoIHNlY3Rpb25SZWNvcmQuZ2V0VmFsdWUoIC8wMTQvLCAvYS8gKSAhPT0gaGVhZFJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9hLyApIHx8IHZvbHVtZVJlY29yZC5nZXRWYWx1ZSggLzAxNC8sIC9hLyApICE9PSBzZWN0aW9uUmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2EvICkgKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmICggc2VjdGlvblJlY29yZC5nZXRWYWx1ZSggLzAxNC8sIC9hLyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAic2VjdGlvbiBkb2VzIG5vdCBjb250YWluIGEgMDE0KmE6ICIgKyBzZWN0aW9uUmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2EvICk7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIjAxNCphIGZyb20gc2VjdGlvbjogIiArIHNlY3Rpb25SZWNvcmQuZ2V0VmFsdWUoIC8wMTQvLCAvYS8gKSArICIgaXMgbm90IHRoZSBzYW1lIGFzIDAwMSphIGZyb20gaGVhZDogIiArIGhlYWRSZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYS8gKSArICIuIE9yIDAxNCphIGZyb20gcmVjb3JkOiAiICsgdm9sdW1lUmVjb3JkLmdldFZhbHVlKCAvMDE0LywgL2EvICkgKyAiIGlzIG5vdCB0aGUgc2FtZSBhcyAwMDEqYSBmcm9tIHNlY3Rpb246ICIgKyBzZWN0aW9uUmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2EvICk7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciArICIuIE9SSUdJTjogIiArIG9yaWdpbiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICggaGVhZFJlY29yZCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICBpZiAoIHZvbHVtZVJlY29yZC5nZXRWYWx1ZSggLzAxNC8sIC9hLyApICE9PSBoZWFkUmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2EvICkgKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmICggdm9sdW1lUmVjb3JkLmdldFZhbHVlKCAvMDE0LywgL2EvICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJyZWNvcmQgZG9lcyBub3QgY29udGFpbiBhIDAxNCphIjsKICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goIGVycm9yTWVzc2FnZSApOwogICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICIwMTQqYSBmcm9tIHJlY29yZDogIiArIHZvbHVtZVJlY29yZC5nZXRWYWx1ZSggLzAxNC8sIC9hLyApICsgIiBpcyBub3QgdGhlIHNhbWUgYXMgMDAxKmEgZnJvbSBoZWFkOiAiICsgaGVhZFJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9hLyApOwogICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbGlkYXRpb25PYmplY3QgPSB7CiAgICAgICAgICAgICJ2YWxpZGF0ZXMiOiB2YWxpZGF0ZXMsCiAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogZXJyb3JNZXNzYWdlcwogICAgICAgIH07CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogdmFsaWRhdGVSZWxhdGlvbnMgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0aW9uT2JqZWN0OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCB2YWxpZGF0ZXMgYSBkYW5NQVJDMiByZWNvcmQuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnZhbGlkYXRlRGFuTWFyYzJEYXRhKCByZWNvcmQsIG9yaWdpbiwgc3VibWl0dGVyICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBkYW5NQVJDMiByZWNvcmQgCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luIFRoZSBvcmlnaW5hbCBjcmVhdG9yIG9mIHRoZSByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJtaXR0ZXIgVGhlIHN1Ym1pdHRlciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuZCBhcnJheSBvZiAiZXJyb3JNZXNzYWdlcyIKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1hcmNSZWNvcmRWYWxpZGF0aW9uLnZhbGlkYXRlRGFuTWFyYzJEYXRhCiAgICAgKi8KICAgIHRoYXQudmFsaWRhdGVEYW5NYXJjMkRhdGEgPSBmdW5jdGlvbiggcmVjb3JkLCBvcmlnaW4sIHN1Ym1pdHRlciApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogdmFsaWRhdGVEYW5NYXJjMkRhdGEgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWxpZGF0ZXMgPSB0cnVlOwogICAgICAgIHZhciBlcnJvck1lc3NhZ2VzID0gWyBdOwoKICAgICAgICB2YXIgaWRlbnRpZmllciA9IHJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9hfGIvLCAifCIgKS5yZXBsYWNlKCAvIC9nLCAiIiApOwoKICAgICAgICB2YXIgbGVnYWxSZWNvcmRUeXBlID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tSZWNvcmRUeXBlKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiApOwoKICAgICAgICBpZiAoIGxlZ2FsUmVjb3JkVHlwZS52YWxpZGF0ZXMgPT09IGZhbHNlICkgewoKICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggbGVnYWxSZWNvcmRUeXBlLmVycm9yTWVzc2FnZXMgKTsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHJlcXVpcmVkRmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tSZXF1aXJlZEZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyLCBvcmlnaW4gKTsKICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gcmVxdWlyZWRGaWVsZHMuZXJyb3JNZXNzYWdlcyApIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggcmVxdWlyZWRGaWVsZHMuZXJyb3JNZXNzYWdlc1sgYSBdICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBub25SZXBlYXRhYmxlID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tOb25SZXBlYXRhYmxlRmllbGRzKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiwgc3VibWl0dGVyICk7CiAgICAgICAgICAgIGZvciAoIHZhciBiIGluIG5vblJlcGVhdGFibGUuZXJyb3JNZXNzYWdlcyApIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggbm9uUmVwZWF0YWJsZS5lcnJvck1lc3NhZ2VzWyBiIF0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL1B1YmxpYyBsaWJyYXJpZXMgYW5kIHNjaG9vbCBsaWJyYXJpZXMKICAgICAgICAgICAgaWYgKCBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgInB1YmxpY0xpYnJhcnkiICkgPT09IHRydWUgfHwgQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsICJzY2hvb2xMaWJyYXJ5IiApID09PSB0cnVlICkgewogICAgICAgICAgICAgICAgdmFyIGlsbGVnYWxGaWVsZHMgPSB7CiAgICAgICAgICAgICAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgY2hlY2tFeGNsdWRpbmdGaWVsZHMgPSB7CiAgICAgICAgICAgICAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBMb2cuaW5mbyggIlNraXBwZWQgY2hlY2tJbGxlZ2FsRmllbGRzIGZ1bmN0aW9uIGZvciBwdWJsaWMgbGlicmFyeSBvciBzY2hvb2wgbGlicmFyeSByZWNvcmQiICk7CiAgICAgICAgICAgICAgICBMb2cuaW5mbyggIlNraXBwZWQgY2hlY2tFeGNsdWRpbmdGaWVsZHMgZnVuY3Rpb24gZm9yIHB1YmxpYyBsaWJyYXJ5IG9yIHNjaG9vbCBsaWJyYXJ5IHJlY29yZCIgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBpbGxlZ2FsRmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJbGxlZ2FsRmllbGRzKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiApOwogICAgICAgICAgICAgICAgdmFyIGNoZWNrRXhjbHVkaW5nRmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tFeGNsdWRpbmdGaWVsZHMoIHJlY29yZCwgaWRlbnRpZmllciwgb3JpZ2luICk7CgogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzcGVjaWZpY0ZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNwZWNpZmljRmllbGRzVmFsaWRhdGUoIHJlY29yZCwgaWRlbnRpZmllciwgb3JpZ2luLCBzdWJtaXR0ZXIgKTsKCiAgICAgICAgICAgIGZvciAoIHZhciBjIGluIGlsbGVnYWxGaWVsZHMuZXJyb3JNZXNzYWdlcyApIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggaWxsZWdhbEZpZWxkcy5lcnJvck1lc3NhZ2VzWyBjIF0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKCB2YXIgZCBpbiBzcGVjaWZpY0ZpZWxkcy5lcnJvck1lc3NhZ2VzICkgewogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcyA9IGVycm9yTWVzc2FnZXMuY29uY2F0KCBzcGVjaWZpY0ZpZWxkcy5lcnJvck1lc3NhZ2VzWyBkIF0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKCB2YXIgZSBpbiBjaGVja0V4Y2x1ZGluZ0ZpZWxkcy5lcnJvck1lc3NhZ2VzICkgewogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcyA9IGVycm9yTWVzc2FnZXMuY29uY2F0KCBjaGVja0V4Y2x1ZGluZ0ZpZWxkcy5lcnJvck1lc3NhZ2VzWyBlIF0gKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCByZXF1aXJlZEZpZWxkcy52YWxpZGF0ZXMgPT09IGZhbHNlIHx8IG5vblJlcGVhdGFibGUudmFsaWRhdGVzID09PSBmYWxzZSB8fCBpbGxlZ2FsRmllbGRzLnZhbGlkYXRlcyA9PT0gZmFsc2UgfHwgc3BlY2lmaWNGaWVsZHMudmFsaWRhdGVzID09PSBmYWxzZSB8fCBjaGVja0V4Y2x1ZGluZ0ZpZWxkcy52YWxpZGF0ZXMgPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciB2YWxpZGF0aW9uT2JqZWN0ID0gewogICAgICAgICAgICAidmFsaWRhdGVzIjogdmFsaWRhdGVzLAogICAgICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IGVycm9yTWVzc2FnZXMKICAgICAgICB9OwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IHZhbGlkYXRlRGFuTWFyYzJEYXRhIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4gdmFsaWRhdGlvbk9iamVjdDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIGlmIHRoZSByZWNvcmQgdHlwZSBpcyBsZWdhbC4KICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGxvZyBmb3Igb3V0cHV0dGluZyBpbmZvcm1hdGlvbiBvbiByZWNvcmRzIHRoYXQgZG8KICAgICAqIG5vdCB2YWxpZGF0ZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tSZWNvcmRUeXBlKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIGEgZGFuTUFSQzIgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRlbnRpZmllciBpZGVudGlmaWVyIG9mIHRoZSByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW4gVGhlIG9yaWdpbmFsIGNyZWF0b3Igb2YgdGhlIHJlY29yZAogICAgICogQHJldHVybiB7T2JqZWN0fSAidmFsaWRhdGVzIiBhcyBib29sZWFuIHRydWUgYW5kIGZhbHNlIGFuZCBhbmQgYXJyYXkgb2YgImVycm9yTWVzc2FnZXMiCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1JlY29yZFR5cGUKICAgICAqLwogICAgdGhhdC5jaGVja1JlY29yZFR5cGUgPSBmdW5jdGlvbiggcmVjb3JkLCBpZGVudGlmaWVyLCBvcmlnaW4gKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNoZWNrUmVjb3JkVHlwZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIGxlZ2FsUmVjb3JkVHlwZSA9IHRydWU7CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZXMgPSBbIF07CgogICAgICAgIHZhciByZWNvcmRUeXBlID0gcmVjb3JkLmdldFZhbHVlKCAvMDA0LywgL2EvICk7CiAgICAgICAgaWYgKCAhcmVjb3JkVHlwZS5tYXRjaCggL2V8aS8gKSApIHsKICAgICAgICAgICAgaWYgKCByZWNvcmRUeXBlLm1hdGNoKCAvaHxzfGIvICkgKSB7CiAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gInN0cnVjdHVyZSBvZiBoZWFkLCBzZWN0aW9uLCB2b2x1bWUgcmVjb3JkcyBpcyBub3QgY29ycmVjdCI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gInR5cGUgZnJvbSAwMDQqYSAiICsgcmVjb3JkLmdldFZhbHVlKCAvMDA0LywgL2EvICkgKyAiIGlzIG5vdCBsZWdhbCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgbGVnYWxSZWNvcmRUeXBlID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB2YXIgdmFsaWRhdGlvbk9iamVjdCA9IHsKICAgICAgICAgICAgInZhbGlkYXRlcyI6IGxlZ2FsUmVjb3JkVHlwZSwKICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOiBlcnJvck1lc3NhZ2VzCiAgICAgICAgfTsKCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBjaGVja1JlY29yZFR5cGUgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0aW9uT2JqZWN0OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjaGVja3MgaWYgYWxsIHJlcXVpcmVkIGRhbk1BUkMyIGZpZWxkcyBhcmUgcHJlc2VudC4KICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGxvZyBmb3Igb3V0cHV0dGluZyBpbmZvcm1hdGlvbiBvbiByZWNvcmRzIHRoYXQgZG8KICAgICAqIG5vdCB2YWxpZGF0ZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tSZXF1aXJlZEZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyLCBvcmlnaW4gKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBhIGRhbk1BUkMyIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXIgaWRlbnRpZmllciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luIFRoZSBvcmlnaW5hbCBjcmVhdG9yIG9mIHRoZSByZWNvcmQKICAgICAqIEByZXR1cm4ge09iamVjdH0gInZhbGlkYXRlcyIgYXMgYm9vbGVhbiB0cnVlIGFuZCBmYWxzZSBhbmQgYW5kIGFycmF5IG9mICJlcnJvck1lc3NhZ2VzIgogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tSZXF1aXJlZEZpZWxkcwogICAgICovCiAgICB0aGF0LmNoZWNrUmVxdWlyZWRGaWVsZHMgPSBmdW5jdGlvbiggcmVjb3JkLCBpZGVudGlmaWVyLCBvcmlnaW4gKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNoZWNrUmVxdWlyZWRGaWVsZHMgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWxpZGF0ZXMgPSB0cnVlOwogICAgICAgIHZhciBlcnJvck1lc3NhZ2VzID0gWyBdOwogICAgICAgIHZhciBlcnJvck1lc3NhZ2U7CgogICAgICAgIHZhciByZXF1aXJlZEZpZWxkcyA9IFsgIjAwMSIsICIwMDQiLCAiMDA4IiwgIjAwOSIsICIyNDUiIF07CgogICAgICAgIGZvciAoIHZhciBpIGluIHJlcXVpcmVkRmllbGRzICkgewogICAgICAgICAgICB2YXIgcmVnRXhwID0gbmV3IFJlZ0V4cCggcmVxdWlyZWRGaWVsZHNbIGkgXSApCiAgICAgICAgICAgIGlmICggIXJlY29yZC5leGlzdEZpZWxkKCByZWdFeHAgKSApIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJyZXF1aXJlZCBmaWVsZDogIiArIHJlcXVpcmVkRmllbGRzWyBpIF0gKyAiIGlzIG1pc3NpbmciOwogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbGlkYXRpb25PYmplY3QgPSB7CiAgICAgICAgICAgICJ2YWxpZGF0ZXMiOiB2YWxpZGF0ZXMsCiAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogZXJyb3JNZXNzYWdlcwogICAgICAgIH07CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogY2hlY2tSZXF1aXJlZEZpZWxkcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25PYmplY3Q7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyB0aGF0IG5vIG5vbi1yZXBlYXRhYmxlIGRhbk1BUkMyIGZpZWxkcyBhcmUgcHJlc2VudC4KICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGxvZyBmb3Igb3V0cHV0dGluZyBpbmZvcm1hdGlvbiBvbiByZWNvcmRzIHRoYXQgZG8KICAgICAqIG5vdCB2YWxpZGF0ZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tOb25SZXBlYXRhYmxlRmllbGRzKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiwgc3VibWl0dGVyICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBkYW5NQVJDMiByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VibWl0dGVyIFRoZSBzdWJtaXR0ZXIgb2YgdGhlIHJlY29yZAogICAgICogQHJldHVybiB7T2JqZWN0fSAidmFsaWRhdGVzIiBhcyBib29sZWFuIHRydWUgYW5kIGZhbHNlIGFuZCBhbmQgYXJyYXkgb2YgImVycm9yTWVzc2FnZXMiCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja05vblJlcGVhdGFibGVGaWVsZHMKICAgICAqLwogICAgdGhhdC5jaGVja05vblJlcGVhdGFibGVGaWVsZHMgPSBmdW5jdGlvbiggcmVjb3JkLCBpZGVudGlmaWVyLCBvcmlnaW4sIHN1Ym1pdHRlciApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogY2hlY2tOb25SZXBlYXRhYmxlRmllbGRzIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsaWRhdGVzID0gdHJ1ZTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IFsgXTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlOwoKICAgICAgICAvL1B1YmxpYyBsaWJyYXJpZXMgYW5kIHNjaG9vbCBsaWJyYXJpZXMKICAgICAgICBpZiAoIEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCAicHVibGljTGlicmFyeSIgKSA9PT0gdHJ1ZSB8fCBBZG1pbkRhdGEuY2hlY2tUeXBlT2ZTdWJtaXR0ZXIoIHN1Ym1pdHRlciwgInNjaG9vbExpYnJhcnkiICkgPT09IHRydWUgKSB7CiAgICAgICAgICAgIHZhciBub25SZXBlYXRhYmxlRmllbGRzID0gWyAiMDAxIiwgIjAwNCIsICIwMDgiLCAiMDA5IiwgIjI0NSIgXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgbm9uUmVwZWF0YWJsZUZpZWxkcyA9IFsgIjAwMSIsICIwMDQiLCAiMDA1IiwgIjAwOCIsICIwMDkiLCAiMDEzIiwgIjAxNCIsICIwMTciLCAiMDM1IiwgIjAzNiIsICIxMDAiLCAiMTEwIiwgIjIzOSIsICIyNDAiLCAiMjQ1IiBdOwogICAgICAgIH0KICAgICAgICAvLzg3MDk3MTogMDAxLCAwMDQsIDAwOCwgMDA5LCAwMTQsIDEwMCwgMTEwLCAyNDUKICAgICAgICAvLzg3MDk3MzogMDAxLCAwMDQsIDAwOCwgMDA5LCAwMTQsIDEwMCwgMTEwLCAyNDUKICAgICAgICB2YXIgbG9nZ2VkRmllbGRzID0gWyBdOwoKICAgICAgICBmb3IgKCB2YXIgaSBpbiBub25SZXBlYXRhYmxlRmllbGRzICkgewogICAgICAgICAgICB2YXIgcmVnRXhwID0gbmV3IFJlZ0V4cCggbm9uUmVwZWF0YWJsZUZpZWxkc1sgaSBdICkKICAgICAgICAgICAgaWYgKCByZWNvcmQuZXhpc3RGaWVsZCggcmVnRXhwICkgJiYgIXJlY29yZC5pc1VuaXF1ZSggcmVnRXhwICkgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGxvZ2dlZEZpZWxkcy5pbmRleE9mKCBub25SZXBlYXRhYmxlRmllbGRzWyBpIF0gKSA+PSAwICkge30gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIm5vbi1yZXBlYXRhYmxlIGZpZWxkOiAiICsgbm9uUmVwZWF0YWJsZUZpZWxkc1sgaSBdICsgIiBpcyByZXBlYXRlZCI7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciArICIuIE9SSUdJTjogIiArIG9yaWdpbiApOwogICAgICAgICAgICAgICAgICAgIGxvZ2dlZEZpZWxkcy5wdXNoKCBub25SZXBlYXRhYmxlRmllbGRzWyBpIF0gKTsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbGlkYXRpb25PYmplY3QgPSB7CiAgICAgICAgICAgICJ2YWxpZGF0ZXMiOiB2YWxpZGF0ZXMsCiAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogZXJyb3JNZXNzYWdlcwogICAgICAgIH07CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogY2hlY2tOb25SZXBlYXRhYmxlRmllbGRzIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4gdmFsaWRhdGlvbk9iamVjdDsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIGlmIGlsbGVnYWwgZGFuTUFSQzIgZmllbGRzIGFyZSBwcmVzZW50LgogICAgICogVGhpcyBtZXRob2QgdXNlcyB0aGUgbG9nIGZvciBvdXRwdXR0aW5nIGluZm9ybWF0aW9uIG9uIHJlY29yZHMgdGhhdCBkbwogICAgICogbm90IHZhbGlkYXRlLgogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0lsbGVnYWxGaWVsZHMoIHJlY29yZCwgaWRlbnRpZmllciwgb3JpZ2luICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBkYW5NQVJDMiByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuZCBhcnJheSBvZiAiZXJyb3JNZXNzYWdlcyIKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSWxsZWdhbEZpZWxkcwogICAgICovCiAgICB0aGF0LmNoZWNrSWxsZWdhbEZpZWxkcyA9IGZ1bmN0aW9uKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogY2hlY2tJbGxlZ2FsRmllbGRzIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsaWRhdGVzID0gdHJ1ZTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IFsgXTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlOwoKICAgICAgICB2YXIgaWxsZWdhbEZpZWxkcyA9IFsgIjAwMyIsICIwMDciLCAiMDEwIiwgIjAxOSIsICIwMzEiLCAiMDM3IiwgIjA0MCIsICIwNDUiLCAiMDQ2IiwgIjA0NyIsICIyNDkiLCAiMDUxIiwgIjA1MiIsICIwNTMiLCAiMDU0IiwgIjA1NSIsICIwNTYiLCAiMDU3IiwgIjA1OCIsICIwNTkiLCAiMDYxIiwgIjA2MiIsICIwNjMiLCAiMDY0IiwgIjA2NSIsICIwNjYiLCAiMDY3IiwgIjA2OCIsICIwNjkiLCAiMDcxIiwgIjA3MiIsICIwNzMiLCAiMDc0IiwgIjA3NSIsICIwNzYiLCAiMDc3IiwgIjA3OCIsICIwODEiLCAiMDgzIiwgIjA4NCIsICI0OTAiIF07CgogICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3QvICkubWF0Y2goIC9tfHN8YS8gKSApIHsKICAgICAgICAgICAgaWxsZWdhbEZpZWxkcy5wdXNoKCAiMDIyIiApOwogICAgICAgIH0KCiAgICAgICAgZm9yICggdmFyIGkgaW4gaWxsZWdhbEZpZWxkcyApIHsKICAgICAgICAgICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoIGlsbGVnYWxGaWVsZHNbIGkgXSApOwogICAgICAgICAgICBpZiAoIHJlY29yZC5leGlzdEZpZWxkKCByZWdFeHAgKSApIHsKICAgICAgICAgICAgICAgIGlmICggaWxsZWdhbEZpZWxkc1sgaSBdID09PSAiMDIyIiApIHsKICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAiaWxsZWdhbCBmaWVsZDogIiArIGlsbGVnYWxGaWVsZHNbIGkgXSArICIgaXMgcHJlc2VudCAoaWxsZWdhbCBiZWNhdXNlIG9mIHRoZSBiaWJsaW9ncmFwaGljIGNhdGVnb3JpIG9mIHRoaXMgcmVjb3JkKSI7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciArICIuIE9SSUdJTjogIiArIG9yaWdpbiApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAiaWxsZWdhbCBmaWVsZDogIiArIGlsbGVnYWxGaWVsZHNbIGkgXSArICIgaXMgcHJlc2VudCI7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciArICIuIE9SSUdJTjogIiArIG9yaWdpbiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciB2YWxpZGF0aW9uT2JqZWN0ID0gewogICAgICAgICAgICAidmFsaWRhdGVzIjogdmFsaWRhdGVzLAogICAgICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IGVycm9yTWVzc2FnZXMKICAgICAgICB9OwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IGNoZWNrSWxsZWdhbEZpZWxkcyBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25PYmplY3Q7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyB0aGF0IG5vIGRhbk1BUkMyIGZpZWxkcyB0aGF0IGV4Y2x1ZGUgZWFjaCBvdGhlciBhcmUgcHJlc2VudC4KICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGxvZyBmb3Igb3V0cHV0dGluZyBpbmZvcm1hdGlvbiBvbiByZWNvcmRzIHRoYXQgZG8KICAgICAqIG5vdCB2YWxpZGF0ZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tFeGNsdWRpbmdGaWVsZHMoIHJlY29yZCwgaWRlbnRpZmllciwgb3JpZ2luICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBkYW5NQVJDMiByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuZCBhcnJheSBvZiAiZXJyb3JNZXNzYWdlcyIKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrRXhjbHVkaW5nRmllbGRzCiAgICAgKi8KICAgIHRoYXQuY2hlY2tFeGNsdWRpbmdGaWVsZHMgPSBmdW5jdGlvbiggcmVjb3JkLCBpZGVudGlmaWVyLCBvcmlnaW4gKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNoZWNrRXhjbHVkaW5nRmllbGRzIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsaWRhdGVzID0gdHJ1ZTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IFsgXTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlOwoKICAgICAgICB2YXIgZXhjbHVkaW5nRmllbGRzID0gewogICAgICAgICAgICAiMTAwIjogIjExMCIKICAgICAgICB9CgogICAgICAgIGZvciAoIHZhciBpIGluIGV4Y2x1ZGluZ0ZpZWxkcyApIHsKICAgICAgICAgICAgdmFyIHJlZ0V4cEtleSA9IG5ldyBSZWdFeHAoIGkgKTsKICAgICAgICAgICAgdmFyIHJlZ0V4cFZhbHVlID0gbmV3IFJlZ0V4cCggZXhjbHVkaW5nRmllbGRzWyBpIF0gKTsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZXhpc3RGaWVsZCggcmVnRXhwS2V5ICkgJiYgcmVjb3JkLmV4aXN0RmllbGQoIHJlZ0V4cFZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAiZXhjbHVkaW5nIGZpZWxkczogIiArIGkgKyAiIGFuZCAiICsgZXhjbHVkaW5nRmllbGRzWyBpIF0gKyAiIGFyZSBib3RoIHByZXNlbnQiOwogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbGlkYXRpb25PYmplY3QgPSB7CiAgICAgICAgICAgICJ2YWxpZGF0ZXMiOiB2YWxpZGF0ZXMsCiAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogZXJyb3JNZXNzYWdlcwogICAgICAgIH07CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogY2hlY2tFeGNsdWRpbmdGaWVsZHMgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0aW9uT2JqZWN0OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjaGVja3MgaWYgc3BlY2lmaWMgZGFuTUFSQzIgZmllbGRzIHZhbGlkYXRlLgogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zcGVjaWZpY0ZpZWxkc1ZhbGlkYXRlKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiwgc3VibWl0dGVyICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBkYW5NQVJDMiByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIFRoZSBpZGVudGlmaWVyIG9mIHRoZSByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW4gVGhlIG9yaWdpbmFsIGNyZWF0b3Igb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IHN1Ym1pdHRlciBUaGUgc3VibWl0dGVyIG9mIHRoZSByZWNvcmQKICAgICAqIEByZXR1cm4ge09iamVjdH0gInZhbGlkYXRlcyIgYXMgYm9vbGVhbiB0cnVlIGFuZCBmYWxzZSBhbmQgYW4gYXJyYXkgb2YgImVycm9yTWVzc2FnZXMiCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zcGVjaWZpY0ZpZWxkc1ZhbGlkYXRlCiAgICAgKi8KICAgIHRoYXQuc3BlY2lmaWNGaWVsZHNWYWxpZGF0ZSA9IGZ1bmN0aW9uKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiwgc3VibWl0dGVyICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zcGVjaWZpY0ZpZWxkc1ZhbGlkYXRlIG1ldGhvZCIgKTsKCiAgICAgICAgdmFyIHZhbGlkYXRlcyA9IHRydWU7CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZXMgPSBbIF07CgogICAgICAgIGlmICggQWRtaW5EYXRhLmNoZWNrVHlwZU9mU3VibWl0dGVyKCBzdWJtaXR0ZXIsICJwdWJsaWNMaWJyYXJ5IiApID09PSB0cnVlIHx8IEFkbWluRGF0YS5jaGVja1R5cGVPZlN1Ym1pdHRlciggc3VibWl0dGVyLCAic2Nob29sTGlicmFyeSIgKSA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgdmFyIGNoZWNrU3ViRmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tCYXNpY1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiApOwogICAgICAgICAgICB2YXIgY2hlY2tTdWJGaWVsZHNWYWx1ZXMgPSB7CiAgICAgICAgICAgICAgICAidmFsaWRhdGVzIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgTG9nLmluZm8oICJTa2lwcGVkIGNoZWNrU3ViRmllbGRWYWx1ZSBmdW5jdGlvbiBmb3IgcHVibGljIGxpYnJhcnkgb3Igc2Nob29sIGxpYnJhcnkgcmVjb3JkIiApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkQ2hlY2soIHJlY29yZCApOwogICAgICAgICAgICB2YXIgY2hlY2tTdWJGaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcywgb3JpZ2luICk7CgogICAgICAgICAgICB2YXIgZmllbGRzVmFsdWVzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2soIHJlY29yZCApOwogICAgICAgICAgICB2YXIgY2hlY2tTdWJGaWVsZHNWYWx1ZXMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUoIHJlY29yZCwgaWRlbnRpZmllciwgZmllbGRzVmFsdWVzLCBvcmlnaW4gKTsKICAgICAgICB9CiAgICAgICAgaWYgKCBjaGVja1N1YkZpZWxkcy52YWxpZGF0ZXMgPT09IGZhbHNlIHx8IGNoZWNrU3ViRmllbGRzVmFsdWVzLnZhbGlkYXRlcyA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICBmb3IgKCB2YXIgYSBpbiBjaGVja1N1YkZpZWxkcy5lcnJvck1lc3NhZ2VzICkgewogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBjaGVja1N1YkZpZWxkcy5lcnJvck1lc3NhZ2VzWyBhIF0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKCB2YXIgYiBpbiBjaGVja1N1YkZpZWxkc1ZhbHVlcy5lcnJvck1lc3NhZ2VzICkgewogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBjaGVja1N1YkZpZWxkc1ZhbHVlcy5lcnJvck1lc3NhZ2VzWyBiIF0gKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbGlkYXRpb25PYmplY3QgPSB7CiAgICAgICAgICAgICJ2YWxpZGF0ZXMiOiB2YWxpZGF0ZXMsCiAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogZXJyb3JNZXNzYWdlcwogICAgICAgIH07CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogTWFyY1JlY29yZFZhbGlkYXRpb24uc3BlY2lmaWNGaWVsZHNWYWxpZGF0ZSBtZXRob2QiICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0aW9uT2JqZWN0OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgaW4gd2hpY2ggZGF0YSBmb3Igc3ViZmllbGQgY2hlY2sgaXMgc2V0IHVwLgogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkQ2hlY2soIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIGEgbWFyYyByZWNvcmQKICAgICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBvYmplY3RzIHdpdGggZmllbGQsIGxlZ2FsIHN1YmZpZWxkcywgcmVxdWlyZWQgc3ViZmllbGRzLCBhbmQgbm9uLXJlcGVhdGFibGUgc3ViZmllbGRzCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkQ2hlY2sKICAgICAqLwogICAgdGhhdC5zZXRVcEZvclN1YkZpZWxkQ2hlY2sgPSBmdW5jdGlvbiggcmVjb3JkICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBzZXRVcEZvclN1YkZpZWxkQ2hlY2sgZnVuY3Rpb24iICk7CgogICAgICAgIGZpZWxkcyA9IFsgXTsKCiAgICAgICAgaWYgKCAhcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5N1sxM10vICkgKSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwMSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGR8ZXxmfGd8b3x0fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogImF8YnxmIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGJ8Y3xkfGV8ZnxnfG98dCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDEiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xkfGV8ZnxnfG98dHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJhfGJ8ZiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGYiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIC8vRXIgZGV0IHZpcmtlbGlnIHJpZ3RpZ3QsIGF0IGRlciBlciBmb3Jza2VsIHBhYSBub25SZXBlYXRhYmxlU3ViRmllbGRzIGkgMDAxIGkgaGh2LiA4NzA5NzAgb2cgODcwOTcxLzg3MDk3Mz8gCiAgICAgICAgaWYgKCAhcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5N1sxM10vICkgKSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwMiIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGR8dHx4fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGN8dHx4IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9iLyApLm1hdGNoKCAvODcwOTcwLyApICkgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDQiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJyfGF8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAicnxhIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJyfGEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5N1sxM10vICkgKSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogInJ8YXx4fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInJ8YSIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAicnxhIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogInJ8YXxufFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInJ8YSIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAicnxhfG4iCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIGlmICggIXJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9iLyApLm1hdGNoKCAvODcwOTdbMTNdLyApICkgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDUiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJofGl8anxrfGx8cnx2fHp8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJ6IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNiIsCiAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHxlfFx1MDBFNXwyIiwKICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGN8ZHxlfDIiCiAgICAgICAgICAgIH0gKTsKCiAgICAgICAgaWYgKCAhcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5N1sxM10vICkgKSB7CiAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA0LywgL2EvICkubWF0Y2goIC9lLyApICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJ0fHV8YXx6fGJ8Y3xkfGV8ZnxnfGh8aXxqfGt8bHxtfG58b3xxfHZ8d3x4fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ2IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAidHx1fGF8enxjfGV8ZnxnfGh8anxrfGx8bXxvfHYiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJ0fHV8YXx6fGJ8Y3xkfGV8ZnxnfGh8aXxqfGt8bHxtfG58b3xxfHJ8dnx3fHh8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogInR8dXxhfHp8Y3xlfGZ8Z3xofGp8a3xsfG18b3xyfHYiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAidHx1fGF8enxifGN8ZHxlfGZ8Z3xofGl8anxrfGx8bXxufG98cXxyfHZ8eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ2IiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJ0fHYiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA5IiwKICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Z3xofFx1MDBFNSIsCiAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiYXxnIiwKICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgfSApOwogICAgICAgIGlmICggIXJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9iLyApLm1hdGNoKCAvODcwOTdbMTNdLyApICkgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMTEiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9CiAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDQvLCAvYS8gKS5tYXRjaCggL2kvICkgKSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAxNCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJhIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMTYiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogImEiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIGlmICggIXJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9iLyApLm1hdGNoKCAvODcwOTdbMTNdLyApICkgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMTciLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDE4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDIwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifHh8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAyMSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWVdfG58d3x4fFx1MDBFNXxCIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGUiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGlmICggIXJlY29yZC5nZXRWYWx1ZSggLzAwOC8sIC90LyApLm1hdGNoKCAvbXxzfGEvICkgKSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDIyIiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWRdfGx8eHx6fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGwiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAyMyIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDI0IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGR8eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDI1IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHx4fFx1MDBFNXwyIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGN8MiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDI3IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiW2EtZF18eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDI4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiW2EtZF18bnx4fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxjIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMjkiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1kXXxyfHN8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGJ8Y3xyIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMzAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAzMiIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDMzIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMzQiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1oXXxqfGt8bXxufHB8cXxyfHN8dHx4fHl8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8ZHxlfGZ8Z3xqfGt8bXxufHB8cnxzfHR8eHx5fHoiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAzNSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMzYiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAzOCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMzkiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGIiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIC8vc3ViZmllbGQgcyBhZGRlZCAtIGNoZWNrCiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjA0MSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWVdfHB8c3x1fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwNDIiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGN8MiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDQzIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImJ8Y3wyIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwNDQiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDQ4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDUwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDYwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDcwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDc5IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfHh8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJ4IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwODAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfHh8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8MiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDgyIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiW2EtZF18XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJjfGQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjA4NSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwODYiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDk2IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiLiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAieiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9CiAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICJmaWVsZCI6ICIxMDAiLAogICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGV8ZnxofGt8XHUwMEU1fEF8Q3xFfEZ8SHxLfDB8NHw1fDYiLAogICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGN8ZXxmfGh8a3w1IgogICAgICAgICAgICB9ICk7CiAgICAgICAgLy84NzA5NzEgb2cgOTcwOTczIGhhciBJS0tFICJLIiBwYWEgbGlzdGVuIG92ZXIgbGVnYWxTdWJGaWVsZHMgLSBlciBkZXR0ZSBlbiBmZWpsPyAoZGV0IGVyIGVuZXN0ZSBmb3Jza2VsIGZyYSBvdmVuc3RhYWVuZGUuLi4pCQkKICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgImZpZWxkIjogIjExMCIsCiAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfGV8aXxqfGt8c3xcdTAwRTV8QXxDfEV8SXxKfEt8U3wwfDQiLAogICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGl8anxrfHMiCiAgICAgICAgICAgIH0gKTsKICAgICAgICBpZiAoICFyZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3WzEzXS8gKSApIHsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMjEwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8XHUwMEU1fEF8QiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGMiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjIyMCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxcdTAwRTV8QXxCIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGIiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjIzOSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGV8ZnxofHR8dXx2fFx1MDBmOHxcdTAwRTV8QXxDfEV8RnxIfFR8VXxWfFx1MDBEOHw3fFx1MDBEOHwwIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGN8ZXxmfGh8dHxcdTAwZjgiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI0MCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8ZHxlfGZ8Z3xofGp8a3xsfG18bnxvfHF8cnxzfHV8d3xcdTAwZjh8XHUwMEU1fDB8MXxBfEciLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8ZHxlfGZ8Z3xofGt8bHxtfHF8cnx1fHciCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI0MSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8aXxufG98cnxcdTAwZjh8XHUwMEU1fEF8TiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxpfG58b3xcdTAwZjgiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI0MiIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3xlfG58b3xcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8Y3xlIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBpZiAoICFyZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3WzEzXS8gKSApIHsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDkvLCAvYS8gKS5tYXRjaCggL2N8ZHxtfHB8cnxzfHQvICkgKSB7CiAgICAgICAgICAgICAgICAvLydnJyBhZGRlZCBiZWNhdXNlIG9mIG11bHRpIHZvbHVtZSByZWNvcmRzCiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMjQ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWNdfGV8ZnxnfGl8anxrfGx8bXxufG98cHxxfHJ8c3x0fHV8eHx3fHl8enxcdTAwRTZ8XHUwMGY4fFx1MDBFNXxBfEJ8Q3xFfEZ8SXxKfE58T3xQfFF8UnxTfFR8VXxYfFl8XHUwMEM2fFx1MDBEOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAia3x5fFx1MDBDNnxcdTAwRDgiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8nZycgYWRkZWQgYmVjYXVzZSBvZiBtdWx0aSB2b2x1bWUgcmVjb3JkcwogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI0NSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1jXXxlfGZ8Z3xtfG58b3xwfHF8cnxzfHR8dXx4fHd8eXx6fFx1MDBFNnxcdTAwZjh8XHUwMEU1fEF8QnxDfEV8RnxJfEp8TnxPfFB8UXxSfFN8VHxVfFh8WXxcdTAwQzZ8XHUwMEQ4IiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogImEiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJrfHl8XHUwMEM2fFx1MDBEOCIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIyNDUiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICIuIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiZ3xuIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgIH0KICAgICAgICBpZiAoICFyZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3WzEzXS8gKSApIHsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMjQ3fDI0OCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWNdfFtlLXFdfHJ8W3Mtd118eHx5fHp8XHUwMEU1fEF8Q3xFfEZ8R3xLfEx8TnxQfFN8VHxWfFgiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImJ8Z3xqfGsiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI0OSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1fEEiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI1MHwyNTEiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1kXXxwfHR8eHxcdTAwRTV8JnxBfEN8RCIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifHgiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI1NSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1fHp8QSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXx6IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIyNTYiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1nXXxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIlthLWddIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIyNTciLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfHB8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfHAiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjI1OSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMjYwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiW2EtZ118anxrfHB8cnxzfHR8eHxcdTAwRTV8JnxBfEJ8Q3xEfEZ8R3xLfFB8UnxUIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJrfHgiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjMwMCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWVdfGx8bnxcdTAwRTV8QnxDfEQiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMzIwfDMyMXwzMjIiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNDQwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfGV8W24tdF18dnx6fFx1MDBFNnxcdTAwZjh8XHUwMEU1fEF8Q3xFfE58T3xWfDB8MXwmfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXx6fFx1MDBFNnxcdTAwZjgiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUwMCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1fCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUwMSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxpfHV8eXxcdTAwRTV8JiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGl8dXx5IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1MDIiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNXwmfEEiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUwNCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8QXx1fHl8XHUwMEU1fCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8dXx5IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1MDV8NTA2fDUwN3w1MDgiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNXxBfCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUwOSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxcdTAwRTV8JiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxiIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1MTIiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8ZHxlfGl8dHx1fHh8eXxcdTAwRTV8QXxEfEV8VHxYfCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8aSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTEzIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxlfGZ8aXxqfFx1MDBFNXwmfEl8RSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTE3IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHxcdTAwRTV8JiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGN8ZCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTE4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXx1fHl8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfHV8eSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTIwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGR8ZXxpfG58cnx0fHV8eHx5fHp8XHUwMEU1fEF8RHxFfFR8WHwmIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGkiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUyMSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGd8aXxqfGt8eHxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxjfGd8aXxqfGt8eCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTIzIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXx1fHl8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8eiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTI1IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImEiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUyNiIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxkfGV8aXxyfHR8dXx4fHl8enxcdTAwRTV8QXxEfEV8VHxYfCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8aSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTI5IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHxpfHV8eXx6fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGN8ZHxpfHoiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUzMCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxkfGV8aXxtfHR8dXx4fHl8enxcdTAwRTV8QXxEfEV8VHxYfCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8aSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTMxIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxcdTAwRTV8JiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTMyIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXx1fHl8XHUwMEU1fCZ8QSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTM0IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGR8ZXxpfHR8dXx4fHl8XHUwMEU1fER8RXxUfFh8JiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxpIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1MzgiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1kXXxbZi1tXXxvfHB8cXxzfHR8XHUwMEU1fEF8RnxHIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJpfG98cHxxfHMiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjUzOSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1fCYiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8QSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNTQwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxcdTAwRTV8QSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1NDUiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfFx1MDBFNXxBIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICIiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjU1NSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8XHUwMEU1fEEiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8XHUwMEU1IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwNC8sIC9hLyApLm1hdGNoKCAvaS8gKSApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1NTciLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifFtoLWxdfHZ8enxcdTAwRTZ8XHUwMGY4fFx1MDBFNXxBfFYiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifFtoLWtdfHZ8enxcdTAwRTZ8XHUwMGY4IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1NTgiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxlfGd8aHxpfGp8bHxyfHN8dnx3fHp8XHUwMEU1fEF8ViIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGV8Z3xofGl8anxyfHN8d3x6IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9iLyApLm1hdGNoKCAvODcwOTc2LyApICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjU1OSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xkfGV8ZnxnfGh8aXxqfG98cHxxfHJ8dXx5fFx1MDBFNXxBfDV8NiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhIgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI1NTkiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXx1fHl8XHUwMEU1fEEiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYSIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjAwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZXxmfGh8a3x0fHV8dnx4fHl8enxcdTAwRTV8QXxDfEV8RnxIfEt8VHxYfFl8WnwyfDB8MSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxjfGV8ZnxofGt8dSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjEwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZXxpfGp8a3xzfHR8dXx2fHh8eXx6fFx1MDBFNXxBfEN8RXxJfEp8S3xTfFR8WHxZfFp8MnwwfDEiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8aXxqfGt8c3x1IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2MjAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxjIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2MjEiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8ZXxmfGp8XHUwMEU1fEEiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxlfGZ8aiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjIyIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxiIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2MzAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8ZnxnfHN8dHx1fFx1MDBFNXwyfEF8QnxGfEd8U3xUfFUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjMxIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGZ8Z3xzfHR8XHUwMEU1fEF8QnxGfEd8U3xUfDgiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjMyIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxjfDIiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjYzMyIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8dXxcdTAwRTV8MnxBfFUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjM0IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHx1fHZ8eHx5fHp8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIjIiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjY0NSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfHV8dnx4fHl8enxcdTAwRTV8MnxBfEJ8Q3xVIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGJ8Y3x1fDIiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjY1MCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGR8ZXx2fHh8eXx6fFx1MDBFNXwyfEEiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxjfGR8ZXwyIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2NTEiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGV8dnx4fHl8enxcdTAwRTV8MnxWfFgiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8MiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDQvLCAvYS8gKS5tYXRjaCggL2kvICkgKSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjUyIiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxjfGV8ZnxofGl8a3xtfG58b3xwfHF8cnx0fHZ8enxcdTAwRTV8QXxCfEN8RXxGfEh8VHwwfDEiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGN8ZXxmfGh8a3xtfG58b3xwfHF8cnx0fHp8XHUwMEU1IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2NTIiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZXxmfGh8aXxrfG18bnxvfHB8cXxyfHR8dnx6fFx1MDBFNXxBfEJ8Q3xFfEZ8SHxUfDB8MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aHxrfG18bnxvfHB8cXxyfHR8enxcdTAwRTUiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDA0LywgL2EvICkubWF0Y2goIC9pLyApICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjY1NCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aHxpfGt8bXxufG98cHxxfHJ8dHx2fHp8XHUwMEU1fEF8QnxDfEV8RnxIfFR8MHwxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxjfGV8ZnxofGt8bXxufG98cHxxfHJ8dHx2fHp8XHUwMEU1IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvNjU0LywgL28vICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjU0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aHxpfGt8bXxufG98cHxxfHJ8dHx2fHp8XHUwMEU1fEF8QnxDfEV8RnxIfFR8MHwxfG0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aHxrfG18bnxvfHB8cXxyfHR8dnx6fFx1MDBFNSIKICAgICAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvNjU0LywgL20vICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjU0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aHxpfGt8bXxufG98cHxxfHJ8dHx2fHp8XHUwMEU1fEF8QnxDfEV8RnxIfFR8MHwxfG8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aHxrfG18bnxvfHB8cXxyfHR8dnx6fFx1MDBFNSIKICAgICAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjY1NCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZXxmfGh8aXxrfG18bnxvfHB8cXxyfHR8dnx6fFx1MDBFNXxBfEJ8Q3xFfEZ8SHxUfDB8MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8YnxjfGV8ZnxofGt8bXxufG98cHxxfHJ8dHx2fHp8XHUwMEU1IgogICAgICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjY3IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiZXxmfGl8bHxtfG58b3xwfHF8cnxzfHR8dXwwfDV8Nnw4fFx1MDBFNXxFfFUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIjV8OCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNjY4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2NzAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xkfGV8dnx4fHl8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImJ8Y3xkIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI2OTAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xkfGV8ZnxnfGh8aXxrfG18dnx3fHh8eXx6fFx1MDBFNXxDfEQiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3Ni8gKSApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI3MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHxlfGZ8Z3xofGp8a3xsfG18bnxvfHB8cXxyfHR8dXx2fFx1MDBFNXxBfEN8RXxGfEh8S3xUfDB8MXw0fDV8NnwmIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8Y3xkfGV8ZnxnfGh8a3xsfG18cXxyfHR8dXx2fFx1MDBFNXw1IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI3MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHxlfGZ8Z3xofGp8a3xsfG18bnxvfHB8cXxyfHR8dXx2fFx1MDBFNXxBfEN8RXxGfEh8S3xUfDB8MXw0fDV8NiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGN8ZHxlfGZ8Z3xofGt8bHxtfHF8cnx0fHV8dnxcdTAwRTV8NSIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNzEwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8ZHxlfGZ8Z3xpfGp8a3xsfG18bnxvfHB8cXxyfHN8dHx1fHZ8XHUwMEU1fEF8Q3xFfEZ8SXxKfEt8U3xUfDB8MXw0fDV8NiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxkfGV8Z3xpfGp8a3xtfGx8cXxyfHN8dHx1fHZ8XHUwMEU1fDUiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjcyMCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Z3xofGt8b3xcdTAwRTV8QXw0fE8iLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImFnfGh8a3xvIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI3MzkiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGN8ZXxmfGd8aHx0fHV8dnxcdTAwZjh8XHUwMEU1fDd8XHUwMGY4fDB8MXw0IiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGN8ZXxmfGd8aHx0fFx1MDBmOCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNzQwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxkfGV8ZnxnfGh8anxrfG18bnxvfHF8cnxzfHV8d3xcdTAwZjh8XHUwMEU1fDB8MSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxkfGV8ZnxnfGh8anxrfG18b3xxfHJ8dXx3fFx1MDBmOHxcdTAwRTUiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjc0NSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8YnxpfG58b3xcdTAwRTZ8XHUwMGY4fFx1MDBFNXxBfEJ8SXxPfE58XHUwMEU1fFx1MDBmOCIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxifGl8XHUwMEU2fFx1MDBmOHxcdTAwRTUiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjc3MCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3xlfGZ8aHxrfFx1MDBFNXxBfEN8RXxGfEh8S3wwfDF8NCIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxjfGV8ZnxofFx1MDBFNSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiNzgwIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfGV8aXxqfGt8c3xcdTAwRTV8QXxDfEV8SXxKfEt8U3wwfDF8NCIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxlfGl8anxrfHN8XHUwMEU1IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI3OTUiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGJ8Y3xlfGZ8aXxqfGt8bHxwfHF8cnxzfHR8dXx2fHl8enxcdTAwRTZ8XHUwMGY4fFx1MDBFNXxBfEN8RXxQfFF8UnxTfFR8VXxWfFx1MDBmOHwwfDF8NyIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAia3x5fFx1MDBFNnxcdTAwRTUiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjg0MCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8bnxvfHZ8enxcdTAwRTZ8XHUwMGY4fFx1MDBFNXwmfEF8TnxPfFZ8XHUwMGY4fDB8MSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXx6fFx1MDBFNnxcdTAwZjh8XHUwMEU1IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI4NTYiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJbYS1kXXxmfFtoLXhdfHl8enxcdTAwRTV8MnwzIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJofGp8a3xsfG58b3xwfHF8cnwyfDMiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjg2MCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImN8Z3xpfHR8dXx5fHp8XHUwMEU1fFR8QyIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI4NjEiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJjfGd8aXx0fHV8eXx6fFx1MDBFNXxUfEMiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogIiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiODYzIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiY3xnfGl8dHx1fHl8enxcdTAwRTV8VHxDIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJjfGl8dHx6IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI4NjUiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJjfGd8aXx0fHV8eXx6fFx1MDBFNXxUfEMiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImN8aXx6IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI4NjYiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJjfGd8aXx0fHV8eXx6fFx1MDBFNXxUfEMiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImN8aXx0fHoiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjg2NyIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImN8Z3xpfHR8dXx5fHp8XHUwMEU1fFR8QyIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiY3xpfHR8eiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiODY4IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiY3xnfGl8dHx1fHl8enxcdTAwRTV8VHxDIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJjfGl8dHx6IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI4NzAiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJjfGd8aXx0fHV8eXx6fFx1MDBFNXxUfEMiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImN8aXx0fHoiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjg3MSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImN8Z3xpfHR8dXx5fHp8XHUwMEU1fFR8QyIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiY3xpfHR8eiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiODczIiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiY3xnfGl8dHx1fHl8enxcdTAwRTV8VHxDIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJjfGl8dHx6IgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI4NzQiLAogICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJjfGd8aXx0fHV8eXx6fFx1MDBFNXxUfEMiLAogICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImN8aXx0fHoiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjg3OSIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImN8Z3xpfHR8dXx5fHp8XHUwMEU1fFR8QyIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiY3xpfHR8eiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiODg3IiwKICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXwyIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzkwMC8sIC96LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5NzYvICkgKSB7CiAgICAgICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3xlfGZ8aHxrfHd8eHx6fFx1MDBFNXxBfEN8RXxGfEh8S3xXfDB8MXwmIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8Y3xlfGZ8aHxrfHh8enxcdTAwRTUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3xlfGZ8aHxrfHd8eHx6fFx1MDBFNXxBfEN8RXxGfEh8S3xXfDB8MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiYXx3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8Y3xlfGZ8aHxrfHh8enxcdTAwRTUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvOTAwLywgL3cvICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3Ni8gKSApIHsKICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjkwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfGV8ZnxofGt8d3x4fHp8XHUwMEU1fEF8Q3xFfEZ8SHxLfFd8MHwxfCYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxjfGV8ZnxofGt8eHx6fFx1MDBFNSIKICAgICAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjkwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfGV8ZnxofGt8d3x4fHp8XHUwMEU1fEF8Q3xFfEZ8SHxLfFd8MHwxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJhfHoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxjfGV8ZnxofGt8eHx6fFx1MDBFNSIKICAgICAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjkwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGN8ZXxmfGh8a3x3fHh8enxcdTAwRTV8QXxDfEV8RnxIfEt8V3wwfDEiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8Y3xlfGZ8aHxrfHh8enxcdTAwRTUiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvOTEwLywgL3ovICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjkxMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGN8ZXxnfGh8aXxqfGt8c3x3fHh8enxcdTAwRTV8QXxDfEV8R3xIfEl8SnxLfFN8V3xYfDB8MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ3IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxnfGh8aXxqfGt8eHx6IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvOTEwLywgL3cvICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjkxMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGN8ZXxnfGh8aXxqfGt8c3x3fHh8enxcdTAwRTV8QXxDfEV8R3xIfEl8SnxLfFN8V3xYfDB8MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ6IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxnfGh8aXxqfGt8eHx6IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MTAiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxjfGV8Z3xofGl8anxrfHN8d3x4fHp8XHUwMEU1fEF8Q3xFfEd8SHxJfEp8S3xTfFd8WHwwfDEiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxnfGh8aXxqfGt8eHx6IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzkzMC8sIC96LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MzAiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxmfHN8dXx3fHh8enxcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ3IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3x4fHp8MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzkzMC8sIC93LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MzAiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxmfHN8dXx3fHh8enxcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ6IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3x4fHp8MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTMwIiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8ZnxzfHV8d3x4fHp8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3x4fHp8MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC85MzMvLCAvei8gKSA9PT0gIiIgKSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTMzIiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8dXx3fHh8enxcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ3IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3h6MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzkzMy8sIC93LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MzMiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXx1fHd8eHx6fFx1MDBFNXwyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInoiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICIiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjkzMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfHV8d3x4fHp8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiIgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzkzNC8sIC96LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MzQiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiW2EtZF18dXx3fHh8enxcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ3IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3x4fHp8MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzkzNC8sIC93LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5MzQiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiW2EtZF18dXx3fHh8enxcdTAwRTV8MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ6IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3x4fHp8MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTM0IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWRdfHV8d3x4fHp8XHUwMEU1fDIiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAid3x4fHp8MiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC85NDUvLCAvei8gKSA9PT0gIiIgKSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTQ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8ZHxlfGZ8Z3xofGp8a3xufG98cXxyfHN8dXx3fHh8enxcdTAwRTZ8XHUwMGY4fFx1MDBFNXxBIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInciLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfGR8ZXxmfGd8aHxqfGt8bnxvfHF8cnx1fHh8enxcdTAwRTZ8XHUwMGY4IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvOTQ1LywgL3cvICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk0NSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGR8ZXxmfGd8aHxqfGt8bnxvfHF8cnxzfHV8d3x4fHp8XHUwMEU2fFx1MDBmOHxcdTAwRTV8QSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ6IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxkfGV8ZnxnfGh8anxrfG58b3xxfHJ8dXx4fHp8XHUwMEU2fFx1MDBmOCIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTQ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8ZHxlfGZ8Z3xofGp8a3xufG98cXxyfHN8dXx3fHh8enxcdTAwRTZ8XHUwMGY4fFx1MDBFNXxBIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8ZHxlfGZ8Z3xofGp8a3xufG98cXxyfHV8eHx6fFx1MDBFNnxcdTAwZjgiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvOTUyLywgL3ovICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk1MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfHd8eHx6fFx1MDBFNXxBIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInciLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfHh8eiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzk1Mi8sIC93LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5NTIiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXx3fHh8enxcdTAwRTV8QSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICJ6IiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXx4fHoiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk1MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfHd8eHx6fFx1MDBFNXxBIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8eHx6IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzk2Ni8sIC96LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5NjYiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiZXxmfGl8bHxtfG58b3xwfHF8cnxzfHR8dXx3fHh8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAidyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogInh8eiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHJlY29yZC5nZXRWYWx1ZSggLzk2Ni8sIC93LyApID09PSAiIiApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5NjYiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiZXxmfGl8bHxtfG58b3xwfHF8cnxzfHR8dXx3fHh8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAieiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogInh8eiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTY2IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImV8ZnxpfGx8bXxufG98cHxxfHJ8c3x0fHV8d3x4fHp8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogInh8eiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC85NjgvLCAvei8gKSA9PT0gIiIgKSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTY4IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3x3fHh8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAidyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJub25SZXBlYXRhYmxlU3ViRmllbGRzIjogImF8eHx6IgogICAgICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgfSBlbHNlIGlmICggcmVjb3JkLmdldFZhbHVlKCAvOTY4LywgL3cvICkgPT09ICIiICkgewogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk2OCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGN8d3x4fHp8XHUwMEU1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogInoiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfHh8eiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiOTY4IiwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3x3fHh8enxcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXx4fHoiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk4MCIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogIlthLWddfGl8bXxufG98cHxxfHJ8c3x0fHV8dnx4fHl8XHUwMEU1fE18ViIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiW2EtZ118aXxtfG58b3xwfHF8cnxzfHR8dXx2fHh8eSIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3MC8gKSApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICI5OTAiLAogICAgICAgICAgICAgICAgICAgICAgICAibGVnYWxTdWJGaWVsZHMiOiAiYXxifGN8a3xtfG58b3xwfHF8cnxzfHR8dXx4fFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZFN1YkZpZWxkcyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAibm9uUmVwZWF0YWJsZVN1YkZpZWxkcyI6ICJhfHUiCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk5MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsZWdhbFN1YkZpZWxkcyI6ICJhfGN8b3xcdTAwRTUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWRTdWJGaWVsZHMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxjfG8iCiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjk5NiIsCiAgICAgICAgICAgICAgICAgICAgImxlZ2FsU3ViRmllbGRzIjogImF8Y3xvfFx1MDBFNSIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkU3ViRmllbGRzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgIm5vblJlcGVhdGFibGVTdWJGaWVsZHMiOiAiYXxvIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBzZXRVcEZvclN1YkZpZWxkQ2hlY2sgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiBmaWVsZHM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCBpbiB3aGljaCBkYXRhIGZvciBzdWJmaWVsZCB2YWx1ZSBjaGVjayBpcyBzZXQgdXAuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRWYWx1ZUNoZWNrKCByZWNvcmQgKQogICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBhIG1hcmMgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIGZpZWxkcyBhbmQgbGVnYWwgdmFsdWVzIGluIHN1YmZpZWxkcwogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2sKICAgICAqLwogICAgdGhhdC5zZXRVcEZvclN1YkZpZWxkVmFsdWVDaGVjayA9IGZ1bmN0aW9uKCByZWNvcmQgKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IHNldFVwRm9yU3ViRmllbGRWYWx1ZUNoZWNrIGZ1bmN0aW9uIiApOwoKICAgICAgICBmaWVsZHMgPSBbIF07CgogICAgICAgIC8vTWFuZ2xlciBjaGVjayBwYWEgMDAxKmEgKGZhdXN0bnIuKQkgIAogICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDAxIiwKICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJiIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeXFxkezZ9JCIKICAgICAgICAgICAgfSApOwogICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDAxIiwKICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJjIiwKICAgICAgICAgICAgICAgICJzcGVjaWFsQ2hlY2siOiAiREFURUMiCiAgICAgICAgICAgIH0gKTsKICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgImZpZWxkIjogIjAwMSIsCiAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiZCIsCiAgICAgICAgICAgICAgICAic3BlY2lhbENoZWNrIjogIkRBVEVEIgogICAgICAgICAgICB9ICk7CiAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDEiLAogICAgICAgICAgICAgICAgInN1YkZpZWxkIjogImYiLAogICAgICAgICAgICAgICAgInZhbHVlIjogIl5hJCIKICAgICAgICAgICAgfSApOwogICAgICAgIGlmICggcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5NzAvICkgKSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNCIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogImEiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeW2V8aHxzfGJdJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA0IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiciIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bbnxjfGRdJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9IGVsc2UgaWYgKCByZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3WzEzXS8gKSApIHsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA0IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bZXxofGl8c3xiXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNCIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogInIiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeW258Y3xkXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA0IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bZXxofGl8c3xiXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNCIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogIm4iLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJedyQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNCIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogInIiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeW258Y3xkXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIGlmICggIXJlY29yZC5nZXRWYWx1ZSggLzAwMS8sIC9iLyApLm1hdGNoKCAvODcwOTdbMTNdLyApICkgewogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDUiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJofGoiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeW2Etel0kIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDUiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJpIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiXlthfGJ8Y3xkfGV8Z3xofGl8anxrfGx8b10kIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDUiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJrIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiXlthLW18el0kIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDUiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJsIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiXlthfGJdJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA1IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiciIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5hJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA1IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAidiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bZ3x2XSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwNSIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogInoiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeW2R8ZnxnfGt8bXxufG98cHxxfHhdJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9CiAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDYiLAogICAgICAgICAgICAgICAgInN1YkZpZWxkIjogIjIiLAogICAgICAgICAgICAgICAgInZhbHVlIjogIl5bYXxifGN8ZHxlXSQiCiAgICAgICAgICAgIH0gKTsKICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgImZpZWxkIjogIjAwOCIsCiAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAidCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAiXlttfHN8cHxhfGhdJCIKICAgICAgICAgICAgfSApOwogICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA4IiwKICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJ2IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeWzB8MXwzfDR8NXw3fDh8OV0kIgogICAgICAgICAgICB9ICk7CiAgICAgICAgaWYgKCAhcmVjb3JkLmdldFZhbHVlKCAvMDAxLywgL2IvICkubWF0Y2goIC84NzA5N1sxM10vICkgKSB7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwOCIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogImF8eiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bXFxkfFxcP117NH0kIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDgiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJjIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiXltrfGR8aXxjfHd8anxlfHN8bXxifHF8dHxmfGF8Z3xofHp8XFw/fGxdJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA4IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiZCIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl4oW2Etel18XHUwMEU1fDF8MikkIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDgiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJlfGZ8Z3xtIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiXlswLTldJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA4IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiaCIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bbXxufHB8enxcXD98ZF0kIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMDgiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJqIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiXltkfGV8ZnxpfGp8bXxwXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjAwOCIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogImt8biIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bYXxifGNdJCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA4IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAibyIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bYnxzXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDA5IiwKICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJhfGIiLAogICAgICAgICAgICAgICAgInZhbHVlIjogIl4oW2EtZ118bXxufHB8cnxzfHR8dXx2KSQiCiAgICAgICAgICAgIH0gKTsKICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgImZpZWxkIjogIjAwOSIsCiAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiZ3xoIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeKHhhfHhifHhjfHhkfHhlfHhmfHhnfHhofHhpfHhqfHhrfHhsfHhtfHhufHhvfHh4fHh5fGVkfGVmfGVnfGVwfGVzfGV0fG1qfG5ofG5wfGdhfGdifGdjfGdnfGdrfGdtfGdwfGdyfGd0fGd4fGhhfGhifGhkfGhmfGhnfGhsfGhtfGhvfGhwfGhyfGhzfGh0fGh5fGtifGt0fHRifHRjfHRnfHRofHRpfHRrfHRvfHR1fHVhfHVifHVkfHVlfHVpfHVrfHVsfHVtfHVyfHVzfHV0fHV1fHV2fGlhfGljfGlmfGlofGlrfGlwfGlzfGl0fHdmfHd0fHd1KSQiCiAgICAgICAgICAgIH0gKTsKICAgICAgICBpZiAoICFyZWNvcmQuZ2V0VmFsdWUoIC8wMDEvLCAvYi8gKS5tYXRjaCggLzg3MDk3WzEzXS8gKSApIHsKICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDIxIiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgInNwZWNpYWxDaGVjayI6ICJJU0JOIgogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmaWVsZHMucHVzaCggewogICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMjEiLAogICAgICAgICAgICAgICAgICAgICJzdWJGaWVsZCI6ICJlIiwKICAgICAgICAgICAgICAgICAgICAic3BlY2lhbENoZWNrIjogIkVBTiIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICAgICAgaWYgKCAhcmVjb3JkLmdldFZhbHVlKCAvMDA4LywgL3QvICkubWF0Y2goIC9tfHN8YS8gKSApIHsKICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZCI6ICIwMjIiLAogICAgICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGVjaWFsQ2hlY2siOiAiSVNTTiIKICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmllbGRzLnB1c2goIHsKICAgICAgICAgICAgICAgICAgICAiZmllbGQiOiAiMDk2IiwKICAgICAgICAgICAgICAgICAgICAic3ViRmllbGQiOiAiciIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIl5bYS1nXSQiCiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCB7CiAgICAgICAgICAgICAgICAgICAgImZpZWxkIjogIjA5NiIsCiAgICAgICAgICAgICAgICAgICAgInN1YkZpZWxkIjogInoiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJeXFxkezZ9JCIKICAgICAgICAgICAgICAgIH0gKTsKICAgICAgICB9CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2sgZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiBmaWVsZHM7CgogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBkb2VzIGEgYmFzaWMgY2hlY2sgY2hlY2sgb24gc3ViZmllbGRzLgogICAgICogVGhlIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBmb3IgRm9sa2ViaWJsaW90ZWtlci4KICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGxvZyBmb3Igb3V0cHV0dGluZyBpbmZvcm1hdGlvbiBvbiByZWNvcmRzIHRoYXQgZG8KICAgICAqIG5vdCB2YWxpZGF0ZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tCYXNpY1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIG9yaWdpbiApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIGEgbWFyYyByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuIGFycmF5IG9mICJlcnJvck1lc3NhZ2VzIgogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tCYXNpY1N1YkZpZWxkCiAgICAgKi8KICAgIHRoYXQuY2hlY2tCYXNpY1N1YkZpZWxkID0gZnVuY3Rpb24oIHJlY29yZCwgaWRlbnRpZmllciwgb3JpZ2luICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBjaGVja0Jhc2ljU3ViRmllbGQgZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWxpZGF0ZXMgPSB0cnVlOwogICAgICAgIHZhciBsb2dnZWRGaWVsZHMgPSBbIF07CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZXMgPSBbIF07CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZTsKICAgICAgICB2YXIgYiA9ICIiOwogICAgICAgIHZhciBmaWVsZE9iamVjdCA9IHsKICAgICAgICAgICAgIjAwMSI6IFsgImEiLCAiYiIsICJmIiBdLAogICAgICAgICAgICAiMDA0IjogWyAiciIsICJhIiBdLAogICAgICAgICAgICAiMDA4IjogWyAidCIsICJ2IiBdLAogICAgICAgICAgICAiMDA5IjogWyAiYSIsICJnIiBdLCAvL3JlcGV0aXRpb24gYWxsb3dlZAogICAgICAgICAgICAiMjQ1IjogWyAiYSIgXSAvL3JlcGV0aXRpb24gYWxsb3dlZAogICAgICAgIH07CiAgICAgICAgdmFyIHN1YmZpZWxkUmVwZXRpdGlvbk5vdEFsbG93ZWQgPSBbICIwMDEiLCAiMDA0IiwgIjAwOCIgXTsKICAgICAgICBmb3IgKCB2YXIgZiBpbiBmaWVsZE9iamVjdCApIHsKICAgICAgICAgICAgdmFyIHJlZ0V4cEZpZWxkID0gbmV3IFJlZ0V4cCggZiApOwogICAgICAgICAgICB2YXIgc3ViZmllbGRzID0gZmllbGRPYmplY3RbIGYgXTsKICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggcmVnRXhwRmllbGQsIGZ1bmN0aW9uKCBjaGVja0ZpZWxkICkgewogICAgICAgICAgICAgICAgZm9yICggdmFyIHMgaW4gc3ViZmllbGRzICkgewogICAgICAgICAgICAgICAgICAgIHZhciByZWdFeHBSZXF1aXJlZFN1YkZpZWxkID0gbmV3IFJlZ0V4cCggc3ViZmllbGRzWyBzIF0gKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIHN1YmZpZWxkUmVwZXRpdGlvbk5vdEFsbG93ZWQuaW5kZXhPZiggY2hlY2tGaWVsZC5uYW1lICkgPj0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGVja0ZpZWxkLmNvdW50KCBzdWJmaWVsZHNbIHMgXSApID4gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIm5vbnJlcGVhdGFibGUgc3ViZmllbGQgIiArIGNoZWNrRmllbGQubmFtZSArICIqIiArIHN1YmZpZWxkc1sgcyBdICsgIiBpcyByZXBlYXRlZCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goIGVycm9yTWVzc2FnZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlZEZpZWxkcy5wdXNoKCBzdWJmaWVsZHNbIHMgXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICggIWNoZWNrRmllbGQuZXhpc3RzKCByZWdFeHBSZXF1aXJlZFN1YkZpZWxkICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAicmVxdWlyZWQgc3ViZmllbGQgIiArIHN1YmZpZWxkc1sgcyBdICsgIiBtaXNzaW5nIGluICIgKyBjaGVja0ZpZWxkLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ICk7CiAgICAgICAgfQogICAgICAgIHZhciB2YWxpZGF0aW9uT2JqZWN0ID0gewogICAgICAgICAgICAidmFsaWRhdGVzIjogdmFsaWRhdGVzLAogICAgICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IGVycm9yTWVzc2FnZXMKICAgICAgICB9OwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IGNoZWNrQmFzaWNTdWJGaWVsZCBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25PYmplY3Q7CgogICAgfTsKCgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCByZXR1cm5zIGFuIGFycmF5IG9mIHN1YmZpZWxkbmFtZXMgZm9yIGEgZ2l2ZW4gZmllbGQKICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uZ2V0U3ViZmllbGROYW1lcyggZmllbGQgKQogICAgICogQHBhcmFtIHtGaWVsZH0gZmllbGQgYSBtYXJjIGZpZWxkCiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2Ygc3ViZmllbGRuYW1lcwogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uZ2V0U3ViZmllbGROYW1lcwogICAgICovCiAgICB0aGF0LmdldFN1YmZpZWxkTmFtZXMgPSBmdW5jdGlvbiggZmllbGQgKSB7CiAgICAgICAgdmFyIHN1YkZpZWxkTmFtZXMgPSBbIF07CiAgICAgICAgZmllbGQuZWFjaFN1YkZpZWxkKCAvLi8sIGZ1bmN0aW9uKCBmaWVsZCwgc3ViRmllbGQgKSB7CiAgICAgICAgICAgIHN1YkZpZWxkTmFtZXMucHVzaCggc3ViRmllbGQubmFtZSApOwogICAgICAgIH0gKTsKICAgICAgICByZXR1cm4gc3ViRmllbGROYW1lczsKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBjaGVja3Mgc3ViZmllbGRzLgogICAgICogVGhpcyBtZXRob2QgdXNlcyB0aGUgbG9nIGZvciBvdXRwdXR0aW5nIGluZm9ybWF0aW9uIG9uIHJlY29yZHMgdGhhdCBkbwogICAgICogbm90IHZhbGlkYXRlLgogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcywgb3JpZ2luICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBtYXJjIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXIgaWRlbnRpZmllciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWVsZHMgQXJyYXkgb2YgZmllbGQgZGF0YQogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuIGFycmF5IG9mICJlcnJvck1lc3NhZ2VzIgogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZAogICAgICovCiAgICB0aGF0LmNoZWNrU3ViRmllbGQgPSBmdW5jdGlvbiggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMsIG9yaWdpbiApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZzogY2hlY2tTdWJGaWVsZCBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbGlkYXRlcyA9IHRydWU7CiAgICAgICAgdmFyIGxvZ2dlZEZpZWxkcyA9IFsgXTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IFsgXTsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlOwoKICAgICAgICBmb3IgKCB2YXIgYSBpbiBmaWVsZHMgKSB7CiAgICAgICAgICAgIHZhciByZWdFeHBGaWVsZCA9IG5ldyBSZWdFeHAoIGZpZWxkc1sgYSBdLmZpZWxkICk7CiAgICAgICAgICAgIHZhciByZWdFeHBMZWdhbFN1YkZpZWxkID0gbmV3IFJlZ0V4cCggZmllbGRzWyBhIF0ubGVnYWxTdWJGaWVsZHMgKTsKICAgICAgICAgICAgdmFyIHJlZ0V4cFJlcXVpcmVkU3ViRmllbGQgPSBuZXcgUmVnRXhwKCBmaWVsZHNbIGEgXS5yZXF1aXJlZFN1YkZpZWxkcyApOwogICAgICAgICAgICB2YXIgcmVnRXhwTm9uUmVwZWF0YWJsZVN1YkZpZWxkID0gbmV3IFJlZ0V4cCggZmllbGRzWyBhIF0ubm9uUmVwZWF0YWJsZVN1YkZpZWxkcyApOwoKICAgICAgICAgICAgcmVjb3JkLmVhY2hGaWVsZCggcmVnRXhwRmllbGQsIGZ1bmN0aW9uKCBjaGVja0ZpZWxkICkgewogICAgICAgICAgICAgICAgdmFyIHN1YmZpZWxkcyA9IGZpZWxkc1sgYSBdLnJlcXVpcmVkU3ViRmllbGRzLnNwbGl0KCAvfC8gKTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBiIGluIHN1YmZpZWxkcyApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVnRXhwUmVxdWlyZWRTdWJGaWVsZCA9IG5ldyBSZWdFeHAoIHN1YmZpZWxkc1sgYiBdICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhY2hlY2tGaWVsZC5leGlzdHMoIHJlZ0V4cFJlcXVpcmVkU3ViRmllbGQgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJyZXF1aXJlZCBzdWJmaWVsZCAiICsgc3ViZmllbGRzWyBiIF0gKyAiIG1pc3NpbmcgaW4gIiArIGNoZWNrRmllbGQubmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgc3ViZmllbGRJbmRleCA9IDA7CiAgICAgICAgICAgICAgICBjaGVja0ZpZWxkLmVhY2hTdWJGaWVsZCggLy4vLCBmdW5jdGlvbiggZmllbGQsIHN1YkZpZWxkICkgewogICAgICAgICAgICAgICAgICAgIGlmICggIXN1YkZpZWxkLm5hbWUudG9Mb3dlckNhc2UoICkubWF0Y2goIHJlZ0V4cExlZ2FsU3ViRmllbGQgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJpbGxlZ2FsIHN1YmZpZWxkICIgKyBzdWJGaWVsZC5uYW1lICsgIiBwcmVzZW50IGluICIgKyBmaWVsZC5uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goIGVycm9yTWVzc2FnZSApOwogICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciArICIuIE9SSUdJTjogIiArIG9yaWdpbiApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3ViRmllbGQubmFtZS5tYXRjaCggL1tBLVpcdTAwYzZcdTAwZDhcdTAwYzVdLyApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YkZpZWxkTmFtZSA9IG5ldyBSZWdFeHAoIHN1YkZpZWxkLm5hbWUudG9Mb3dlckNhc2UoICkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJmaWVsZEFycmF5ID0gTWFyY1JlY29yZFZhbGlkYXRpb24uZ2V0U3ViZmllbGROYW1lcyggZmllbGQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWNoZWNrRmllbGQuZXhpc3RzKCBzdWJGaWVsZE5hbWUgKSB8fCBzdWJmaWVsZEFycmF5WyBzdWJmaWVsZEluZGV4ICsgMSBdICE9IHN1YkZpZWxkLm5hbWUudG9Mb3dlckNhc2UoICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gInN1YmZpZWxkICIgKyBzdWJGaWVsZC5uYW1lICsgIiBpcyBub3QgZm9sbG93ZWQgYnkgc3ViZmllbGQgIiArIHN1YkZpZWxkLm5hbWUudG9Mb3dlckNhc2UoICkgKyAiIGluICIgKyBmaWVsZC5uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJGaWVsZE5hbWUgPSBuZXcgUmVnRXhwKCBzdWJGaWVsZC5uYW1lICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmaWVsZHNbIGEgXS5ub25SZXBlYXRhYmxlU3ViRmllbGRzICE9PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWZpZWxkLmlzVW5pcXVlKCBzdWJGaWVsZE5hbWUgKSAmJiBzdWJGaWVsZC5uYW1lLm1hdGNoKCByZWdFeHBOb25SZXBlYXRhYmxlU3ViRmllbGQgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGxvZ2dlZEZpZWxkcy5pbmRleE9mKCBzdWJGaWVsZC5uYW1lICkgPj0gMCApIHt9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIm5vbnJlcGVhdGFibGUgc3ViZmllbGQgIiArIGNoZWNrRmllbGQubmFtZSArICIqIiArIHN1YkZpZWxkLm5hbWUgKyAiIGlzIHJlcGVhdGVkIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VkRmllbGRzLnB1c2goIHN1YkZpZWxkLm5hbWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgc3ViZmllbGRJbmRleCsrOwogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICB9ICk7CiAgICAgICAgfQoKICAgICAgICB2YXIgdmFsaWRhdGlvbk9iamVjdCA9IHsKICAgICAgICAgICAgInZhbGlkYXRlcyI6IHZhbGlkYXRlcywKICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOiBlcnJvck1lc3NhZ2VzCiAgICAgICAgfTsKCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBjaGVja1N1YkZpZWxkIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4gdmFsaWRhdGlvbk9iamVjdDsKCiAgICB9OwoKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyBpZiB2YWx1ZXMgb2Ygc3ViZmllbGRzIGFyZSBsZWdhbC4KICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGxvZyBmb3Igb3V0cHV0dGluZyBpbmZvcm1hdGlvbiBvbiByZWNvcmRzIHRoYXQgZG8KICAgICAqIG5vdCB2YWxpZGF0ZS4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcywgb3JpZ2luICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgYSBtYXJjIHJlY29yZAogICAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXIgaWRlbnRpZmllciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWVsZHMgQW4gYXJyYXkgb2YgZmllbGQgb2JqZWN0cywgd2l0aCBuYW1lLCBzdWJmaWVsZCBuYW1lcywgYW5kIGxlZ2FsIHZhbHVlcwogICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbiBUaGUgb3JpZ2luYWwgY3JlYXRvciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICJ2YWxpZGF0ZXMiIGFzIGJvb2xlYW4gdHJ1ZSBhbmQgZmFsc2UgYW5kIGFuIGFycmF5IG9mICJlcnJvck1lc3NhZ2VzIgogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlCiAgICAgKi8KICAgIHRoYXQuY2hlY2tTdWJGaWVsZFZhbHVlID0gZnVuY3Rpb24oIHJlY29yZCwgaWRlbnRpZmllciwgZmllbGRzLCBvcmlnaW4gKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNoZWNrU3ViRmllbGRWYWx1ZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbGlkYXRlcyA9IHRydWU7CiAgICAgICAgdmFyIHNwZWNpYWxDYXNlSWRlbnRpZmllciA9IHRydWU7CiAgICAgICAgdmFyIHNwZWNpYWxDYXNlRGF0ZUMgPSB0cnVlOwogICAgICAgIHZhciBzcGVjaWFsQ2FzZURhdGVEID0gdHJ1ZTsKICAgICAgICB2YXIgc3BlY2lhbENhc2VJc2JuID0gdHJ1ZTsKICAgICAgICB2YXIgc3BlY2lhbENhc2VFYW4gPSB0cnVlOwogICAgICAgIHZhciBzcGVjaWFsQ2FzZUlzc24gPSB0cnVlOwogICAgICAgIHZhciBlcnJvck1lc3NhZ2U7CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZXMgPSBbIF07CgogICAgICAgIGZvciAoIHZhciBhIGluIGZpZWxkcyApIHsKICAgICAgICAgICAgdmFyIHJlZ0V4cEZpZWxkID0gbmV3IFJlZ0V4cCggZmllbGRzWyBhIF0uZmllbGQgKTsKICAgICAgICAgICAgdmFyIHJlZ0V4cFN1YkZpZWxkID0gbmV3IFJlZ0V4cCggZmllbGRzWyBhIF0uc3ViRmllbGQgKTsKICAgICAgICAgICAgdmFyIHJlZ0V4cFZhbHVlcyA9IG5ldyBSZWdFeHAoIGZpZWxkc1sgYSBdLnZhbHVlICk7CgogICAgICAgICAgICByZWNvcmQuZWFjaEZpZWxkKCByZWdFeHBGaWVsZCwgZnVuY3Rpb24oIGNoZWNrRmllbGQgKSB7CiAgICAgICAgICAgICAgICBjaGVja0ZpZWxkLmVhY2hTdWJGaWVsZCggcmVnRXhwU3ViRmllbGQsIGZ1bmN0aW9uKCBmaWVsZCwgc3ViRmllbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBmaWVsZHNbIGEgXS52YWx1ZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNoZWNrRmllbGQuZXhpc3RzKCByZWdFeHBTdWJGaWVsZCApICYmICFzdWJGaWVsZC52YWx1ZS5tYXRjaCggcmVnRXhwVmFsdWVzICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGZpZWxkc1sgYSBdLmZpZWxkICsgIioiICsgc3ViRmllbGQubmFtZSArICIgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIHZhbHVlIiArICIgKHZhbHVlOiAiICsgc3ViRmllbGQudmFsdWUgKyAiKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goIGVycm9yTWVzc2FnZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGZpZWxkc1sgYSBdLnNwZWNpYWxDaGVjayApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIklERU5USUZJRVIiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxDYXNlSWRlbnRpZmllciA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrVmFsaWRJZGVudGlmaWVyKCBzdWJGaWVsZC52YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3BlY2lhbENhc2VJZGVudGlmaWVyID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZmllbGRzWyBhIF0uZmllbGQgKyAiKiIgKyBzdWJGaWVsZC5uYW1lICsgIiBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgaWRlbnRpZmllciIgKyAiIChpZGVudGlmaWVyOiAiICsgc3ViRmllbGQudmFsdWUgKyAiKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIkRBVEVDIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsQ2FzZURhdGVDID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tWYWxpZERhdGUoIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzcGVjaWFsQ2FzZURhdGVDID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZmllbGRzWyBhIF0uZmllbGQgKyAiKiIgKyBzdWJGaWVsZC5uYW1lICsgIiBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgZGF0ZSIgKyAiIChkYXRlOiAiICsgc3ViRmllbGQudmFsdWUgKyAiKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIkRBVEVEIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsQ2FzZURhdGVEID0gTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tWYWxpZERhdGUoIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzcGVjaWFsQ2FzZURhdGVEID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZmllbGRzWyBhIF0uZmllbGQgKyAiKiIgKyBzdWJGaWVsZC5uYW1lICsgIiBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgZGF0ZSIgKyAiIChkYXRlOiAiICsgc3ViRmllbGQudmFsdWUgKyAiKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIklTQk4iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxDYXNlSXNibiA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNibiggc3ViRmllbGQudmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNwZWNpYWxDYXNlSXNibiA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGZpZWxkc1sgYSBdLmZpZWxkICsgIioiICsgc3ViRmllbGQubmFtZSArICIgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIElTQk4tMTAiICsgIiAodmFsdWU6ICIgKyBzdWJGaWVsZC52YWx1ZSArICIpIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKCBlcnJvck1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEVSUk9SOiAiICsgZXJyb3JNZXNzYWdlICsgIi4gSURFTlRJRklFUjogIiArIGlkZW50aWZpZXIgKyAiLiBPUklHSU46ICIgKyBvcmlnaW4gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiRUFOIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsQ2FzZUVhbiA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrRWFuKCBzdWJGaWVsZC52YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3BlY2lhbENhc2VFYW4gPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBmaWVsZHNbIGEgXS5maWVsZCArICIqIiArIHN1YkZpZWxkLm5hbWUgKyAiIGRvZXMgbm90IGNvbnRhaW4gYSB2YWxpZCBFQU4gKGUuZyBJU0JOLTEzKSIgKyAiICh2YWx1ZTogIiArIHN1YkZpZWxkLnZhbHVlICsgIikiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goIGVycm9yTWVzc2FnZSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJcblZBTElEQVRJT04gRVJST1I6ICIgKyBlcnJvck1lc3NhZ2UgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciArICIuIE9SSUdJTjogIiArIG9yaWdpbiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJJU1NOIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsQ2FzZUlzc24gPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0lzc24oIHN1YkZpZWxkLnZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzcGVjaWFsQ2FzZUlzc24gPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBmaWVsZHNbIGEgXS5maWVsZCArICIqIiArIHN1YkZpZWxkLm5hbWUgKyAiIGRvZXMgbm90IGNvbnRhaW4gYSB2YWxpZCBJU1NOIiArICIgKHZhbHVlOiAiICsgc3ViRmllbGQudmFsdWUgKyAiKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCggZXJyb3JNZXNzYWdlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlxuVkFMSURBVElPTiBFUlJPUjogIiArIGVycm9yTWVzc2FnZSArICIuIElERU5USUZJRVI6ICIgKyBpZGVudGlmaWVyICsgIi4gT1JJR0lOOiAiICsgb3JpZ2luICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgIH0gKTsKICAgICAgICB9CgogICAgICAgIHZhciB2YWxpZGF0aW9uT2JqZWN0ID0gewogICAgICAgICAgICAidmFsaWRhdGVzIjogdmFsaWRhdGVzLAogICAgICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IGVycm9yTWVzc2FnZXMKICAgICAgICB9OwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmc6IGNoZWNrU3ViRmllbGRWYWx1ZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25PYmplY3Q7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyBpZiBzdWJmaWVsZCBjb250YWlucyBhIHZhbGlkIERhdGUuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrVmFsaWREYXRlKCB2YWx1ZSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgdGhlIGRhdGUgdmFsdWUgdG8gYmUgY2hlY2tlZAogICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB2YWx1ZSBvZiBzdWJmaWVsZCBpcyBsZWdhbCwgb3RoZXJ3aXNlIGZhbHNlCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1ZhbGlkRGF0ZQogICAgICovCiAgICB0aGF0LmNoZWNrVmFsaWREYXRlID0gZnVuY3Rpb24oIHZhbHVlICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBjaGVja1ZhbGlkRGF0ZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgdmFyIHZhbGlkYXRlcyA9IHRydWU7CgogICAgICAgIGlmICggdmFsdWUubWF0Y2goIC9bXjAtOV0vZyApICkgewogICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBjaGVja1ZhbGlkRGF0ZSBmdW5jdGlvbiIgKTsKICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlczsKICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBkYXRlID0gRGF0ZVV0aWwuZGFuTWFyY1RvSnMoIHZhbHVlICk7CiAgICAgICAgfSBjYXRjaCAoIGVycm9yICkgewogICAgICAgICAgICBMb2cuZGVidWcoIGVycm9yICk7CiAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgTG9nLmRlYnVnKCAiREFURTogIiArIGRhdGUgKTsKCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBjaGVja1ZhbGlkRGF0ZSBmdW5jdGlvbiIgKTsKCiAgICAgICAgcmV0dXJuIHZhbGlkYXRlczsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIGlmIHN1YmZpZWxkIGNvbnRhaW5zIGEgdmFsaWQgRUFOIChlLmcgSVNCTi0xMykuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrRWFuKCB2YWx1ZSApCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgdGhlIEVBTiB2YWx1ZSB0byBiZSBjaGVja2VkCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHZhbHVlIG9mIHN1YmZpZWxkIGlzIGxlZ2FsLCBvdGhlcndpc2UgZmFsc2UKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrRWFuCiAgICAgKi8KICAgIHRoYXQuY2hlY2tFYW4gPSBmdW5jdGlvbiggdmFsdWUgKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGNoZWNrRWFuIGZ1bmN0aW9uIiApOwoKICAgICAgICB2YXIgdmFsaWRhdGVzID0gdHJ1ZTsKCiAgICAgICAgdmFyIGlzYm4gPSB2YWx1ZS5yZXBsYWNlKCAvLVxzL2csICIiICk7CiAgICAgICAgaWYgKCBpc2JuLmxlbmd0aCAhPT0gMTMgfHwgaXNibi5tYXRjaCggL1tcRF0vICkgKSB7CiAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBjaGFyYWN0ZXJzID0gaXNibi5zcGxpdCggJycgKTsKICAgICAgICAgICAgdmFyIHN1bSA9IDA7CiAgICAgICAgICAgIHZhciBpOwogICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IDEzOyBpICs9IDIgKSB7CiAgICAgICAgICAgICAgICBzdW0gKz0gcGFyc2VJbnQoIGNoYXJhY3RlcnNbIGkgXSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIGkgPSAxOyBpIDwgMTI7IGkgKz0gMiApIHsKICAgICAgICAgICAgICAgIHN1bSArPSAoIDMgKiBwYXJzZUludCggY2hhcmFjdGVyc1sgaSBdICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoICggc3VtICUgMTAgKSAhPSAwICkgewogICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogY2hlY2tFYW4gZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0ZXM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyBpZiBzdWJmaWVsZCBjb250YWlucyBhIHZhbGlkIElTQk4tMTAuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNibiggdmFsdWUgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIHRoZSBJU0JOIHZhbHVlIHRvIGJlIGNoZWNrZWQKICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdmFsdWUgb2Ygc3ViZmllbGQgaXMgbGVnYWwsIG90aGVyd2lzZSBmYWxzZQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc2JuCiAgICAgKi8KICAgIHRoYXQuY2hlY2tJc2JuID0gZnVuY3Rpb24oIHZhbHVlICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBjaGVja0lzYm4gZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWxpZGF0ZXMgPSB0cnVlOwoKICAgICAgICB2YXIgaXNibiA9IHZhbHVlLnJlcGxhY2UoIC9bXjAtOVhdL2lnLCAiIiApOwogICAgICAgIGlmICggaXNibi5sZW5ndGggIT09IDEwICkgewogICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgY2hhcmFjdGVycyA9IGlzYm4uc3BsaXQoICcnICk7CiAgICAgICAgICAgIGlmICggY2hhcmFjdGVyc1sgOSBdLnRvVXBwZXJDYXNlKCApID09ICdYJyApIHsKICAgICAgICAgICAgICAgIGNoYXJhY3RlcnNbIDkgXSA9IDEwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzdW0gPSAwOwogICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjaGFyYWN0ZXJzLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICAgICAgc3VtICs9ICggKCAxMCAtIGkgKSAqIHBhcnNlSW50KCBjaGFyYWN0ZXJzWyBpIF0gKSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggKCBzdW0gJSAxMSApICE9IDAgKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZXMgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nOiBjaGVja0lzYm4gZnVuY3Rpb24iICk7CgogICAgICAgIHJldHVybiB2YWxpZGF0ZXM7CgogICAgfTsKCiAgICAvKioKICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyBpZiBzdWJmaWVsZCBjb250YWlucyBhIHZhbGlkIElTU04uCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNzbiggdmFsdWUgKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIHRoZSBJU1NOIHZhbHVlIHRvIGJlIGNoZWNrZWQKICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdmFsdWUgb2Ygc3ViZmllbGQgaXMgbGVnYWwsIG90aGVyd2lzZSBmYWxzZQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc3NuCiAgICAgKi8KICAgIHRoYXQuY2hlY2tJc3NuID0gZnVuY3Rpb24oIHZhbHVlICkgewoKICAgICAgICBMb2cuaW5mbyggIkVudGVyaW5nOiBjaGVja0lzc24gZnVuY3Rpb24iICk7CgogICAgICAgIHZhciB2YWxpZGF0ZXMgPSB0cnVlOwoKICAgICAgICB2YXIgaXNzbiA9IHZhbHVlLnJlcGxhY2UoIC9bXjAtOVhdL2lnLCAiIiApOwogICAgICAgIGlmICggaXNzbi5sZW5ndGggIT09IDggKSB7CiAgICAgICAgICAgIHZhbGlkYXRlcyA9IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBjaGFyYWN0ZXJzID0gaXNzbi5zcGxpdCggJycgKTsKICAgICAgICAgICAgaWYgKCBjaGFyYWN0ZXJzWyA3IF0udG9VcHBlckNhc2UoICkgPT0gJ1gnICkgewogICAgICAgICAgICAgICAgY2hhcmFjdGVyc1sgNyBdID0gMTA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHN1bSA9IDA7CiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGNoYXJhY3RlcnMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICBzdW0gKz0gKCAoIDggLSBpICkgKiBwYXJzZUludCggY2hhcmFjdGVyc1sgaSBdICkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoICggc3VtICUgMTEgKSAhPSAwICkgewogICAgICAgICAgICAgICAgdmFsaWRhdGVzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZzogY2hlY2tJc3NuIGZ1bmN0aW9uIiApOwoKICAgICAgICByZXR1cm4gdmFsaWRhdGVzOwoKICAgIH07CgogICAgTG9nLmluZm8oICJMZWF2aW5nOiBNYXJjUmVjb3JkVmFsaWRhdGlvbiBtb2R1bGUiICk7CgogICAgcmV0dXJuIHRoYXQ7Cgp9KCApOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVVuaXR0ZXN0cy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVSZWxhdGlvbnMiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkcyA9IFsgXTsKCiAgICB2b2x1bWUgPSAiMDAxIDAwKmEyIDk1MyA4MzAgMSpiODcwOTcwKmMyMDEyMTAxNTE4MDAzNCpkMjAxMjA5MDMqZmFcbjAwNCAwMCpybiphYlxuMDA4IDAwKnRtKmRceGU1KngwNCp2MFxuMDE0IDAwKmEyIDk1NyA2NDggMyI7CgogICAgbmV3UmVjb3JkID0gewogICAgICAgICJ0eXBlIjogInZvbHVtZSIsCiAgICAgICAgInJlY29yZCI6IHZvbHVtZQogICAgfTsKCiAgICByZWNvcmRzLnB1c2goIG5ld1JlY29yZCApOwoKICAgIGhlYWQgPSAiMDAxIDAwKmEyIDk1NyA2NDggMypiODcwOTcwKmMyMDEyMTAwOTA4NTAxMipkMjAxMjA5MjUqZmFcbjAwNCAwMCpybiphaCI7CgogICAgbmV3UmVjb3JkID0gewogICAgICAgICJ0eXBlIjogImhlYWQiLAogICAgICAgICJyZWNvcmQiOiBoZWFkCiAgICB9OwoKICAgIHJlY29yZHMucHVzaCggbmV3UmVjb3JkICk7CgogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogdHJ1ZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIlZhbGlkYXRpbmcgcmVsYXRpb24gYmV0d2VlbiB2b2x1bWUgYW5kIGhlYWQgKHZhbGlkYXRlcykiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVSZWxhdGlvbnMoIHJlY29yZHMsIGlkZW50aWZpZXIgKScsIG91dHB1dCApOwoKICAgIHJlY29yZHMgPSBbIF07CgogICAgdm9sdW1lID0gIjAwMSAwMCphMiA5NTMgODMwIDEqYjg3MDk3MCpjMjAxMjEwMTUxODAwMzQqZDIwMTIwOTAzKmZhXG4wMDQgMDAqcm4qYWJcbjAwOCAwMCp0bSpkXHhlNSp4MDQqdjBcbjAxNCAwMCphMiA5NTcgNjQ4IDMiOwoKICAgIG5ld1JlY29yZCA9IHsKICAgICAgICAidHlwZSI6ICJ2b2x1bWUiLAogICAgICAgICJyZWNvcmQiOiB2b2x1bWUKICAgIH07CgogICAgcmVjb3Jkcy5wdXNoKCBuZXdSZWNvcmQgKTsKCiAgICBoZWFkID0gIjAwMSAwMCphMiA5NTcgNjQ4IDUqYjg3MDk3MCpjMjAxMjEwMDkwODUwMTIqZDIwMTIwOTI1KmZhXG4wMDQgMDAqcm4qYWgiOwoKICAgIG5ld1JlY29yZCA9IHsKICAgICAgICAidHlwZSI6ICJoZWFkIiwKICAgICAgICAicmVjb3JkIjogaGVhZAogICAgfTsKCiAgICByZWNvcmRzLnB1c2goIG5ld1JlY29yZCApOwoKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIjsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAiMDE0KmEgZnJvbSByZWNvcmQ6IDIgOTU3IDY0OCAzIGlzIG5vdCB0aGUgc2FtZSBhcyAwMDEqYSBmcm9tIGhlYWQ6IDIgOTU3IDY0OCA1IiBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiVmFsaWRhdGluZyByZWxhdGlvbiBiZXR3ZWVuIHZvbHVtZSBhbmQgaGVhZCAoZG9lcyBub3QgdmFsaWRhdGUpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLnZhbGlkYXRlUmVsYXRpb25zKCByZWNvcmRzLCBpZGVudGlmaWVyICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmRzID0gWyBdOwoKICAgIHZvbHVtZSA9ICIwMDEgMDAqYTIgOTIzIDgyOSA0KmI4NzA5NzAqYzIwMTIwMzI3MDkzMTM0KmQyMDEyMDIyNypmYVxuMDA0IDAwKnJuKmFiXG4wMDggMDAqdG0qdWYqYTIwMTEqbGRhbip2MFxuMDE0IDAwKmEyIDU3NiA2MDIgNCI7CgogICAgbmV3UmVjb3JkID0gewogICAgICAgICJ0eXBlIjogInZvbHVtZSIsCiAgICAgICAgInJlY29yZCI6IHZvbHVtZQogICAgfTsKCiAgICByZWNvcmRzLnB1c2goIG5ld1JlY29yZCApOwoKICAgIGhlYWQgPSAiMDAxIDAwKmE1IDAwNyA0NzcgMypiODcwOTcwKmMyMDExMDEyNDE1MzM0MypkMTk3NzAyMTcqZmFcbjAwNCAwMCpybiphaCI7CgogICAgbmV3UmVjb3JkID0gewogICAgICAgICJ0eXBlIjogImhlYWQiLAogICAgICAgICJyZWNvcmQiOiBoZWFkCiAgICB9OwoKICAgIHJlY29yZHMucHVzaCggbmV3UmVjb3JkICk7CgogICAgc2VjdGlvbiA9ICIwMDEgMDAqYTIgNTc2IDYwMiA0KmI4NzA5NzAqYzIwMDkxMjAzMTUwNDQ1KmQyMDA1MDUzMCpmYVxuMDA0IDAwKnJuKmFzXG4wMDggMDAqdjBcbjAxNCAwMCphNSAwMDcgNDc3IDMiOwoKICAgIG5ld1JlY29yZCA9IHsKICAgICAgICAidHlwZSI6ICJzZWN0aW9uIiwKICAgICAgICAicmVjb3JkIjogc2VjdGlvbgogICAgfTsKCiAgICByZWNvcmRzLnB1c2goIG5ld1JlY29yZCApOwoKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIjsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJWYWxpZGF0aW5nIHJlbGF0aW9uIGJldHdlZW4gc2VjdGlvbiBhbmQgaGVhZCAodmFsaWRhdGVzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi52YWxpZGF0ZVJlbGF0aW9ucyggcmVjb3JkcywgaWRlbnRpZmllciApJywgb3V0cHV0ICk7CgogICAgcmVjb3JkcyA9IFsgXTsKCiAgICB2b2x1bWUgPSAiMDAxIDAwKmEyIDkyMyA4MjkgNCpiODcwOTcwKmMyMDEyMDMyNzA5MzEzNCpkMjAxMjAyMjcqZmFcbjAwNCAwMCpybiphYlxuMDA4IDAwKnRtKnVmKmEyMDExKmxkYW4qdjBcbjAxNCAwMCphMiA1NzYgNjAyIDQiOwoKICAgIG5ld1JlY29yZCA9IHsKICAgICAgICAidHlwZSI6ICJ2b2x1bWUiLAogICAgICAgICJyZWNvcmQiOiB2b2x1bWUKICAgIH07CgogICAgcmVjb3Jkcy5wdXNoKCBuZXdSZWNvcmQgKTsKCiAgICBoZWFkID0gIjAwMSAwMCphNSAwMDcgNDc3IDMqYjg3MDk3MCpjMjAxMTAxMjQxNTMzNDMqZDE5NzcwMjE3KmZhXG4wMDQgMDAqcm4qYWgiOwoKICAgIG5ld1JlY29yZCA9IHsKICAgICAgICAidHlwZSI6ICJoZWFkIiwKICAgICAgICAicmVjb3JkIjogaGVhZAogICAgfTsKCiAgICByZWNvcmRzLnB1c2goIG5ld1JlY29yZCApOwoKICAgIHNlY3Rpb24gPSAiMDAxIDAwKmEyIDU3NiA2MDMgNCpiODcwOTcwKmMyMDA5MTIwMzE1MDQ0NSpkMjAwNTA1MzAqZmFcbjAwNCAwMCpybiphc1xuMDA4IDAwKnYwXG4wMTQgMDAqYTUgMDA3IDQ3NyAzIjsKCiAgICBuZXdSZWNvcmQgPSB7CiAgICAgICAgInR5cGUiOiAic2VjdGlvbiIsCiAgICAgICAgInJlY29yZCI6IHNlY3Rpb24KICAgIH07CgogICAgcmVjb3Jkcy5wdXNoKCBuZXdSZWNvcmQgKTsKCiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiBmYWxzZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgIjAxNCphIGZyb20gc2VjdGlvbjogNSAwMDcgNDc3IDMgaXMgbm90IHRoZSBzYW1lIGFzIDAwMSphIGZyb20gaGVhZDogNSAwMDcgNDc3IDMuIE9yIDAxNCphIGZyb20gcmVjb3JkOiAyIDU3NiA2MDIgNCBpcyBub3QgdGhlIHNhbWUgYXMgMDAxKmEgZnJvbSBzZWN0aW9uOiAyIDU3NiA2MDMgNCIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIlZhbGlkYXRpbmcgcmVsYXRpb24gYmV0d2VlbiBzZWN0aW9uIGFuZCBoZWFkIChkb2VzIG5vdCB2YWxpZGF0ZSkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24udmFsaWRhdGVSZWxhdGlvbnMoIHJlY29yZHMsIGlkZW50aWZpZXIgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZHM7CiAgICBkZWxldGUgdGhpcy5uZXdSZWNvcmQ7CiAgICBkZWxldGUgdGhpcy52b2x1bWU7CiAgICBkZWxldGUgdGhpcy5zZWN0aW9uOwogICAgZGVsZXRlIHRoaXMuaGVhZDsKICAgIGRlbGV0ZSB0aGlzLmlkZW50aWZpZXI7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1JlcXVpcmVkRmllbGRzIiwgZnVuY3Rpb24oICkgewoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDAxIiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwNCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDgiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA5IiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjI0NSIsICIwMCIgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIjsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBmb3IgcmVxdWlyZWQgZmllbGRzIChzdWNjZXNzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1JlcXVpcmVkRmllbGRzKCByZWNvcmQsIGlkZW50aWZpZXIgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDAxIiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwNCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDgiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA5IiwgIjAwIiApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICJyZXF1aXJlZCBmaWVsZDogMjQ1IGlzIG1pc3NpbmciIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBmb3IgcmVxdWlyZWQgZmllbGRzIChmYWlsdXJlKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1JlcXVpcmVkRmllbGRzKCByZWNvcmQsIGlkZW50aWZpZXIgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDAxIiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwOCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDkiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMjQ1IiwgIjAwIiApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw3NzA3MDAiOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICJyZXF1aXJlZCBmaWVsZDogMDA0IGlzIG1pc3NpbmciIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBmb3IgcmVxdWlyZWQgZmllbGRzIChmYWlsdXJlIGZvciBGb2xrZWJpYmxpb3RlaykiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tSZXF1aXJlZEZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLmlkZW50aWZpZXI7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0V4Y2x1ZGluZ0ZpZWxkcyIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgcmVjb3JkLmFwcGVuZCggIjEwMCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIxMTAiLCAiMDAiICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiBmYWxzZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgImV4Y2x1ZGluZyBmaWVsZHM6IDEwMCBhbmQgMTEwIGFyZSBib3RoIHByZXNlbnQiIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBmb3IgZXhjbHVkaW5nIGZpZWxkcyAobm90IHZhbGlkKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0V4Y2x1ZGluZ0ZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgcmVjb3JkLmFwcGVuZCggIjEwMCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIyNDUiLCAiMDAiICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgZm9yIGV4Y2x1ZGluZyBmaWVsZHMgKHZhbGlkKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0V4Y2x1ZGluZ0ZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5pZGVudGlmaWVyOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tOb25SZXBlYXRhYmxlRmllbGRzIiwgZnVuY3Rpb24oICkgewoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDAxIiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwNCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDgiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA5IiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjI0NSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICI2NjYiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiNjY2IiwgIjAwIiApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwogICAgc3VibWl0dGVyID0gIjg3MDk3MCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgZm9yIG5vbi1yZXBlYXRhYmxlIGZpZWxkcyIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja05vblJlcGVhdGFibGVGaWVsZHMoIHJlY29yZCwgaWRlbnRpZmllciwgInVua25vd24iLCBzdWJtaXR0ZXIgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDAxIiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwMSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDQiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA4IiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwOSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIyNDUiLCAiMDAiICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CiAgICBzdWJtaXR0ZXIgPSAiODcwOTcwIjsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAibm9uLXJlcGVhdGFibGUgZmllbGQ6IDAwMSBpcyByZXBlYXRlZCIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGZvciBub24tcmVwZWF0YWJsZSBmaWVsZHMgLSBvbmUgcHJlc2VudCIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja05vblJlcGVhdGFibGVGaWVsZHMoIHJlY29yZCwgaWRlbnRpZmllciwgInVua25vd24iLCBzdWJtaXR0ZXIgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDAxIiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwNCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDUiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA1IiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwOCIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDkiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMjQ1IiwgIjAwIiApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw3NDEwMDAiOwogICAgc3VibWl0dGVyID0gIjc0MTAwMCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgZm9yIG5vbi1yZXBlYXRhYmxlIGZpZWxkcyAtIG9uZSBwcmVzZW50LCBidXQgYWxsb3dlZCBmb3IgRm9sa2ViaWJsaW90ZWtlciIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja05vblJlcGVhdGFibGVGaWVsZHMoIHJlY29yZCwgaWRlbnRpZmllciwgInVua25vd24iLCBzdWJtaXR0ZXIpJywgb3V0cHV0ICk7CgoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuaWRlbnRpZmllcjsKICAgIGRlbGV0ZSB0aGlzLnN1Ym1pdHRlcjsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJUZXN0IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSWxsZWdhbEZpZWxkcyIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwMSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDQiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA4IiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwOSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIyNDUiLCAiMDAiICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgZm9yIGlsbGVnYWwgZmllbGRzIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSWxsZWdhbEZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwMSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIwMDMiLCAiMDAiICk7CiAgICByZWNvcmQuYXBwZW5kKCAiMDA4IiwgIjAwIiApOwogICAgcmVjb3JkLmFwcGVuZCggIjAwOSIsICIwMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoICIyNDUiLCAiMDAiICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiBmYWxzZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgImlsbGVnYWwgZmllbGQ6IDAwMyBpcyBwcmVzZW50IiBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgZm9yIGlsbGVnYWwgZmllbGRzIC0gaWxsZWdhbCBmaWVsZCBwcmVzZW50IiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSWxsZWdhbEZpZWxkcyggcmVjb3JkLCBpZGVudGlmaWVyICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5pZGVudGlmaWVyOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tCYXNpY1N1YkZpZWxkIiwgZnVuY3Rpb24oICkgewoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjc3MDcwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDc3MDcwMCI7CiAgICBzdWJtaXR0ZXIgPSAiNzcwNzAwIjsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAibm9ucmVwZWF0YWJsZSBzdWJmaWVsZCAwMDEqZiBpcyByZXBlYXRlZCIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIk5vbnJlcGVhdGFibGUgc3ViZmllbGQgaXMgcmVwZWF0ZWQgZm9yIEZvbGtlYmlibGlvdGVrZXIiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tCYXNpY1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsICJ1bmtub3duIiwgc3VibWl0dGVyICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI3NzA3MDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJmIiwgImEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICI5MDAiLCAiMDAiICk7CiAgICBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggInoiLCAiNzAwIiApOwogICAgZmllbGQuYXBwZW5kKCBzdWJmaWVsZCApOwogICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJ6IiwgIjc3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDc3MDcwMCI7CiAgICBzdWJtaXR0ZXIgPSAiNzcwNzAwIjsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJSZXBldGl0aW9uIG9mIG5vbnJlcGVhdGFibGUgc3ViZmllbGQgaXMgYWxsb3dlZCBmb3IgRm9sa2ViaWJsaW90ZWtlciIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0Jhc2ljU3ViRmllbGQoIHJlY29yZCwgaWRlbnRpZmllciwgInVua25vd24iLCBzdWJtaXR0ZXIgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuaWRlbnRpZmllcjsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJUZXN0IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmdldFN1YmZpZWxkTmFtZXMiLCBmdW5jdGlvbiggKSB7CgogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJmIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJoIiwgInMiICk7CgogICAgb3V0cHV0ID0gWyAiYSIsICJiIiwgImYiLCAiaCIgXTsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBpbGxlZ2FsIHN1YmZpZWxkIGlzIHByZXNlbnQiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uZ2V0U3ViZmllbGROYW1lcyggZmllbGQgKScsIG91dHB1dCApOwoKCiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKCgoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZCIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJmIiwgImEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZENoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBsZWdhbCwgcmVxdWlyZWQsIGFuZCBub25yZXBlYXRhYmxlIHN1YmZpZWxkcyAiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZCggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICkKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjQ1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJIZWtzZW5lcyBrcmlnIiApOwogICAgZmllbGQuYXBwZW5kKCAiRyIsICIxIiApOwogICAgZmllbGQuYXBwZW5kKCAiZyIsICIxLiBiaW5kIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIjsKICAgIGZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgcHJlc2VuY2Ugb2YgdXBwZXJjYXNlIHN1YmZpZWxkIGNvcnJlc3BvbmRpbmcgdG8gbG93ZXJjYXNlIHN1YmZpZWxkIChzdWNjZXNzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODcwOTcwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKQogICAgZmllbGQgPSBuZXcgRmllbGQoICIyNDUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkhla3NlbmVzIGtyaWciICk7CiAgICBmaWVsZC5hcHBlbmQoICJHIiwgIjEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZENoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAic3ViZmllbGQgRyBpcyBub3QgZm9sbG93ZWQgYnkgc3ViZmllbGQgZyBpbiAyNDUiIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBwcmVzZW5jZSBvZiB1cHBlcmNhc2Ugc3ViZmllbGQgY29ycmVzcG9uZGluZyB0byBsb3dlcmNhc2Ugc3ViZmllbGQgKGZhaWwpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGQoIHJlY29yZCwgaWRlbnRpZmllciwgZmllbGRzICknLCBvdXRwdXQgKTsKCgoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMDQzMzU1NzAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICkKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMjQ1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJQb2ludHMgb24gdGhlIGN1cnZlIHRvIGZpbmQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIkFudGhvbnkgXGRpIEJvbmF2ZW50dXJhXCwga2xhdmVyIiApOwogICAgZmllbGQuYXBwZW5kKCAiXHUwMGQ4IiwgImRpYm9uYXZlbnR1cmEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJcdTAwZjgiLCAiZGkgQm9uYXZlbnR1cmEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkNvbmNlcnRpbm8gZm9yIGtsYXJpbmV0LCB2aW9saW4gb2cga2FtbWVyZW5zZW1ibGUgKDE5NTEpIiApOwogICAgZmllbGQuYXBwZW5kKCAiZSIsICJBbnRob255IFBheSwga2xhcmluZXQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIk5vbmEgTGlkZGVsbCwgdmlvbGluIiApOwogICAgZmllbGQuYXBwZW5kKCAiQSIsICJjaGVtaW5zIDQiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkNoZW1pbnMgSVYiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIkhlaW56IEhvbGxpZ2VyLCBvYm8iICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIkxpbmVhIiApOwogICAgZmllbGQuYXBwZW5kKCAiZSIsICJLYXRpYSBMYWJlcXVlIG9nIE1hcmllbGxlIExhYmVxdWUsIGtsYXZlciIgKTsKICAgIGZpZWxkLmFwcGVuZCggIkEiLCAiY2hlbWlucyAzIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJDaGVtaW5zIElJSSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImUiLCAiSnVsZW1hbmRlbiwgaG9sb2ZvbiIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogdHJ1ZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIHByZXNlbmNlIG9mIG11bHRpcGxlIHVwcGVyY2FzZSBzdWJmaWVsZHMgY29ycmVzcG9uZGluZyB0byBsb3dlcmNhc2Ugc3ViZmllbGRzIChzdWNjZXNzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIwNDMzNTU3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODcwOTcwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKQogICAgZmllbGQgPSBuZXcgRmllbGQoICIyNDUiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIlBvaW50cyBvbiB0aGUgY3VydmUgdG8gZmluZCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImUiLCAiQW50aG9ueSBcZGkgQm9uYXZlbnR1cmFcLCBrbGF2ZXIiICk7CiAgICBmaWVsZC5hcHBlbmQoICJcdTAwZDgiLCAiZGlib25hdmVudHVyYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggIlx1MDBmOCIsICJkaSBCb25hdmVudHVyYSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiQ29uY2VydGlubyBmb3Iga2xhcmluZXQsIHZpb2xpbiBvZyBrYW1tZXJlbnNlbWJsZSAoMTk1MSkiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIkFudGhvbnkgUGF5LCBrbGFyaW5ldCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImUiLCAiTm9uYSBMaWRkZWxsLCB2aW9saW4iICk7CiAgICBmaWVsZC5hcHBlbmQoICJBIiwgImNoZW1pbnMgNCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiQ2hlbWlucyBJViIgKTsKICAgIGZpZWxkLmFwcGVuZCggImUiLCAiSGVpbnogSG9sbGlnZXIsIG9ibyIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiTGluZWEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJlIiwgIkthdGlhIExhYmVxdWUgb2cgTWFyaWVsbGUgTGFiZXF1ZSwga2xhdmVyIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICJjaGVtaW5zIDMiICk7CiAgICBmaWVsZC5hcHBlbmQoICJBIiwgIkNoZW1pbnMgSUlJIiApOwogICAgZmllbGQuYXBwZW5kKCAiZSIsICJKdWxlbWFuZGVuLCBob2xvZm9uIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIjsKICAgIGZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiBmYWxzZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgInN1YmZpZWxkIEEgaXMgbm90IGZvbGxvd2VkIGJ5IHN1YmZpZWxkIGEgaW4gMjQ1IiBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgcHJlc2VuY2Ugb2YgbXVsdGlwbGUgdXBwZXJjYXNlIHN1YmZpZWxkcyBjb3JyZXNwb25kaW5nIHRvIGxvd2VyY2FzZSBzdWJmaWVsZHMgKGZhaWwpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGQoIHJlY29yZCwgaWRlbnRpZmllciwgZmllbGRzICknLCBvdXRwdXQgKTsKCgoKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJmIiwgImEiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApCiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjI0NSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiSGVrc2VuZXMga3JpZyIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAiMS4gYmluZCIgKTsKICAgIGZpZWxkLmFwcGVuZCggIkciLCAiMSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCI7CiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICJzdWJmaWVsZCBHIGlzIG5vdCBmb2xsb3dlZCBieSBzdWJmaWVsZCBnIGluIDI0NSIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIG9yZGVyIG9mIHVwcGVyY2FzZSBzdWJmaWVsZCBhbmQgY29ycmVzcG9uZGluZyBsb3dlcmNhc2Ugc3ViZmllbGQiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZCggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMgKScsIG91dHB1dCApOwoKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDEiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJhIiwgIjEyMzQ1Njc4IiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJmIiwgImEiICk7CiAgICBmaWVsZC5hcHBlbmQoICJIIiwgInMiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZENoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAiaWxsZWdhbCBzdWJmaWVsZCBIIHByZXNlbnQgaW4gMDAxIiBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB1cHBlcmNhc2Ugc3ViZmllbGQgaXMgcHJlc2VudCIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODcwOTcwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiaCIsICJzIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIjsKICAgIGZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiBmYWxzZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgImlsbGVnYWwgc3ViZmllbGQgaCBwcmVzZW50IGluIDAwMSIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgc3ViZmllbGQgaXMgcHJlc2VudCIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuaWRlbnRpZmllcjsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkczsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJUZXN0IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGQiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICIxMjM0NTY3OCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImIiLCAiODcwOTcwIiApOwogICAgZmllbGQuYXBwZW5kKCAiZiIsICJhIiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzAiICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiOwogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZENoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAibm9ucmVwZWF0YWJsZSBzdWJmaWVsZCAwMDEqYiBpcyByZXBlYXRlZCIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIHN1YmZpZWxkIGlzIG5vdCB1bmlxdWUiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZCggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwMSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImEiLCAiMTIzNDU2NzgiICk7CiAgICBmaWVsZC5hcHBlbmQoICJiIiwgIjg3MDk3MSIgKTsKICAgIGZpZWxkLmFwcGVuZCggImYiLCAiYSIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInYiLCAiMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggInYiLCAiMCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MSI7CiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICJub25yZXBlYXRhYmxlIHN1YmZpZWxkIDAwOCp2IGlzIHJlcGVhdGVkIiBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgc3ViZmllbGQgaXMgbm90IHVuaXF1ZSBmb3IgODcwOTcxIHJlY29yZCIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5pZGVudGlmaWVyOwogICAgZGVsZXRlIHRoaXMuZmllbGRzOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKCgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJiIiwgIjg3MDk3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgIHN1YmZpZWxkID0gbmV3IFN1YmZpZWxkKCAidCIsICJBTEJBIiApOwogICAgZmllbGQuYXBwZW5kKCBzdWJmaWVsZCApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA4IiwgIjAwIiApOwogICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJ0IiwgIm0iICk7CiAgICBmaWVsZC5hcHBlbmQoIHN1YmZpZWxkICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiCiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkVmFsdWVDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLmlkZW50aWZpZXI7CiAgICBkZWxldGUgdGhpcy5maWVsZHM7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA1IiwgIjAwIiApOwogICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJqIiwgIm0iICk7CiAgICBmaWVsZC5hcHBlbmQoIHN1YmZpZWxkICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiCiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkVmFsdWVDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKHJlZ3VsYXIgZXhwcmVzc2lvbiBbYS16XSkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLmlkZW50aWZpZXI7CiAgICBkZWxldGUgdGhpcy5maWVsZHM7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJiIiwgIjg3MDk3MCIgKTsKICAgIGZpZWxkLmFwcGVuZCggc3ViZmllbGQgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCIKICAgIGZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRWYWx1ZUNoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IHRydWUsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAocmVndWxhciBleHByZXNzaW9uIDYgZGlnaXRzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUoIHJlY29yZCwgaWRlbnRpZmllciwgZmllbGRzICknLCBvdXRwdXQgKTsKCiAgICBkZWxldGUgdGhpcy5yZWNvcmQ7CiAgICBkZWxldGUgdGhpcy5maWVsZDsKICAgIGRlbGV0ZSB0aGlzLnN1YmZpZWxkOwogICAgZGVsZXRlIHRoaXMuaWRlbnRpZmllcjsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkczsKICAgIGRlbGV0ZSB0aGlzLm91dHB1dDsKCn0gKTsKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJUZXN0IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGRWYWx1ZSIsIGZ1bmN0aW9uKCApIHsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDkiLCAiMDAiICk7CiAgICBzdWJmaWVsZCA9IG5ldyBTdWJmaWVsZCggImciLCAieHgiICk7CiAgICBmaWVsZC5hcHBlbmQoIHN1YmZpZWxkICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiCiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkVmFsdWVDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBsZXR0ZXIgY29kZSkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLmlkZW50aWZpZXI7CiAgICBkZWxldGUgdGhpcy5maWVsZHM7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA4IiwgIjAwIiApOwogICAgc3ViZmllbGQgPSBuZXcgU3ViZmllbGQoICJhIiwgIjIwMDkiICk7CiAgICBmaWVsZC5hcHBlbmQoIHN1YmZpZWxkICk7CiAgICByZWNvcmQuYXBwZW5kKCBmaWVsZCApOwogICAgaWRlbnRpZmllciA9ICIxMjM0NTY3OHw4NzA5NzAiCiAgICBmaWVsZHMgPSBNYXJjUmVjb3JkVmFsaWRhdGlvbi5zZXRVcEZvclN1YkZpZWxkVmFsdWVDaGVjayggcmVjb3JkICk7CgogICAgb3V0cHV0ID0gewogICAgICAgICJ2YWxpZGF0ZXMiOiB0cnVlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKHllYXIpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGRWYWx1ZSggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5pZGVudGlmaWVyOwogICAgZGVsZXRlIHRoaXMuZmllbGRzOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlIiwgZnVuY3Rpb24oICkgewoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIHN1YmZpZWxkID0gbmV3IFN1YmZpZWxkKCAiYSIsICI/Pz8/IiApOwogICAgZmllbGQuYXBwZW5kKCBzdWJmaWVsZCApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIgogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogdHJ1ZSwKICAgICAgICAiZXJyb3JNZXNzYWdlcyI6IFsgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGxlZ2FsIHZhbHVlIGluIHN1YmZpZWxkICh1bmtub3duIHllYXIpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGRWYWx1ZSggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnJlY29yZDsKICAgIGRlbGV0ZSB0aGlzLmZpZWxkOwogICAgZGVsZXRlIHRoaXMuc3ViZmllbGQ7CiAgICBkZWxldGUgdGhpcy5pZGVudGlmaWVyOwogICAgZGVsZXRlIHRoaXMuZmllbGRzOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlIiwgZnVuY3Rpb24oICkgewoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOCIsICIwMCIgKTsKICAgIHN1YmZpZWxkID0gbmV3IFN1YmZpZWxkKCAidCIsICJmIiApOwogICAgZmllbGQuYXBwZW5kKCBzdWJmaWVsZCApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIgogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICIwMDgqdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgdmFsdWUgKHZhbHVlOiBmKSIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5zdWJmaWVsZDsKICAgIGRlbGV0ZSB0aGlzLmlkZW50aWZpZXI7CiAgICBkZWxldGUgdGhpcy5maWVsZHM7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUiLCBmdW5jdGlvbiggKSB7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA1IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiaiIsICIxIiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIgogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICIwMDUqaiBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgdmFsdWUgKHZhbHVlOiAxKSIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKHJlZ3VsYXIgZXhwcmVzc2lvbiBbYS16XSkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDAxIiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYiIsICI4NzA5NzA5OCIgKTsKICAgIHJlY29yZC5hcHBlbmQoIGZpZWxkICk7CiAgICBpZGVudGlmaWVyID0gIjEyMzQ1Njc4fDg3MDk3MCIKICAgIGZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRWYWx1ZUNoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAiMDAxKmIgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIHZhbHVlICh2YWx1ZTogODcwOTcwOTgpIiBdCiAgICB9CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAocmVndWxhciBleHByZXNzaW9uIDYgZGlnaXRzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1N1YkZpZWxkVmFsdWUoIHJlY29yZCwgaWRlbnRpZmllciwgZmllbGRzICknLCBvdXRwdXQgKTsKCiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKCApOwogICAgZmllbGQgPSBuZXcgRmllbGQoICIwMDgiLCAiMDAiICk7CiAgICBmaWVsZC5hcHBlbmQoICJ2IiwgIjg3IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIgogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICIwMDgqdiBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgdmFsdWUgKHZhbHVlOiA4NykiIF0KICAgIH0KCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBpbGxlZ2FsIHZhbHVlIGluIHN1YmZpZWxkIChyZWd1bGFyIGV4cHJlc3Npb24gNiBkaWdpdHMpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrU3ViRmllbGRWYWx1ZSggcmVjb3JkLCBpZGVudGlmaWVyLCBmaWVsZHMgKScsIG91dHB1dCApOwoKICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICBmaWVsZCA9IG5ldyBGaWVsZCggIjAwOSIsICIwMCIgKTsKICAgIGZpZWxkLmFwcGVuZCggImciLCAieHh4IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIgoKICAgIGZpZWxkcyA9IE1hcmNSZWNvcmRWYWxpZGF0aW9uLnNldFVwRm9yU3ViRmllbGRWYWx1ZUNoZWNrKCByZWNvcmQgKTsKCiAgICBvdXRwdXQgPSB7CiAgICAgICAgInZhbGlkYXRlcyI6IGZhbHNlLAogICAgICAgICJlcnJvck1lc3NhZ2VzIjogWyAiMDA5KmcgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIHZhbHVlICh2YWx1ZTogeHh4KSIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBsZXR0ZXIgY29kZSkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgcmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgIGZpZWxkID0gbmV3IEZpZWxkKCAiMDA4IiwgIjAwIiApOwogICAgZmllbGQuYXBwZW5kKCAiYSIsICI/IiApOwogICAgcmVjb3JkLmFwcGVuZCggZmllbGQgKTsKICAgIGlkZW50aWZpZXIgPSAiMTIzNDU2Nzh8ODcwOTcwIgogICAgZmllbGRzID0gTWFyY1JlY29yZFZhbGlkYXRpb24uc2V0VXBGb3JTdWJGaWVsZFZhbHVlQ2hlY2soIHJlY29yZCApOwoKICAgIG91dHB1dCA9IHsKICAgICAgICAidmFsaWRhdGVzIjogZmFsc2UsCiAgICAgICAgImVycm9yTWVzc2FnZXMiOiBbICIwMDgqYSBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgdmFsdWUgKHZhbHVlOiA/KSIgXQogICAgfQoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKHVua25vd24geWVhcikiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tTdWJGaWVsZFZhbHVlKCByZWNvcmQsIGlkZW50aWZpZXIsIGZpZWxkcyApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMucmVjb3JkOwogICAgZGVsZXRlIHRoaXMuZmllbGQ7CiAgICBkZWxldGUgdGhpcy5pZGVudGlmaWVyOwogICAgZGVsZXRlIHRoaXMuZmllbGRzOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tWYWxpZERhdGUiLCBmdW5jdGlvbiggKSB7CgogICAgdmFsdWUgPSAiMjAwOTEyMTAiOwogICAgb3V0cHV0ID0gdHJ1ZTsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBsZWdhbCBkYXRlIGluIHN1YmZpZWxkICgxMC8xMi0yMDA5KSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1ZhbGlkRGF0ZSggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIHZhbHVlID0gIjIwMTIwNjI4MTM0NTE1IjsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBsZWdhbCBkYXRlIGluIHN1YmZpZWxkICgxMzo0NToxNSBvbiAyOC82LTIwMTIpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrVmFsaWREYXRlKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgdmFsdWUgPSAiMjAxMjA2MjgxMzQ1IjsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBsZWdhbCBkYXRlIGluIHN1YmZpZWxkICgxMzo0NSBvbiAyOC82LTIwMTIpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrVmFsaWREYXRlKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMudmFsdWU7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1ZhbGlkRGF0ZSIsIGZ1bmN0aW9uKCApIHsKCiAgICB2YWx1ZSA9ICIyMDA4MTMxNSI7CiAgICBvdXRwdXQgPSBmYWxzZTsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBpbGxlZ2FsIGRhdGUgaW4gc3ViZmllbGQgKDE1LzEzLTIwMDgpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrVmFsaWREYXRlKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgdmFsdWUgPSAiMjAxMjA2MzExMzQ1MDAiOwoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgZGF0ZSBpbiBzdWJmaWVsZCAoMzEvNi0yMDEyKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja1ZhbGlkRGF0ZSggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIHZhbHVlID0gIjIwMTIwNjMxMTM0NWFhIjsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBpbGxlZ2FsIGRhdGUgaW4gc3ViZmllbGQgKGluY2x1ZGVzIGxldHRlcnMpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrVmFsaWREYXRlKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMudmFsdWU7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0VhbiIsIGZ1bmN0aW9uKCApIHsKCiAgICB2YWx1ZSA9ICI5Nzg4Nzk5NTM3NjAwIjsKCiAgICBvdXRwdXQgPSB0cnVlOwoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGxlZ2FsIHZhbHVlIGluIHN1YmZpZWxkIChJU0JOLTEzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0VhbiggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnZhbHVlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tFYW4iLCBmdW5jdGlvbiggKSB7CgogICAgdmFsdWUgPSAiOTc4MTU4OTIzNDEyMjQiOwoKICAgIG91dHB1dCA9IGZhbHNlOwoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKElTQk4tMTMgd2l0aCAxNCBjaGFyYWN0ZXJzKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0VhbiggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIHZhbHVlID0gIjk3ODE1ODkyMzQxMjN4eCI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNCTi0xMyBjb250YWluaW5nIHgpIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrRWFuKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgdmFsdWUgPSAiOTc4ODc5OTUzNzYwMSI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNCTi0xMyB3aXRoIHdyb25nIGNoZWNrIGRpZ2l0KSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0VhbiggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnZhbHVlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKClVuaXRUZXN0LmFkZEZpeHR1cmUoICJUZXN0IE1hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNibiIsIGZ1bmN0aW9uKCApIHsKCiAgICB2YWx1ZSA9ICIwNDQwMTgyOTN4IjsKCiAgICBvdXRwdXQgPSB0cnVlOwoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGxlZ2FsIHZhbHVlIGluIHN1YmZpZWxkIChJU0JOLTEwKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0lzYm4oIHZhbHVlICknLCBvdXRwdXQgKTsKCiAgICB2YWx1ZSA9ICIwNDQwMTgyOTNYIjsKCiAgICBBc3NlcnQuZXF1YWwoICJDaGVja2luZyBsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNCTi0xMCkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc2JuKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgdmFsdWUgPSAiODctNzcyNC04NTctMCI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKElTQk4tMTApIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNibiggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnZhbHVlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc2JuIiwgZnVuY3Rpb24oICkgewoKICAgIHZhbHVlID0gIjE1ODkyMzQxMiI7CgogICAgb3V0cHV0ID0gZmFsc2U7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNCTi0xMCkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc2JuKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgdmFsdWUgPSAiMTU4OTIzNDEyRiI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNCTi0xMCkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc2JuKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgdmFsdWUgPSAiODc3NzI0ODU3MSI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNCTi0xMCkiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc2JuKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMudmFsdWU7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7CgpVbml0VGVzdC5hZGRGaXh0dXJlKCAiVGVzdCBNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0lzc24iLCBmdW5jdGlvbiggKSB7CgogICAgdmFsdWUgPSAiMDEwOS0wMDk3IjsKCiAgICBvdXRwdXQgPSB0cnVlOwoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGxlZ2FsIHZhbHVlIGluIHN1YmZpZWxkIChJU1NOKSIsICdNYXJjUmVjb3JkVmFsaWRhdGlvbi5jaGVja0lzc24oIHZhbHVlICknLCBvdXRwdXQgKTsKCiAgICB2YWx1ZSA9ICIwMTA5MDA5NyI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKElTU04pIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNzbiggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIGRlbGV0ZSB0aGlzLnZhbHVlOwogICAgZGVsZXRlIHRoaXMub3V0cHV0OwoKfSApOwoKVW5pdFRlc3QuYWRkRml4dHVyZSggIlRlc3QgTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc3NuIiwgZnVuY3Rpb24oICkgewoKICAgIHZhbHVlID0gIjAxMDYtNDIyMzEiOwoKICAgIG91dHB1dCA9IGZhbHNlOwoKICAgIEFzc2VydC5lcXVhbCggIkNoZWNraW5nIGlsbGVnYWwgdmFsdWUgaW4gc3ViZmllbGQgKElTU04pIiwgJ01hcmNSZWNvcmRWYWxpZGF0aW9uLmNoZWNrSXNzbiggdmFsdWUgKScsIG91dHB1dCApOwoKICAgIHZhbHVlID0gIjAxMGItNDIyMyI7CgogICAgQXNzZXJ0LmVxdWFsKCAiQ2hlY2tpbmcgaWxsZWdhbCB2YWx1ZSBpbiBzdWJmaWVsZCAoSVNTTikiLCAnTWFyY1JlY29yZFZhbGlkYXRpb24uY2hlY2tJc3NuKCB2YWx1ZSApJywgb3V0cHV0ICk7CgogICAgZGVsZXRlIHRoaXMudmFsdWU7CiAgICBkZWxldGUgdGhpcy5vdXRwdXQ7Cgp9ICk7Cg==","moduleName":"MarcRecordValidation"},{"javascript":"","moduleName":"DanMarc2Preparation"},{"javascript":"","moduleName":"LegalRecordChecker"},{"javascript":"","moduleName":"DkabmValidation"},{"javascript":"","moduleName":"TingXmlValidation"},{"javascript":"LyoqIEBmaWxlIE1vZHVsZSB0aGF0IGxvZyByZXN1bHQgb2YgYSBjb252ZXJzaW9uLiAqLwoKRVhQT1JURURfU1lNQk9MUyA9IFsgJ1Jlc3VsdExvZ2dlcicgXTsKCnVzZSggIkxvZyIgKTsKCi8qKgogKiBNb2R1bGUgdGhhdCBsb2dzIHRoZSByZXN1bHQgb2YgYSBjb252ZXJzaW9uLgogKiBUaGUgY29udmVyc2lvbiBpcyBlaXRoZXIgYSBzdWNjZXNzLCB0aGUgY29udmVyc2lvbiB3YXMgc2tpcHBlZCwgb3IKICogY29udmVyc2lvbiB3YXMgbm90IHBlcmZvcm1lZCBiZWNhdXNlIG9mIGludmFsaWQgaW5wdXQuCiAqIAogKiBAdHlwZSB7bmFtZXNwYWNlfQogKiBAbmFtZXNwYWNlCiAqLwp2YXIgUmVzdWx0TG9nZ2VyID0gZnVuY3Rpb24oICkgewoKICAgIHZhciB0aGF0ID0ge307CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBsb2dzIGEgc3VjY2VzZnVsIHJlc3VsdCBvZiBhIGNvbnZlcnNpb24uCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IFJlc3VsdExvZ2dlci5sb2dDb252ZXJzaW9uKCBpZGVudGlmaWVyICkKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIFRoZSBpZGVudGlmaWVyIG9mIHRoZSByZWNvcmQKICAgICAqIEBleGFtcGxlIFJlc3VsdExvZ2dlci5sb2dDb252ZXJzaW9uKCAiMTIzNDU2Nzh8ODcwOTcwIiApCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBSZXN1bHRMb2dnZXIubG9nQ29udmVyc2lvbgogICAgICovCiAgICB0aGF0LmxvZ0NvbnZlcnNpb24gPSBmdW5jdGlvbiggaWRlbnRpZmllciApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBSZXN1bHRMb2dnZXIubG9nQ29udmVyc2lvbiIgKTsKCiAgICAgICAgTG9nLmluZm8oICJSRUNPUkQoUykgQkFTRUQgT04gIiArIGlkZW50aWZpZXIgKyAiIFdBUyBDT05WRVJURUQiICk7CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZyBSZXN1bHRMb2dnZXIubG9nQ29udmVyc2lvbiIgKTsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgbG9ncyB0aGUgcmVzdWx0IHdoZW4gYSByZWNvcmQgaXMgc2tpcHBlZC4KICAgICAqIAogICAgICogQHR5cGUge21ldGhvZH0KICAgICAqIEBzeW50YXggUmVzdWx0TG9nZ2VyLmxvZ1JlY29yZFNraXBwZWQoIHJlY29yZCApCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjb3JkIEEgbWFyYyByZWNvcmQKICAgICAqIEBleGFtcGxlIFJlc3VsdExvZ2dlci5sb2dSZWNvcmRTa2lwcGVkKCByZWNvcmQgKQogICAgICogQG1ldGhvZAogICAgICogQG5hbWUgUmVzdWx0TG9nZ2VyLmxvZ1JlY29yZFNraXBwZWQKICAgICAqLwogICAgdGhhdC5sb2dSZWNvcmRTa2lwcGVkID0gZnVuY3Rpb24oIHJlY29yZCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBSZXN1bHRMb2dnZXIubG9nUmVjb3JkU2tpcHBlZCIgKTsKCiAgICAgICAgTG9nLndhcm4oICJSZWNvcmQgc2tpcHBlZCBieSBMZWdhbFJlY29yZENoZWNrZXIuIFJFQ09SRDogXG4iICsgcmVjb3JkICk7CgogICAgICAgIExvZy5pbmZvKCAiTGVhdmluZyBSZXN1bHRMb2dnZXIubG9nUmVjb3JkU2tpcHBlZCIgKTsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgbG9ncyB0aGUgcmVzdWx0IHdoZW4gYSByZWNvcmQgaXMgbm90IHZhbGlkLgogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBSZXN1bHRMb2dnZXIubG9nTWFyY1ZhbGlkYXRpb25FcnJvciggcmVjb3JkcywgaWRlbnRpZmllciwgc3VibWl0dGVyLCBmb3JtYXQsIGVycm9yTWVzc2FnZXMsIGZpbGUgKQogICAgICogQHBhcmFtIHtBcnJheX0gcmVjb3JkcyBBbiBhcnJheSBvZiBtYXJjIHJlY29yZHMKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudGlmaWVyIFRoZSBpZGVudGlmaWVyIG9mIHRoZSByZWNvcmQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJtaXR0ZXIgVGhlIHN1Ym1pdHRlciBvZiB0aGUgcmVjb3JkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IFRoZSBmb3JtYXQgb2YgdGhlIHNvdXJjZQogICAgICogQHBhcmFtIHtBcnJheX0gZXJyb3JNZXNzYWdlcyBDb2xsZWN0ZWQgZXJyb3IgbWVzc2FnZXMgZnJvbSB2YWxpZGF0aW9uCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZSBiZWluZyBjb252ZXJ0ZWQKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIFJlc3VsdExvZ2dlci5sb2dNYXJjVmFsaWRhdGlvbkVycm9yCiAgICAgKi8KICAgIHRoYXQubG9nTWFyY1ZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uKCByZWNvcmRzLCBpZGVudGlmaWVyLCBzdWJtaXR0ZXIsIGZvcm1hdCwgZXJyb3JNZXNzYWdlcywgZmlsZSApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBSZXN1bHRMb2dnZXIubG9nTWFyY1ZhbGlkYXRpb25FcnJvciIgKTsKCiAgICAgICAgTG9nLmVycm9yKCAiXG5WQUxJREFUSU9OIEZBSUxFRDogU3VibWl0dGVyOiAiICsgc3VibWl0dGVyICsgIiwgRm9ybWF0OiAiICsgZm9ybWF0ICsgIiwgSW5wdXQgRmlsZTogIiArIGZpbGUgKyAiLiBJREVOVElGSUVSOiAiICsgaWRlbnRpZmllciApOwoKICAgICAgICBmb3IgKCB2YXIgYSBpbiByZWNvcmRzICkgewogICAgICAgICAgICBzd2l0Y2ggKCByZWNvcmRzWyBhIF0udHlwZSApIHsKICAgICAgICAgICAgICAgIGNhc2UgIm9yaWdpbmFsIjoKICAgICAgICAgICAgICAgICAgICB2YXIgbWFyY1JlY29yZCA9IG5ldyBSZWNvcmQoICk7CiAgICAgICAgICAgICAgICAgICAgbWFyY1JlY29yZC5mcm9tU3RyaW5nKCByZWNvcmRzWyBhIF0ucmVjb3JkICk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUwMUZpZWxkcyA9ICIiOwogICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZEluZGljYXRvcjsKICAgICAgICAgICAgICAgICAgICBtYXJjUmVjb3JkLmVhY2hGaWVsZCggLzAwMS8sIGZ1bmN0aW9uKCBmaWVsZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJbmRpY2F0b3IgPSBmaWVsZC5pbmRpY2F0b3I7CiAgICAgICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBiIGluIGVycm9yTWVzc2FnZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUwMUZpZWxkcyA9IGUwMUZpZWxkcyArICJlMDEgIiArIGZpZWxkSW5kaWNhdG9yICsgIiAqYSAiICsgZXJyb3JNZXNzYWdlc1sgYiBdICsgIlxuIjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIkZBSUxFRCBSRUNPUkQ6ICIgKyBpZGVudGlmaWVyICsgIiAoY29weSBmcm9tIGxvZy1maWxlKTogXG4iICsgbWFyY1JlY29yZCArIGUwMUZpZWxkcyApOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAidm9sdW1lIjoKICAgICAgICAgICAgICAgICAgICB2YXIgdm9sdW1lUmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgICAgICAgICAgICAgICAgICB2b2x1bWVSZWNvcmQuZnJvbVN0cmluZyggcmVjb3Jkc1sgYSBdLnJlY29yZCApOwogICAgICAgICAgICAgICAgICAgIExvZy5lcnJvciggIlZPTFVNRSBSRUNPUkQ6IChjb3B5IGZyb20gbG9nLWZpbGUpOiBcbiIgKyB2b2x1bWVSZWNvcmQgKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgImhlYWQiOgogICAgICAgICAgICAgICAgICAgIHZhciBoZWFkUmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgICAgICAgICAgICAgICAgICBoZWFkUmVjb3JkLmZyb21TdHJpbmcoIHJlY29yZHNbIGEgXS5yZWNvcmQgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJIRUFEIFJFQ09SRDogKGNvcHkgZnJvbSBsb2ctZmlsZSk6IFxuIiArIGhlYWRSZWNvcmQgKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgInNlY3Rpb24iOgogICAgICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uUmVjb3JkID0gbmV3IFJlY29yZCggKTsKICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUmVjb3JkLmZyb21TdHJpbmcoIHJlY29yZHNbIGEgXS5yZWNvcmQgKTsKICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoICJTRUNUSU9OIFJFQ09SRDogKGNvcHkgZnJvbSBsb2ctZmlsZSk6IFxuIiArIHNlY3Rpb25SZWNvcmQgKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nIFJlc3VsdExvZ2dlci5sb2dNYXJjVmFsaWRhdGlvbkVycm9yIiApOwoKICAgIH07CgogICAgLyoqCiAgICAgKiBNZXRob2QgdGhhdCBsb2dzIHRoZSByZXN1bHQgd2hlbiB0aGUgYWRtaW5pc3RyYXRpdmUgZGF0YSBpcyBub3QgdmFsaWQuCiAgICAgKiAKICAgICAqIEB0eXBlIHttZXRob2R9CiAgICAgKiBAc3ludGF4IFJlc3VsdExvZ2dlci5sb2dBZG1pblZhbGlkYXRpb25FcnJvciggaW5wdXQgKQogICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0IHRoZSBpbnB1dCBkYXRhCiAgICAgKiBAZXhhbXBsZSBSZXN1bHRMb2dnZXIubG9nQWRtaW5WYWxpZGF0aW9uRXJyb3IoIGlucHV0ICkKICAgICAqIEBtZXRob2QKICAgICAqIEBuYW1lIFJlc3VsdExvZ2dlci5sb2dBZG1pblZhbGlkYXRpb25FcnJvcgogICAgICovCgogICAgdGhhdC5sb2dBZG1pblZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uKCBpbnB1dCApIHsKCiAgICAgICAgTG9nLmluZm8oICJFbnRlcmluZyBSZXN1bHRMb2dnZXIubG9nQWRtaW5WYWxpZGF0aW9uRXJyb3IiICk7CgogICAgICAgIExvZy5lcnJvciggIkFkbWluIGRhdGEgaXMgbm90IHZhbGlkLiBJTlBVVDogXG4iICsgaW5wdXQgKTsKCiAgICAgICAgTG9nLmluZm8oICJMZWF2aW5nIFJlc3VsdExvZ2dlci5sb2dBZG1pblZhbGlkYXRpb25FcnJvciIgKTsKCiAgICB9OwoKICAgIC8qKgogICAgICogTWV0aG9kIHRoYXQgbG9ncyB0aGUgcmVzdWx0IHdoZW4gdGhlIERLQUJNIGRhdGEgaXMgbm90IHZhbGlkLgogICAgICogCiAgICAgKiBAdHlwZSB7bWV0aG9kfQogICAgICogQHN5bnRheCBSZXN1bHRMb2dnZXIubG9nRGthYm1WYWxpZGF0aW9uRXJyb3IoIGlucHV0ICkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dCB0aGUgaW5wdXQgZGF0YQogICAgICogQGV4YW1wbGUgUmVzdWx0TG9nZ2VyLmxvZ0RrYWJtVmFsaWRhdGlvbkVycm9yKCBpbnB1dCApCiAgICAgKiBAbWV0aG9kCiAgICAgKiBAbmFtZSBSZXN1bHRMb2dnZXIubG9nRGthYm1WYWxpZGF0aW9uRXJyb3IKICAgICAqLwoKICAgIHRoYXQubG9nRGthYm1WYWxpZGF0aW9uRXJyb3IgPSBmdW5jdGlvbiggaW5wdXQgKSB7CgogICAgICAgIExvZy5pbmZvKCAiRW50ZXJpbmcgUmVzdWx0TG9nZ2VyLmxvZ0FkbWluVmFsaWRhdGlvbkVycm9yIiApOwoKICAgICAgICBMb2cud2FybiggIkRLQUJNIHhtbCBpcyBub3QgdmFsaWQuIElOUFVUOiBcbiIgKyBpbnB1dCApOwoKICAgICAgICBMb2cuaW5mbyggIkxlYXZpbmcgUmVzdWx0TG9nZ2VyLmxvZ0FkbWluVmFsaWRhdGlvbkVycm9yIiApOwoKICAgIH07CgogICAgcmV0dXJuIHRoYXQ7Cgp9KCApOwo=","moduleName":"ResultLogger"},{"javascript":"","moduleName":"MarcRecordCreator"},{"javascript":"","moduleName":"DataIOBackendConverterE4X"}],"invocationMethod":"convertRawRecord"}}]}}