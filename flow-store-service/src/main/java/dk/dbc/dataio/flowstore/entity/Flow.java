package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;
import org.codehaus.jackson.JsonNode;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Index;
import javax.persistence.Lob;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * Persistence domain class for flow objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = Flow.TABLE_NAME,
indexes = @Index(columnList = Flow.NAME_INDEX_COLUMN))
@NamedQueries({
    @NamedQuery(name = Flow.QUERY_FIND_ALL, query = "SELECT flow FROM Flow flow ORDER BY flow.nameIndexValue ASC")
})
public class Flow extends dk.dbc.dataio.flowstore.entity.Entity {
    public static final String TABLE_NAME = "flows";
    public static final String QUERY_FIND_ALL = "Flow.findAll";
    static final String NAME_INDEX_COLUMN = "name_idx";

    @Lob
    @Column(name = NAME_INDEX_COLUMN, nullable = false)
    private String nameIndexValue;

    String getNameIndexValue() {
        return nameIndexValue;
    }

    @Override
    protected void preProcessContent(String flowData) throws JsonException {
        final JsonNode json = JsonUtil.getJsonRoot(flowData);
        nameIndexValue = JsonUtil.getNonEmptyTextValueOrThrow(json.path("name"), "flow.content.name");
    }
}
