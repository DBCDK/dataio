package dk.dbc.dataio.filestore.service.entity;

import dk.dbc.dataio.commons.utils.invariant.InvariantUtil;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;

/**
 * Persistence domain class for file attributes objects where id is auto
 * generated by the underlying store
 */
@Entity
@Table(name = FileAttributes.TABLE_NAME)
public class FileAttributes {
    public static final String TABLE_NAME = "file_attributes";

    FileAttributes() { }

    /**
     * Class constructor
     * @param creationTime file creation time
     * @param path file location in store
     * @throws NullPointerException if given null-valued creationTime or path argument
     * @throws IllegalArgumentException if given empty path
     */
    public FileAttributes(Date creationTime, Path path)
            throws NullPointerException, IllegalArgumentException {
        this.creationTime = new Date(InvariantUtil.checkNotNullOrThrow(creationTime, "creationTime").getTime());
        InvariantUtil.checkNotNullOrThrow(path, "path");
        location = InvariantUtil.checkNotNullNotEmptyOrThrow(path.toString(), "path");
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Temporal(TemporalType.TIMESTAMP)
    private Date creationTime;

    private String location;

    public Long getId() {
        return id;
    }

    public Date getCreationTime() {
        return new Date(creationTime.getTime());
    }

    public Path getLocation() {
        return Paths.get(location);
    }
}
