package dk.dbc.dataio.gui.client.pages.item.show;


import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.view.client.RangeChangeEvent;
import com.google.gwt.view.client.SelectionChangeEvent;
import com.google.gwt.view.client.SingleSelectionModel;
import dk.dbc.dataio.gui.client.model.ItemModel;
import dk.dbc.dataio.gui.util.ClientFactory;


class Context {
    SingleSelectionModel<ItemModel> selectionModel = new SingleSelectionModel<ItemModel>();
    HandlerRegistration handlerRegistration = null;
    ItemsListView listView;

    public Context(ItemsListView listView) {
        this.listView = listView;
    }
}

/**
 * This class is the View class for the Items Show View
 */
public class View extends ViewWidget {
    Context allContext = new Context(allItemsList);
    Context failedContext = new Context(failedItemsList);
    Context ignoredContext = new Context(ignoredItemsList);


    /**
     * Default constructor
     *
     * @param clientFactory, the client factory
     */
    public View(ClientFactory clientFactory) {
        super(clientFactory);
        setupColumns(allItemsList);
        setupColumns(failedItemsList);
        setupColumns(ignoredItemsList);
    }


    /**
     * Enables or disables one of the items table in the view
     * Thereby also enables or disables events from being generated by the selection
     * @param enable True: Selection is possible, false: Selection is not possible (and no events are triggered)
     * @param context The context (All, Failed or Ignored table)
     */
    public void enableSelection(boolean enable, Context context) {
        if (enable) {
            if (context.handlerRegistration == null) {
                context.handlerRegistration = context.selectionModel.addSelectionChangeHandler(new SelectionChangeHandlerClass(context));
            }
            context.listView.itemsTable.setSelectionModel(context.selectionModel);
        } else {
            if (context.handlerRegistration != null) {
                context.handlerRegistration.removeHandler();
                context.handlerRegistration = null;
            }
            context.listView.itemsTable.setSelectionModel(null);
        }
    }


    /**
     * Enables or disables all selections in all Items Tables
     * Thereby also enables or disables events from being generated by the selection
     * @param enable True: Selection is possible, false: Selection is not possible (and no events are triggered)
     */
    public void setSelectionEnabled(boolean enable) {
        enableSelection(enable, allContext);
        enableSelection(enable, failedContext);
        enableSelection(enable, ignoredContext);
    }


    /**
     * Private methods
     */

    /**
     * This method sets up all columns in the view
     * It is called before data has been applied to the view - data is being applied in the setItems method
     */
    @SuppressWarnings("unchecked")
    private void setupColumns(final ItemsListView listView) {
        listView.itemsTable.addColumn(constructItemColumn(), texts.column_Item());
        listView.itemsTable.addColumn(constructStatusColumn(), texts.column_Status());
        listView.itemsTable.addRangeChangeHandler(new RangeChangeEvent.Handler() {
            @Override
            public void onRangeChange(RangeChangeEvent event) {
                if (listView == allItemsList) {
                    presenter.allItemsTabSelected();
                } else if (listView == failedItemsList) {
                    presenter.failedItemsTabSelected();
                } else if (listView == ignoredItemsList) {
                    presenter.ignoredItemsTabSelected();
                }
            }
        });
        listView.itemsPager.setDisplay(listView.itemsTable);
    }

    /**
     * This method constructs the Item column
     * Should have been private, but is package-private to enable unit test
     *
     * @return the constructed Item column
     */
    Column constructItemColumn() {
        return new TextColumn<ItemModel>() {
            @Override
            public String getValue(ItemModel model) {
                return texts.text_Item() + " " + model.getItemNumber();
            }
        };
    }

    /**
     * This method constructs the Status column
     * Should have been private, but is package-private to enable unit test
     *
     * @return the constructed Status column
     */
    Column constructStatusColumn() {
        return new TextColumn<ItemModel>() {
            @Override
            public String getValue(ItemModel model) {
                return formatStatus(model.getStatus());
            }
        };
    }

    private String formatStatus(ItemModel.LifeCycle lifeCycle) {
        switch (lifeCycle) {
            case PARTITIONING:
                return texts.lifecycle_Partitioning();
            case PROCESSING:
                return texts.lifecycle_Processing();
            case DELIVERING:
                return texts.lifecycle_Delivering();
            case DONE:
                return texts.lifecycle_Done();
            default:
                return texts.lifecycle_Unknown();
        }
    }


    /*
     * Private classes
     */

    class SelectionChangeHandlerClass implements SelectionChangeEvent.Handler {
        private Context context;
        public SelectionChangeHandlerClass(Context context) {
            super();
            this.context = context;
        }
        public void onSelectionChange(SelectionChangeEvent event) {
            ItemModel selected = context.selectionModel.getSelectedObject();
            if (selected != null) {
                presenter.itemSelected(context.listView, selected);
            }
        }
    }

}
