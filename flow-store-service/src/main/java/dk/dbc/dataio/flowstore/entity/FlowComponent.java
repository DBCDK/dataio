package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.commons.types.FlowComponentContent;
import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Index;
import javax.persistence.Lob;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Persistence domain class for flow component objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = FlowComponent.TABLE_NAME,
    uniqueConstraints = {
        @UniqueConstraint(columnNames = { FlowComponent.NAME_INDEX_COLUMN })
    },
    indexes = @Index(columnList = FlowComponent.NAME_INDEX_COLUMN)
)
@NamedQueries({
    @NamedQuery(name = FlowComponent.QUERY_FIND_ALL, query = "SELECT component FROM FlowComponent component ORDER BY component.nameIndexValue ASC")
})
public class FlowComponent extends VersionedEntity {
    public static final String TABLE_NAME = "flow_components";
    public static final String QUERY_FIND_ALL = "FlowComponent.findAll";
    static final String NAME_INDEX_COLUMN = "name_idx";

    @Lob
    @Column(name = NAME_INDEX_COLUMN, nullable = false)
    private String nameIndexValue;

    String getNameIndexValue() {
        return nameIndexValue;
    }

    /**
     * {@inheritDoc}
     * @throws NullPointerException if given null-valued data argument
     * @throws IllegalArgumentException if given empty-valued data argument
     * @throws JsonException if non-json JSON string or if given JSON is invalid FlowComponentContent.
     */
    @Override
    protected void preProcessContent(String data) throws JsonException {
        final FlowComponentContent flowComponentContent = JsonUtil.fromJson(data, FlowComponentContent.class);
        nameIndexValue = flowComponentContent.getName();
    }
}
