--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.4
-- Dumped by pg_dump version 9.5.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = public, pg_catalog;

--
-- Data for Name: flow_components; Type: TABLE DATA; Schema: public; Owner: ja7
--

INSERT INTO flow_components VALUES (2152, '{"name": "smaTest9", "description": "Test af oprettelse med \"next\"", "javascripts": [], "svnRevision": 87446, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'smaTest9', 2, '{"name": "smaTest9", "description": "Test af oprettelse med \"next\"", "javascripts": [], "svnRevision": 87446, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (1001, '{"name": "flowK nr 1", "description": "første flowkomponent til flow mere flere flowkomponenter", "javascripts": [], "svnRevision": 82807, "requireCache": "", "invocationMethod": "flowComponentOne", "invocationJavascriptName": "trunk/flowcomponentOne.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'flowK nr 1', 5, '{"name": "flowK nr 1", "description": "første flowkomponent til flow mere flere flowkomponenter", "javascripts": [], "svnRevision": 82807, "requireCache": "", "invocationMethod": "flowComponentOne", "invocationJavascriptName": "trunk/flowcomponentOne.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (901, '{"name": "Steens Nye Flowkomponent", "javascripts": [], "svnRevision": 82608, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'Steens Nye Flowkomponent', 1, '{"name": "Steens Nye Flowkomponent", "javascripts": [], "svnRevision": 82608, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2851, '{"name": "sma test", "description": "testing", "javascripts": [], "svnRevision": 91492, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'sma test', 2, '{"name": "sma test", "description": "testing", "javascripts": [], "svnRevision": 91492, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (651, '{"name": "smaTest12", "description": "Dette er en ny fin beskrivelse", "javascripts": [], "svnRevision": 78955, "requireCache": "", "invocationMethod": "funA", "invocationJavascriptName": "trunk/integration-test/gui-selenium/src/test/test-projects/main/trunk/main.js", "svnProjectForInvocationJavascript": "dataio"}', 'smaTest12', 13, '{"name": "smaTest12", "description": "Dette er en ny fin beskrivelse", "javascripts": [], "svnRevision": 78955, "requireCache": "", "invocationMethod": "funA", "invocationJavascriptName": "trunk/integration-test/gui-selenium/src/test/test-projects/main/trunk/main.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (801, '{"name": "HiveFejl", "description": "til fremprovokering af fejl i hive", "javascripts": [], "svnRevision": 79125, "requireCache": "", "invocationMethod": "createHiveErrorFromFbsRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'HiveFejl', 2, '{"name": "HiveFejl", "description": "til fremprovokering af fejl i hive", "javascripts": [], "svnRevision": 79125, "requireCache": "", "invocationMethod": "createHiveErrorFromFbsRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (855, '{"name": "ØKP test", "description": "skal slettes", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'ØKP test', 4, '{"name": "ØKP test", "description": "skal slettes", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (753, '{"name": "RR2BrøndExttest - skal slettes", "description": "skal slettes", "javascripts": [], "svnRevision": 83662, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'RR2BrøndExttest - skal slettes', 6, '{"name": "RR2BrøndExttest - skal slettes", "description": "skal slettes", "javascripts": [], "svnRevision": 83662, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (854, '{"name": "FFU forbehandling", "description": "Forbehandling af poster fra FFU-bibliotekerne på vej til råpost repo", "javascripts": [], "svnRevision": 102019, "requireCache": "", "invocationMethod": "prepareResearchRecordForRawRepo", "invocationJavascriptName": "trunk/js/marcx_io_raw_repo.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'FFU forbehandling', 64, '{"name": "FFU forbehandling", "description": "Forbehandling af poster fra FFU-bibliotekerne på vej til råpost repo", "javascripts": [], "svnRevision": 102019, "requireCache": "", "invocationMethod": "prepareResearchRecordForRawRepo", "invocationJavascriptName": "trunk/js/marcx_io_raw_repo.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (701, '{"name": "rtrt", "description": "skal slettes", "javascripts": [], "svnRevision": 78828, "requireCache": "", "invocationMethod": "createDatawellXmlFromTS1001", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'rtrt', 6, '{"name": "rtrt", "description": "skal slettes", "javascripts": [], "svnRevision": 78828, "requireCache": "", "invocationMethod": "createDatawellXmlFromTS1001", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (52, '{"name": "tracer-bullet-component", "description": "Minimalt script til basal system test", "javascripts": [], "svnRevision": 1, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "tracer-bullet-javascript", "svnProjectForInvocationJavascript": "svnprojectforinvocationjavascript"}', 'tracer-bullet-component', 1, '{"name": "tracer-bullet-component", "description": "Minimalt script til basal system test", "javascripts": [], "svnRevision": 1, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "tracer-bullet-javascript", "svnProjectForInvocationJavascript": "svnprojectforinvocationjavascript"}');
INSERT INTO flow_components VALUES (2859, '{"name": "sma special test", "description": "test test", "javascripts": [], "svnRevision": 91492, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'sma special test', 2, '{"name": "sma special test", "description": "test test", "javascripts": [], "svnRevision": 91492, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2054, '{"name": "smaTest4", "description": "test noget mere", "javascripts": [], "svnRevision": 87332, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'smaTest4', 2, '{"name": "smaTest4", "description": "test noget mere", "javascripts": [], "svnRevision": 87332, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (652, '{"name": "smaTest2", "description": "Description.", "javascripts": [], "svnRevision": 78580, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'smaTest2', 2, '{"name": "smaTest2", "description": "Description.", "javascripts": [], "svnRevision": 78580, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2, '{"name": "RR2FBS", "description": "Poster der skal til FBS Webservice - næsten uændret - vi fjerner DBCs bogstavfelter", "javascripts": [], "svnRevision": 96972, "requireCache": "", "invocationMethod": "transportRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'RR2FBS', 20, '{"name": "RR2FBS", "description": "Poster der skal til FBS Webservice - næsten uændret - vi fjerner DBCs bogstavfelter", "javascripts": [], "svnRevision": 96972, "requireCache": "", "invocationMethod": "transportRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (4903, '{"name": "FBS_Edu_forbehandling", "description": "Flowkomponent som forbehandler en post til FBS Uddannelsessystemet", "javascripts": [], "svnRevision": 100233, "requireCache": "", "invocationMethod": "prepareFbsEducationRecordForRawRepo", "invocationJavascriptName": "trunk/js/marcx_io_raw_repo.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'FBS_Edu_forbehandling', 4, '{"name": "FBS_Edu_forbehandling", "description": "Flowkomponent som forbehandler en post til FBS Uddannelsessystemet", "javascripts": [], "svnRevision": 100233, "requireCache": "", "invocationMethod": "prepareFbsEducationRecordForRawRepo", "invocationJavascriptName": "trunk/js/marcx_io_raw_repo.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (7, '{"name": "RR2Brønd", "description": "Almindeligt brøndkonverteringsflow fra Råpost Repo til displaybrønden", "javascripts": [], "svnRevision": 101424, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'RR2Brønd', 50, '{"name": "RR2Brønd", "description": "Almindeligt brøndkonverteringsflow fra Råpost Repo til displaybrønden", "javascripts": [], "svnRevision": 101424, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (851, '{"name": "ÅKP test", "description": "skal slettes.", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'ÅKP test', 3, '{"name": "ÅKP test", "description": "skal slettes.", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (853, '{"name": "ZKP test", "description": "skal slettes", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'ZKP test', 4, '{"name": "ZKP test", "description": "skal slettes", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (852, '{"name": "AKP test", "description": "skal slettes", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'AKP test', 7, '{"name": "AKP test", "description": "skal slettes", "javascripts": [], "svnRevision": 81689, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2255, '{"name": "smaTest1", "description": "Test af markering af nyoprettet flow komponent i oversigten.", "javascripts": [], "svnRevision": 87519, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'smaTest1', 2, '{"name": "smaTest1", "description": "Test af markering af nyoprettet flow komponent i oversigten.", "javascripts": [], "svnRevision": 87519, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (1901, '{"name": "E4X-brønd", "description": "Brøndkonvertering stadig med E4X", "javascripts": [], "svnRevision": 83776, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'E4X-brønd', 12, '{"name": "E4X-brønd", "description": "Brøndkonvertering stadig med E4X", "javascripts": [], "svnRevision": 83776, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (1907, '{"name": "demo1", "description": "test komponent", "javascripts": [], "svnRevision": 87060, "requireCache": "", "invocationMethod": "jeg_kan_lige_saa_godt_sige_det_som_det_er", "invocationJavascriptName": "trunk/demo_script.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'demo1', 17, '{"name": "demo1", "description": "test komponent", "javascripts": [], "svnRevision": 87060, "requireCache": "", "invocationMethod": "jeg_kan_lige_saa_godt_sige_det_som_det_er", "invocationJavascriptName": "trunk/demo_script.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (1951, '{"name": "kbp demo", "description": "demo skal settes", "javascripts": [], "svnRevision": 87060, "requireCache": "", "invocationMethod": "jeg_kan_lige_saa_godt_sige_det_som_det_er", "invocationJavascriptName": "trunk/demo_script.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'kbp demo', 1, '{"name": "kbp demo", "description": "demo skal settes", "javascripts": [], "svnRevision": 87060, "requireCache": "", "invocationMethod": "jeg_kan_lige_saa_godt_sige_det_som_det_er", "invocationJavascriptName": "trunk/demo_script.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (653, '{"name": "smaTest3", "description": "Bør slettes....", "javascripts": [], "svnRevision": 78665, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'smaTest3', 12, '{"name": "smaTest3", "description": "Bør slettes....", "javascripts": [], "svnRevision": 78665, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2051, '{"name": "sma", "description": "test more because javaScriptProjectFetcher is sloooow", "javascripts": [], "svnRevision": 87332, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'sma', 6, '{"name": "sma", "description": "test more because javaScriptProjectFetcher is sloooow", "javascripts": [], "svnRevision": 87332, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (2052, '{"name": "smaTest", "description": "Skal slettes", "javascripts": [], "svnRevision": 87332, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'smaTest', 2, '{"name": "smaTest", "description": "Skal slettes", "javascripts": [], "svnRevision": 87332, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (1201, '{"name": "require-tracebullet", "description": "tracebullet der bruge require", "javascripts": [], "svnRevision": 83597, "requireCache": "", "invocationMethod": "tracerbullet_xmldom", "invocationJavascriptName": "trunk/tracerBulletXmlDom.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'require-tracebullet', 7, '{"name": "require-tracebullet", "description": "tracebullet der bruge require", "javascripts": [], "svnRevision": 83597, "requireCache": "", "invocationMethod": "tracerbullet_xmldom", "invocationJavascriptName": "trunk/tracerBulletXmlDom.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (2061, '{"name": "smaTest5", "description": "testing", "javascripts": [], "svnRevision": 87339, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'smaTest5', 1, '{"name": "smaTest5", "description": "testing", "javascripts": [], "svnRevision": 87339, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (102, '{"name": "Bibzoom Album", "description": "Konvertering af bibzoom album poster til brønd", "javascripts": [], "svnRevision": 77345, "requireCache": "", "invocationMethod": "createDatawellXmlFromBibzoomAlbums", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'Bibzoom Album', 4, '{"name": "Bibzoom Album", "description": "Konvertering af bibzoom album poster til brønd", "javascripts": [], "svnRevision": 77345, "requireCache": "", "invocationMethod": "createDatawellXmlFromBibzoomAlbums", "invocationJavascriptName": "trunk/js/xml_datawell_3.0.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (1002, '{"name": "flowK nr 2", "description": "anden flowkomponent til flow mere flere flowkomponenter", "javascripts": [], "svnRevision": 82808, "requireCache": "", "invocationMethod": "flowComponentTwo", "invocationJavascriptName": "trunk/flowcomponentTwo.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'flowK nr 2', 6, '{"name": "flowK nr 2", "description": "anden flowkomponent til flow mere flere flowkomponenter", "javascripts": [], "svnRevision": 82808, "requireCache": "", "invocationMethod": "flowComponentTwo", "invocationJavascriptName": "trunk/flowcomponentTwo.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (2062, '{"name": "smaTest6", "description": "Jeg ønsker mig en slet knap...", "javascripts": [], "svnRevision": 87339, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'smaTest6', 1, '{"name": "smaTest6", "description": "Jeg ønsker mig en slet knap...", "javascripts": [], "svnRevision": 87339, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (4053, '{"name": "nashorn test", "description": "nashorn performance test", "javascripts": [], "svnRevision": 97750, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'nashorn test', 2, '{"name": "nashorn test", "description": "nashorn performance test", "javascripts": [], "svnRevision": 97750, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (3402, '{"name": "SLET MIG", "description": "SLET DENNE!", "javascripts": [], "svnRevision": 94625, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'SLET MIG', 4, '{"name": "SLET MIG", "description": "SLET DENNE!", "javascripts": [], "svnRevision": 94625, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (4056, '{"name": "nashorn single script test", "description": "nashorn uden brug af dbc modul system", "javascripts": [], "svnRevision": 97757, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_single_script_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}', 'nashorn single script test', 2, '{"name": "nashorn single script test", "description": "nashorn uden brug af dbc modul system", "javascripts": [], "svnRevision": 97757, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_single_script_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}');
INSERT INTO flow_components VALUES (1451, '{"name": "specialTegnstest_2-3 4", "description": "skal slettes", "javascripts": [], "svnRevision": 84603, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'specialTegnstest_2-3 4', 3, '{"name": "specialTegnstest_2-3 4", "description": "skal slettes", "javascripts": [], "svnRevision": 84603, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (1601, '{"name": "RR2basis", "description": "almindeligt flow fra Råpost Repo til basis - posten kører uændret igennem men der sættes flag for at posten skal konverteres til iso2709 i sinken", "javascripts": [], "svnRevision": 96972, "requireCache": "", "invocationMethod": "convertRawRecordToBasis", "invocationJavascriptName": "trunk/js/marc_basis.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'RR2basis', 6, '{"name": "RR2basis", "description": "almindeligt flow fra Råpost Repo til basis - posten kører uændret igennem men der sættes flag for at posten skal konverteres til iso2709 i sinken", "javascripts": [], "svnRevision": 96972, "requireCache": "", "invocationMethod": "convertRawRecordToBasis", "invocationJavascriptName": "trunk/js/marc_basis.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2063, '{"name": "smaTest7", "description": "Skal slettes", "javascripts": [], "svnRevision": 87278, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'smaTest7', 10, '{"name": "smaTest7", "description": "Skal slettes", "javascripts": [], "svnRevision": 87278, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2351, '{"name": "diff-test", "description": "Simpelt sandkasse projekt benyttet i forbindelse med afprøvning af diff funktionalitet.", "javascripts": [], "svnRevision": 87987, "requireCache": "", "invocationMethod": "convert", "invocationJavascriptName": "trunk/js/converter.js", "svnProjectForInvocationJavascript": "dataio-diff-test"}', 'diff-test', 7, '{"name": "diff-test", "description": "Simpelt sandkasse projekt benyttet i forbindelse med afprøvning af diff funktionalitet.", "javascripts": [], "svnRevision": 87987, "requireCache": "", "invocationMethod": "convert", "invocationJavascriptName": "trunk/js/converter.js", "svnProjectForInvocationJavascript": "dataio-diff-test"}');
INSERT INTO flow_components VALUES (1751, '{"name": "TestCreateWithDescription", "description": "Testing description field.", "javascripts": [], "svnRevision": 86242, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}', 'TestCreateWithDescription', 1, '{"name": "TestCreateWithDescription", "description": "Testing description field.", "javascripts": [], "svnRevision": 86242, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "trunk/performance-test/src/test/resources/jda.js", "svnProjectForInvocationJavascript": "dataio"}');
INSERT INTO flow_components VALUES (1902, '{"name": "XMLDOM-brønd", "description": "Brøndkonvertering nu med XMLDOM og ikke længere E4X. ", "javascripts": [], "svnRevision": 87727, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'XMLDOM-brønd', 13, '{"name": "XMLDOM-brønd", "description": "Brøndkonvertering nu med XMLDOM og ikke længere E4X. ", "javascripts": [], "svnRevision": 87727, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}');
INSERT INTO flow_components VALUES (2064, '{"name": "smaTest8", "description": "Test af update med \"Next\"", "javascripts": [], "svnRevision": 87278, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}', 'smaTest8', 26, '{"name": "smaTest8", "description": "Test af update med \"Next\"", "javascripts": [], "svnRevision": 87278, "requireCache": "", "invocationMethod": "begin", "invocationJavascriptName": "trunk/js/cql_xml_to_html.js", "svnProjectForInvocationJavascript": "datawell-convert"}');


--
-- Data for Name: flows; Type: TABLE DATA; Schema: public; Owner: ja7
--

INSERT INTO flows VALUES (2352, '{"name": "diff-test", "components": [{"id": 2351, "next": {"name": "diff-test", "description": "Simpelt sandkasse projekt benyttet i forbindelse med afprøvning af diff funktionalitet.", "javascripts": [], "svnRevision": 88145, "requireCache": "", "invocationMethod": "convert", "invocationJavascriptName": "trunk/js/converter.js", "svnProjectForInvocationJavascript": "dataio-diff-test"}, "content": {"name": "diff-test", "description": "Simpelt sandkasse projekt benyttet i forbindelse med afprøvning af diff funktionalitet.", "javascripts": [], "svnRevision": 87987, "requireCache": "", "invocationMethod": "convert", "invocationJavascriptName": "trunk/js/converter.js", "svnProjectForInvocationJavascript": "dataio-diff-test"}, "version": 7}], "description": "Simpelt test flow benyttet i forbindelse med afprøvning af diff funktionalitet."}', 5);
INSERT INTO flows VALUES (9, '{"name": "RR2Brønd", "components": [{"id": 7, "next": {"name": "RR2Brønd", "description": "Almindeligt brøndkonverteringsflow fra Råpost Repo til displaybrønden", "javascripts": [], "svnRevision": 101436, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}, "content": {"name": "RR2Brønd", "description": "Almindeligt brøndkonverteringsflow fra Råpost Repo til displaybrønden", "javascripts": [], "svnRevision": 101424, "requireCache": "", "invocationMethod": "convertRawRecord", "invocationJavascriptName": "trunk/js/marc_fbs.js", "svnProjectForInvocationJavascript": "datawell-convert"}, "version": 50}], "description": "Jacascriptbehandling af poster fra RR til Brønd 3.5"}', 30);
INSERT INTO flows VALUES (4054, '{"name": "nashorn test", "components": [{"id": 4053, "next": {"name": "nashorn test", "description": "nashorn performance test", "javascripts": [], "svnRevision": 97750, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "content": {"name": "nashorn test", "description": "nashorn performance test", "javascripts": [], "svnRevision": 97750, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "version": 2}], "description": "nashorn performance test"}', 1);
INSERT INTO flows VALUES (1602, '{"name": "RR2basis", "components": [{"id": 1601, "next": {"name": "RR2basis", "description": "almindeligt flow fra Råpost Repo til basis - posten kører uændret igennem men der sættes flag for at posten skal konverteres til iso2709 i sinken", "javascripts": [], "svnRevision": 96972, "requireCache": "", "invocationMethod": "convertRawRecordToBasis", "invocationJavascriptName": "trunk/js/marc_basis.js", "svnProjectForInvocationJavascript": "datawell-convert"}, "content": {"name": "RR2basis", "description": "almindeligt flow fra Råpost Repo til basis - posten kører uændret igennem men der sættes flag for at posten skal konverteres til iso2709 i sinken", "javascripts": [], "svnRevision": 96972, "requireCache": "", "invocationMethod": "convertRawRecordToBasis", "invocationJavascriptName": "trunk/js/marc_basis.js", "svnProjectForInvocationJavascript": "datawell-convert"}, "version": 6}], "description": "flow der kun pakker en post fra RR i addi-format, så den kan overleveres til en ES-basis-sink og videre derfra til Basis"}', 3);
INSERT INTO flows VALUES (4057, '{"name": "nashorn single script test", "components": [{"id": 4056, "next": {"name": "nashorn single script test", "description": "nashorn uden brug af dbc modul system", "javascripts": [], "svnRevision": 97757, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_single_script_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "content": {"name": "nashorn single script test", "description": "nashorn uden brug af dbc modul system", "javascripts": [], "svnRevision": 97757, "requireCache": "", "invocationMethod": "main", "invocationJavascriptName": "trunk/nashorn_single_script_test.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "version": 2}], "description": "nashorn uden brug af dbc modul system"}', 1);
INSERT INTO flows VALUES (3151, '{"name": "FFU2RR", "components": [{"id": 854, "next": {"name": "FFU forbehandling", "description": "Forbehandling af poster fra FFU-bibliotekerne på vej til råpost repo", "javascripts": [], "svnRevision": 102019, "requireCache": "", "invocationMethod": "prepareResearchRecordForRawRepo", "invocationJavascriptName": "trunk/js/marcx_io_raw_repo.js", "svnProjectForInvocationJavascript": "datawell-convert"}, "content": {"name": "FFU forbehandling", "description": "Forbehandling af poster fra FFU-bibliotekerne på vej til råpost repo", "javascripts": [], "svnRevision": 102019, "requireCache": "", "invocationMethod": "prepareResearchRecordForRawRepo", "invocationJavascriptName": "trunk/js/marcx_io_raw_repo.js", "svnProjectForInvocationJavascript": "datawell-convert"}, "version": 64}], "description": "Forbehandling af FFU-poster på vej til Råpost Repo"}', 23);
INSERT INTO flows VALUES (53, '{"name": "tracer-bullet-flow", "components": [{"id": 52, "next": null, "content": {"name": "tracer-bullet-component", "description": "Minimalt script til basal system test", "javascripts": [], "svnRevision": 1, "requireCache": "", "invocationMethod": "invocationFunction", "invocationJavascriptName": "tracer-bullet-javascript", "svnProjectForInvocationJavascript": "svnprojectforinvocationjavascript"}, "version": 1}], "description": "description"}', 2);
INSERT INTO flows VALUES (1003, '{"name": "Flere flowkomponenter", "components": [{"id": 1001, "next": {"name": "flowK nr 1", "description": "første flowkomponent til flow mere flere flowkomponenter", "javascripts": [], "svnRevision": 87684, "requireCache": "", "invocationMethod": "flowComponentOne", "invocationJavascriptName": "trunk/flowcomponentOne.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "content": {"name": "flowK nr 1", "description": "første flowkomponent til flow mere flere flowkomponenter", "javascripts": [], "svnRevision": 82807, "requireCache": "", "invocationMethod": "flowComponentOne", "invocationJavascriptName": "trunk/flowcomponentOne.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "version": 5}, {"id": 1002, "next": null, "content": {"name": "flowK nr 2", "description": "anden flowkomponent til flow mere flere flowkomponenter", "javascripts": [{"javascript": "dXNlKCAiTG9nIiApOyAKCmZ1bmN0aW9uIGZsb3dDb21wb25lbnRUd28oIHJlY29yZCwgc3VibWl0dGVyX2Zvcm1hdCApIHsKICAgIExvZy5pbmZvKCAiRW50ZXJpbmc6IGZsb3dDb21wb25lbnRUd28gZnVuY3Rpb24iICk7CgogICAgTG9nLmluZm8gKCAiVGhlIHJlY29yZCBpcz0gIiwgcmVjb3JkICk7CgogICAgaWYgKCB1bmRlZmluZWQgIT09IHN1Ym1pdHRlcl9mb3JtYXQgKSB7CiAgICAgICAgTG9nLmluZm8oICJUaGUgc3VibWl0dGVyIGFuZCBmb3JtYXQgYXJlIGFsc28gcGFzc2VkIGZyb20gb25lIGNvbXBvbmVudCB0byB0aGUgb3RoZXIgIiApOwogICAgICAgIExvZy5pbmZvKCAiU3VibWl0dGVyID0gIiwgc3VibWl0dGVyX2Zvcm1hdC5zdWJtaXR0ZXIgKTsKICAgICAgICBMb2cuaW5mbyggIkZvcm1hdCA9ICIsIHN1Ym1pdHRlcl9mb3JtYXQuZm9ybWF0ICk7IAogICAgfSBlbHNlIHsKICAgICAgICBMb2cuaW5mbyggIlN1Ym1pdHRlcl9mb3JtYXQgaXMgdW5kZWZpbmVkIiApOwogICAgfQogICAgTG9nLmluZm8oICJMZWF2aW5nOiBmbG93Q29tcG9uZW50VHdvIGZ1bmN0aW9uIiApOwoKIHJldHVybiAiV2UgZ290IHRocnUgdHdvIGZsb3cgY29tcG9uZW50cyAtIHlheSI7Cn0KCg==", "moduleName": ""}, {"javascript": "", "moduleName": "ModulesInfo"}, {"javascript": "", "moduleName": "Use"}, {"javascript": "", "moduleName": "Log"}, {"javascript": "Ly8gTG9nQ29yZSBtb2R1bGUgLSBpbXBsZW1lbnRzIGEgX19Mb2dDb3JlX2xvZyggbGV2ZWwsIGFyZ3MgKSBmdW5jdGlvbgoKLyogSmF2YSBNYXZlbiBkZXBzIG5lZWRlZDoKCiAgICAgICAgICAgICAgICA8IS0tIExPR0dJTkcgLS0+CiAgICAgICAgICAgICAgICA8IS0tIEluIG9yZGVyIHRvIHN1cHBvcnQgZGlmZmVyZW50IGxvZyBmcmFtZXdvcmtzLCB3ZSB1c2UgYSBmYWNhZGUgcGF0dGVybiAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGxvZ2dpbmcgVGhlIGFjdHVhbCBmYWNhZGUgcGF0dGVybiBpcyBzbGY0aiwgd2hpY2ggaXMgd2hhdCBkYmMtY29tbW9ucyAKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ29pbmcgdG8gdXNlIHRvby4gRm9yIGFjdHVhbCBsb2dnaW5nIGluIHRoZSBkZXBsb3ltZW50LCB3ZSB1c2UgbG9nNGouIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotYXBpPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjYuMTwvdmVyc2lvbj4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDxkZXBlbmRlbmN5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBJZD5vcmcuc2xmNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPnNsZjRqLWV4dDwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+IAoqLwoKLyogWW91IG1heSBhbHNvIHdhbnQgdG8gYWN0dWFsbHkgYmluZCB0byBlLmcuIGxvZzRqOgoKICAgICAgICAgICAgICAgIDwhLS0gVGhpcyBvbmUgYmluZHMgdG8gbG9nNGogaW4gdGhlIGRlcGxveW1lbnQuIC0tPgogICAgICAgICAgICAgICAgPGRlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5zbGY0ajwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+c2xmNGotbG9nNGoxMjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHZlcnNpb24+MS42LjE8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5ydW50aW1lPC9zY29wZT4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDwhLS0gSW4gbG9nIHdlIHRydXN0IDogaHR0cDovL2xvZ2dpbmcuYXBhY2hlLm9yZy9sb2c0ai8gLS0+CiAgICAgICAgICAgICAgICA8ZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdyb3VwSWQ+bG9nNGo8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvZzRqPC9hcnRpZmFjdElkPgogICAgICAgICAgICAgICAgICAgICAgICA8dmVyc2lvbj4xLjIuMTY8L3ZlcnNpb24+CiAgICAgICAgICAgICAgICA8L2RlcGVuZGVuY3k+CiAgICAgICAgICAgICAgICA8IS0tIEVORCBMT0dHSU5HIC0tPgoqLwoKCi8vIFdlIGV4cG9ydCB0aGlzIHN5bWJvbCwgd2hpY2ggd2UgZXhwZWN0IHRvIGJlIHVzZWQgZnJvbSBhIExvZyBtb2R1bGUuCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdfX0xvZ0NvcmVfbG9nJywgJ19fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCcgXTsKCi8vIEFjdHVhbCBsb2cgZnVuY3Rpb24KdmFyIF9fTG9nQ29yZV9sb2cgPSBmdW5jdGlvbiggbGV2ZWwsIG1zZyApIHsKICAgIG1zZyA9ICJKUzogIiArIG1zZzsKICAgIC8vIFJoaW5vIHNwZWNpZmljIGJpbmRpbmdzIHV0aWxpemVkLgogICAgc3dpdGNoKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLnRyYWNlKCBtc2cgKTsgYnJlYWs7CiAgICBjYXNlICJkZWJ1ZyIgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5kZWJ1ZyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiaW5mbyIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuaW5mbyggbXNnICk7IGJyZWFrOwogICAgY2FzZSAid2FybiIgIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIud2FybiggbXNnICk7IGJyZWFrOwogICAgY2FzZSAiZXJyb3IiIDogX19Mb2dDb3JlX2xvZy5sb2dnZXIuZXJyb3IoIG1zZyApOyBicmVhazsKICAgIGNhc2UgImZhdGFsIiA6IF9fTG9nQ29yZV9sb2cubG9nZ2VyLmVycm9yKCAiRkFUQUw6ICIgKyBtc2cgKTsgYnJlYWs7CiAgICBkZWZhdWx0ICAgICAgOiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5lcnJvciggIlVOS05PV04gTE9HTEVWRUw6ICIgKyBsZXZlbCArICIgOiAiICsgbXNnICk7IGJyZWFrOwogICAgfQp9OwoKLy8gQ2hlY2sgbGV2ZWwgZXhwb3J0Cl9fTG9nQ29yZV9pc0xldmVsRW5hYmxlZCA9IGZ1bmN0aW9uICggbGV2ZWwgKSB7CiAgICBzd2l0Y2ggKCBsZXZlbCApIHsKICAgIGNhc2UgInRyYWNlIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc1RyYWNlRW5hYmxlZCgpOwogICAgY2FzZSAiZGVidWciIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzRGVidWdFbmFibGVkKCk7CiAgICBjYXNlICJpbmZvIiAgOiByZXR1cm4gX19Mb2dDb3JlX2xvZy5sb2dnZXIuaXNJbmZvRW5hYmxlZCgpOwogICAgY2FzZSAid2FybiIgIDogcmV0dXJuIF9fTG9nQ29yZV9sb2cubG9nZ2VyLmlzV2FybkVuYWJsZWQoKTsKICAgIGNhc2UgImVycm9yIiA6IHJldHVybiBfX0xvZ0NvcmVfbG9nLmxvZ2dlci5pc0Vycm9yRW5hYmxlZCgpOwogICAgZGVmYXVsdDogcmV0dXJuIHRydWU7CiAgICB9Owp9CgoKLy8gQXR0YWNoIHRoZSBsb2dnZXIgdmFyaWFibGUgdG8gdGhlIGdsb2JhbCBsb2dnZXIgb25seSBvbmNlLCBub3QgZm9yIGVhY2gKLy8gZnVuY3Rpb24gY2FsbC4KLy8gU29ydCBvZiB0aGUgc3RhdGljIHdheSB0byBkbyBpdC4KCi8vIFRoZSBuZXh0IGxpbmUgY2FuIGJpbmQgKmRpcmVjdGx5KiB0byBsb2c0ai4gSXQgaXMgb25seSBpbmNsdWRlZCBmb3IKLy8gcmVmZXJlbmNlLCBhcwovLyB0aGUgZmFjYWRlIGJlbG93IGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gZG8gaXQuCi8vIF9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLmFwYWNoZS5sb2c0ai5Mb2dnZXIuZ2V0TG9nZ2VyKAovLyAiSmF2YVNjcmlwdC5Mb2dnZXIiICk7CgovLyBCaW5kaW5nIHRvIHRoZSBzbGY0aiBmYWNhZGUuCl9fTG9nQ29yZV9sb2cubG9nZ2VyID0gUGFja2FnZXMub3JnLnNsZjRqLkxvZ2dlckZhY3RvcnkKICAgIC5nZXRMb2dnZXIoICJKYXZhU2NyaXB0LkxvZ2dlciIgKTsK", "moduleName": "LogCore"}, {"javascript": "", "moduleName": "Underscore"}, {"javascript": "", "moduleName": "UnitTest"}, {"javascript": "", "moduleName": "Util"}, {"javascript": "LyoqIEBmaWxlIFByb3ZpZGUgYSBHbG9iYWwgc3ltYm9sICovCkVYUE9SVEVEX1NZTUJPTFMgPSBbICdHbG9iYWwnIF07CgovLyBJbXBvcnRhbnQgbm90ZTogVGhpcyBtb2R1bGUgY2FuIG5vdCB1c2UgdGhlIExvZyBtb2R1bGUsIGFzIHRoZSBMb2cKLy8gbW9kdWxlIHVzZXMgdGhpcyBtb2R1bGUuIEFuZCwgaG9uZXN0ZWx5LCB3aGF0IHdvdWxkIHlvdSBsb2c/Ci8vIFJpZ2h0LiBKdXN0IGRvbid0IGRvIGl0LiBOb3csIG1vdmUgYWxvbmcsIG5vdGhpbmcgdG8gc2VlIGhlcmUuCgovKioKICogUHJvdmlkZSBjb25zaXN0ZW50IGFjY2VzcyB0byB0aGUgR2xvYmFsIHZhcmlhYmxlLgogKgogKiBXaGVuIHVzZWQsIHRoaXMgbW9kdWxlIHdpbGwgaW50cm9kdWNlIGEgZ2xvYmFsIHZhcmlhYmxlIGNhbGxlZAogKiBgR2xvYmFsYCwgdGhhdCBpcyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsIG9iamVjdC4KICogCiAqIFRoaXMgbW9kdWxlIGRvZXMgbm90IHByb3ZpZGUgYW55IG1ldGhvZHMgb3IgbWVtYmVyLCBiZXNpZGVzIHRoZQogKiBHbG9iYWwgdmFyaWFibGUuCiAqCiAqIEB0eXBlIHtvYmplY3R9CiAqIEBleGFtcGxlCi8vIFRoaXMgbG9hZHMgdGhlIEdsb2JhbCBtb2R1bGUsIGFuZCBjcmVhdGVzIGEgdmFyaWFibGUgY2FsbGVkIEdsb2JhbAp1c2UoICJHbG9iYWwiICk7CiogQG5hbWVzcGFjZQogKiBAbmFtZSBHbG9iYWwgKi8KdmFyIEdsb2JhbCA9IGZ1bmN0aW9uKCApIHsKICAgIC8qKiBHZXQgYWNjZXNzIHRvIHRoZSBHbG9iYWwgdmFyaWFibGUuCiAgICAgKiAKICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgdG9wbGV2ZWwgR2xvYmFsCiAgICAgKiB2YXJpYWJsZS4gSW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLCB0aGlzIGlzIGVxdWFsIHRvIHRoZQogICAgICogdGhpcyB2YXJpYWJsZSBhdCB0b3BsZXZlbCBzY29wZSwgYnV0IHJlcXVpcmVzIGEgYml0IG1vcmUgdG8gZ2V0CiAgICAgKiB0bywgaWYgbm90IGEgdG9wbGV2ZWwgc2NvcGUuCiAgICAgKiAKICAgICAqIEB0eXBle2Z1bmN0aW9ufQogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm4ge29iamVjdH0gQSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi8KICAgIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiggKSB7CiAgICAgICAgcmV0dXJuICggZnVuY3Rpb24oICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0gKSggKTsKICAgIH07CiAgICAvLyByZXR1cm4gcmVzdWx0IG9mIGNhbGwgdG8gZ2V0R2xvYmFsLCBpLmUuIHJlZiB0byBnbG9iYWwKICAgIHJldHVybiBnZXRHbG9iYWwoICk7Cn0oICk7Cg==", "moduleName": "Global"}], "svnRevision": 82808, "requireCache": null, "invocationMethod": "flowComponentTwo", "invocationJavascriptName": "trunk/flowcomponentTwo.js", "svnProjectForInvocationJavascript": "dataio-js-test-projects"}, "version": 6}], "description": "Vi tester om vi kan lave et flow med flere flowkomponenter"}', 22);


--
-- PostgreSQL database dump complete
--

