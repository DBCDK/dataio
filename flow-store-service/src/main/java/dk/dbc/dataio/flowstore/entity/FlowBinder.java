package dk.dbc.dataio.flowstore.entity;

import dk.dbc.dataio.commons.types.FlowBinderContent;
import dk.dbc.dataio.commons.types.json.mixins.MixIns;
import dk.dbc.dataio.commons.utils.invariant.InvariantUtil;
import dk.dbc.dataio.commons.utils.json.JsonException;
import dk.dbc.dataio.commons.utils.json.JsonUtil;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Persistence domain class for flow binder objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string.
 *
 * Note that this entity contains foreign key relations to its attached submitters.
 */
@Entity
@Table(name = FlowBinder.TABLE_NAME,
uniqueConstraints = {
    @UniqueConstraint(columnNames = { FlowBinder.NAME_INDEX_COLUMN }),
})
public class FlowBinder extends VersionedEntity {
    public static final String TABLE_NAME = "flow_binders";
    public static final String SUBMITTER_JOIN_TABLE_NAME = "flow_binders_submitters";
    public static final String SUBMITTER_IDS_FIELD = "submitterIds";

    static final String NAME_INDEX_COLUMN = "name_idx";
    static final String BINDER_JOIN_COLUMN = "flow_binder_id";
    static final String SUBMITTER_JOIN_COLUMN = "submitter_id";

    @Lob
    @Column(name = NAME_INDEX_COLUMN, nullable = false)
    private String nameIndexValue;

    @OneToMany(fetch = FetchType.LAZY)
    @JoinTable(name = SUBMITTER_JOIN_TABLE_NAME,
            joinColumns = @JoinColumn(name = BINDER_JOIN_COLUMN),
            inverseJoinColumns = @JoinColumn(name = SUBMITTER_JOIN_COLUMN))
    private Set<Submitter> submitters;

    // ToDo: enable foreign key mapping when Flow entity is updated to extend VersionedEntity.
    //@OneToOne(fetch = FetchType.LAZY)
    //private Flow flow;
    private Long flow;

    @Transient
    private Set<Long> submitterIds;

    public Set<Long> getSubmitterIds() {
        return new HashSet<>(submitterIds);
    }

    public void setSubmitters(Set<Submitter> submitters) {
        this.submitters = new HashSet<>(submitters);
    }

    String getNameIndexValue() {
        return nameIndexValue;
    }

    /**
     * {@inheritDoc}
     * @throws NullPointerException if given null-valued data argument
     * @throws IllegalArgumentException if given empty-valued data argument
     * @throws JsonException if non-json JSON string or if given JSON is invalid FlowBinderContent.
     */
    @Override
    protected void preProcessContent(String data) throws JsonException {
        final FlowBinderContent flowBinderContent = JsonUtil.fromJson(data, FlowBinderContent.class, MixIns.getMixIns());
        nameIndexValue = flowBinderContent.getName();
        submitterIds = new HashSet<>(flowBinderContent.getSubmitterIds());
        flow = flowBinderContent.getFlowId();
    }

    /**
     * Generates search index entries for given flow binder
     *
     * @param flowBinder flow binder instance
     *
     * @return list of search index entries
     *
     * @throws NullPointerException if given null-valued flow binder
     * @throws JsonException if flow binder contains invalid JSON content
     */
    public static List<FlowBinderSearchIndexEntry> generateSearchIndexEntries(final FlowBinder flowBinder) throws JsonException {
        InvariantUtil.checkNotNullOrThrow(flowBinder, "flowBinder");
        final FlowBinderContent flowBinderContent = JsonUtil.fromJson(flowBinder.getContent(), FlowBinderContent.class, MixIns.getMixIns());
        final String packaging = flowBinderContent.getPackaging();
        final String format = flowBinderContent.getFormat();
        final String charset = flowBinderContent.getCharset();
        final String destination = flowBinderContent.getDestination();
        final List<FlowBinderSearchIndexEntry> index = new ArrayList<>(flowBinder.getSubmitterIds().size());
        for (final Long submitterId : flowBinder.getSubmitterIds()) {
            final FlowBinderSearchIndexEntry entry = new FlowBinderSearchIndexEntry();
            entry.setPackaging(packaging);
            entry.setFormat(format);
            entry.setCharset(charset);
            entry.setDestination(destination);
            entry.setSubmitter(submitterId);
            entry.setFlowBinder(flowBinder);
            index.add(entry);
        }
        return index;
    }
}
