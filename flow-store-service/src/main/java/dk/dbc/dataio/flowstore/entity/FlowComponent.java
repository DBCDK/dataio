package dk.dbc.dataio.flowstore.entity;

import com.fasterxml.jackson.annotation.JsonRawValue;
import dk.dbc.commons.jsonb.JSONBContext;
import dk.dbc.commons.jsonb.JSONBException;
import dk.dbc.dataio.commons.types.FlowComponentContent;
import dk.dbc.dataio.commons.types.FlowComponentView;
import dk.dbc.dataio.commons.types.JavaScript;
import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.Lob;
import jakarta.persistence.NamedNativeQueries;
import jakarta.persistence.NamedNativeQuery;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;

import java.util.ArrayList;
import java.util.List;

/**
 * Persistence domain class for flow component objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name = FlowComponent.TABLE_NAME)
@NamedNativeQueries({
        @NamedNativeQuery(name = FlowComponent.QUERY_FIND_ALL,
                query = "SELECT view FROM flow_components ORDER BY lower(view->>'name') ASC"
        )
})
public class FlowComponent extends Versioned {
    public static final String TABLE_NAME = "flow_components";
    public static final String QUERY_FIND_ALL = "FlowComponent.findAll";

    private static final JSONBContext JSONB_CONTEXT = new JSONBContext();

    @Lob
    @Column(nullable = true, columnDefinition = "json")
    @Convert(converter = JsonConverter.class)
    private String next;

    @JsonRawValue
    public String getNext() {
        return next;
    }

    @Lob
    @Column(nullable = false, columnDefinition = "json")
    @Convert(converter = JsonConverter.class)
    private String view;

    public String getView() {
        return view;
    }

    @PrePersist
    @PreUpdate
    public void preChange() {
        // We have to do this @Pre as opposed to @Post to ensure
        // the view value reaches the database, but this means
        // that the version field has not yet been given its new
        // value when the view string is generated.
        final Long version = getVersion();
        view = generateView(version == null ? 1 : version + 1);
    }

    public void setNext(String next) {
        if (next != null) {
            this.next = next.isEmpty() ? null : next;
        }
    }

    FlowComponent withId(long id) {
        setId(id);
        return this;
    }

    FlowComponent withVersion(long version) {
        setVersion(version);
        return this;
    }

    public FlowComponent withContent(String content) throws JSONBException {
        this.setContent(content);
        return this;
    }

    public FlowComponent withNext(String next) {
        this.next = next;
        return this;
    }

    public String generateView() {
        // Used during database migration
        return generateView(getVersion());
    }

    public String generateView(Long version) {
        try {
            final FlowComponentContent content =
                    JSONB_CONTEXT.unmarshall(getContent(), FlowComponentContent.class);
            FlowComponentContent nextContent = null;
            final String next = getNext();
            if (next != null && !next.isEmpty()) {
                nextContent = JSONB_CONTEXT.unmarshall(next, FlowComponentContent.class);
            }
            final FlowComponentView view = new FlowComponentView()
                    .withId(getId())
                    .withVersion(version)
                    .withName(content.getName())
                    .withDescription(content.getDescription())
                    .withProject(content.getSvnProjectForInvocationJavascript())
                    .withRevision(String.valueOf(content.getSvnRevision()))
                    .withScriptName(content.getInvocationJavascriptName())
                    .withMethod(content.getInvocationMethod())
                    .withModules(getModuleNames(content.getJavascripts()));
            if (nextContent != null) {
                view.withNextRevision(String.valueOf(nextContent.getSvnRevision()))
                        .withNextModules(getModuleNames(nextContent.getJavascripts()));
            }
            return JSONB_CONTEXT.marshall(view);
        } catch (JSONBException e) {
            throw new IllegalStateException(e);
        }
    }

    private List<String> getModuleNames(List<JavaScript> scripts) {
        final List<String> moduleNames = new ArrayList<>(scripts.size());
        scripts.forEach(javaScript -> {
            final String moduleName = javaScript.getModuleName();
            if (!moduleName.isEmpty()) {
                moduleNames.add(moduleName);
            }
        });
        return moduleNames;
    }
}
