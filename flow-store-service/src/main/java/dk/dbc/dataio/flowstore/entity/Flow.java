package dk.dbc.dataio.flowstore.entity;

import org.codehaus.jackson.annotate.JsonRawValue;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * Persistence domain class for flow objects where id is auto
 * generated by the underlying store and the data content is
 * given as JSON string
 */
@Entity
@Table(name="flows")
public class Flow {
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;

    @Column(columnDefinition="TEXT NOT NULL")
    private String data;

    @Column(name="flowname_idx", columnDefinition="TEXT NOT NULL UNIQUE")
    private String flownameIndexValue;

    public Long getId() {
        return id;
    }

    @JsonRawValue
    public String getData() {
        return data;
    }

    /**
     * Sets data content as JSON string while extracting special
     * index values
     *
     * @param data flow data as JSON string
     *
     * @throws InvalidJsonException when given invalid (null-valued, empty-valued or non-json)
     *                              JSON string, or if JSON object does not contain 'flowname'
     *                              member with non-empty value
     */
    public void setData(String data) throws InvalidJsonException {
        extractIndexValuesFromData(data);
        this.data = data;
    }

    String getFlownameIndexValue() {
        return flownameIndexValue;
    }

    private void extractIndexValuesFromData(String flowData) throws InvalidJsonException {
        if(flowData == null) {
            throw new InvalidJsonException("flowData can not be null");
        }
        JSONObject obj = (JSONObject) JSONValue.parse(flowData);
        if(obj == null) {
            throw new InvalidJsonException(flowData);
        }
        flownameIndexValue = extractJsonMemberAsString(obj, "flowname");
    }

    private String extractJsonMemberAsString(JSONObject obj, String memberName) throws InvalidJsonException {
        Object valueObject = obj.get(memberName);
        if(valueObject == null) {
            throw new InvalidJsonException(String.format("%s member not found", memberName));
        }
        String value = valueObject.toString();
        if(value.isEmpty()) {
            throw new InvalidJsonException(String.format("%s member must be non-empty", memberName));
        }
        return value;
    }
}
